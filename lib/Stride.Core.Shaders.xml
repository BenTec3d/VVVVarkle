<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stride.Core.Shaders</name>
    </assembly>
    <members>
        <member name="T:Stride.Core.Shaders.Analysis.AnalysisBase">
            <summary>
            Base class for analysis.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.AnalysisBase.#ctor(Stride.Core.Shaders.Parser.ParsingResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Analysis.AnalysisBase"/> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Analysis.AnalysisBase.ParsingResult">
            <summary>
            Gets the parsing result.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.AnalysisBase.Run">
            <summary>
            Runs this instance.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.AnalysisBase.Error(Stride.Core.Shaders.Utility.MessageCode,Stride.Core.Shaders.Ast.SourceSpan)">
            <summary>
            Logs an Error with the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="span">The span.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.AnalysisBase.Error(Stride.Core.Shaders.Utility.MessageCode,Stride.Core.Shaders.Ast.SourceSpan,System.Object[])">
            <summary>
            Logs an Error with the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="span">The span.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.AnalysisBase.Info(System.String,Stride.Core.Shaders.Ast.SourceSpan)">
            <summary>
            Logs an Info with the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="span">The span.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.AnalysisBase.Info(System.String,Stride.Core.Shaders.Ast.SourceSpan,System.Object[])">
            <summary>
            Logs an Info with the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="span">The span.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.AnalysisBase.Warning(Stride.Core.Shaders.Utility.MessageCode,Stride.Core.Shaders.Ast.SourceSpan)">
            <summary>
            Logs an Warning with the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="span">The span.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.AnalysisBase.Warning(Stride.Core.Shaders.Utility.MessageCode,Stride.Core.Shaders.Ast.SourceSpan,System.Object[])">
            <summary>
            Logs an Warning with the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="span">The span.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.AnalysisBase.GetBinaryImplicitConversionType(Stride.Core.Shaders.Ast.SourceSpan,Stride.Core.Shaders.Ast.TypeBase,Stride.Core.Shaders.Ast.TypeBase,System.Boolean)">
            <summary>
            Gets the type of the binary implicit conversion.
            </summary>
            <param name="span">The span.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="isBinaryOperator">if set to <c>true</c> [is binary operator].</param>
            <returns>
            The implicit conversion between between to two types
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.AnalysisBase.GetMultiplyImplicitConversionType(Stride.Core.Shaders.Ast.SourceSpan,Stride.Core.Shaders.Ast.TypeBase,Stride.Core.Shaders.Ast.TypeBase)">
            <summary>
            Gets the type of the binary implicit conversion.
            </summary>
            <param name="span">The span.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The implicit conversion between between to two types</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.AnalysisBase.GetDivideImplicitConversionType(Stride.Core.Shaders.Ast.SourceSpan,Stride.Core.Shaders.Ast.TypeBase,Stride.Core.Shaders.Ast.TypeBase)">
            <summary>
            Gets the type of the binary implicit conversion.
            </summary>
            <param name="span">The span.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The implicit conversion between between to two types</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.AnalysisBase.GetBinaryImplicitScalarConversionType(Stride.Core.Shaders.Ast.SourceSpan,Stride.Core.Shaders.Ast.TypeBase,Stride.Core.Shaders.Ast.TypeBase)">
            <summary>
            Gets the type of the binary implicit scalar conversion.
            </summary>
            <param name="span">The span.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The implicit conversion between the two scalar types
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.CastAnalysis.Run">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.CastHelper.NeedConvertForBinary(Stride.Core.Shaders.Ast.TypeBase,Stride.Core.Shaders.Ast.TypeBase)">
            <summary>
            Check if convert is necessary
            </summary>
            <param name="leftType">Type of the left.</param>
            <param name="rightType">Type of the right.</param>
            <returns>True if a cast is necessary between this two types</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.CastHelper.GetBinaryImplicitConversionType(Stride.Core.Shaders.Ast.TypeBase,Stride.Core.Shaders.Ast.TypeBase,System.Boolean)">
            <summary>
            Gets the type of the binary implicit conversion.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="isBooleanOperator">if set to <c>true</c> [is boolean operator].</param>
            <returns>
            The implicit conversion between between to two types
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.CastHelper.GetMultiplyImplicitConversionType(Stride.Core.Shaders.Ast.TypeBase,Stride.Core.Shaders.Ast.TypeBase)">
            <summary>
            Gets the type of the binary implicit conversion in case of a multiplication.
            </summary>
            <param name="left">the left.</param>
            <param name="right">the right.</param>
            <returns>The implicit conversion between between to two types</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.CastHelper.GetDivideImplicitConversionType(Stride.Core.Shaders.Ast.TypeBase,Stride.Core.Shaders.Ast.TypeBase)">
            <summary>
            Gets the type of the binary implicit conversion in case of a division
            </summary>
            <param name="left">the left.</param>
            <param name="right">the right.</param>
            <returns>The implicit conversion between between to two types</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.CastHelper.GetBinaryImplicitScalarConversionType(Stride.Core.Shaders.Ast.TypeBase,Stride.Core.Shaders.Ast.TypeBase)">
            <summary>
            Gets the type of the binary implicit scalar conversion.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The implicit conversion between the two scalar types
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Analysis.Hlsl.HlslSemanticAnalysis">
            <summary>
            A Type reference analysis is building type references.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.Hlsl.HlslSemanticAnalysis.#ctor(Stride.Core.Shaders.Parser.ParsingResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Analysis.Hlsl.HlslSemanticAnalysis"/> class.
            </summary>
            <param name="result">
            The result.
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.Hlsl.HlslSemanticAnalysis.MatrixSwizzleDecode(Stride.Core.Shaders.Ast.MemberReferenceExpression,Stride.Core.Shaders.Parser.ParsingResult)">
            <summary>
            Decodes the swizzle.
            </summary>
            <param name="memberReference">The member reference.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.Hlsl.HlslSemanticAnalysis.Visit(Stride.Core.Shaders.Ast.GenericType)">
            <summary>
            Visits the specified type name.
            </summary>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.Hlsl.HlslSemanticAnalysis.Visit(Stride.Core.Shaders.Ast.TypeName)">
            <summary>
            Visits the specified type name.
            </summary>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.Hlsl.HlslSemanticAnalysis.CommonVisit(Stride.Core.Shaders.Ast.MemberReferenceExpression)">
            <summary>
            Visits the specified member reference.
            </summary>
            <param name="memberReference">The member reference.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.Hlsl.HlslSemanticAnalysis.FindMemberTypeReference(Stride.Core.Shaders.Ast.MatrixType,Stride.Core.Shaders.Ast.MemberReferenceExpression)">
            <summary>
            Finds the member type reference.
            </summary>
            <param name="matrixType">Type of the matrix.</param>
            <param name="memberReference">The member reference.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.Hlsl.HlslSemanticAnalysis.SetupHlslAnalyzer(System.Collections.Generic.List{Stride.Core.Shaders.Ast.IDeclaration})">
            <summary>
            Create the required declarations for hlsl parsing
            </summary>
            <param name="builtinDeclarations">the list of declarations</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.Hlsl.HlslSemanticAnalysis.FillCloneContext(Stride.Core.Shaders.Ast.CloneContext)">
            <summary>
            Fill the clone context with the elements of the default declarations
            </summary>
            <param name="cloneContext">the CloneContext</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.Hlsl.HlslSemanticAnalysis.UpdateCloneContext(Stride.Core.Shaders.Ast.CloneContext)">
            <summary>
            Update the clone context with the new instanciated classes
            </summary>
            <param name="cloneContext">the CloneContext</param>
        </member>
        <member name="T:Stride.Core.Shaders.Analysis.SemanticAnalysis">
            <summary>
            A Type reference analysis is building type references.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.SemanticAnalysis.#ctor(Stride.Core.Shaders.Parser.ParsingResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Analysis.SemanticAnalysis"/> class.
            </summary>
            <param name="result">
            The result.
            </param>
        </member>
        <member name="P:Stride.Core.Shaders.Analysis.SemanticAnalysis.IsSkippingMode">
            <summary>
            Gets or sets a value indicating whether the analysis is in skipping mode.
            </summary>
            <value>
            <c>true</c> if the analysis is in skipping mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.SemanticAnalysis.Run">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.SemanticAnalysis.Visit(Stride.Core.Shaders.Ast.AssignmentExpression)">
            <summary>
            Visits the specified assignement expression.
            </summary>
            <param name="assignmentExpression">The assignement expression.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.SemanticAnalysis.Visit(Stride.Core.Shaders.Ast.BinaryExpression)">
            <summary>
            Visits the specified binary expression.
            </summary>
            <param name="binaryExpression">The binary expression.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.SemanticAnalysis.Visit(Stride.Core.Shaders.Ast.ConditionalExpression)">
            <summary>
            Visits the specified conditional expression.
            </summary>
            <param name="conditionalExpression">The conditional expression.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.SemanticAnalysis.Visit(Stride.Core.Shaders.Ast.IndexerExpression)">
            <summary>
            Visits the specified indexer expression.
            </summary>
            <param name="indexerExpression">The indexer expression.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.SemanticAnalysis.ProcessIndexerExpression(Stride.Core.Shaders.Ast.IndexerExpression)">
            <summary>
            Find the type of the expression
            </summary>
            <param name="indexerExpression">the indexer expression</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.SemanticAnalysis.Visit(Stride.Core.Shaders.Ast.LiteralExpression)">
            <summary>
            Visits the specified literal expression.
            </summary>
            <param name="literalExpression">The literal expression.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.SemanticAnalysis.ProcessMethodInvocation(Stride.Core.Shaders.Ast.MethodInvocationExpression,System.String,System.Collections.Generic.List{Stride.Core.Shaders.Ast.IDeclaration})">
            <summary>
            Pres the process method invocation.
            </summary>
            <param name="expression">The expression.</param>
            <param name="methodName">Name of the method.</param>
            <param name="declarations">The declarations.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.SemanticAnalysis.TestMethodInvocationArgument(Stride.Core.Shaders.Ast.TypeBase,Stride.Core.Shaders.Ast.TypeBase,Stride.Core.Shaders.Ast.TypeBase,Stride.Core.Shaders.Ast.TypeBase,System.Int32@)">
            <summary>
            Tests the arguments of the method
            </summary>
            <param name="argTypeBase">the argument typebase</param>
            <param name="expectedTypeBase">the expected typebase</param>
            <param name="argType">the argument type</param>
            <param name="expectedType">the expected type</param>
            <param name="score">the score of the overload</param>
            <returns>true if the overload is correct, false otherwise</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.SemanticAnalysis.Visit(Stride.Core.Shaders.Ast.MethodInvocationExpression)">
            <summary>
            Visits the specified method invocation expression.
            </summary>
            <param name="expression">The method invocation expression.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.SemanticAnalysis.Visit(Stride.Core.Shaders.Ast.MemberReferenceExpression)">
            <summary>
            Visits the specified member reference.
            </summary>
            <param name="memberReference">The member reference.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.SemanticAnalysis.Visit(Stride.Core.Shaders.Ast.MethodDefinition)">
            <summary>
            Visits the specified member reference.
            </summary>
            <param name="memberReference">The member reference.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.SemanticAnalysis.CommonVisit(Stride.Core.Shaders.Ast.MemberReferenceExpression)">
            <summary>
            Visits the specified member reference.
            </summary>
            <param name="memberReference">The member reference.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.SemanticAnalysis.Visit(Stride.Core.Shaders.Ast.ParenthesizedExpression)">
            <summary>
            Visits the specified parenthesized expression.
            </summary>
            <param name="parenthesizedExpression">The parenthesized expression.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.SemanticAnalysis.Visit(Stride.Core.Shaders.Ast.ExpressionList)">
            <summary>
            Visits the specified expression list.
            </summary>
            <param name="expressionList">The expression list.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.SemanticAnalysis.Visit(Stride.Core.Shaders.Ast.ArrayType)">
            <summary>
            Visits the specified array type.
            </summary>
            <param name="arrayType">Array type.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.SemanticAnalysis.Visit(Stride.Core.Shaders.Ast.TypeName)">
            <summary>
            Visits the specified type name.
            </summary>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.SemanticAnalysis.Visit(Stride.Core.Shaders.Ast.VariableReferenceExpression)">
            <summary>
            Visits the specified variable reference expression.
            </summary>
            <param name="variableReferenceExpression">The variable reference expression.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.SemanticAnalysis.Visit(Stride.Core.Shaders.Ast.UnaryExpression)">
            <summary>
            Visits the specified unary expression.
            </summary>
            <param name="unaryExpression">The unary expression.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.SemanticAnalysis.FindMemberTypeReference(Stride.Core.Shaders.Ast.StructType,Stride.Core.Shaders.Ast.MemberReferenceExpression)">
            <summary>
            Finds the member type reference.
            </summary>
            <param name="structType">Type of the struct.</param>
            <param name="memberReference">The member reference.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.SemanticAnalysis.FindMemberTypeReference(Stride.Core.Shaders.Ast.VectorType,Stride.Core.Shaders.Ast.MemberReferenceExpression)">
            <summary>
            Finds the member type reference.
            </summary>
            <param name="vectorType">Type of the vector.</param>
            <param name="memberReference">The member reference.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.SemanticAnalysis.FindMemberTypeReference(Stride.Core.Shaders.Ast.ScalarType,Stride.Core.Shaders.Ast.MemberReferenceExpression)">
            <summary>
            Finds the member type reference.
            </summary>
            <param name="scalarType">Type of the scalar.</param>
            <param name="memberReference">The member reference.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Analysis.SemanticAnalysis.ResolveTypeFromDeclaration(Stride.Core.Shaders.Ast.IDeclaration)">
            <summary>
            Resolves the type from declaration.
            </summary>
            <param name="declaration">The declaration.</param>
            <returns>
            A type
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.ArrayInitializerExpression">
            <summary>
            Expression used to initliaze an array {...expressions,}
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ArrayInitializerExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.ArrayInitializerExpression"/> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.ArrayInitializerExpression.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ArrayInitializerExpression.Childrens">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ArrayInitializerExpression.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.ArrayType">
            <summary>
            Array type.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ArrayType.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.ArrayType" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ArrayType.#ctor(Stride.Core.Shaders.Ast.TypeBase,Stride.Core.Shaders.Ast.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.ArrayType"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="dimensions">The dimensions.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.ArrayType.Dimensions">
            <summary>
              Gets or sets the dimensions.
            </summary>
            <value>
              The dimensions.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ArrayType.ToString">
            <inheritdoc />
        </member>
        <member name="P:Stride.Core.Shaders.Ast.ArrayType.Type">
            <summary>
              Gets or sets the type.
            </summary>
            <value>
              The type.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.ArrayType.IsDimensionEmpty">
            <summary>
            Gets a value indicating whether this instance is dimension empty.
            </summary>
            <value>
            <c>true</c> if this instance is dimension empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ArrayType.Childrens">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.AssignmentExpression">
            <summary>
            An assigment expression
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.AssignmentExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.AssignmentExpression"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.AssignmentExpression.#ctor(Stride.Core.Shaders.Ast.AssignmentOperator,Stride.Core.Shaders.Ast.Expression,Stride.Core.Shaders.Ast.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.AssignmentExpression"/> class.
            </summary>
            <param name="operator">The @operator.</param>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.AssignmentExpression.Operator">
            <summary>
              Gets or sets the operator.
            </summary>
            <value>
              The operator.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.AssignmentExpression.Target">
            <summary>
              Gets or sets the target receving the assigment.
            </summary>
            <value>
              The target.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.AssignmentExpression.Value">
            <summary>
              Gets or sets the value of the assigment..
            </summary>
            <value>
              The value.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.AssignmentExpression.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.AssignmentExpression.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.AssignmentOperator">
            <summary>
            Assignment operator used in assignment expression (a = b) or statements (a = b;)
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.AssignmentOperator.Default">
            <summary>
              Operator =
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.AssignmentOperator.Addition">
            <summary>
              Operator +=
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.AssignmentOperator.Subtraction">
            <summary>
              Operator -=
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.AssignmentOperator.Multiplication">
            <summary>
              Operator *=
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.AssignmentOperator.Division">
            <summary>
              Operator /=
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.AssignmentOperator.Modulo">
            <summary>
              Operator %=
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.AssignmentOperator.BitwiseAnd">
            <summary>
              Operator &amp;=
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.AssignmentOperator.BitwiseOr">
            <summary>
              Operator |=
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.AssignmentOperator.BitwiseXor">
            <summary>
              Operator ^=
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.AssignmentOperator.BitwiseShiftLeft">
            <summary>
              Operator &lt;&lt;=
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.AssignmentOperator.BitwiseShiftRight">
            <summary>
              Operator >>=
            </summary>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.AssignmentOperatorHelper">
            <summary>
            Helper for <see cref="T:Stride.Core.Shaders.Ast.AssignmentOperator"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.AssignmentOperatorHelper.ConvertToString(Stride.Core.Shaders.Ast.AssignmentOperator)">
            <summary>
            Converts from operator to string
            </summary>
            <param name="assignmentOperator">
            The assignment operator.
            </param>
            <returns>
            A string representation of an assignment operator
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.AssignmentOperatorHelper.FromString(System.String)">
            <summary>
            Converts from string an operator.
            </summary>
            <param name="operatorStr">
            The operator text.
            </param>
            <exception cref="T:System.ArgumentException">
            If operatorStr is invalid
            </exception>
            <returns>
            An assignment operator
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.AttributeBase">
            <summary>
            An abstract class for attribute definition.
            </summary>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.PostAttributeBase">
            <summary>
            An abstract class for a post attribute definition.
            </summary>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.BinaryExpression">
            <summary>
            Describes a binary expression.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.BinaryExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.BinaryExpression"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.BinaryExpression.#ctor(Stride.Core.Shaders.Ast.BinaryOperator,Stride.Core.Shaders.Ast.Expression,Stride.Core.Shaders.Ast.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.BinaryExpression"/> class.
            </summary>
            <param name="operator">The @operator.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.BinaryExpression.Left">
            <summary>
              Gets or sets the left expression.
            </summary>
            <value>
              The left expression.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.BinaryExpression.Operator">
            <summary>
              Gets or sets the binary operator.
            </summary>
            <value>
              The binary operator.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.BinaryExpression.Right">
            <summary>
              Gets or sets the right expression.
            </summary>
            <value>
              The right expression.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.BinaryExpression.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.BinaryExpression.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.BinaryOperator">
            <summary>
            Binary operator used in all binary expressions (except assignment expression).
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.BinaryOperator.None">
            <summary>
              No operator defined.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.BinaryOperator.LogicalAnd">
            <summary>
              Logical And operator "&amp;&amp;"
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.BinaryOperator.LogicalOr">
            <summary>
              Logical Or operator "||"
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.BinaryOperator.BitwiseAnd">
            <summary>
              Bitwise And operator "&amp;"
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.BinaryOperator.BitwiseOr">
            <summary>
              Bitwise Or operator "|"
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.BinaryOperator.BitwiseXor">
            <summary>
              Bitwise Xor operator "^"
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.BinaryOperator.LeftShift">
            <summary>
              Left shift operator "&lt;&lt;"
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.BinaryOperator.RightShift">
            <summary>
              Right shift operator "&gt;&gt;"
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.BinaryOperator.Minus">
            <summary>
              Minus operator "-"
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.BinaryOperator.Plus">
            <summary>
              Plus operator "+"
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.BinaryOperator.Multiply">
            <summary>
              Multiply operator "*"
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.BinaryOperator.Divide">
            <summary>
              Divide operator "/"
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.BinaryOperator.Modulo">
            <summary>
              Modulo operator "%"
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.BinaryOperator.Less">
            <summary>
              Less than operator "&lt;"
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.BinaryOperator.LessEqual">
            <summary>
              Less or equal operator "&lt;="
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.BinaryOperator.Greater">
            <summary>
              Greater operator "&gt;"
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.BinaryOperator.GreaterEqual">
            <summary>
              Greater or equal operator "&gt;="
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.BinaryOperator.Equality">
            <summary>
              Equality operator "=="
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.BinaryOperator.Inequality">
            <summary>
              Inequality operator "!="
            </summary>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.BinaryOperatorHelper">
            <summary>
            Helper for <see cref="T:Stride.Core.Shaders.Ast.BinaryOperator"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.BinaryOperatorHelper.ConvertToString(Stride.Core.Shaders.Ast.BinaryOperator)">
            <summary>
            Converts from operator to string
            </summary>
            <param name="binaryOperator">
            The binary operator.
            </param>
            <returns>
            A string representation of an binary operator
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.BinaryOperatorHelper.FromString(System.String)">
            <summary>
            Converts from string an operator.
            </summary>
            <param name="operatorStr">
            The operator text.
            </param>
            <exception cref="T:System.ArgumentException">
            If operatorStr is invalid
            </exception>
            <returns>
            An binary operator
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.BlockStatement">
            <summary>
            A Block of statement.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.BlockStatement.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.BlockStatement" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.BlockStatement.#ctor(Stride.Core.Shaders.Ast.StatementList)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.BlockStatement"/> class.
            </summary>
            <param name="statements">The statements.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.BlockStatement.Statements">
            <summary>
              Gets or sets the statements.
            </summary>
            <value>
              The statements.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.BlockStatement.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.BlockStatement.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.CaseStatement">
            <summary>
            A single case or default statement.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.CaseStatement.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.CaseStatement" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.CaseStatement.#ctor(Stride.Core.Shaders.Ast.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.CaseStatement"/> class.
            </summary>
            <param name="case">
            The @case.
            </param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.CaseStatement.Case">
            <summary>
              Gets or sets the case.
            </summary>
            <value>
              The case.
            </value>
            <remarks>
              If this property is null, this is a default statement.
            </remarks>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.CaseStatement.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.CaseStatement.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.CompositeEnum">
            <summary>
            A composite enum.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.CompositeEnum.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.CompositeEnum" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.CompositeEnum.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.CompositeEnum"/> class.
            </summary>
            <param name="isFlag">
            if set to <c>true</c> [is flag].
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.CompositeEnum.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.CompositeEnum"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="isFlag">if set to <c>true</c> [is flag].</param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.CompositeEnum.IsComposition">
            <summary>
              Gets a value indicating whether this instance is a composition enum (a combination of enums).
            </summary>
            <value>
              <c>true</c> if this instance is a composition enum (a combination of enums); otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.CompositeEnum.IsFlag">
            <summary>
              Gets a value indicating whether this instance is an enum flag.
            </summary>
            <value>
              <c>true</c> if this instance is an enum flag; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.CompositeEnum.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.CompositeEnum.Values">
            <summary>
              Gets or sets the values.
            </summary>
            <value>
              The values.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.CompositeEnum.DisplayName">
            <summary>
            Gets the display name.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.CompositeEnum.Contains(Stride.Core.Shaders.Ast.CompositeEnum)">
            <summary>
            Determines whether [contains] [the specified enum value].
            </summary>
            <param name="enumValue">
            The enum value.
            </param>
            <returns>
            <c>true</c> if [contains] [the specified enum value]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.CompositeEnum.Contains(Stride.Core.Shaders.Ast.CompositeEnum[])">
            <summary>
            Determines whether [contains] [the specified enum values].
            </summary>
            <param name="enumValues">
            The enum values.
            </param>
            <returns>
            <c>true</c> if [contains] [the specified enum values]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.CompositeEnum.ContainsAll(Stride.Core.Shaders.Ast.CompositeEnum[])">
            <summary>
            Determines whether the specified enum values contains all.
            </summary>
            <param name="enumValues">
            The enum values.
            </param>
            <returns>
            <c>true</c> if the specified enum values contains all; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.CompositeEnum.Equals(Stride.Core.Shaders.Ast.CompositeEnum)">
            <summary>
            Determines whether the specified <see cref="T:Stride.Core.Shaders.Ast.CompositeEnum"/> is equal to this instance.
            </summary>
            <param name="other">
            The <see cref="T:Stride.Core.Shaders.Ast.CompositeEnum"/> to compare with this instance.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:Stride.Core.Shaders.Ast.CompositeEnum"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.CompositeEnum.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.CompositeEnum.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.CompositeEnum.ToString">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.CompositeEnum.ToString``1(System.Func{``0,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.CompositeEnum.OperatorAnd``1(``0,``0)">
            <summary>
            Operators And.
            </summary>
            <typeparam name="T1">
            The type of the 1.
            </typeparam>
            <param name="left">
            The left.
            </param>
            <param name="right">
            The right.
            </param>
            <returns>
            Result of And operation
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.CompositeEnum.OperatorOr``1(``0,``0)">
            <summary>
            Operators Or.
            </summary>
            <typeparam name="T1">
            The type of the 1.
            </typeparam>
            <param name="left">
            The left.
            </param>
            <param name="right">
            The right.
            </param>
            <returns>
            Result of Or operation
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.CompositeEnum.OperatorXor``1(``0,``0)">
            <summary>
            Operators Xor.
            </summary>
            <typeparam name="T1">
            The type of the 1.
            </typeparam>
            <param name="left">
            The left.
            </param>
            <param name="right">
            The right.
            </param>
            <returns>
            Result of Xor operation
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.CompositeEnum.Childrens">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.CompositeEnum.op_Equality(Stride.Core.Shaders.Ast.CompositeEnum,Stride.Core.Shaders.Ast.CompositeEnum)">
            <summary>
              Implements the operator ==.
            </summary>
            <param name = "left">The left.</param>
            <param name = "right">The right.</param>
            <returns>
              The result of the operator.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.CompositeEnum.op_Inequality(Stride.Core.Shaders.Ast.CompositeEnum,Stride.Core.Shaders.Ast.CompositeEnum)">
            <summary>
              Implements the operator !=.
            </summary>
            <param name = "left">The left.</param>
            <param name = "right">The right.</param>
            <returns>
              The result of the operator.
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.ConditionalExpression">
            <summary>
            A Conditional expression
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ConditionalExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.ConditionalExpression"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ConditionalExpression.#ctor(Stride.Core.Shaders.Ast.Expression,Stride.Core.Shaders.Ast.Expression,Stride.Core.Shaders.Ast.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.ConditionalExpression"/> class.
            </summary>
            <param name="condition">The condition.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.ConditionalExpression.Condition">
            <summary>
              Gets or sets the condition.
            </summary>
            <value>
              The condition.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.ConditionalExpression.Left">
            <summary>
              Gets or sets the left.
            </summary>
            <value>
              The left.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.ConditionalExpression.Right">
            <summary>
              Gets or sets the right.
            </summary>
            <value>
              The right.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ConditionalExpression.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ConditionalExpression.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.DeclarationStatement">
            <summary>
            A declaration inside a statement.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.DeclarationStatement.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.DeclarationStatement" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.DeclarationStatement.#ctor(Stride.Core.Shaders.Ast.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.DeclarationStatement"/> class.
            </summary>
            <param name="content">
            The content.
            </param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.DeclarationStatement.Content">
            <summary>
              Gets or sets the content.
            </summary>
            <value>
              The content.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.DeclarationStatement.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.DeclarationStatement.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.EmptyExpression">
            <summary>
            A Empty expression
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.EmptyExpression.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.EmptyStatement">
            <summary>
            A Empty of statement.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.EmptyStatement.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.EmptyStatement" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.EmptyStatement.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Expression">
            <summary>
            An expression.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Expression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Expression"/> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Expression.TypeInference">
            <summary>
            Gets or sets the type reference.
            </summary>
            <value>
            The type reference.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Expression.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.ExpressionList">
            <summary>
            A list of expression.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ExpressionList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.ExpressionList"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ExpressionList.#ctor(Stride.Core.Shaders.Ast.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.ExpressionList"/> class.
            </summary>
            <param name="expressions">The expressions.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.ExpressionList.Count">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.ExpressionList.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.ExpressionList.Expressions">
            <summary>
            Gets or sets the expressions.
            </summary>
            <value>
            The expressions.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ExpressionList.AddRange(System.Collections.Generic.IEnumerable{Stride.Core.Shaders.Ast.Expression})">
            <summary>
            Adds a collection to this instance.
            </summary>
            <param name="collection">The collection to add to this instance.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ExpressionList.GetRange(System.Int32,System.Int32)">
            <summary>
            Gets a subset of this instance
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <returns>A subset of this instance</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ExpressionList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Stride.Core.Shaders.Ast.Expression})">
            <summary>
            Inserts a collection at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ExpressionList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements.
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ExpressionList.RemoveAll(System.Predicate{Stride.Core.Shaders.Ast.Expression})">
            <summary>
            Removes all elements with a predicate function.
            </summary>
            <param name="match">The match.</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.ExpressionList.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ExpressionList.Add(Stride.Core.Shaders.Ast.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ExpressionList.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ExpressionList.Contains(Stride.Core.Shaders.Ast.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ExpressionList.CopyTo(Stride.Core.Shaders.Ast.Expression[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ExpressionList.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ExpressionList.IndexOf(Stride.Core.Shaders.Ast.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ExpressionList.Insert(System.Int32,Stride.Core.Shaders.Ast.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ExpressionList.Remove(Stride.Core.Shaders.Ast.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ExpressionList.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ExpressionList.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.ExpressionStatement">
            <summary>
            An expression statement.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ExpressionStatement.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.ExpressionStatement" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ExpressionStatement.#ctor(Stride.Core.Shaders.Ast.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.ExpressionStatement"/> class.
            </summary>
            <param name="expression">
            The expression.
            </param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.ExpressionStatement.Expression">
            <summary>
              Gets or sets the expression.
            </summary>
            <value>
              The expression.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ExpressionStatement.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ExpressionStatement.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.ForStatement">
            <summary>
            For statement.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ForStatement.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.ForStatement" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ForStatement.#ctor(Stride.Core.Shaders.Ast.Statement,Stride.Core.Shaders.Ast.Expression,Stride.Core.Shaders.Ast.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.ForStatement"/> class.
            </summary>
            <param name="start">
            The start.
            </param>
            <param name="condition">
            The condition.
            </param>
            <param name="next">
            The next.
            </param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.ForStatement.Start">
            <summary>
              Gets or sets the initializer.
            </summary>
            <value>
              The initializer.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.ForStatement.Condition">
            <summary>
              Gets or sets the condition.
            </summary>
            <value>
              The condition.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.ForStatement.Next">
            <summary>
              Gets or sets the next.
            </summary>
            <value>
              The next.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.ForStatement.Body">
            <summary>
              Gets or sets the body.
            </summary>
            <value>
              The body.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ForStatement.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ForStatement.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.GenericBaseType">
            <summary>
            Base class for all generic types.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.GenericBaseType.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.GenericBaseType"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="parameterCount">
            The parameter count.
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.GenericBaseType.ToString">
            <summary>
            Gets the full name.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.GenericBaseType.ParameterTypes">
            <summary>
              Gets or sets the parameter types.
            </summary>
            <value>
              The parameter types.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.GenericBaseType.Parameters">
            <summary>
              Gets or sets the parameters.
            </summary>
            <value>
              The parameters.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.GenericBaseType.Equals(Stride.Core.Shaders.Ast.GenericBaseType)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">
            The other.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:Stride.Core.Shaders.Ast.GenericBaseType"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.GenericBaseType.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.GenericBaseType.Childrens">
            <summary>
            Gets the child nodes.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.GenericBaseType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.GenericBaseType.op_Equality(Stride.Core.Shaders.Ast.GenericBaseType,Stride.Core.Shaders.Ast.GenericBaseType)">
            <summary>
              Implements the operator ==.
            </summary>
            <param name = "left">The left.</param>
            <param name = "right">The right.</param>
            <returns>
              The result of the operator.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.GenericBaseType.op_Inequality(Stride.Core.Shaders.Ast.GenericBaseType,Stride.Core.Shaders.Ast.GenericBaseType)">
            <summary>
              Implements the operator !=.
            </summary>
            <param name = "left">The left.</param>
            <param name = "right">The right.</param>
            <returns>
              The result of the operator.
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.GenericDeclaration">
            <summary>
            A generic declaration. This is used internally to identify a generic declaration.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.GenericDeclaration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.GenericDeclaration"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.GenericDeclaration.#ctor(Stride.Core.Shaders.Ast.Identifier,Stride.Core.Shaders.Ast.IGenerics,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.GenericDeclaration"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="holder">The holder.</param>
            <param name="index">The index.</param>
            <param name="isUsingBase">if set to <c>true</c> [is using base].</param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.GenericDeclaration.Name">
            <summary>
            Gets or sets the name of this declaration
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.GenericDeclaration.Holder">
            <summary>
            Gets or sets the holder.
            </summary>
            <value>
            The holder.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.GenericDeclaration.Index">
            <summary>
            Gets or sets the index.
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.GenericDeclaration.IsUsingBase">
            <summary>
            Gets or sets a value indicating whether this instance is using base.
            </summary>
            <value>
            <c>true</c> if this instance is using base; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.GenericParameterConstraint">
            <summary>
            A Generic parameter for a method that provides a constraint resolver.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.GenericParameterConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.GenericParameterConstraint"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.GenericParameterConstraint.#ctor(System.String,System.Func{Stride.Core.Shaders.Ast.TypeBase,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.GenericParameterConstraint"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="constraint">The constraint.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.GenericParameterConstraint.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.GenericParameterConstraint.Constraint">
            <summary>
            Gets or sets the constraint match function.
            </summary>
            <value>
            The constraint match function.
            </value>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.GenericParameterType">
            <summary>
            Defines a generic parameter type.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.GenericParameterType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.GenericParameterType"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.GenericParameterType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.GenericParameterType"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.GenericParameterType.#ctor(Stride.Core.Shaders.Ast.Identifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.GenericParameterType"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.GenericType">
            <summary>
            Custom generic type.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.GenericType.ParameterTypes">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.GenericType.Parameters">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Glsl.InterfaceType">
            <summary>
            An interface type.
            </summary>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Glsl.LayoutKeyValue">
            <summary>
            LayoutKey value node.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Glsl.LayoutKeyValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Glsl.LayoutKeyValue"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Glsl.LayoutKeyValue.#ctor(Stride.Core.Shaders.Ast.Identifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Glsl.LayoutKeyValue"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Glsl.LayoutKeyValue.#ctor(Stride.Core.Shaders.Ast.Identifier,Stride.Core.Shaders.Ast.LiteralExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Glsl.LayoutKeyValue"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Glsl.LayoutKeyValue.#ctor(Stride.Core.Shaders.Ast.Identifier,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Glsl.LayoutKeyValue"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Glsl.LayoutKeyValue.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Glsl.LayoutKeyValue.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Glsl.LayoutKeyValue.Childrens">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Glsl.LayoutKeyValue.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Glsl.LayoutQualifier">
            <summary>
            Describe a register location
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Glsl.LayoutQualifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Glsl.LayoutQualifier"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Glsl.LayoutQualifier.#ctor(Stride.Core.Shaders.Ast.Glsl.LayoutKeyValue[])">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Glsl.LayoutQualifier"/> class.
            </summary>
            <param name="layouts">The layouts.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Glsl.LayoutQualifier.Layouts">
            <summary>
              Gets or sets the profile.
            </summary>
            <value>
              The profile.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Glsl.LayoutQualifier.Childrens">
            <inheritdoc />
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Glsl.LayoutQualifier.DisplayName">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Glsl.ParameterQualifier">
            <summary>
            Specialized ParameterQualifier for Hlsl.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Glsl.ParameterQualifier.Varying">
            <summary>
              Varying modifier, only for OpenGL ES 2.0.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Glsl.ParameterQualifier.Attribute">
            <summary>
              Attribute modifier, only for OpenGL ES 2.0.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Glsl.ParameterQualifier.Parse(System.String)">
            <summary>
            Parses the specified enum name.
            </summary>
            <param name="enumName">
            Name of the enum.
            </param>
            <returns>
            A parameter qualifier
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.Annotations">
            <summary>
            An Annotations.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.Annotations.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Hlsl.Annotations"/> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.Annotations.Variables">
            <summary>
            Gets or sets the variable.
            </summary>
            <value>
            The variable.
            </value>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.AsmExpression">
            <summary>
            A raw asm expression.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.AsmExpression.Text">
            <summary>
              Gets or sets the asm expression in raw text form.
            </summary>
            <value>
              The asm expression in raw text form.
            </value>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.AttributeDeclaration">
            <summary>
            Describes an attribute.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.AttributeDeclaration.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.Hlsl.AttributeDeclaration" /> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.AttributeDeclaration.Name">
            <summary>
              Gets or sets the name.
            </summary>
            <value>
              The name.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.AttributeDeclaration.Parameters">
            <summary>
              Gets or sets the parameters.
            </summary>
            <value>
              The parameters.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.AttributeDeclaration.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.AttributeDeclaration.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.CastExpression">
            <summary>
            A cast expression.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.CastExpression.From">
            <summary>
              Gets or sets from.
            </summary>
            <value>
              From.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.CastExpression.Target">
            <summary>
              Gets or sets the target.
            </summary>
            <value>
              The target.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.CastExpression.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.CastExpression.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.ClassType">
            <summary>
            Definition of a class.
            </summary>
            <summary>
            Definition of a class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.ClassType.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.Hlsl.ClassType" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.ClassType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Hlsl.ClassType"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.ClassType.BaseClasses">
            <summary>
              Gets or sets the base classes.
            </summary>
            <value>
              The base classes.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.ClassType.GenericParameters">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.ClassType.GenericArguments">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.ClassType.Members">
            <summary>
              Gets or sets the members.
            </summary>
            <value>
              The members.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.ClassType.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.ClassType.ToString">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.ClassType.Equals(Stride.Core.Shaders.Ast.Hlsl.ClassType)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.ClassType.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.ClassType.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.ClassType.op_Equality(Stride.Core.Shaders.Ast.Hlsl.ClassType,Stride.Core.Shaders.Ast.Hlsl.ClassType)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.ClassType.op_Inequality(Stride.Core.Shaders.Ast.Hlsl.ClassType,Stride.Core.Shaders.Ast.Hlsl.ClassType)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.ClassType.IsStreamOutputType(Stride.Core.Shaders.Ast.TypeBase)">
            <summary>
            Determines whether the specified type is a a stream type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns><c>true</c> if [the specified target type] [is stream type] ; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.CompileExpression">
            <summary>
            A Compile expression.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.CompileExpression.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.Hlsl.CompileExpression" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.CompileExpression.#ctor(System.String,Stride.Core.Shaders.Ast.MethodInvocationExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Hlsl.CompileExpression"/> class.
            </summary>
            <param name="profile">
            The profile.
            </param>
            <param name="function">
            The function.
            </param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.CompileExpression.Function">
            <summary>
              Gets or sets the function.
            </summary>
            <value>
              The function.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.CompileExpression.Profile">
            <summary>
              Gets or sets the profile.
            </summary>
            <value>
              The profile.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.CompileExpression.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.CompileExpression.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.CompositeIdentifier">
            <summary>
            A composite identifier.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.CompositeIdentifier.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.Hlsl.CompositeIdentifier" /> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.CompositeIdentifier.Identifiers">
            <summary>
              Gets or sets the path.
            </summary>
            <value>
              The path.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.CompositeIdentifier.Separator">
            <summary>
            Gets the separator.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.CompositeIdentifier.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.CompositeIdentifier.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.CompositeIdentifier.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.CompositeIdentifier.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.ConstantBuffer">
            <summary>
            Declaration of a constant buffer.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.ConstantBuffer.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.Hlsl.ConstantBuffer" /> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.ConstantBuffer.Attributes">
            <summary>
              Gets or sets the attributes.
            </summary>
            <value>
              The attributes.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.ConstantBuffer.Type">
            <summary>
              Gets or sets a value indicating whether this instance is texture buffer.
            </summary>
            <value>
              <c>true</c> if this instance is texture buffer; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.ConstantBuffer.Members">
            <summary>
              Gets or sets the members.
            </summary>
            <value>
              The members.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.ConstantBuffer.Name">
            <summary>
              Gets or sets the name.
            </summary>
            <value>
              The name.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.ConstantBuffer.Register">
            <summary>
              Gets or sets the register.
            </summary>
            <value>
              The register.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.ConstantBuffer.Qualifiers">
            <summary>
            Gets or sets the qualifiers.
            </summary>
            <value>
            The qualifiers.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.ConstantBuffer.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.ConstantBuffer.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.ConstantBufferType">
            <summary>
            Type of constant buffer.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.ConstantBufferType.Constant">
            <summary>
              Constant buffer (cbuffer).
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.ConstantBufferType.Texture">
            <summary>
              Texture buffer (tbuffer).
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.ConstantBufferType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Hlsl.ConstantBufferType"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.ConstantBufferType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Hlsl.ConstantBufferType"/> class.
            </summary>
            <param name="key">
            The key.
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.ConstantBufferType.Parse(System.String)">
            <summary>
            Parses the specified enum name.
            </summary>
            <param name="enumName">
            Name of the enum.
            </param>
            <returns>
            A qualifier
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.FloatQualifier">
            <summary>
            Value range for a float
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.FloatQualifier.SNorm">
            <summary>
              IEEE 32-bit signed-normalized float in range -1 to 1 inclusive.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.FloatQualifier.UNorm">
            <summary>
              IEEE 32-bit unsigned-normalized float in range 0 to 1 inclusive.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.FloatQualifier.Parse(System.String)">
            <summary>
            Parses the specified enum name.
            </summary>
            <param name="enumName">
            Name of the enum.
            </param>
            <returns>
            A qualifier
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.IdentifierDot">
            <summary>
            C# namespace or class.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.IdentifierDot.Separator">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.IdentifierGeneric">
            <summary>
            A generic identifier in the form Typename&lt;identifier1,..., identifiern&gt;
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.IdentifierGeneric.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Hlsl.IdentifierGeneric"/> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.IdentifierGeneric.Separator">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.IdentifierGeneric.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.IdentifierNs">
            <summary>
            A C++ identifier with namespaces "::" separator
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.IdentifierNs.Separator">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.InterfaceType">
            <summary>
            Definition of a class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.InterfaceType.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.Hlsl.InterfaceType" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.InterfaceType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Hlsl.InterfaceType"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.InterfaceType.GenericParameters">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.InterfaceType.GenericArguments">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.InterfaceType.Methods">
            <summary>
            Gets or sets the methods.
            </summary>
            <value>
            The methods.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.InterfaceType.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.InterfaceType.ToString">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.InterfaceType.Equals(Stride.Core.Shaders.Ast.Hlsl.InterfaceType)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.InterfaceType.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.InterfaceType.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.InterfaceType.op_Equality(Stride.Core.Shaders.Ast.Hlsl.InterfaceType,Stride.Core.Shaders.Ast.Hlsl.InterfaceType)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.InterfaceType.op_Inequality(Stride.Core.Shaders.Ast.Hlsl.InterfaceType,Stride.Core.Shaders.Ast.Hlsl.InterfaceType)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.InterpolationQualifier">
            <summary>
            A parameter interpolation qualifier.
            </summary>
            <seealso cref="!:Stride.Core.Shaders.Ast.Qualifier" />
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.InterpolationQualifier.Centroid">
            <summary>
              Centroid modifier, only valid for structure field.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.InterpolationQualifier.Linear">
            <summary>
              Linear modifier, only valid for structure field.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.InterpolationQualifier.NoPerspective">
            <summary>
              NoPerspective modifier, only valid for structure field.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.InterpolationQualifier.Nointerpolation">
            <summary>
              Nointerpolation modifier.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.InterpolationQualifier.Sample">
            <summary>
              Sample modifier, only valid for structure field.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.InterpolationQualifier.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Hlsl.InterpolationQualifier" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.InterpolationQualifier.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Hlsl.InterpolationQualifier"/> class.
            </summary>
            <param name="key">Name of the enum.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.InterpolationQualifier.Parse(System.String)">
            <summary>
            Parses the specified enum name.
            </summary>
            <param name="enumName">
            Name of the enum.
            </param>
            <returns>
            A storage qualifier
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.PackOffset">
            <summary>
            Describes a packoffset(value).
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.PackOffset.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.Hlsl.PackOffset" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.PackOffset.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Hlsl.PackOffset"/> class.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.PackOffset.Value">
            <summary>
              Gets or sets the value.
            </summary>
            <value>
              The value.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.PackOffset.ToFloat4SlotIndex">
            <summary>
            Converts this packoffset to a register index based on float size.
            </summary>
            <returns>An offset </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.PackOffset.Equals(Stride.Core.Shaders.Ast.Hlsl.PackOffset)">
            <summary>
            Determines whether the specified <see cref="T:Stride.Core.Shaders.Ast.Hlsl.PackOffset"/> is equal to this instance.
            </summary>
            <param name="other">
            The <see cref="T:Stride.Core.Shaders.Ast.Hlsl.PackOffset"/> to compare with this instance.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:Stride.Core.Shaders.Ast.Hlsl.PackOffset"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.PackOffset.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.PackOffset.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.PackOffset.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.PackOffset.DisplayName">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.PackOffset.op_Equality(Stride.Core.Shaders.Ast.Hlsl.PackOffset,Stride.Core.Shaders.Ast.Hlsl.PackOffset)">
            <summary>
              Implements the operator ==.
            </summary>
            <param name = "left">The left.</param>
            <param name = "right">The right.</param>
            <returns>
              The result of the operator.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.PackOffset.op_Inequality(Stride.Core.Shaders.Ast.Hlsl.PackOffset,Stride.Core.Shaders.Ast.Hlsl.PackOffset)">
            <summary>
              Implements the operator !=.
            </summary>
            <param name = "left">The left.</param>
            <param name = "right">The right.</param>
            <returns>
              The result of the operator.
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.ParameterQualifier">
            <summary>
            Specialized ParameterQualifier for Hlsl.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.ParameterQualifier.Point">
            <summary>
              Point modifier, only for method parameters in Geometry Shader.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.ParameterQualifier.Line">
            <summary>
              Line modifier, only for method parameters in Geometry Shader.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.ParameterQualifier.LineAdj">
            <summary>
              LineAdjacent modifier, only for method parameters in Geometry Shader.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.ParameterQualifier.Triangle">
            <summary>
              Triangle modifier, only for method parameters in Geometry Shader.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.ParameterQualifier.TriangleAdj">
            <summary>
              TriangleAdjacent modifier, only for method parameters in Geometry Shader.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.ParameterQualifier.Parse(System.String)">
            <summary>
            Parses the specified enum name.
            </summary>
            <param name="enumName">
            Name of the enum.
            </param>
            <returns>
            A parameter qualifier
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.Pass">
            <summary>
            A technique pass.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.Pass.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.Hlsl.Pass" /> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.Pass.Attributes">
            <summary>
              Gets or sets the attributes.
            </summary>
            <value>
              The attributes.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.Pass.Items">
            <summary>
              Gets or sets the items.
            </summary>
            <value>
              The items.
            </value>
            <remarks>
              An item is either a <see cref = "T:Stride.Core.Shaders.Ast.MethodInvocationExpression" /> or a <see cref = "T:Stride.Core.Shaders.Ast.AssignmentExpression" />.
            </remarks>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.Pass.Name">
            <summary>
              Gets or sets the name.
            </summary>
            <value>
              The name.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.Pass.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.Pass.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.RegisterLocation">
            <summary>
            Describe a register location
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.RegisterLocation.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.Hlsl.RegisterLocation" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.RegisterLocation.#ctor(Stride.Core.Shaders.Ast.Identifier,Stride.Core.Shaders.Ast.Identifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Hlsl.RegisterLocation"/> class.
            </summary>
            <param name="profile">
            The profile.
            </param>
            <param name="idenfitier">
            The idenfitier.
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.RegisterLocation.#ctor(System.String,Stride.Core.Shaders.Ast.Identifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Hlsl.RegisterLocation"/> class.
            </summary>
            <param name="profile">
            The profile.
            </param>
            <param name="idenfitier">
            The idenfitier.
            </param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.RegisterLocation.Profile">
            <summary>
              Gets or sets the profile.
            </summary>
            <value>
              The profile.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.RegisterLocation.Register">
            <summary>
              Gets or sets the register.
            </summary>
            <value>
              The register.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.RegisterLocation.Equals(Stride.Core.Shaders.Ast.Hlsl.RegisterLocation)">
            <summary>
            Determines whether the specified <see cref="T:Stride.Core.Shaders.Ast.Hlsl.RegisterLocation"/> is equal to this instance.
            </summary>
            <param name="other">
            The <see cref="T:Stride.Core.Shaders.Ast.Hlsl.RegisterLocation"/> to compare with this instance.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:Stride.Core.Shaders.Ast.Hlsl.RegisterLocation"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.RegisterLocation.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.RegisterLocation.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.RegisterLocation.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.RegisterLocation.DisplayName">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.RegisterLocation.op_Equality(Stride.Core.Shaders.Ast.Hlsl.RegisterLocation,Stride.Core.Shaders.Ast.Hlsl.RegisterLocation)">
            <summary>
              Implements the operator ==.
            </summary>
            <param name = "left">The left.</param>
            <param name = "right">The right.</param>
            <returns>
              The result of the operator.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.RegisterLocation.op_Inequality(Stride.Core.Shaders.Ast.Hlsl.RegisterLocation,Stride.Core.Shaders.Ast.Hlsl.RegisterLocation)">
            <summary>
              Implements the operator !=.
            </summary>
            <param name = "left">The left.</param>
            <param name = "right">The right.</param>
            <returns>
              The result of the operator.
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.SamplerType">
            <summary>
            A State type.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.SamplerType.Sampler">
            <summary>
            A sampler.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.SamplerType.Sampler1D">
            <summary>
            A sampler1D.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.SamplerType.Sampler2D">
            <summary>
            A sampler2D
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.SamplerType.Sampler3D">
            <summary>
            A sampler3D.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.SamplerType.SamplerCube">
            <summary>
            A samplerCUBE.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.SamplerType.Parse(System.String)">
            <summary>
            Parses the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.Semantic">
            <summary>
            Describes a semantic.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.Semantic.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.Hlsl.Semantic" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.Semantic.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Hlsl.Semantic"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.Semantic.Name">
            <summary>
              Gets or sets the name.
            </summary>
            <value>
              The name.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.Semantic.BaseName">
            <summary>
            Gets the base name of a semantic (COLOR1 -> COLOR)
            </summary>
            <value>
            The base name of sematnic.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.Semantic.Parse(System.String)">
            <summary>
            Parses the specified semantic.
            </summary>
            <param name="text">The semantic.</param>
            <returns>The base name and index. COLOR1 -> {COLOR, 1}</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.Semantic.Equals(Stride.Core.Shaders.Ast.Hlsl.Semantic)">
            <summary>
              Determines whether the specified <see cref = "T:Stride.Core.Shaders.Ast.Hlsl.Semantic" /> is equal to this instance.
            </summary>
            <param name = "other">The <see cref = "T:Stride.Core.Shaders.Ast.Hlsl.Semantic" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref = "T:Stride.Core.Shaders.Ast.Hlsl.Semantic" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.Semantic.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.Semantic.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.Semantic.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.Semantic.DisplayName">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.Semantic.op_Equality(Stride.Core.Shaders.Ast.Hlsl.Semantic,Stride.Core.Shaders.Ast.Hlsl.Semantic)">
            <summary>
              Implements the operator ==.
            </summary>
            <param name = "left">The left.</param>
            <param name = "right">The right.</param>
            <returns>
              The result of the operator.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.Semantic.op_Inequality(Stride.Core.Shaders.Ast.Hlsl.Semantic,Stride.Core.Shaders.Ast.Hlsl.Semantic)">
            <summary>
              Implements the operator !=.
            </summary>
            <param name = "left">The left.</param>
            <param name = "right">The right.</param>
            <returns>
              The result of the operator.
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.StateExpression">
            <summary>
            A state expresion in the form: sampler {...}.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.StateExpression.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.Hlsl.StateExpression" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.StateExpression.#ctor(Stride.Core.Shaders.Ast.TypeName,Stride.Core.Shaders.Ast.Hlsl.StateInitializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Hlsl.StateExpression"/> class.
            </summary>
            <param name="stateType">
            Type of the state.
            </param>
            <param name="initializer">
            The initializer.
            </param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.StateExpression.Initializer">
            <summary>
              Gets or sets the initializer.
            </summary>
            <value>
              The initializer.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.StateExpression.StateType">
            <summary>
              Gets or sets the type of the sampler.
            </summary>
            <value>
              The type of the sampler.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.StateExpression.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.StateExpression.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.StateInitializer">
            <summary>
            A set of state values.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.StateInitializer.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.Hlsl.StateInitializer" /> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.StateInitializer.Items">
            <summary>
              Gets or sets the fields.
            </summary>
            <value>
              The fields.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.StateInitializer.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.StateInitializer.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.StateType">
            <summary>
            A State type.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.StateType.BlendState">
            <summary>
            A BlendState.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.StateType.DepthStencilState">
            <summary>
            A DepthStencilState.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.StateType.RasterizerState">
            <summary>
            A RasterizerState
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.StateType.SamplerState">
            <summary>
            A SamplerState.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.StateType.SamplerStateOld">
            <summary>
            An old sampler_state declaration.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.StateType.SamplerComparisonState">
            <summary>
            A SamplerComparisonState.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.StateType.Parse(System.String)">
            <summary>
            Parses the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.StorageQualifier">
            <summary>
            A Storage qualifier.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.StorageQualifier.ColumnMajor">
            <summary>
              ColumnMajor modifier.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.StorageQualifier.Extern">
            <summary>
              Extern modifier.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.StorageQualifier.Groupshared">
            <summary>
              Groupshared modifier.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.StorageQualifier.Precise">
            <summary>
              Precise modifier.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.StorageQualifier.RowMajor">
            <summary>
              RowMajor modifier.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.StorageQualifier.Shared">
            <summary>
              Shared modifier.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.StorageQualifier.Static">
            <summary>
              Static modifier.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.StorageQualifier.Inline">
            <summary>
              Inline modifier.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.StorageQualifier.Unsigned">
            <summary>
              Unsigned modifier.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.StorageQualifier.Volatile">
            <summary>
              Volatile modifier.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.StorageQualifier.Parse(System.String)">
            <summary>
            Parses the specified enum name.
            </summary>
            <param name="enumName">
            Name of the enum.
            </param>
            <returns>
            A storage qualifier
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.StreamTypeName">
            <summary>
            A State type.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.StreamTypeName.PointStream">
            <summary>
            A PointStream
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.StreamTypeName.LineStream">
            <summary>
            A LineStream.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.StreamTypeName.TriangleStream">
            <summary>
            A TriangleStream.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.StreamTypeName.Parse(System.String)">
            <summary>
            Parses the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.Technique">
            <summary>
            Technique description.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.Technique.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.Hlsl.Technique" /> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.Technique.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.Technique.Attributes">
            <summary>
              Gets or sets the attributes.
            </summary>
            <value>
              The attributes.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.Technique.Name">
            <summary>
              Gets or sets the name.
            </summary>
            <value>
              The name.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.Technique.Passes">
            <summary>
              Gets or sets the passes.
            </summary>
            <value>
              The passes.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.Technique.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.Technique.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.TextureType">
            <summary>
            A State type.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.TextureType.Texture">
            <summary>
            A Texture
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.TextureType.Texture1D">
            <summary>
            A Texture1D.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.TextureType.Texture1DArray">
            <summary>
            A Texture1DArray.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.TextureType.Texture2D">
            <summary>
            A Texture2D
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.TextureType.Texture2DArray">
            <summary>
            A Texture2DArray.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.TextureType.Texture3D">
            <summary>
            A Texture3D.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Hlsl.TextureType.TextureCube">
            <summary>
            An TextureCube.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.TextureType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Hlsl.TextureType"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.TextureType.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Hlsl.TextureType"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.TextureType.Equals(Stride.Core.Shaders.Ast.Hlsl.TextureType)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.TextureType.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.TextureType.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.TextureType.op_Equality(Stride.Core.Shaders.Ast.Hlsl.TextureType,Stride.Core.Shaders.Ast.Hlsl.TextureType)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.TextureType.op_Inequality(Stride.Core.Shaders.Ast.Hlsl.TextureType,Stride.Core.Shaders.Ast.Hlsl.TextureType)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.TextureType.Parse(System.String)">
            <summary>
            Parses the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Hlsl.Typedef">
            <summary>
            Typedef declaration.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.Typedef.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.Hlsl.Typedef" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.Typedef.#ctor(Stride.Core.Shaders.Ast.TypeBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Hlsl.Typedef"/> class.
            </summary>
            <param name="typeBase">
            The type base.
            </param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.Typedef.SubDeclarators">
            <summary>
              Gets or sets the names.
            </summary>
            <value>
              The names.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.Typedef.Type">
            <summary>
              Gets or sets the type.
            </summary>
            <value>
              The type.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Hlsl.Typedef.IsGroup">
            <summary>
            Gets a value indicating whether this instance is group.
            </summary>
            <value>
              <c>true</c> if this instance is group; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.Typedef.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.Typedef.ResolveType">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Hlsl.Typedef.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.IDeclaration">
            <summary>
            Toplevel interface for a declaration.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.IDeclaration.Name">
            <summary>
              Gets or sets the name of this declaration
            </summary>
            <value>
              The name.
            </value>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Identifier">
            <summary>
            An identifier.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Identifier.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.Identifier" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Identifier.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Identifier"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Identifier.HasIndices">
            <summary>
            Gets a value indicating whether this instance has indices.
            </summary>
            <value>
            <c>true</c> if this instance has indices; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Identifier.Indices">
            <summary>
              Gets or sets the indices.
            </summary>
            <value>
              The indices.
            </value>
            <remarks>
            This property can be null.
            </remarks>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Identifier.IsSpecialReference">
            <summary>
            Gets or sets a value indicating whether this instance is a special reference using &lt; &gt;
            </summary>
            <value>
            <c>true</c> if this instance is special reference; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Identifier.Text">
            <summary>
              Gets or sets the name.
            </summary>
            <value>
              The name.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Identifier.Equals(Stride.Core.Shaders.Ast.Identifier)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">
            The other.
            </param>
            <returns>
            true if equals to other.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Identifier.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Identifier.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Identifier.ToString">
            <summary>
              Returns a <see cref = "T:System.String" /> that represents this instance.
            </summary>
            <returns>
              A <see cref = "T:System.String" /> that represents this instance.
            </returns>
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Identifier.op_Equality(Stride.Core.Shaders.Ast.Identifier,Stride.Core.Shaders.Ast.Identifier)">
            <summary>
              Implements the operator ==.
            </summary>
            <param name = "left">The left.</param>
            <param name = "right">The right.</param>
            <returns>
              The result of the operator.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Identifier.op_Implicit(Stride.Core.Shaders.Ast.Identifier)~System.String">
            <summary>
              Performs an implicit conversion from <see cref = "T:Stride.Core.Shaders.Ast.Identifier" /> to <see cref = "T:System.String" />.
            </summary>
            <param name = "identifier">The identifier.</param>
            <returns>
              The result of the conversion.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Identifier.op_Implicit(System.String)~Stride.Core.Shaders.Ast.Identifier">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Stride.Core.Shaders.Ast.Identifier"/>.
            </summary>
            <param name="identifierName">Name of the identifier.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Identifier.op_Inequality(Stride.Core.Shaders.Ast.Identifier,Stride.Core.Shaders.Ast.Identifier)">
            <summary>
              Implements the operator !=.
            </summary>
            <param name = "left">The left.</param>
            <param name = "right">The right.</param>
            <returns>
              The result of the operator.
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.IfStatement">
            <summary>
            If statement.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.IfStatement.Condition">
            <summary>
              Gets or sets the condition.
            </summary>
            <value>
              The condition.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.IfStatement.Else">
            <summary>
              Gets or sets the else.
            </summary>
            <value>
              The else.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.IfStatement.Then">
            <summary>
              Gets or sets the then.
            </summary>
            <value>
              The then.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.IfStatement.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.IfStatement.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.IGenerics">
            <summary>
            An interface used by generic definitions and instance.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.IGenerics.GenericParameters">
            <summary>
            Gets or sets the generic arguments.
            </summary>
            <value>
            The generic arguments.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.IGenerics.GenericArguments">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.IndexerExpression">
            <summary>
            Indexer expression.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.IndexerExpression.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.IndexerExpression" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.IndexerExpression.#ctor(Stride.Core.Shaders.Ast.Expression,Stride.Core.Shaders.Ast.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.IndexerExpression"/> class.
            </summary>
            <param name="target">
            The target.
            </param>
            <param name="index">
            The index.
            </param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.IndexerExpression.Index">
            <summary>
              Gets or sets the index.
            </summary>
            <value>
              The index.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.IndexerExpression.Target">
            <summary>
              Gets or sets the target.
            </summary>
            <value>
              The target.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.IndexerExpression.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.IndexerExpression.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.IQualifiers">
            <summary>
            Base interface for all node providing qualifiers.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.IQualifiers.Qualifiers">
            <summary>
            Gets or sets the qualifiers.
            </summary>
            <value>
            The qualifiers.
            </value>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.IronyBrowsableNode">
            <summary>
            Internal class to provides <see cref="P:Stride.Core.Shaders.Ast.IronyBrowsableNode.Node"/> class browsable by Irony.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.IronyBrowsableNode.#ctor(Stride.Core.Shaders.Ast.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.IronyBrowsableNode"/> class.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.IronyBrowsableNode.Location">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.IronyBrowsableNode.Node">
            <summary>
            Gets or sets the node.
            </summary>
            <value>
            The node.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.IronyBrowsableNode.GetChildNodes">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.IronyBrowsableNode.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.IScopeContainer">
            <summary>
            A tag interface to identify a container for scope declarations.
            </summary>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.ITypeInferencer">
            <summary>
            A tag interface for an object referencing a type.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.ITypeInferencer.TypeInference">
            <summary>
            Gets or sets the reference.
            </summary>
            <value>
            The reference.
            </value>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.KeywordExpression">
            <summary>
            Keyword expression statement like continue; break; discard;
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.KeywordExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.KeywordExpression"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.KeywordExpression.#ctor(Stride.Core.Shaders.Ast.Identifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.KeywordExpression"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.KeywordExpression.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.KeywordExpression.Childrens">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.KeywordExpression.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Literal">
            <summary>
            A field of a struct.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Literal.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.Literal" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Literal.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Literal"/> class.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Literal.Value">
            <summary>
              Gets or sets the value.
            </summary>
            <value>
              The value.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Literal.Text">
            <summary>
              Gets or sets the text.
            </summary>
            <value>
              The text.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Literal.SubLiterals">
            <summary>
            Gets or sets the sub literals.
            </summary>
            <value>
            The sub literals.
            </value>
            <remarks>
            This value can be null.
            </remarks>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Literal.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Literal.ToString">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Literal.Equals(Stride.Core.Shaders.Ast.Literal)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Literal.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Literal.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Literal.op_Equality(Stride.Core.Shaders.Ast.Literal,Stride.Core.Shaders.Ast.Literal)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Literal.op_Inequality(Stride.Core.Shaders.Ast.Literal,Stride.Core.Shaders.Ast.Literal)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.LiteralExpression">
            <summary>
            A literal expression.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.LiteralExpression.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.LiteralExpression" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.LiteralExpression.#ctor(Stride.Core.Shaders.Ast.Literal)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.LiteralExpression"/> class.
            </summary>
            <param name="literal">
            The literal.
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.LiteralExpression.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.LiteralExpression"/> class.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.LiteralExpression.Literal">
            <summary>
              Gets or sets the literal.
            </summary>
            <value>
              The literal.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.LiteralExpression.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.LiteralExpression.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.LiteralExpression.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.LiteralExpression.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.MatrixType">
            <summary>
            Matrix type.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MatrixType.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.MatrixType" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MatrixType.#ctor(Stride.Core.Shaders.Ast.ScalarType,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.MatrixType"/> class.
            </summary>
            <param name="type">
            The type.
            </param>
            <param name="rowCount">
            The row count.
            </param>
            <param name="columnCount">
            The column count.
            </param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.MatrixType.RowCount">
            <summary>
              Gets or sets the row count.
            </summary>
            <value>
              The row count.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.MatrixType.ColumnCount">
            <summary>
              Gets or sets the column count.
            </summary>
            <value>
              The column count.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.MatrixType.Type">
            <summary>
              Gets or sets the type.
            </summary>
            <value>
              The type.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MatrixType.Equals(Stride.Core.Shaders.Ast.MatrixType)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MatrixType.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MatrixType.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MatrixType.op_Equality(Stride.Core.Shaders.Ast.MatrixType,Stride.Core.Shaders.Ast.MatrixType)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MatrixType.op_Inequality(Stride.Core.Shaders.Ast.MatrixType,Stride.Core.Shaders.Ast.MatrixType)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.MatrixType.Indexer">
            <summary>
            Index information.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MatrixType.Indexer.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.MatrixType.Indexer"/> struct.
            </summary>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.MatrixType.Indexer.Row">
            <summary>
            The row number, zero-based index.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.MatrixType.Indexer.Column">
            <summary>
            The column number, zero-based index.
            </summary>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.MemberReferenceExpression">
            <summary>
            A member reference in the form {this}.{Name}
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MemberReferenceExpression.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.MemberReferenceExpression" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MemberReferenceExpression.#ctor(Stride.Core.Shaders.Ast.Expression,Stride.Core.Shaders.Ast.Identifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.MemberReferenceExpression"/> class.
            </summary>
            <param name="this">The @this.</param>
            <param name="member">The member.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MemberReferenceExpression.#ctor(Stride.Core.Shaders.Ast.Expression,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.MemberReferenceExpression"/> class.
            </summary>
            <param name="this">The @this.</param>
            <param name="member">The member.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.MemberReferenceExpression.Member">
            <summary>
            Gets or sets the member.
            </summary>
            <value>
            The member.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.MemberReferenceExpression.Target">
            <summary>
              Gets or sets the this.
            </summary>
            <value>
              The this.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MemberReferenceExpression.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MemberReferenceExpression.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.MethodDeclaration">
            <summary>
            Declaration of a method.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MethodDeclaration.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.MethodDeclaration" /> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.MethodDeclaration.Attributes">
            <summary>
              Gets or sets the attributes.
            </summary>
            <value>
              The attributes.
            </value>
            <inhericdoc />
        </member>
        <member name="P:Stride.Core.Shaders.Ast.MethodDeclaration.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.MethodDeclaration.ParameterConstraints">
            <summary>
            Gets or sets the parameter constraints.
            </summary>
            <value>
            The parameter constraints.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.MethodDeclaration.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.MethodDeclaration.Qualifiers">
            <summary>
              Gets or sets the storage class.
            </summary>
            <value>
              The storage class.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.MethodDeclaration.ReturnType">
            <summary>
            Gets or sets the type of the return.
            </summary>
            <value>
            The type of the return.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.MethodDeclaration.IsBuiltin">
            <summary>
            Gets or sets a value indicating whether this instance is builtin.
            </summary>
            <value>
            	<c>true</c> if this instance is builtin; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MethodDeclaration.CheckConstraint(Stride.Core.Shaders.Ast.GenericParameterType,Stride.Core.Shaders.Ast.TypeBase)">
            <summary>
            Checks the constraint.
            </summary>
            <param name="parameterType">Type of the parameter.</param>
            <param name="typeToCheck">The type to check.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MethodDeclaration.IsSameSignature(Stride.Core.Shaders.Ast.MethodDeclaration)">
            <summary>
            Test if a method declaration has the same signature.
            </summary>
            <param name="methodDeclaration">The method declaration.</param>
            <returns>True if the method passed has the same signature</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MethodDeclaration.IsSameSignature(Stride.Core.Shaders.Ast.MethodInvocationExpression)">
            <summary>
            Test if a method invocation expression has the same signature.
            </summary>
            <param name="methodInvocationExpression">The method invocation expression.</param>
            <returns>True if the method passed has the same signature</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MethodDeclaration.CopyTo(Stride.Core.Shaders.Ast.MethodDeclaration)">
            <summary>
            Copies declartion to another instance.
            </summary>
            <param name="target">The target instance.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MethodDeclaration.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MethodDeclaration.ToString">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MethodDeclaration.UpdateParameters">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.MethodDefinition">
            <summary>
            A method definition with a body of statements.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MethodDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.MethodDefinition"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MethodDefinition.#ctor(Stride.Core.Shaders.Ast.TypeBase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.MethodDefinition"/> class.
            </summary>
            <param name="returntype">The returntype.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.MethodDefinition.Declaration">
            <summary>
            Gets or sets the declaration.
            </summary>
            <value>
            The declaration.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.MethodDefinition.Body">
            <summary>
              Gets or sets the list of statements.
            </summary>
            <value>
              The list of statements.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MethodDefinition.Childrens">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.MethodInvocationExpression">
            <summary>
            A method invocation.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MethodInvocationExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.MethodInvocationExpression"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MethodInvocationExpression.#ctor(System.String,Stride.Core.Shaders.Ast.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.MethodInvocationExpression"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MethodInvocationExpression.#ctor(Stride.Core.Shaders.Ast.Expression,Stride.Core.Shaders.Ast.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.MethodInvocationExpression"/> class.
            </summary>
            <param name="target">The target.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.MethodInvocationExpression.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>
            The target.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.MethodInvocationExpression.Arguments">
            <summary>
            Gets or sets the arguments.
            </summary>
            <value>
            The arguments.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MethodInvocationExpression.Childrens">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.MethodInvocationExpression.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Node">
            <summary>
            Abstract node.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Node.childrenList">
            <summary>
            list of childrens for ast navigation.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Node.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Node"/> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Node.Span">
            <summary>
            Gets or sets the source span.
            </summary>
            <value>
            The source span.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Node.ChildrenList">
            <summary>
            Gets the childrens.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Node.Tags">
            <summary>
            Gets or sets tags collection.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Node.GetTag(System.String)">
            <summary>
            Gets a tag value associated to this node..
            </summary>
            <param name="tagKey">The tag key.</param>
            <returns>The tag value</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Node.RemoveTag(System.String)">
            <summary>
            Gets a tag value associated to this node..
            </summary>
            <param name="tagKey">The tag key.</param>
            <returns>The tag value</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Node.ContainsTag(System.String)">
            <summary>
            Determines whether the specified instance contains this tag.
            </summary>
            <param name="tagKey">The tag key.</param>
            <returns>
              <c>true</c> if the specified instance contains this tag; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Node.SetTag(System.String,System.Object)">
            <summary>
            Sets a tag value associated to this node.
            </summary>
            <param name="tagKey">The tag key.</param>
            <param name="tagValue">The tag value.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Node.Childrens">
            <summary>
            Gets the child nodes.
            </summary>
            <returns>An enumeration of child nodes</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Node.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.NodeExtensions">
            <summary>
            Extensions for <see cref="T:Stride.Core.Shaders.Ast.Node"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.NodeExtensions.DescendantsImpl(Stride.Core.Shaders.Ast.Node)">
            <summary>
            Get descendants for the specified node.
            </summary>
            <param name="node">The node.</param>
            <returns>An enumeration of descendants</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.NodeExtensions.Descendants(Stride.Core.Shaders.Ast.Node)">
            <summary>
            Get descendants for the specified node.
            </summary>
            <param name="node">The node.</param>
            <returns>An enumeration of descendants</returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.NodeProcessor">
            <summary>
            Processor for a single node.
            </summary>
            <param name="node">The node.</param>
            <param name="nodeProcessorContext">The node processor context.</param>
            <returns>The node transformed</returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.NodeListProcessor">
            <summary>
            Processor for a list of node.
            </summary>
            <param name="list">The list.</param>
            <param name="nodeProcessorContext">The node processor context.</param>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.NodeProcessorContext">
            <summary>
            Node explorer.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.NodeProcessorContext.NodeProcessor">
            <summary>
            Gets or sets the node processor.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.NodeProcessorContext.ListProcessor">
            <summary>
            Gets or sets the list processor.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.NodeProcessorContext.#ctor(Stride.Core.Shaders.Ast.NodeProcessor,Stride.Core.Shaders.Ast.NodeListProcessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.NodeProcessorContext"/> class.
            </summary>
            <param name="nodeProcessor">The node processor.</param>
            <param name="listProcessor">The list processor.</param>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.ObjectType">
            <summary>
            An Object Type.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ObjectType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.ObjectType"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ObjectType.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.ObjectType"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="atlNames">The atl names.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.ObjectType.AlternativeNames">
            <summary>
            Gets or sets the alternatives.
            </summary>
            <value>
            The alternatives.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ObjectType.Equals(Stride.Core.Shaders.Ast.ObjectType)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ObjectType.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ObjectType.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ObjectType.op_Equality(Stride.Core.Shaders.Ast.ObjectType,Stride.Core.Shaders.Ast.ObjectType)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ObjectType.op_Inequality(Stride.Core.Shaders.Ast.ObjectType,Stride.Core.Shaders.Ast.ObjectType)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Parameter">
            <summary>
            A single parameter declaration.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Parameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Parameter"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Parameter.#ctor(Stride.Core.Shaders.Ast.TypeBase,System.String,Stride.Core.Shaders.Ast.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Parameter"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <param name="initialValue">The initial value.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Parameter.DeclaringMethod">
            <summary>
              Gets or sets the declaring method.
            </summary>
            <value>
              The declaring method.
            </value>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.ParameterQualifier">
            <summary>
            A Storage qualifier.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.ParameterQualifier.In">
            <summary>
              In modifier, only for method parameters.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.ParameterQualifier.InOut">
            <summary>
              InOut Modifier, only for method parameters.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.ParameterQualifier.Out">
            <summary>
              Out modifier, only for method parameters.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.ParameterQualifier.Flat">
            <summary>
              Flat modifier, only for inputs or outputs.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ParameterQualifier.Parse(System.String)">
            <summary>
            Parses the specified enum name.
            </summary>
            <param name="enumName">
            Name of the enum.
            </param>
            <returns>
            A parameter qualifier
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.ParenthesizedExpression">
            <summary>
            An expression surrounded by parenthesis.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ParenthesizedExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.ParenthesizedExpression"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ParenthesizedExpression.#ctor(Stride.Core.Shaders.Ast.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.ParenthesizedExpression"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.ParenthesizedExpression.Content">
            <summary>
              Gets or sets the expression.
            </summary>
            <value>
              The expression.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ParenthesizedExpression.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ParenthesizedExpression.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Qualifier">
            <summary>
            A Storage qualifier.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Qualifier.None">
            <summary>
            None Enum.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Qualifier.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.Qualifier" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Qualifier.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Qualifier"/> class.
            </summary>
            <param name="key">
            Name of the enum.
            </param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Qualifier.IsPost">
            <summary>
            Gets or sets a value indicating whether this instance is a post qualifier.
            </summary>
            <value>
              <c>true</c> if this instance is a post qualifier; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Qualifier.op_BitwiseAnd(Stride.Core.Shaders.Ast.Qualifier,Stride.Core.Shaders.Ast.Qualifier)">
            <summary>
              Implements the operator ==.
            </summary>
            <param name = "left">The left.</param>
            <param name = "right">The right.</param>
            <returns>
              The result of the operator.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Qualifier.op_BitwiseOr(Stride.Core.Shaders.Ast.Qualifier,Stride.Core.Shaders.Ast.Qualifier)">
            <summary>
              Implements the operator |.
            </summary>
            <param name = "left">The left.</param>
            <param name = "right">The right.</param>
            <returns>
              The result of the operator.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Qualifier.op_ExclusiveOr(Stride.Core.Shaders.Ast.Qualifier,Stride.Core.Shaders.Ast.Qualifier)">
            <summary>
              Implements the operator ^.
            </summary>
            <param name = "left">The left.</param>
            <param name = "right">The right.</param>
            <returns>
              The result of the operator.
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.ReturnStatement">
            <summary>
            A return statement.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ReturnStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.ReturnStatement"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ReturnStatement.#ctor(Stride.Core.Shaders.Ast.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.ReturnStatement"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.ReturnStatement.Value">
            <summary>
              Gets or sets the value.
            </summary>
            <value>
              The value.
            </value>
            <remarks>
              If this value is null, return without any expression.
            </remarks>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ReturnStatement.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ReturnStatement.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.ScalarType">
            <summary>
            A Scalar type
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.ScalarType.Bool">
            <summary>
              Scalar bool.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.ScalarType.Double">
            <summary>
              Scalar double.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.ScalarType.Float">
            <summary>
              Sclar float.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.ScalarType.Half">
            <summary>
              Scalar half.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.ScalarType.Int">
            <summary>
              Scalar int.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.ScalarType.UInt">
            <summary>
              Scalar unsigned int.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ScalarType.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.ScalarType" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ScalarType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.ScalarType"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ScalarType.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.ScalarType"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="type">
            The type.
            </param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.ScalarType.Type">
            <summary>
              Gets or sets the type.
            </summary>
            <value>
              The type.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.ScalarType.IsUnsigned">
            <summary>
            Gets a boolean indicating if this scalar is an unsigned type.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ScalarType.Equals(Stride.Core.Shaders.Ast.ScalarType)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">
            The other.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:Stride.Core.Shaders.Ast.ScalarType"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ScalarType.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ScalarType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ScalarType.IsFloat(Stride.Core.Shaders.Ast.TypeBase)">
            <summary>
            Determines whether the specified type is a float/half/double.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the specified type is float/half/double; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ScalarType.IsInteger(Stride.Core.Shaders.Ast.TypeBase)">
            <summary>
            Determines whether the specified type is an integer.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the specified type is an integer; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ScalarType.op_Equality(Stride.Core.Shaders.Ast.ScalarType,Stride.Core.Shaders.Ast.ScalarType)">
            <summary>
              Implements the operator ==.
            </summary>
            <param name = "left">The left.</param>
            <param name = "right">The right.</param>
            <returns>
              The result of the operator.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.ScalarType.op_Inequality(Stride.Core.Shaders.Ast.ScalarType,Stride.Core.Shaders.Ast.ScalarType)">
            <summary>
              Implements the operator !=.
            </summary>
            <param name = "left">The left.</param>
            <param name = "right">The right.</param>
            <returns>
              The result of the operator.
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Shader">
            <summary>
            Toplevel container of a shader parsing result.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Shader.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.Shader" /> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Shader.Declarations">
            <summary>
              Gets or sets the declarations.
            </summary>
            <value>
              The declarations.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Shader.Childrens">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.SourceLocation">
            <summary>
            A Source location.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.SourceLocation.FileSource">
            <summary>
            Filename source.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.SourceLocation.Position">
            <summary>
            Absolute position in the file.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.SourceLocation.Line">
            <summary>
            Line in the file (1-based).
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.SourceLocation.Column">
            <summary>
            Column in the file (1-based).
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.SourceLocation.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.SourceLocation"/> struct.
            </summary>
            <param name="fileSource">The file source.</param>
            <param name="position">The position.</param>
            <param name="line">The line.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.SourceLocation.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.SourceLocation"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="line">The line.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.SourceLocation.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.SourceSpan">
            <summary>
            A SourceSpan.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.SourceSpan.Location">
            <summary>
            Location of this span.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.SourceSpan.Length">
            <summary>
            Length of this span.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.SourceSpan.#ctor(Stride.Core.Shaders.Ast.SourceLocation,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.SourceSpan"/> struct.
            </summary>
            <param name="location">
            The location.
            </param>
            <param name="length">
            The length.
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.SourceSpan.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Statement">
            <summary>
            Base root class for all statements.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Statement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Statement"/> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Statement.Attributes">
            <summary>
            Gets or sets the attributes.
            </summary>
            <value>
            The attributes.
            </value>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.StatementList">
            <summary>
            A list of statement.
            </summary>
            <remarks>
            This class can be use to expand codes as a replacement in visitors.
            </remarks>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.StatementList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.StatementList"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.StatementList.#ctor(Stride.Core.Shaders.Ast.Statement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.StatementList"/> class.
            </summary>
            <param name="statements">The statements.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.StatementList.Count">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.StatementList.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.StatementList.Statements">
            <summary>
            Gets or sets the statements.
            </summary>
            <value>
            The statements.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.StatementList.AddRange(System.Collections.Generic.IEnumerable{Stride.Core.Shaders.Ast.Statement})">
            <summary>
            Adds a collection to this instance.
            </summary>
            <param name="collection">The collection to add to this instance.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.StatementList.GetRange(System.Int32,System.Int32)">
            <summary>
            Gets a subset of this instance
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <returns>A subset of this instance</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.StatementList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Stride.Core.Shaders.Ast.Statement})">
            <summary>
            Inserts a collection at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.StatementList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements.
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.StatementList.RemoveAll(System.Predicate{Stride.Core.Shaders.Ast.Statement})">
            <summary>
            Removes all elements with a predicate function.
            </summary>
            <param name="match">The match.</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.StatementList.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.StatementList.Add(Stride.Core.Shaders.Ast.Statement)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.StatementList.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.StatementList.Contains(Stride.Core.Shaders.Ast.Statement)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.StatementList.CopyTo(Stride.Core.Shaders.Ast.Statement[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.StatementList.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.StatementList.IndexOf(Stride.Core.Shaders.Ast.Statement)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.StatementList.Insert(System.Int32,Stride.Core.Shaders.Ast.Statement)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.StatementList.Remove(Stride.Core.Shaders.Ast.Statement)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.StatementList.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.StatementList.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.StorageQualifier">
            <summary>
            A Storage qualifier.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.StorageQualifier.Const">
            <summary>
              Const qualifier.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.StorageQualifier.Uniform">
            <summary>
              Uniform qualifier.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.StorageQualifier.Parse(System.String)">
            <summary>
            Parses the specified enum name.
            </summary>
            <param name="enumName">
            Name of the enum.
            </param>
            <returns>
            A storage qualifier
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.ClassIdentifierGeneric.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.Stride.ClassIdentifierGeneric" /> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Stride.ClassIdentifierGeneric.Generics">
            <summary>
              Gets or sets the path.
            </summary>
            <value>
              The path.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Stride.ClassIdentifierGeneric.Separator">
            <summary>
            Gets the separator.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.ClassIdentifierGeneric.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.ClassIdentifierGeneric.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.ClassIdentifierGeneric.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.ClassIdentifierGeneric.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Stride.EffectBlock">
            <summary>
            A Shader block.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Stride.EffectBlock.IsPartial">
            <summary>
            Gets or sets a value indicating whether this instance is partial.
            </summary>
            <value><c>true</c> if this instance is partial; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Stride.EffectBlock.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value>The body.</value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.EffectBlock.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.EffectBlock.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Stride.EnumType">
            <summary>
            An enum.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.EnumType.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.Stride.EnumType" /> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Stride.EnumType.Values">
            <summary>
              Gets or sets the fields.
            </summary>
            <value>
              The fields.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.EnumType.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.EnumType.ToString">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.EnumType.Equals(Stride.Core.Shaders.Ast.Stride.EnumType)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.EnumType.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.EnumType.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Stride.ForEachStatement">
            <summary>
            For statement.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.ForEachStatement.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.ForStatement" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.ForEachStatement.#ctor(Stride.Core.Shaders.Ast.Variable,Stride.Core.Shaders.Ast.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Stride.ForEachStatement"/> class.
            </summary>
            <param name="variable">The variable.</param>
            <param name="collection">The collection.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Stride.ForEachStatement.Collection">
            <summary>
              Gets or sets the condition.
            </summary>
            <value>
              The condition.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Stride.ForEachStatement.Variable">
            <summary>
              Gets or sets the initializer.
            </summary>
            <value>
              The initializer.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Stride.ForEachStatement.Body">
            <summary>
              Gets or sets the condition.
            </summary>
            <value>
              The condition.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.ForEachStatement.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.ForEachStatement.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Stride.IGenericStringArgument">
            <summary>
            Interface used to tag generic parameters used as string replacement.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.LinkType.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.Stride.LinkType" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.MemberName.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.Stride.MemberName" /> class.
            </summary>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Stride.MixinStatement">
            <summary>
            A mixin statement.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.MixinStatement.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.Stride.MixinStatement" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.MixinStatement.#ctor(Stride.Core.Shaders.Ast.Stride.MixinStatementType,Stride.Core.Shaders.Ast.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Stride.MixinStatement" /> class.
            </summary>
            <param name="type">The type.</param>
            <param name="mixin">The mixin.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Stride.MixinStatement.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Stride.MixinStatement.Value">
            <summary>
            Gets or sets the target of this mixin.
            </summary>
            <value>The target.</value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.MixinStatement.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.MixinStatement.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Stride.MixinStatementType">
            <summary>
            Type of a mixin.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Stride.MixinStatementType.Default">
            <summary>
            The default mixin (standard mixin).
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Stride.MixinStatementType.Compose">
            <summary>
            The compose mixin used to specifiy a composition.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Stride.MixinStatementType.Child">
            <summary>
            The child mixin used to specifiy a children shader.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Stride.MixinStatementType.Clone">
            <summary>
            The clone mixin to clone the current mixins where the clone is emitted.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Stride.MixinStatementType.Remove">
            <summary>
            The remove mixin to remove a mixin from current mixins.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Stride.MixinStatementType.Macro">
            <summary>
            The macro mixin to declare a variable to be exposed in the mixin
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.NamespaceBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Stride.NamespaceBlock"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.NamespaceBlock.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.TypeBase" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Stride.NamespaceBlock.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value>The body.</value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.NamespaceBlock.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.NamespaceBlock.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Stride.ParametersBlock">
            <summary>
            A params block.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.ParametersBlock.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.Stride.ParametersBlock" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.ParametersBlock.#ctor(Stride.Core.Shaders.Ast.Identifier,Stride.Core.Shaders.Ast.BlockStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Stride.ParametersBlock" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="statements">The statements.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.ParametersBlock.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.ParametersBlock.ToString">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.SemanticType.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.Stride.SemanticType" /> class.
            </summary>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Stride.ShaderClassType">
            <summary>
            Shader Class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.ShaderClassType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Stride.ShaderClassType"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.ShaderClassType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Stride.ShaderClassType"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.ShaderClassType.Childrens">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Stride.ShaderRootClassType">
            <summary>
            Shader Class that supports adding mixin class to its base classes.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.ShaderRootClassType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Stride.ShaderRootClassType"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.ShaderRootClassType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Stride.ShaderRootClassType"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Stride.ShaderTypeName">
            <summary>
            A typeless reference.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.ShaderTypeName.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Stride.ShaderTypeName"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.ShaderTypeName.#ctor(Stride.Core.Shaders.Ast.TypeBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Stride.ShaderTypeName"/> class.
            </summary>
            <param name="typeBase">The type base.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.ShaderTypeName.#ctor(Stride.Core.Shaders.Ast.Identifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Stride.ShaderTypeName"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Stride.StreamsType">
            <summary>
            A State type.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Stride.StreamsType.Constants">
            <summary>
            The constants streams.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Stride.StreamsType.Input">
            <summary>
            The Input streams.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Stride.StreamsType.Input2">
            <summary>
            The Input2 type streams.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Stride.StreamsType.Output">
            <summary>
            The output type streams.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Stride.StreamsType.Streams">
            <summary>
            The streams type streams.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Stride.StreamsType.ThisStreams">
            <summary>
            A fake variable of custom type stream
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.StreamsType.GetStreams">
            <summary>
            Gets the streams.
            </summary>
            <returns>IEnumerable&lt;ObjectType&gt;.</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.StreamsType.Parse(System.String)">
            <summary>
            Parses the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Stride.StrideConstantBufferType.ResourceGroup">
            <summary>
              Resource group keyword (rgroup).
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.StrideConstantBufferType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Stride.StrideStorageQualifier"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.StrideConstantBufferType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Stride.StrideStorageQualifier"/> class.
            </summary>
            <param name="key">
            The key.
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.StrideConstantBufferType.Parse(System.String)">
            <summary>
            Parses the specified enum name.
            </summary>
            <param name="enumName">
            Name of the enum.
            </param>
            <returns>
            A qualifier
            </returns>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Stride.StrideStorageQualifier.Stream">
            <summary>
              Stream keyword (stream).
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Stride.StrideStorageQualifier.PatchStream">
            <summary>
              Patch stream keyword (patchstream).
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Stride.StrideStorageQualifier.Stage">
            <summary>
              Stage keyword (stage).
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Stride.StrideStorageQualifier.Clone">
            <summary>
              Clone keyword (clone).
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Stride.StrideStorageQualifier.Override">
            <summary>
              Override keyword (override).
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Stride.StrideStorageQualifier.Abstract">
            <summary>
              Override keyword (override).
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Stride.StrideStorageQualifier.Compose">
            <summary>
              Compose keyword (compose).
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.Stride.StrideStorageQualifier.Internal">
            <summary>
              Internal keyword (internal).
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.StrideStorageQualifier.Parse(System.String)">
            <summary>
            Parses the specified enum name.
            </summary>
            <param name="enumName">
            Name of the enum.
            </param>
            <returns>
            A qualifier
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Stride.UsingParametersStatement">
            <summary>
            A using params statement.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Stride.UsingParametersStatement.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Stride.UsingParametersStatement.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value>The body.</value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.UsingParametersStatement.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.UsingParametersStatement.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Stride.UsingStatement">
            <summary>
            A using statement.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.UsingStatement.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.Stride.UsingStatement" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.UsingStatement.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.UsingStatement.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Stride.VarType">
            <summary>
            A structure.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Stride.VarType.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.StructType" /> class.
            </summary>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.StructType">
            <summary>
            A structure.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.StructType.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.StructType" /> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.StructType.Fields">
            <summary>
              Gets or sets the fields.
            </summary>
            <value>
              The fields.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.StructType.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.StructType.ToString">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.StructType.Equals(Stride.Core.Shaders.Ast.StructType)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.StructType.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.StructType.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.SwitchCaseGroup">
            <summary>
            A group of cases and default attached to their statements.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.SwitchCaseGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.SwitchCaseGroup"/> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.SwitchCaseGroup.Cases">
            <summary>
              Gets or sets the cases.
            </summary>
            <value>
              The cases.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.SwitchCaseGroup.Statements">
            <summary>
              Gets or sets the statements.
            </summary>
            <value>
              The statements.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.SwitchCaseGroup.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.SwitchCaseGroup.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.SwitchStatement">
            <summary>
            Switch statement.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.SwitchStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.SwitchStatement"/> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.SwitchStatement.Condition">
            <summary>
              Gets or sets the condition.
            </summary>
            <value>
              The condition.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.SwitchStatement.Groups">
            <summary>
              Gets or sets the cases.
            </summary>
            <value>
              The cases.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.SwitchStatement.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.SwitchStatement.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.TypeBase">
            <summary>
            Base type for all types.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.TypeBase.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.TypeBase" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.TypeBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.TypeBase"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.TypeBase.#ctor(Stride.Core.Shaders.Ast.Identifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.TypeBase"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.TypeBase.Attributes">
            <summary>
              Gets or sets the attributes.
            </summary>
            <value>
              The attributes.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.TypeBase.TypeInference">
            <summary>
            Gets or sets the resolved reference.
            </summary>
            <value>
            The resolved reference.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.TypeBase.Name">
            <summary>
              Gets or sets the type name.
            </summary>
            <value>
              The type name.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.TypeBase.Qualifiers">
            <summary>
              Gets or sets the qualifiers.
            </summary>
            <value>
              The qualifiers.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.TypeBase.IsBuiltIn">
            <summary>
            Gets or sets a value indicating whether this instance is built in.
            </summary>
            <value>
            	<c>true</c> if this instance is built in; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.TypeBase.ResolveType">
            <summary>
            Resolves the type.
            </summary>
            <returns>
            The resolved type.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.TypeBase.CreateWithBaseType(Stride.Core.Shaders.Ast.TypeBase,Stride.Core.Shaders.Ast.ScalarType)">
            <summary>
            Creates a type based on a new base type. If type is a matrix or vector, then the base type is changed to match the newBaseType.
            </summary>
            <param name="type">The type.</param>
            <param name="newBaseType">New type of the base.</param>
            <returns>A new type</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.TypeBase.Equals(Stride.Core.Shaders.Ast.TypeBase)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">
            The other.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:Stride.Core.Shaders.Ast.TypeBase"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.TypeBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.TypeBase.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.TypeBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.TypeBase.op_Equality(Stride.Core.Shaders.Ast.TypeBase,Stride.Core.Shaders.Ast.TypeBase)">
            <summary>
              Implements the operator ==.
            </summary>
            <param name = "left">The left.</param>
            <param name = "right">The right.</param>
            <returns>
              The result of the operator.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.TypeBase.op_Inequality(Stride.Core.Shaders.Ast.TypeBase,Stride.Core.Shaders.Ast.TypeBase)">
            <summary>
              Implements the operator !=.
            </summary>
            <param name = "left">The left.</param>
            <param name = "right">The right.</param>
            <returns>
              The result of the operator.
            </returns>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.TypeBase.Void">
            <summary>
              Scalar void. TODO this is not a scalar!
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.TypeBase.String">
            <summary>
              Scalar void. TODO this is not a scalar!
            </summary>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.TypeInference">
            <summary>
            A reference to a type.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.TypeInference.Declaration">
            <summary>
            Gets or sets the declaration.
            </summary>
            <value>
            The declaration.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.TypeInference.TargetType">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.TypeInference.ExpectedType">
            <summary>
            Gets or sets the expected type.
            </summary>
            <value>
            The expected type.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.TypeInference.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.TypeName">
            <summary>
            A typeless reference.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.TypeName.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.TypeName"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.TypeName.#ctor(Stride.Core.Shaders.Ast.TypeBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.TypeName"/> class.
            </summary>
            <param name="typeBase">The type base.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.TypeName.#ctor(Stride.Core.Shaders.Ast.Identifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.TypeName"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.TypeReferenceExpression">
            <summary>
            A reference to a variable.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.TypeReferenceExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.TypeReferenceExpression"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.TypeReferenceExpression.#ctor(Stride.Core.Shaders.Ast.TypeBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.TypeReferenceExpression"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.TypeReferenceExpression.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.TypeReferenceExpression.Declaration">
            <summary>
            Gets or sets the declaration.
            </summary>
            <value>
            The declaration.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.TypeReferenceExpression.Childrens">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.TypeReferenceExpression.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.UnaryExpression">
            <summary>
            A unary expression.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.UnaryExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.UnaryExpression"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.UnaryExpression.#ctor(Stride.Core.Shaders.Ast.UnaryOperator,Stride.Core.Shaders.Ast.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.UnaryExpression"/> class.
            </summary>
            <param name="operator">The @operator.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.UnaryExpression.Operator">
            <summary>
            Gets or sets the operator.
            </summary>
            <value>
            The operator.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.UnaryExpression.Expression">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>
            The expression.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.UnaryExpression.Childrens">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.UnaryExpression.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.UnaryOperator">
            <summary>
            Unary operator used in all binary expressions (except assignment expression).
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.UnaryOperator.LogicalNot">
            <summary>
            Logical not operator "!"
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.UnaryOperator.BitwiseNot">
            <summary>
            Bitwise not operator "~"
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.UnaryOperator.Minus">
            <summary>
            Minus operator "-"
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.UnaryOperator.Plus">
            <summary>
            Plus operator "+"
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.UnaryOperator.PreDecrement">
            <summary>
            Pre-decrement operator "--"
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.UnaryOperator.PreIncrement">
            <summary>
            Pre-inscrment operator "++"
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.UnaryOperator.PostDecrement">
            <summary>
            Post-decrement operator "--"
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.UnaryOperator.PostIncrement">
            <summary>
            Post-increment operator "++"
            </summary>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.UnaryOperatorHelper">
            <summary>
            Helper for <see cref="T:Stride.Core.Shaders.Ast.UnaryOperator"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.UnaryOperatorHelper.FromString(System.String)">
            <summary>
            Converts from string an operator. For post and pre operators, only working for pre.
            </summary>
            <param name="operatorStr">The operator text.</param>
            <exception cref="T:System.ArgumentException">If operatorStr is invalid</exception>
            <returns>An unary operator</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.UnaryOperatorHelper.IsPostFix(Stride.Core.Shaders.Ast.UnaryOperator)">
            <summary>
            Determines whether [is post fix] [the specified unary operator].
            </summary>
            <param name="unaryOperator">The unary operator.</param>
            <returns>
              <c>true</c> if [is post fix] [the specified unary operator]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.UnaryOperatorHelper.ConvertToString(Stride.Core.Shaders.Ast.UnaryOperator)">
            <summary>
            Converts from operator to string
            </summary>
            <param name="unaryOperator">The unary operator.</param>
            <returns>
            A string representation of an unary operator
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.Variable">
            <summary>
            A variable declaration.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Variable.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.Variable" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Variable.#ctor(Stride.Core.Shaders.Ast.TypeBase,System.String,Stride.Core.Shaders.Ast.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.Variable"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <param name="initialValue">The initial value.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Variable.Attributes">
            <inheritdoc />
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Variable.Qualifiers">
            <summary>
            Gets or sets the qualifiers.
            </summary>
            <value>
            The qualifiers.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Variable.Type">
            <summary>
              Gets or sets the type.
            </summary>
            <value>
              The type.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Variable.InitialValue">
            <summary>
              Gets or sets the initial value.
            </summary>
            <value>
              The initial value.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Variable.Name">
            <summary>
              Gets or sets the name.
            </summary>
            <value>
              The name.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Variable.SubVariables">
            <summary>
            Gets or sets the sub variables (used only for variable group)
            </summary>
            <value>
            The sub variables inside this group.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.Variable.IsGroup">
            <summary>
            Gets a value indicating whether this instance is group.
            </summary>
            <value>
              <c>true</c> if this instance is group; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Variable.Instances">
            <summary>
            Returns single variable instances.
            </summary>
            <returns>An enumeration of single variable instances</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Variable.MergeFrom(Stride.Core.Shaders.Ast.Variable)">
            <summary>
            Merges attributes and qualifiers from another variable.
            </summary>
            <param name="from">The variable to merge attribute from.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Variable.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Variable.ToString">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.Variable.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Ast.VariableReferenceExpression">
            <summary>
            A reference to a variable.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.VariableReferenceExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.VariableReferenceExpression"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.VariableReferenceExpression.#ctor(Stride.Core.Shaders.Ast.Variable)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.VariableReferenceExpression"/> class.
            </summary>
            <param name="variable">The variable.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.VariableReferenceExpression.#ctor(Stride.Core.Shaders.Ast.Identifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.VariableReferenceExpression"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.VariableReferenceExpression.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.VariableReferenceExpression.Childrens">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.VariableReferenceExpression.GetVariableName(Stride.Core.Shaders.Ast.Expression)">
            <summary>
            Gets a name of the variable referenced by an expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>Name of the variable referenced. If the expression is not a VariableReferenceExpression, returns null</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.VariableReferenceExpression.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.VectorType">
            <summary>
            Base class for all vector types
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.VectorType.Int2">
            <summary>
            A Int2
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.VectorType.Int3">
            <summary>
            A Int3
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.VectorType.Int4">
            <summary>
            A Int4
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.VectorType.UInt2">
            <summary>
            A UInt2
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.VectorType.UInt3">
            <summary>
            A UInt3
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.VectorType.UInt4">
            <summary>
            A UInt4
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.VectorType.Float2">
            <summary>
            A Float2
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.VectorType.Float3">
            <summary>
            A Float3
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.VectorType.Float4">
            <summary>
            A Float4
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.VectorType.Double2">
            <summary>
            A Double2
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.VectorType.Double3">
            <summary>
            A Double3
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.VectorType.Double4">
            <summary>
            A Double4
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.VectorType.Half2">
            <summary>
            A Half2
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.VectorType.Half3">
            <summary>
            A Half3
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Ast.VectorType.Half4">
            <summary>
            A Half4
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.VectorType.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Ast.VectorType" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.VectorType.#ctor(Stride.Core.Shaders.Ast.ScalarType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Ast.VectorType"/> class.
            </summary>
            <param name="type">
            The type.
            </param>
            <param name="dimension">
            The dimension.
            </param>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.VectorType.Dimension">
            <summary>
              Gets or sets the dimension.
            </summary>
            <value>
              The dimension.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.VectorType.Type">
            <summary>
              Gets or sets the type.
            </summary>
            <value>
              The type.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.VectorType.Equals(Stride.Core.Shaders.Ast.VectorType)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.VectorType.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.VectorType.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.VectorType.op_Equality(Stride.Core.Shaders.Ast.VectorType,Stride.Core.Shaders.Ast.VectorType)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.VectorType.op_Inequality(Stride.Core.Shaders.Ast.VectorType,Stride.Core.Shaders.Ast.VectorType)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.VisitorIgnoreAttribute">
            <summary>
            Instruct a <see cref="T:Stride.Core.Shaders.Visitor.ShaderVisitor"/> to ignore a field
            </summary>
        </member>
        <member name="T:Stride.Core.Shaders.Ast.WhileStatement">
            <summary>
            While and Do-While statement.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.WhileStatement.Condition">
            <summary>
              Gets or sets the condition.
            </summary>
            <value>
              The condition.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.WhileStatement.IsDoWhile">
            <summary>
              Gets or sets a value indicating whether this instance is a do while.
            </summary>
            <value>
              <c>true</c> if this instance is a do while; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Ast.WhileStatement.Statement">
            <summary>
              Gets or sets the statement.
            </summary>
            <value>
              The statement.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Ast.WhileStatement.Childrens">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Ast.WhileStatement.ToString">
            <inheritdoc />
        </member>
        <member name="F:Stride.Core.Shaders.Convertor.BreakContinueVisitor.parserResult">
            <summary>
            the logger
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Convertor.BreakContinueVisitor.keyword">
            <summary>
            the keyword to look after
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Convertor.BreakContinueVisitor.scopeList">
            <summary>
            list of the "scopes" ie. where a break/continue test has to be performed
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Convertor.BreakContinueVisitor.containerStack">
            <summary>
            current stack of "scopes"
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.BreakContinueVisitor.TransformBreaks(Stride.Core.Shaders.Ast.Variable)">
            <summary>
            Inserts the break variable in the flow of the loop
            </summary>
            <param name="breakFlag">the break variable</param>
        </member>
        <member name="T:Stride.Core.Shaders.Convertor.ConstantBufferLayoutRule">
            <summary>
            A single map rule.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.ConstantBufferLayoutRule.Register">
            <summary>
            Gets or sets from name.
            </summary>
            <value>
            From name.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.ConstantBufferLayoutRule.Binding">
            <summary>
            Gets or sets the binding.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.ConstantBufferLayoutRule.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Convertor.GlobalUniformVisitor">
            <summary>
            Collect a list of global uniforms that are used as global temporary variable.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.GlobalUniformVisitor.#ctor(Stride.Core.Shaders.Ast.Shader)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Convertor.GlobalUniformVisitor"/> class.
            </summary>
            <param name="shader">The shader.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.GlobalUniformVisitor.UniformUsedWriteFirstList">
            <summary>
            Gets a list of uniform that are used as "write" variable first.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.GlobalUniformVisitor.UniformReadWriteList">
            <summary>
            Gets a list of uniform that are used as "read" and "write" variable.
            </summary>
        </member>
        <member name="T:Stride.Core.Shaders.Convertor.GlslKeywords">
            <summary>
            GlslKeywords
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Convertor.GlslKeywords.KeywordsFileName">
            <summary>
            Name of the default keywords.glsl file
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Convertor.GlslKeywords.StripComments">
            <summary>
            Regex to remove pseudo C++ comments
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Convertor.GlslKeywords.Tokens">
            <summary>
            Regsitered tokens
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.GlslKeywords.#cctor">
            <summary>
            Initializes the <see cref="T:Stride.Core.Shaders.Convertor.GlslKeywords"/> class by loading the keywords file.
            </summary>
            <remarks>
            It loads it from an internal resource of this assembly.
            </remarks>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.GlslKeywords.InitializeFromStream(System.IO.Stream)">
            <summary>
            Initializes the tokens from a stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.GlslKeywords.IsReserved(System.String)">
            <summary>
            Determines whether the specified identifier is a glsl reserved keyword.
            </summary>
            <param name="identifier">A glsl identifier.</param>
            <returns>
              <c>true</c> if the specified identifier is a glsl reserved keyword; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:Stride.Core.Shaders.Convertor.GlslShaderPlatform.OpenGL">
            <summary>
            GLSL OpenGL Shader.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Convertor.GlslShaderPlatform.OpenGLES">
            <summary>
            GLSL OpenGL ES Shader.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Convertor.GlslShaderPlatform.Vulkan">
            <summary>
            GLSL Vulkan Shader.
            </summary>
        </member>
        <member name="T:Stride.Core.Shaders.Convertor.HlslToGlslConvertor">
            <summary>
            HLSL to GLSL conversion requires several steps:
            - Replace input/output structure access by varying variables.
            - Replace common types such as float4 =&gt; vec4.
            - Change main signature.
            - Convert return statements into GLSL out assignments.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.#ctor(Stride.Core.Shaders.Convertor.GlslShaderPlatform,System.Int32,System.String,Stride.Core.Shaders.Convertor.PipelineStage,Stride.Core.Shaders.Convertor.ShaderModel,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Convertor.HlslToGlslConvertor" /> class.
            </summary>
            <param name="entryPointName">Name of the entry point.</param>
            <param name="pipelineStage">The pipeline stage.</param>
            <param name="shaderModel">The shader model.</param>
            <param name="useBuiltinSemantic">if set to <c>true</c> [use builtin semantic].</param>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.ViewFrustumRemap">
            <summary>
            Gets or sets a value indicating wether Z projection coordinates will be remapped from [0;1] to [-1;1] at end of vertex shader.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.FlipRenderTarget">
            <summary>
            Gets or sets a value indicating wether Y projection will be inverted at end of vertex shader.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.IsPointSpriteShader">
            <summary>
            Gets or sets a value indicating whether this instance is point sprite shader.
            </summary>
            <value>
            <c>true</c> if this instance is point sprite shader; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.NoSwapForBinaryMatrixOperation">
            <summary>
            Gets or sets a value indicating whether [no fix for mul for matrix].
            </summary>
            <value>
            <c>true</c> if [no fix for mul for matrix]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.UseBindingLayout">
            <summary>
            Gets or sets a value indicating whether [no implicit layout].
            </summary>
            <value>
            <c>true</c> if [no implicit layout]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.UseBuiltinSemantic">
            <summary>
            Gets or sets a value indicating whether [use builtin semantic].
            </summary>
            <value>
            <c>true</c> if [use builtin semantic]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.UseLocationLayout">
            <summary>
            Gets or sets a value indicating whether [use explicit layout position].
            </summary>
            <value>
            <c>true</c> if [use explicit layout position]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.UseOnlyTextureName">
            <summary>
            Gets or sets a value indicating whether texture name will be [texture] or [texture]_[sampler] for DX10 texture objects conversion.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.UseSemanticForVariable">
            <summary>
            Gets or sets a value indicating whether [use semantic name].
            </summary>
            <value>
            <c>true</c> if [use semantic name]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.UseSemanticForLocation">
            <summary>
            Gets or sets a value indicating whether [use semantic for location].
            </summary>
            <value>
            <c>true</c> if [use semantic for location]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.UseInterfaceForInOut">
            <summary>
            Gets or sets a value indicating whether [use interface for in out].
            </summary>
            <value><c>true</c> if [use interface for in out]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.VariableLayouts">
            <summary>
            Gets the map config.
            </summary>
            <value>
            The map config.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.ConstantBufferLayouts">
            <summary>
            Gets the constant buffer layouts.
            </summary>
            <value>
            The constant buffer layouts.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.MapRules">
            <summary>
            Gets or sets the map rules.
            </summary>
            <value>
            The map rules.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.KeepUniformArrayInitializers">
            <summary>
            Gets or sets a value indicating whether to keep array initializers for uniforms.
            </summary>
            <value>
            true if keep uniform array initializers, false if not.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.TextureFunctionsCompatibilityProfile">
            <summary>
            Gets or sets a flag specifying whether compatibility profile is used for texture functions.
            As an example, with compatibility on, texture() might become texture2D().
            </summary>
            <value>
            true if texture compatibility profile is enabled, false if not.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.KeepConstantBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.KeepNonUniformArrayInitializers">
            <summary>
            Gets or sets a value indicating whether to keep array initializers.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.UnrollForLoops">
            <summary>
            Gets or sets a value indicating whether to unroll the loops with the [unroll] annotation.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.CurrentFunction">
            <summary>
            Gets or sets the current function being parsed.
            </summary>
            <value>
            The current function.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.IsInEntryPoint">
            <summary>
            Gets a value indicating whether this instance is in entry point.
            </summary>
            <value>
            <c>true</c> if this instance is in entry point; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.Prepare(Stride.Core.Shaders.Ast.Shader)">
            <summary>
            Prepares the specified shader for glsl to hlsl conversion (before type inference analysis).
            </summary>
            <param name="shader">
            The shader.
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.Run(Stride.Core.Shaders.Parser.ParsingResult)">
            <summary>
            Runs the convertor on the specified parser result.
            </summary>
            <param name="parserResultIn">The parser result.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.Visit(Stride.Core.Shaders.Ast.Variable)">
            <summary>
            Visits the specified variable.
            </summary>
            <param name="variable">
            The variable.
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.Visit(Stride.Core.Shaders.Ast.MethodDefinition)">
            <summary>
            Visits the specified function.
            </summary>
            <param name="function">The function.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.PrepareVisitEntryPoint(Stride.Core.Shaders.Ast.MethodDefinition)">
            <summary>
            Prepares the visit of entry point.
            </summary>
            <param name="function">The entry point function.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.PostVisitEntryPoint(Stride.Core.Shaders.Ast.MethodDefinition)">
            <summary>
            Visits the entry point.
            </summary>
            <param name="function">The entry point function.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.Visit(Stride.Core.Shaders.Ast.Hlsl.CastExpression)">
            <summary>
            Visits the specified cast expression.
            </summary>
            <param name="castExpression">The cast expression.</param>
            <returns>A transformed cast expression</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.Visit(Stride.Core.Shaders.Ast.ExpressionStatement)">
            <summary>
            Visits the specified statement.
            </summary>
            <param name="statement">The statement.</param>
            <returns>A transformed statement</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.VisitStatementAsFunctionInvocation(Stride.Core.Shaders.Ast.ExpressionStatement,Stride.Core.Shaders.Ast.MethodInvocationExpression,Stride.Core.Shaders.Ast.VariableReferenceExpression)">
            <summary>
            Visits a statement that is a function invocation.
            </summary>
            <param name="statement">The statement.</param>
            <param name="methodInvocationExpression">The function invocation expression.</param>
            <param name="methodVar">The name of the function.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.VisitStatementAsMemberInvocation(Stride.Core.Shaders.Ast.Statement,Stride.Core.Shaders.Ast.MethodInvocationExpression,Stride.Core.Shaders.Ast.MemberReferenceExpression)">
            <summary>
            Visits a statement that is a member invocation.
            </summary>
            <param name="statement">The statement.</param>
            <param name="methodInvocationExpression">The method invocation expression.</param>
            <param name="memberReferenceExpression">The member reference expression.</param>
            <returns>A new statement if handled, null otherwise</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.Visit(Stride.Core.Shaders.Ast.MethodInvocationExpression)">
            <summary>
            Visits the specified method invocation expression.
            </summary>
            <param name="methodInvocationExpression">The method invocation expression.</param>
            <returns>
            A transformed method invocation expression.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.Visit(Stride.Core.Shaders.Ast.ConditionalExpression)">
            <summary>
            Visits the specified conditional expression.
            </summary>
            <param name="conditionalExpression">The conditional expression.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.Visit(Stride.Core.Shaders.Ast.Hlsl.ConstantBuffer)">
            <summary>
            Visits the specified constant buffer.
            </summary>
            <param name="constantBuffer">The constant buffer.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.Visit(Stride.Core.Shaders.Ast.VariableReferenceExpression)">
            <summary>
            Visits the specified var ref expr.
            </summary>
            <param name="varRefExpr">The var ref expr.</param>
            <returns>A transformed expression.</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.Visit(Stride.Core.Shaders.Ast.IfStatement)">
            <summary>
            Visits the specified if statement.
            </summary>
            <param name="ifStatement">If statement.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.Visit(Stride.Core.Shaders.Ast.ForStatement)">
            <summary>
            Visit the for statement and unroll it if necessary
            </summary>
            <param name="forStatement"></param>
            <returns></returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.GetStartForStatement(Stride.Core.Shaders.Ast.ForStatement,System.Int32@)">
            <summary>
            Get the Variable used 
            </summary>
            <param name="forStatement">the for statement</param>
            <param name="startValue">the start value of the loop, to fill</param>
            <returns>the variable</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.GetIterCountForStatement(Stride.Core.Shaders.Ast.ForStatement,System.String,System.Int32)">
            <summary>
            Get the number of loops
            </summary>
            <param name="forStatement">the for statement</param>
            <param name="variableName">the name of the iterator variable</param>
            <param name="startValue">the start value of the iterator</param>
            <returns>the number of loops</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.Visit(Stride.Core.Shaders.Ast.MemberReferenceExpression)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>A transformed expression</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.Visit(Stride.Core.Shaders.Ast.ArrayInitializerExpression)">
            <summary>
            Visits the specified array creation expression.
            </summary>
            <param name="arrayCreationExpression">The array creation expression.</param>
            <returns>A transformed expression</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.Visit(Stride.Core.Shaders.Ast.AssignmentExpression)">
            <summary>
            Visits the specified assign expression.
            </summary>
            <param name="assignExpression">The assign expression.</param>
            <returns>A transformed expression</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.Visit(Stride.Core.Shaders.Ast.Hlsl.Technique)">
            <summary>
            Visits the specified technique.
            </summary>
            <param name="technique">The technique.</param>
            <returns>The technique</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.Visit(Stride.Core.Shaders.Ast.BinaryExpression)">
            <summary>
            Visits the specified binary expression.
            </summary>
            <param name="binaryExpression">The binary expression.</param>
            <returns>A transformed binary expression.</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.Visit(Stride.Core.Shaders.Ast.ReturnStatement)">
            <summary>
            Visits the specified return statement.
            </summary>
            <param name="returnStatement">The return statement.</param>
            <returns>A transformed return statement.</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.Visit(Stride.Core.Shaders.Ast.StatementList)">
            <summary>
            Visits the specified statement list.
            </summary>
            <param name="statementList">The statement list.</param>
            <returns>
            A transformed statement list.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.Visit(Stride.Core.Shaders.Ast.IndexerExpression)">
            <summary>
            Visits the specified indexer expression.
            </summary>
            <param name="indexerExpression">The indexer expression.</param>
            <returns>A transformed indexer expression</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.Visit(Stride.Core.Shaders.Ast.Shader)">
            <summary>
            Visits the specified shader.
            </summary>
            <param name="shader">The shader.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.Visit(Stride.Core.Shaders.Ast.ParenthesizedExpression)">
            <summary>
            Visits the specified parenthesized expression.
            </summary>
            <param name="parenthesizedExpression">The parenthesized expression.</param>
            <returns>A transformed expression.</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.SplitTypeDefs">
            <summary>
            Splits typedefs declaration when a struct inline is used as the type
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.AllocateNewBinding(System.Boolean[],System.Int32,System.Int32)">
            <summary>
            Allocates the new binding.
            </summary>
            <param name="allocatedRegisters">
            The allocated registers.
            </param>
            <param name="startingIndex">
            Index of the starting.
            </param>
            <param name="sizeOfAllocation">
            The size of allocation.
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.ConvertToSafeExpressionForBinary(Stride.Core.Shaders.Ast.Expression)">
            <summary>
            Converts to specified expression to a safe expression for binary operation.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <returns>
            If the expression was a binary expression, then it is embraced by a <see cref="T:Stride.Core.Shaders.Ast.ParenthesizedExpression"/>
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.FindAvailableBinding(System.Boolean[],System.Int32,System.Int32)">
            <summary>
            Finds the available binding.
            </summary>
            <param name="allocatedRegisters">
            The allocated registers.
            </param>
            <param name="startingIndex">
            Index of the starting.
            </param>
            <param name="sizeOfAllocation">
            The size of allocation.
            </param>
            <returns>
            The find available binding.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.IsUniformLike(Stride.Core.Shaders.Ast.Variable)">
            <summary>
            Determines whether the specified variable is an uniform like.
            </summary>
            <param name="variable">
            The variable.
            </param>
            <returns>
            <c>true</c> if the specified variable is an uniform like; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.ParseSemantic(System.String)">
            <summary>
            Convert semantic string into a (semantic, semanticIndex) pair.
            </summary>
            <param name="semantic">
            The semantic.
            </param>
            <returns>
            A KeyvalueParis semantic -&gt; location
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.AddExplicitLayout(Stride.Core.Shaders.Ast.Variable)">
            <summary>
            Adds the explicit layout.
            </summary>
            <param name="variable">
            The variable.
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.AddExplicitLayout(Stride.Core.Shaders.Ast.Hlsl.ConstantBuffer)">
            <summary>
            Adds the explicit layout for a constant buffer.
            </summary>
            <param name="cBuffer">The variable.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.AddGlobalDeclaration``1(``0,System.Boolean)">
            <summary>
            Adds the global declaration.
            </summary>
            <typeparam name="T">
            Type of the declaration
            </typeparam>
            <param name="declaration">
            The declaration.
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.AddImplicitLayout(Stride.Core.Shaders.Ast.Variable)">
            <summary>
            Adds the implicit layout.
            </summary>
            <param name="variable">
            The variable.
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.BindLocation(Stride.Core.Shaders.Ast.Hlsl.Semantic,Stride.Core.Shaders.Ast.TypeBase,System.Boolean,System.String,System.Int32@,Stride.Core.Shaders.Ast.SourceSpan)">
            <summary>
            Binds the location.
            </summary>
            <param name="semantic">The semantic.</param>
            <param name="typebase">The typebase.</param>
            <param name="isInput">if set to <c>true</c> [is input].</param>
            <param name="defaultName">The default name.</param>
            <param name="location">The location.</param>
            <returns>
            A variable
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.CalculateGlslPrefix(Stride.Core.Shaders.Ast.ScalarType)">
            <summary>
            Calculates the GLSL prefix.
            </summary>
            <param name="type">
            The type.
            </param>
            <returns>
            The prefix of the glsl variable
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.CheckCastMethod(Stride.Core.Shaders.Ast.MethodInvocationExpression)">
            <summary>
            Checks a cast method.
            </summary>
            <param name="methodInvocationExpression">
            The method invocation expression.
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.ConvertCondition(Stride.Core.Shaders.Ast.Expression)">
            <summary>
            Converts the condition.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <returns>
            A converted expression
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.ConvertReturn(Stride.Core.Shaders.Ast.Expression,System.Boolean,System.Nullable{Stride.Core.Shaders.Ast.SourceSpan})">
            <summary>
            This helper function will transform a "return X;" statement into a list of assignment for each semantic and a "return;".
            </summary>
            <param name="returnValueExpression">
            The expression.
            </param>
            <param name="emitReturn">
            if set to <c>true</c> [emit return].
            </param>
            <returns>
            A statement used to replace the return statement
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.FindTypeByName(System.String)">
            <summary>
            Finds the name of the type by its name.
            </summary>
            <param name="name">
            The name.
            </param>
            <returns>
            A type
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.FindVariableLayoutBySemantic(System.String)">
            <summary>
            Finds the vertex layout rule by semantic name.
            </summary>
            <param name="name">
            The name.
            </param>
            <returns>
            A <see cref="T:Stride.Core.Shaders.Convertor.VariableLayoutRule"/>
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.FindConstantBufferLayoutByRegister(System.String)">
            <summary>
            Finds the vertex layout rule by semantic name.
            </summary>
            <param name="name">
            The name.
            </param>
            <returns>
            A <see cref="T:Stride.Core.Shaders.Convertor.VariableLayoutRule"/>
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.FlattenArrayCreationExpression(Stride.Core.Shaders.Ast.ArrayInitializerExpression,System.Collections.Generic.List{Stride.Core.Shaders.Ast.Expression})">
            <summary>
            Flattens the array creation expression.
            </summary>
            <param name="from">
            The source array that could be composed of inner array creation expression.
            </param>
            <param name="to">
            The destination array that will receive all flattened values
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.GetGLSampler(Stride.Core.Shaders.Ast.Variable,Stride.Core.Shaders.Ast.Variable,System.Boolean)">
            <summary>
            Gets the GL sampler associated with a sampler and a texture.
            </summary>
            <param name="sampler">The sampler.</param>
            <param name="texture">The texture.</param>
            <param name="forceNullSampler">if set to <c>true</c> [force null sampler] to match.</param>
            <returns>
            The variable associated with the sampler and the texture
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.GetNumberOfFloat4FromVariable(Stride.Core.Shaders.Ast.TypeBase)">
            <summary>
            Gets the number of float4 from a type.
            </summary>
            <param name="typeOfVar">
            The type.
            </param>
            <returns>
            Number of float4 from a type
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.GetVariableFromSemantic(Stride.Core.Shaders.Ast.Hlsl.Semantic,Stride.Core.Shaders.Ast.TypeBase,System.Boolean,System.String,Stride.Core.Shaders.Ast.SourceSpan)">
            <summary>
            Gets the variable from semantic.
            </summary>
            <param name="semantic">
            The semantic.
            </param>
            <param name="type">
            The type.
            </param>
            <param name="isInput">
            if set to <c>true</c> [is input].
            </param>
            <param name="varName">
            Name of the var.
            </param>
            <returns>
            The variable associated with a semantic
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.GetTagLayout(Stride.Core.Shaders.Ast.Node,System.String)">
            <summary>
            Gets the variable tag.
            </summary>
            <param name="node">The variable.</param>
            <param name="alias">The alias name (semantic or register).</param>
            <returns>
            The tag associated with a variable
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.RebindVariableReferenceExpressions">
            <summary>
            Rebinds all VariableReferenceExpression to the final name.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.RemoveDefaultParametersForMethods">
            <summary>
            Removes the default parameters for methods.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.RemapCoordinates(Stride.Core.Shaders.Ast.StatementList)">
            <summary>
            If requested, Z projection coordinates will be remapped from [0;1] to [-1;1] at end of vertex shader.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.RenameGlslKeywords">
            <summary>
            Renames all declaration that are using a GLSL keywords.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.ResolveSemantic(Stride.Core.Shaders.Ast.Hlsl.Semantic,Stride.Core.Shaders.Ast.TypeBase,System.Boolean,System.String,Stride.Core.Shaders.Ast.TypeBase@,System.Int32@,Stride.Core.Shaders.Ast.SourceSpan)">
            <summary>
            Resolves the HLSL semantic into GLSL one for a given uniform.
            It will also adds the varying to the GLSL shader the first time it is found.
            </summary>
            <param name="rawSemantic">The raw semantic.</param>
            <param name="type">The type.</param>
            <param name="isInput">if set to <c>true</c> input, otherwise output.</param>
            <param name="varName">Name of the var.</param>
            <returns>A semantic transformed</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.TranformToGlslTypes">
            <summary>
            Tranforms to GLSL types.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.TransformArrayDimensions">
            <summary>
            Transforms all variable declared with a multidimensional array to a single dimension.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.ConvertArrayInitializer(Stride.Core.Shaders.Ast.ArrayType,Stride.Core.Shaders.Ast.ArrayInitializerExpression)">
            <summary>
            Converts an HLSL array initializer to a GLSL array initializer. 
            Example: 
            HLSL float[4] test = {1,2,3,4}; 
            GLSL float[4] test = float[](1,2,3,4);
            </summary>
            <param name="arrayType">Type of the array.</param>
            <param name="arrayInitializer">The array initializer.</param>
            <returns>A converted array</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.ConvertMatrixInitializer(Stride.Core.Shaders.Ast.MatrixType,System.Collections.Generic.List{Stride.Core.Shaders.Ast.Expression})">
            <summary>
            Converts an HLSL matrix initializer to a GLSL matrix initializer.
            </summary>
            <param name="matrixType">Type of the matrix.</param>
            <param name="initializers">The initializers.</param>
            <returns>
            A converted matrix
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.TransformGlobalMultipleVariableToSingleVariable">
            <summary>
            Transforms the global multiple variable to single variable.
            </summary>
        </member>
        <member name="T:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.TagLayout">
            <summary>
            A Tag associated to a variable
            </summary>
        </member>
        <member name="T:Stride.Core.Shaders.Convertor.HlslToGlslConvertor.QualifierComparer">
            <summary>
            Sort qualifiers: layout(xx) first, then others (out, int, etc...)
            </summary>
        </member>
        <member name="T:Stride.Core.Shaders.Convertor.HlslToGlslWriter">
            <summary>
            A writer for a shader.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslWriter.#ctor(Stride.Core.Shaders.Convertor.GlslShaderPlatform,System.Int32,Stride.Core.Shaders.Convertor.PipelineStage,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Writer.Hlsl.HlslWriter"/> class. 
            </summary>
            <param name="useNodeStack">
            if set to <c>true</c> [use node stack].
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslWriter.Visit(Stride.Core.Shaders.Ast.Shader)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslWriter.Visit(Stride.Core.Shaders.Ast.Literal)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslWriter.Visit(Stride.Core.Shaders.Ast.Glsl.InterfaceType)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.Annotations)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.ClassType)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.InterfaceType)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.AsmExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.ConstantBuffer)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.Typedef)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.AttributeDeclaration)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.CastExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.Technique)">
            <summary>
            Visits the specified technique.
            </summary>
            <param name="technique">The technique.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.StateInitializer)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.StateExpression)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.Semantic)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.PackOffset)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.RegisterLocation)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslToGlslWriter.Visit(Stride.Core.Shaders.Ast.Glsl.LayoutQualifier)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.HlslTypes.GetType(System.String)">
            <summary>
            Gets the type.
            </summary>
            <param name="type">The type.</param>
            <returns>A Typedeclaration and dimensions</returns>
        </member>
        <member name="T:Stride.Core.Shaders.Convertor.MapRule">
            <summary>
            A map rule for types.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.MapRule.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.MapRule.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.MapRule.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Convertor.PipelineStage">
            <summary>
            Enum to specify pipeline stage.
            </summary>
        </member>
        <member name="T:Stride.Core.Shaders.Convertor.PipelineStageHelper">
            <summary>
            Helper functions for <see cref="T:Stride.Core.Shaders.Convertor.PipelineStage"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.PipelineStageHelper.FromString(System.String)">
            <summary>
            Parse a pipeline stage from string.
            </summary>
            <param name="stage">The stage in string form.</param>
            <exception cref="T:System.ArgumentException">If stage string is an invalid string.</exception>
            <returns>A PipelineStage value.</returns>
        </member>
        <member name="T:Stride.Core.Shaders.Convertor.SamplerMappingVisitor">
            <summary>
            Collect the texture and sampler pair used in the HLSL shader.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.SamplerMappingVisitor.TextureFunctionsCompatibilityProfile">
            <summary>
            Gets or sets a flag specifying whether compatibility profile is used for texture functions.
            As an example, with compatibility on, texture() might become texture2D().
            </summary>
            <value>
            true if texture compatibility profile is enabled, false if not.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.SamplerMappingVisitor.GenerateGLSampler(Stride.Core.Shaders.Ast.Variable,Stride.Core.Shaders.Ast.Variable,System.Boolean)">
            <summary>
            Generates a OpenGL sampler based on sampler/texture combination.
            </summary>
            <param name="sampler">The D3D sampler (can be null).</param>
            <param name="texture">The D3D texture.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.SamplerMappingVisitor.ParseTexFetch(System.String)">
            <summary>
            Parses the texture fetch.
            </summary>
            <param name="name">
            The name.
            </param>
            <returns>
            A tuple indicating the dimension and the <see cref="T:Stride.Core.Shaders.Convertor.SamplerMappingVisitor.TexFetchType"/>
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Convertor.SamplerMappingVisitor.TexFetchType">
            <summary>
            Texture fetch type.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Convertor.SamplerMappingVisitor.TexFetchType.Default">
            <summary>
            Default fetch.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Convertor.SamplerMappingVisitor.TexFetchType.Lod">
            <summary>
            Mipmap Lod fetch.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Convertor.SamplerMappingVisitor.TexFetchType.Grad">
            <summary>
            Gradient fetch.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Convertor.SamplerMappingVisitor.TexFetchType.Bias">
            <summary>
            Bias fetch.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Convertor.SamplerMappingVisitor.TexFetchType.Proj">
            <summary>
            Proj fetch.
            </summary>
        </member>
        <member name="T:Stride.Core.Shaders.Convertor.ShaderModel">
            <summary>
            Describes a HLSL ShaderModel (SM2, SM3, SM4...etc.)
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Convertor.ShaderModel.Model11">
            <summary>
            SM 1.1
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Convertor.ShaderModel.Model20">
            <summary>
            SM 2.0
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Convertor.ShaderModel.Model30">
            <summary>
            SM 3.0
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Convertor.ShaderModel.Model40">
            <summary>
            SM 4.0
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Convertor.ShaderModel.Model41">
            <summary>
            SM 4.1
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Convertor.ShaderModel.Model50">
            <summary>
            SM 5.0
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.ShaderModelHelper.Parse(System.String)">
            <summary>
            Parses the specified short profile (4_0, 3_0, 5_0)
            </summary>
            <param name="profile">The profile.</param>
            <returns>ShaderModel.</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.ShaderModelHelper.Parse(System.String,Stride.Core.Shaders.Convertor.PipelineStage@)">
            <summary>
            Parses the specified full profile (vs_4_0) and output the stage as well.
            </summary>
            <param name="profile">The profile.</param>
            <param name="stage">The stage.</param>
            <returns>Return the ShaderModel default to 3.0 if not parsed correctly.</returns>
        </member>
        <member name="T:Stride.Core.Shaders.Convertor.VariableLayoutRule">
            <summary>
            A single map rule.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.VariableLayoutRule.Semantic">
            <summary>
            Gets or sets from name.
            </summary>
            <value>
            From name.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.VariableLayoutRule.Name">
            <summary>
            Gets or sets to name.
            </summary>
            <value>
            To name.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.VariableLayoutRule.NameOutput">
            <summary>
            Gets or sets the name output.
            </summary>
            <value>
            The name output.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Convertor.VariableLayoutRule.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Convertor.VariableLayoutRule.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Grammar.BnfTermExtensions">
            <summary>
            Extensions to BnfTerm.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.BnfTermExtensions.Opt(Irony.Parsing.BnfTerm)">
            <summary>
            Makes a non terminal optional.
            </summary>
            <param name="term">The term.</param>
            <returns>An optional non terminal.</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.BnfTermExtensions.List(Irony.Parsing.BnfTerm)">
            <summary>
            Makes a list of non terminals.
            </summary>
            <param name="term">The term.</param>
            <returns>A list of non temrinal</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.BnfTermExtensions.ListOpt(Irony.Parsing.BnfTerm)">
            <summary>
            Makes an optional list of non terminals.
            </summary>
            <param name="term">The term.</param>
            <returns>An optional list of non terminals.</returns>
        </member>
        <member name="T:Stride.Core.Shaders.Grammar.CustomScanner">
            <summary>
            A Custom Scanner used for Irony
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.CustomScanner.#ctor(Stride.Core.Shaders.Grammar.Tokenizer)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Grammar.CustomScanner"/> class.
            </summary>
            <param name="tokenizer">The tokenizer.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Grammar.CustomScanner.Location">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.CustomScanner.SetSourceText(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.CustomScanner.NextToken">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.CustomScanner.PrepareInput">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar">
            <summary>
            Methods used to create the Abstract Syntax Tree..
            </summary>
            <summary>
            Grammar for Hlsl.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateAnnotationsAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create annotations ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateAnnotationsOptAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create annotations opt ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateAsmAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create asm ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateAttributeAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create attribute ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateCastExpressionAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create cast expression ast.
            </summary>
            <param name="parsingcontext">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateClassBaseTypeAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create class base type ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateClassDeclarationAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create class declaration ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateCompileExpressionAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create compile expression ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateConstantBufferAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create constant buffer ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateGenericTypeAst``1(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create generic type ast.
            </summary>
            <param name="parsingcontext">
            </param>
            <param name="node">
            </param>
            <typeparam name="T1">
            </typeparam>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateGenericTypeAst``2(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create generic type ast.
            </summary>
            <param name="parsingcontext">
            </param>
            <param name="node">
            </param>
            <typeparam name="T1">
            </typeparam>
            <typeparam name="T2">
            </typeparam>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateIdentifierCompositeList(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create identifier composite list.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateIdentifierNsAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create identifier ns ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateIdentifierSpecialReferenceAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create identifier special reference ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateInterfaceAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create interface ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateMatrixAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            Creates the matrix ast.
            </summary>
            <param name="parsingContext">
            The parsing context.
            </param>
            <param name="node">
            The node.
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreatePackOffsetAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create pack offset ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreatePassAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create pass ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreatePassStatementAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create pass statement ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateRegisterLocationAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create register location ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateSemanticAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create semantic ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateStateExpressionAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create state expression ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateStateValuesAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create state values ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateStringLiteralAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create string literal ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateTechniqueAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create technique ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateTextureDMSAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create texture dms ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateTypedefAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create typedef ast.
            </summary>
            <param name="parsingcontext">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateVariableDeclaratorQualifierPostAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create variable declarator qualifier post ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateVectorAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            Creates the vector ast.
            </summary>
            <param name="parsingContext">
            The parsing context.
            </param>
            <param name="node">
            The node.
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateParameterAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create parameter ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateParameterQualifier(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create parameter qualifier.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.CreateVariableDeclaratorAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create variable declarator ast.
            </summary>
            <param name="parsingcontext">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Grammar.Hlsl.HlslGrammar"/> class.
            </summary>
        </member>
        <member name="T:Stride.Core.Shaders.Grammar.ShaderGrammar">
            <summary>
            Methods used to create the Abstract Syntax Tree..
            </summary>
            <summary>
            Generic grammar for a shading language. 
            </summary>
            <remarks>
            This grammar provides the core grammar for a shading language including expressions (binary, unary, methods...), statements (if, for, while...).
            </remarks>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.Ast``1(Irony.Parsing.ParseTreeNode)">
            <summary>
            The ast.
            </summary>
            <param name="node">
            </param>
            <typeparam name="T">
            </typeparam>
            <returns>
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.AstCompositeEnum``1(Irony.Parsing.ParseTreeNode)">
            <summary>
            The ast composite enum.
            </summary>
            <param name="node">
            </param>
            <typeparam name="T">
            </typeparam>
            <returns>
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CollectQualifiers(Irony.Parsing.ParseTreeNode)">
            <summary>
            The collect qualifiers.
            </summary>
            <param name="node">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateArrayInitializerExpressionAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create array initializer expression ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateAssignementExpressionAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create assignement expression ast.
            </summary>
            <param name="parsingcontext">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.GetExpression(Irony.Parsing.ParseTreeNode)">
            <summary>
            Gets the expression.
            </summary>
            <param name="node">The node.</param>
            <returns>An expression</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateAssignmentOperator(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create assignment operator.
            </summary>
            <param name="parsingContext">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateBinaryExpressionAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create binary expression ast.
            </summary>
            <param name="parsingcontext">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateBlockStatementAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create block statement ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateCaseStatementAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create case statement ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateConditionalExpressionAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create conditional expression ast.
            </summary>
            <param name="parsingcontext">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateDeclarationSpecifier(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create declaration specifier.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateDeclarationStatementAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create declaration statement ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateDoWhileStatementAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create do while statement ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateExpressionOrEmptyAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create expression or empty ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateExpressionStatementAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create expression statement ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateForStatementAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create for statement ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateIdentifierAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create identifier ast.
            </summary>
            <param name="parsingcontext">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateIdentifierIndexableAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create identifier indexable ast.
            </summary>
            <param name="parsingcontext">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateIdentifierListAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create identifier list ast.
            </summary>
            <param name="parsingcontext">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateIfStatementAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create if statement ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateIndexerExpressionAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create indexer expression ast.
            </summary>
            <param name="parsingcontext">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateLiteralAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create literal ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateLiteralExpressionAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create literal expression ast.
            </summary>
            <param name="parsingcontext">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateMemberReferenceExpressionAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create member reference expression ast.
            </summary>
            <param name="parsingcontext">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateMethodDeclarationAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create method declaration ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateMethodDeclarationRawAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create method declaration raw ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateMethodDeclaratorAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create method declarator ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateMethodDefinitionAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create method definition ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateMethodInvokeExpressionAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create method invoke expression ast.
            </summary>
            <param name="parsingcontext">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateParameterAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create parameter ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateParenthesizedExpressionAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create parenthesized expression ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreatePostfixUnaryExpressionAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create postfix unary expression ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateQualifiers(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create qualifiers.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateRankSpecifierAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create rank specifier ast.
            </summary>
            <param name="parsingcontext">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateReturnStatementAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create return statement ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateShaderAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create shader ast.
            </summary>
            <param name="parsingcontext">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateStatementAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create statement ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateStructureAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create structure ast.
            </summary>
            <param name="parsingcontext">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateSwitchCastGroupAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create switch cast group ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateSwitchStatementAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create switch statement ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateTypeNameAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create type name ast.
            </summary>
            <param name="parsingcontext">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateTypeNameFromTokenAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create type name from token ast.
            </summary>
            <param name="parsingcontext">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateUnaryExpressionAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create unary expression ast.
            </summary>
            <param name="parsingcontext">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateVariableGroupAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            Creates the variable group ast.
            </summary>
            <param name="parsingContext">
            The parsing context.
            </param>
            <param name="node">
            The tree node.
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateVariableGroupRawAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create variable group raw ast.
            </summary>
            <param name="parsingContext">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateWhileStatementAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create while statement ast.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateFloatLiteral(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create float literal.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateIntegerLiteral(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create integer literal.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateStorageQualifier(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create storage qualifier.
            </summary>
            <param name="context">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateVariableDeclaratorAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create variable declarator ast.
            </summary>
            <param name="parsingcontext">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.CreateVariableDeclaratorRawAst(Irony.Parsing.ParsingContext,Irony.Parsing.ParseTreeNode)">
            <summary>
            The create variable declarator raw ast.
            </summary>
            <param name="parsingcontext">
            </param>
            <param name="node">
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderGrammar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Grammar.ShaderGrammar"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.ShaderLanguageData.#ctor(Irony.Parsing.Grammar)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Grammar.ShaderLanguageData"/> class.
            </summary>
            <param name="grammar">The grammar.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.Stride.StrideGrammar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Grammar.Stride.StrideGrammar"/> class.
            </summary>
        </member>
        <member name="T:Stride.Core.Shaders.Grammar.TokenInfo">
            <summary>
            Key terminal
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.TokenInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Grammar.TokenInfo"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Grammar.TokenInfo.#ctor(Stride.Core.Shaders.Grammar.TokenCategory)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Grammar.TokenInfo"/> class.
            </summary>
            <param name="tokenCategory">The token category.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Grammar.TokenInfo.TokenCategory">
            <summary>
            Gets or sets the token category.
            </summary>
            <value>
            The token category.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Grammar.TokenInfo.IsCaseInsensitive">
            <summary>
            Gets or sets if this token is case insensitive (default false).
            </summary>
        </member>
        <member name="T:Stride.Core.Shaders.Grammar.TokenType">
            <summary>
            Token type.
            </summary>
        </member>
        <member name="T:Stride.Core.Shaders.Parser.Hlsl.HlslParser">
            <summary>
            HlslParser.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Parser.Hlsl.HlslParser.#cctor">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Parser.Hlsl.HlslParser.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Parser.Hlsl.HlslParser.TryPreProcessAndParse(System.String,System.String,Stride.Core.Shaders.Parser.ShaderMacro[],System.String[])">
            <summary>
            Parses the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="macros">The macros defined for the preprocessor.</param>
            <param name="includeDirectories">The include directories used by the preprocessor..</param>
            <returns>Result of parsing</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Parser.Hlsl.HlslParser.Parse(System.String,System.String,Stride.Core.Shaders.Parser.ShaderMacro[],System.String[])">
            <summary>
            Parses the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="macros">The macros defined for the preprocessor.</param>
            <param name="includeDirectories">The include directories used by the preprocessor..</param>
            <returns>Result of parsing</returns>
        </member>
        <member name="T:Stride.Core.Shaders.Parser.ParsingResult">
            <summary>
            A Parsing result.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Parser.ParsingResult.Shader">
            <summary>
            Gets or sets the shader.
            </summary>
            <value>
            The shader.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Parser.ParsingResult.TimeToParse">
            <summary>
            Gets or sets the time to parse in ms.
            </summary>
            <value>
            The time to parse ms.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Parser.ParsingResult.TokenCount">
            <summary>
            Gets or sets the token count.
            </summary>
            <value>
            The token count.
            </value>
        </member>
        <member name="T:Stride.Core.Shaders.Parser.ShaderMacro">
            <summary>
            Macro to be used with <see cref="T:Stride.Core.Shaders.PreProcessor"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Parser.ShaderMacro.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Parser.ShaderMacro"/> struct.
            </summary>
            <param name="name">The name.</param>
            <param name="definition">The definition.</param>
        </member>
        <member name="F:Stride.Core.Shaders.Parser.ShaderMacro.Name">
            <summary>
            Name of the macro to set.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Parser.ShaderMacro.Definition">
            <summary>
            Value of the macro to set.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Parser.ShaderMacro.Equals(Stride.Core.Shaders.Parser.ShaderMacro)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Parser.ShaderMacro.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Parser.ShaderMacro.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Parser.ShaderParser">
            <summary>
            Parser class.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Parser.ShaderParser.Parser">
            <summary>
            Gets or sets the parser.
            </summary>
            <value>
            The parser.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Parser.ShaderParser.Grammar">
            <summary>
            Gets the grammar.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Parser.ShaderParser.LanguageData">
            <summary>
            Gets or sets the language data.
            </summary>
            <value>
            The language data.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Parser.ShaderParser.Tokenizer">
            <summary>
            Gets the tokenizer.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Parser.ShaderParser.#ctor(Stride.Core.Shaders.Grammar.ShaderLanguageData,Irony.Parsing.NonTerminal)">
            <summary>
            Prevents a default instance of the <see cref="T:Stride.Core.Shaders.Parser.ShaderParser"/> class from being created.
            </summary>
            <param name="languageData">The language data.</param>
            <param name="root">The root of the language.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Parser.ShaderParser.TryPreProcessAndParse(System.String,System.String,Stride.Core.Shaders.Parser.ShaderMacro[],System.String[])">
            <summary>
            Preprocesses and parses the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="macros">The macros defined for the preprocessor.</param>
            <param name="includeDirectories">The include directories used by the preprocessor..</param>
            <returns>Result of parsing</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Parser.ShaderParser.PreProcessAndParse(System.String,System.String,Stride.Core.Shaders.Parser.ShaderMacro[],System.String[])">
            <summary>
            Preprocesses and parses the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="macros">The macros defined for the preprocessor.</param>
            <param name="includeDirectories">The include directories used by the preprocessor..</param>
            <returns>Result of parsing</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Parser.ShaderParser.GetParser``1(Irony.Parsing.NonTerminal)">
            <summary>
            Gets the parser.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Stride.Core.Shaders.Parser.ShaderParser.GetGrammar``1">
            <summary>
            Gets the language.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Stride.Core.Shaders.Parser.ShaderParser.Parse(System.String,System.String)">
            <summary>
            Parses the specified source code.
            </summary>
            <typeparam name="T">Type of the grammar</typeparam>
            <param name="sourceCode">The source code.</param>
            <param name="file">The file.</param>
            <returns>A parsing result</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Parser.ShaderParser.ParseAndCheck(System.String,System.String)">
            <summary>
            Parse a source code file and check that the result is valid.
            </summary>
            <param name="sourceCode"></param>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="T:Stride.Core.Shaders.PreProcessor">
            <summary>
            C++ preprocessor using D3DPreprocess method from d3dcompiler API.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.PreProcessor.Run(System.String,System.String,Stride.Core.Shaders.Parser.ShaderMacro[],System.String[])">
            <summary>
            Preprocesses the provided shader or effect source.
            </summary>
            <param name="shaderSource">An array of bytes containing the raw source of the shader or effect to preprocess.</param>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="defines">A set of macros to define during preprocessing.</param>
            <param name="includeDirectories">The include directories used by the preprocessor.</param>
            <returns>
            The preprocessed shader source.
            </returns>
        </member>
        <member name="P:Stride.Core.Shaders.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="T:Stride.Core.Shaders.Utility.LoggerResult">
            <summary>
            A class to collect parsing/expression messages.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Utility.LoggerResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Utility.LoggerResult"/> class. 
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Utility.LoggerResult.HasErrors">
            <summary>
            Gets or sets a value indicating whether this instance has errors.
            </summary>
            <value>
            <c>true</c> if this instance has errors; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Utility.LoggerResult.Messages">
            <summary>
            Gets or sets the messages.
            </summary>
            <value>
            The messages.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Utility.LoggerResult.DumpMessages(Stride.Core.Shaders.Utility.ReportMessageLevel,System.IO.TextWriter)">
            <summary>
            Dumps the messages.
            </summary>
            <param name="level">The level.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Utility.LoggerResult.CopyTo(Stride.Core.Shaders.Utility.LoggerResult)">
            <summary>
            Copies all messages to another instance.
            </summary>
            <param name="results">The results.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Utility.LoggerResult.Error(Stride.Core.Shaders.Utility.MessageCode,Stride.Core.Shaders.Ast.SourceSpan)">
            <summary>
            Logs an Error with the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="span">The span.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Utility.LoggerResult.Error(Stride.Core.Shaders.Utility.MessageCode,Stride.Core.Shaders.Ast.SourceSpan,System.Object[])">
            <summary>
            Logs an Error with the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="span">The span.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Utility.LoggerResult.Info(Stride.Core.Shaders.Utility.MessageCode,Stride.Core.Shaders.Ast.SourceSpan)">
            <summary>
            Logs an Info with the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="span">The span.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Utility.LoggerResult.Info(Stride.Core.Shaders.Utility.MessageCode,Stride.Core.Shaders.Ast.SourceSpan,System.Object[])">
            <summary>
            Logs an Info with the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="span">The span.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Utility.LoggerResult.Warning(Stride.Core.Shaders.Utility.MessageCode,Stride.Core.Shaders.Ast.SourceSpan)">
            <summary>
            Logs an Warning with the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="span">The span.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Utility.LoggerResult.Warning(Stride.Core.Shaders.Utility.MessageCode,Stride.Core.Shaders.Ast.SourceSpan,System.Object[])">
            <summary>
            Logs an Warning with the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="span">The span.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Utility.LoggerResult.AddMessage(Stride.Core.Shaders.Utility.ReportMessageLevel,Stride.Core.Shaders.Utility.MessageCode,Stride.Core.Shaders.Ast.SourceSpan)">
            <summary>
            Adds the message.
            </summary>
            <param name="level">The type.</param>
            <param name="message">The message.</param>
            <param name="span">The span.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Utility.LoggerResult.AddMessage(Stride.Core.Shaders.Utility.ReportMessageLevel,Stride.Core.Shaders.Utility.MessageCode,Stride.Core.Shaders.Ast.SourceSpan,System.Object[])">
            <summary>
            Adds the message.
            </summary>
            <param name="level">The type.</param>
            <param name="message">The message.</param>
            <param name="span">The span.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:Stride.Core.Shaders.Utility.OrderedSet`1">
            <summary>
            An ordered set
            </summary>
            <typeparam name="T">Type of the element in the set</typeparam>
        </member>
        <member name="M:Stride.Core.Shaders.Utility.OrderedSet`1.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Stride.Core.Shaders.Utility.OrderedSet`1" /> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Utility.OrderedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Utility.OrderedSet`1"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Utility.OrderedSet`1.Count">
            <inheritdoc />
        </member>
        <member name="P:Stride.Core.Shaders.Utility.OrderedSet`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Utility.OrderedSet`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Utility.OrderedSet`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Utility.OrderedSet`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Utility.OrderedSet`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Utility.OrderedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Utility.OrderedSet`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Utility.OrderedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Utility.OrderedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Utility.OrderedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Utility.OrderedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Utility.OrderedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Utility.OrderedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Utility.OrderedSet`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Utility.OrderedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Utility.OrderedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Utility.OrderedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Utility.OrderedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Utility.OrderedSet`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Shaders.Utility.ReferenceEqualityComparer`1">
            <summary>
            A Comparator to use <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/> method.
            </summary>
            <typeparam name="T">Type of the comparer</typeparam>
        </member>
        <member name="P:Stride.Core.Shaders.Utility.ReferenceEqualityComparer`1.Default">
            <summary>
            Gets the default.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Utility.ReferenceEqualityComparer`1.Equals(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Utility.ReferenceEqualityComparer`1.GetHashCode(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Utility.ReportMessage">
            <summary>
            A report message.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Utility.ReportMessage.Level">
            <summary>
            Type of the message.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Utility.ReportMessage.Span">
            <summary>
            Span and location attached to this message.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Utility.ReportMessage.Code">
            <summary>
            The error code.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Utility.ReportMessage.Text">
            <summary>
            Text of the message.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Utility.ReportMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Utility.ReportMessage"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Utility.ReportMessage.#ctor(Stride.Core.Shaders.Utility.ReportMessageLevel,System.String,System.String,Stride.Core.Shaders.Ast.SourceSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Utility.ReportMessage"/> class.
            </summary>
            <param name="level">The type.</param>
            <param name="code">The error code.</param>
            <param name="text">The text.</param>
            <param name="span">The span.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Utility.ReportMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Utility.ReportMessageLevel">
            <summary>
            Level of a <see cref="T:Stride.Core.Shaders.Utility.ReportMessage"/>.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Utility.ReportMessageLevel.Info">
            <summary>
            An informative message.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Utility.ReportMessageLevel.Warning">
            <summary>
            A warning message.
            </summary>
        </member>
        <member name="F:Stride.Core.Shaders.Utility.ReportMessageLevel.Error">
            <summary>
            An error message.
            </summary>
        </member>
        <member name="T:Stride.Core.Shaders.Visitor.ExpressionEvaluator">
            <summary>
            An expression evaluator.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Visitor.ExpressionEvaluator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Visitor.ExpressionEvaluator"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Visitor.ExpressionEvaluator.Evaluate(Stride.Core.Shaders.Ast.Expression)">
            <summary>
            Evaluates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>Result of the expression evaluated</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Visitor.ExpressionEvaluator.Visit(Stride.Core.Shaders.Ast.BinaryExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Visitor.ExpressionEvaluator.Visit(Stride.Core.Shaders.Ast.MethodInvocationExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Visitor.ExpressionEvaluator.Visit(Stride.Core.Shaders.Ast.VariableReferenceExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Visitor.ExpressionEvaluator.Visit(Stride.Core.Shaders.Ast.LiteralExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Visitor.ExpressionEvaluator.Visit(Stride.Core.Shaders.Ast.UnaryExpression)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Shaders.Visitor.ExpressionResult">
            <summary>
            Result of an expression.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Visitor.ExpressionResult.Value">
            <summary>
            Gets or sets the result of an expression.
            </summary>
            <value>
            The result of an expression.
            </value>
        </member>
        <member name="T:Stride.Core.Shaders.Visitor.ScopeDeclaration">
            <summary>
            A Scope declaration provides a way to retrieve all scope declaration (variable, methods...etc.) 
            and attached nodes.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Visitor.ScopeDeclaration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Visitor.ScopeDeclaration"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Visitor.ScopeDeclaration.#ctor(Stride.Core.Shaders.Ast.IScopeContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Visitor.ScopeDeclaration"/> class.
            </summary>
            <param name="scopeContainer">The scope container.</param>
        </member>
        <member name="P:Stride.Core.Shaders.Visitor.ScopeDeclaration.ScopeContainer">
            <summary>
            Gets or sets the scope container.
            </summary>
            <value>
            The scope container.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Visitor.ScopeDeclaration.Declarations">
            <summary>
            Gets or sets the declarations.
            </summary>
            <value>
            The declarations.
            </value>
        </member>
        <member name="T:Stride.Core.Shaders.Visitor.SearchVisitor">
            <summary>
            A visitor that takes a filter function to apply to each node.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Visitor.SearchVisitor.#ctor(System.Func{Stride.Core.Shaders.Ast.Node,Stride.Core.Shaders.Ast.Node},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Visitor.SearchVisitor"/> class.
            </summary>
            <param name="filterFunction">The filter function.</param>
            <param name="buildScopeDeclaration">if set to <c>true</c> [build scope declaration].</param>
            <param name="useNodeStack">if set to <c>true</c> [use node stack].</param>
        </member>
        <member name="P:Stride.Core.Shaders.Visitor.SearchVisitor.FilterFunction">
            <summary>
            Gets or sets the filter function.
            </summary>
            <value>
            The filter function.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Visitor.SearchVisitor.DefaultVisit(Stride.Core.Shaders.Ast.Node)">
            <summary>
            Visits the specified node.
            </summary>
            <param name="node">The node.</param>
            <returns>The filtered node</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Visitor.SearchVisitor.Run(Stride.Core.Shaders.Ast.Node,System.Func{Stride.Core.Shaders.Ast.Node,Stride.Core.Shaders.Ast.Node},System.Boolean,System.Boolean)">
            <summary>
            Searches from the specified node.
            </summary>
            <param name="node">The node.</param>
            <param name="filter">The filter function to apply to each node.</param>
            <param name="buildScopeDeclaration">if set to <c>true</c> [build scope declaration].</param>
            <param name="useNodeStack">if set to <c>true</c> [use node stack].</param>
        </member>
        <member name="T:Stride.Core.Shaders.Visitor.ShaderVisitor">
            <summary>
            A Generic Visitor.
            </summary>
            <remarks>
            An derived classs need to set the Iterator with this instance.
            </remarks>
        </member>
        <member name="T:Stride.Core.Shaders.Visitor.StripVisitor">
            <summary>
            The strip visitor collects all function and declaration used by a set of entrypoints
            and remove any unreferenced/unused declaration.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Visitor.StripVisitor.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Visitor.StripVisitor"/> class.
            </summary>
            <param name="entryPoints">The entry points to filter.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Visitor.StripVisitor.StripDeclarations(System.Collections.Generic.IList{Stride.Core.Shaders.Ast.Node},System.Collections.Generic.ICollection{Stride.Core.Shaders.Ast.Node},System.Boolean)">
            <summary>
            Strips the declarations.
            </summary>
            <param name="nodes">The nodes.</param>
            <param name="collectedReferences">The collected references.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Visitor.StripVisitor.CollectReferences(System.Collections.Generic.List{Stride.Core.Shaders.Ast.Node},Stride.Core.Shaders.Ast.Node)">
            <summary>
            Helper to collects the referenced declarations recursively.
            </summary>
            <param name="collectedReferences">The collected declarations.</param>
            <param name="reference">The reference to collect.</param>
        </member>
        <member name="T:Stride.Core.Shaders.Visitor.VisitorBase">
            <summary>
            Visitor base.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Visitor.VisitorBase.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Visitor.VisitorBase"/> class.
            </summary>
            <param name="useNodeStack">if set to <c>true</c> [use node stack].</param>
        </member>
        <member name="P:Stride.Core.Shaders.Visitor.VisitorBase.NodeStack">
            <summary>
            Gets or sets the node stack.
            </summary>
            <value>
            The node stack.
            </value>
        </member>
        <member name="M:Stride.Core.Shaders.Visitor.VisitorBase.VisitList``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Visits the list.
            </summary>
            <typeparam name="T">Type of the item in the list</typeparam>
            <param name="list">The list.</param>
            <param name="filter">The function filter.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Visitor.VisitorBase.VisitDynamic(Stride.Core.Shaders.Ast.Node)">
            <summary>
            Visits the node.
            </summary>
            <typeparam name="T">Type of the node</typeparam>
            <param name="node">The node.</param>
            <param name="visitRealType">if set to <c>true</c> [visit real type].</param>
            <returns>
            A node
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Visitor.VisitorBase.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Visitor.ShaderVisitor"/> class.
            </summary>
            <param name="buildScopeDeclaration">if set to <c>true</c> [build scope declaration].</param>
            <param name="useNodeStack">if set to <c>true</c> [use node stack].</param>
        </member>
        <member name="P:Stride.Core.Shaders.Visitor.VisitorBase.ParentNode">
            <summary>
            Gets the parent node or null if no parents
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Visitor.VisitorBase.ScopeStack">
            <summary>
            Gets the scope stack.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Visitor.VisitorBase.FindDeclarations(System.String)">
            <summary>
            Finds a list of declaration by its name.
            </summary>
            <param name="name">The name.</param>
            <returns>A list of declaration</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Visitor.VisitorBase.FindDeclaration(System.String)">
            <summary>
            Finds a declaration by its name.
            </summary>
            <param name="name">The name.</param>
            <returns>A declaration</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Visitor.VisitorBase.PreVisitNode(Stride.Core.Shaders.Ast.Node)">
            <summary>
            Called before visiting the node.
            </summary>
            <param name="node">The node.</param>
            <returns>True to continue visiting the node; false to skip the visit</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Visitor.VisitorBase.PostVisitNode(Stride.Core.Shaders.Ast.Node,System.Boolean)">
            <summary>
            Called after visiting the node.
            </summary>
            <param name="node">The node.</param>
            <param name="nodeVisited">if set to <c>true</c> [node visited].</param>
        </member>
        <member name="T:Stride.Core.Shaders.Writer.Hlsl.HlslWriter">
            <summary>
            A writer for a shader.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.Hlsl.HlslWriter.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Writer.Hlsl.HlslWriter"/> class. 
            </summary>
            <param name="useNodeStack">
            if set to <c>true</c> [use node stack].
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.Hlsl.HlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.Annotations)">
            <summary>
            Visits the specified Annotations.
            </summary>
            <param name="annotations">The Annotations.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.Hlsl.HlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.ClassType)">
            <summary>
            Visits the specified class type.
            </summary>
            <param name="classType">Type of the class.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.Hlsl.HlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.InterfaceType)">
            <summary>
            Visits the specified interface type.
            </summary>
            <param name="interfaceType">Type of the interface.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.Hlsl.HlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.AsmExpression)">
            <summary>
            Visits the specified asm expression.
            </summary>
            <param name="asmExpression">The asm expression.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.Hlsl.HlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.ConstantBuffer)">
            <summary>
            Visits the specified constant buffer.
            </summary>
            <param name="constantBuffer">The constant buffer.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.Hlsl.HlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.Typedef)">
            <summary>
            Visits the specified typedef.
            </summary>
            <param name="typedef">The typedef.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.Hlsl.HlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.AttributeDeclaration)">
            <summary>
            Visits the specified attribute declaration.
            </summary>
            <param name="attributeDeclaration">The attribute declaration.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.Hlsl.HlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.CastExpression)">
            <summary>
            Visits the specified cast expression.
            </summary>
            <param name="castExpression">The cast expression.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.Hlsl.HlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.IdentifierDot)">
            <summary>
            Visits the specified composite identifier.
            </summary>
            <param name="compositeIdentifier">The composite identifier.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.Hlsl.HlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.IdentifierNs)">
            <summary>
            Visits the specified composite identifier.
            </summary>
            <param name="compositeIdentifier">The composite identifier.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.Hlsl.HlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.IdentifierGeneric)">
            <summary>
            Visits the specified composite identifier.
            </summary>
            <param name="compositeIdentifier">The composite identifier.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.Hlsl.HlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.StateExpression)">
            <summary>
            Visits the specified state expression.
            </summary>
            <param name="stateExpression">The state expression.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.Hlsl.HlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.CompileExpression)">
            <summary>
            Visits the specified compile expression.
            </summary>
            <param name="compileExpression">The compile expression.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.Hlsl.HlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.Technique)">
            <summary>
            Visits the specified technique.
            </summary>
            <param name="technique">The technique.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.Hlsl.HlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.Pass)">
            <summary>
            Visits the specified pass.
            </summary>
            <param name="pass">The pass.</param>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.Hlsl.HlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.StateInitializer)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.Hlsl.HlslWriter.WriteInitializer(Stride.Core.Shaders.Ast.Expression)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.Hlsl.HlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.Semantic)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.Hlsl.HlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.PackOffset)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.Hlsl.HlslWriter.Visit(Stride.Core.Shaders.Ast.Hlsl.RegisterLocation)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.Hlsl.HlslWriter.Write(Stride.Core.Shaders.Ast.Identifier)">
            <summary>
            Writes the specified identifier.
            </summary>
            <param name="identifier">The identifier.</param>
            <returns>
            This instance
            </returns>
        </member>
        <member name="T:Stride.Core.Shaders.Writer.ShaderWriter">
            <summary>
            A writer for a shader.
            </summary>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Shaders.Writer.ShaderWriter"/> class.
            </summary>
            <param name="buildScopeDeclaration">if set to <c>true</c> [build scope declaration].</param>
            <param name="useNodeStack">if set to <c>true</c> [use node stack].</param>
        </member>
        <member name="P:Stride.Core.Shaders.Writer.ShaderWriter.Text">
            <summary>
              Gets the text.
            </summary>
        </member>
        <member name="P:Stride.Core.Shaders.Writer.ShaderWriter.EnableNewLine">
            <summary>
              Gets or sets a value indicating whether [enable new line].
            </summary>
            <value>
              <c>true</c> if [enable new line]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Writer.ShaderWriter.IndentLevel">
            <summary>
              Gets or sets the indent level.
            </summary>
            <value>
              The indent level.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Writer.ShaderWriter.NewLine">
            <summary>
              Gets or sets a value indicating whether [new line].
            </summary>
            <value>
              <c>true</c> if [new line]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Writer.ShaderWriter.StringBuilder">
            <summary>
              Gets or sets the string builder.
            </summary>
            <value>
              The string builder.
            </value>
        </member>
        <member name="P:Stride.Core.Shaders.Writer.ShaderWriter.IsVisitingVariableInlines">
            <summary>
            Gets or sets a value indicating whether this instance is visiting variable inlines.
            </summary>
            <value><c>true</c> if this instance is visiting variable inlines; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Indent">
            <summary>
            Indents this instance.
            </summary>
            <returns>
            this instance
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Outdent">
            <summary>
            Outdents this instance.
            </summary>
            <returns>
            this instance
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.Shader)">
            <summary>
            Visits the specified shader.
            </summary>
            <param name="shader">The shader.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.StructType)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.WhileStatement)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.ArrayInitializerExpression)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.BlockStatement)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.AssignmentExpression)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.BinaryExpression)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.CaseStatement)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.ArrayType)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.ExpressionStatement)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.ForStatement)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.VisitStatement(Stride.Core.Shaders.Ast.Statement)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.StatementList)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.IfStatement)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.IndexerExpression)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.MemberReferenceExpression)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.MethodInvocationExpression)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.Parameter)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.ParenthesizedExpression)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.ExpressionList)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.ReturnStatement)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.ConditionalExpression)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.UnaryExpression)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.SwitchStatement)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.SwitchCaseGroup)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.DeclarationStatement)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.MethodDeclaration)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.MethodDefinition)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.Variable)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.ObjectType)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.TypeName)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.ScalarType)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.GenericType)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.VectorType)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.MatrixType)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.Literal)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.Qualifier)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Visit(Stride.Core.Shaders.Ast.Glsl.LayoutQualifier)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Write(Stride.Core.Shaders.Ast.Qualifier,System.Boolean)">
            <summary>
            Writes the specified qualifier.
            </summary>
            <param name="qualifiers">
            The qualifier.
            </param>
            <param name="writePreQualifiers">
            if set to <c>true</c> [write pre qualifiers].
            </param>
            <returns>
            This instance
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Write(System.Collections.Generic.List{Stride.Core.Shaders.Ast.AttributeBase},System.Boolean)">
            <summary>
            Writes the specified attributes.
            </summary>
            <param name="attributes">
            The attributes.
            </param>
            <param name="writePreQualifiers">
            if set to <c>true</c> [write pre qualifiers].
            </param>
            <returns>
            This instance
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Write(System.String)">
            <summary>
            Writes the specified text.
            </summary>
            <param name="text">
            The text.
            </param>
            <returns>
            this instance
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.WriteInitializer(Stride.Core.Shaders.Ast.Expression)">
            <summary>
            Writes the initializer.
            </summary>
            <param name="expression">
            The expression.
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.WriteLine">
            <summary>
            Writes the line.
            </summary>
            <returns>
            This instance
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.WriteLine(System.String)">
            <summary>
            Writes the line.
            </summary>
            <param name="text">
            The text.
            </param>
            <returns>
            this instance
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.WriteLinkLine(Stride.Core.Shaders.Ast.Node)">
            <summary>
            Writes a link line using #line preprocessing directive with the specified node
            </summary>
            <param name="node">The node to use the Span.</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.WriteSpace">
            <summary>
            Writes the space.
            </summary>
            <returns>
            this instance
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Append(System.String)">
            <summary>
            Appends the specified text.
            </summary>
            <param name="text">
            The text.
            </param>
            <returns>
            this instance
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Append(System.String,System.Object[])">
            <summary>
            Appends the specified formatted text.
            </summary>
            <param name="format">The formatted text.</param>
            <param name="args">The args to apply to the formatted text.</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.CloseBrace(System.Boolean)">
            <summary>
            Closes the brace.
            </summary>
            <param name="newLine">
            if set to <c>true</c> [new line].
            </param>
            <returns>
            This instance
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.OpenBrace">
            <summary>
            Opens the brace.
            </summary>
            <returns>
            This instance
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.Write(Stride.Core.Shaders.Ast.Identifier)">
            <summary>
            Writes the specified identifier.
            </summary>
            <param name="identifier">
            The identifier.
            </param>
            <returns>
            This instance
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.WriteMethodDeclaration(Stride.Core.Shaders.Ast.MethodDeclaration)">
            <summary>
            Writes the specified method declaration.
            </summary>
            <param name="methodDeclaration">
            The method declaration.
            </param>
            <returns>
            This instance
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.WriteRankSpecifiers(System.Collections.Generic.IEnumerable{Stride.Core.Shaders.Ast.Expression})">
            <summary>
            Writes the rank specifiers.
            </summary>
            <param name="expressionList">
            The expression list.
            </param>
            <returns>
            This instance
            </returns>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.WriteStatementContent(Stride.Core.Shaders.Ast.Statement)">
            <summary>
            Writes the content of the statement.
            </summary>
            <param name="statement">
            The statement.
            </param>
        </member>
        <member name="M:Stride.Core.Shaders.Writer.ShaderWriter.WriteVariable(Stride.Core.Shaders.Ast.Variable)">
            <summary>
            Writes the variable.
            </summary>
            <param name="variable">The variable.</param>
        </member>
        <member name="T:Stride.StrideVersion">
            <summary>
            Internal version used to identify Stride version.
            </summary>
            <remarks>
            During package build, PackageUpdateVersionTask is updating that file and expect some specific text regex so be careful if you change any of this.
            </remarks>
        </member>
        <member name="F:Stride.StrideVersion.PublicVersion">
            <summary>
            The version used by editor for display purpose. 4th digit needs to be at least 1 if used (due to NuGet special cases).
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.AssemblyVersion">
            <summary>
            The current assembly version as text, currently same as <see cref="F:Stride.StrideVersion.PublicVersion"/>.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersionSimple">
            <summary>
            The NuGet package version without special tags.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersion">
            <summary>
            The NuGet package version.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersionSuffix">
            <summary>
            The NuGet package suffix (i.e. -beta01). Automatically set by Stride.GitVersioning.GenerateVersionFile.
            Three possible values:
            - Empty: official release
            - -betaXX: development version (XX should corespond to development asset versioning)
            - -betaXX-YYYY: beta release (YYYY is the git height since current version has been bumped)
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.BuildMetadata">
            <summary>
            The build metadata, usually +g[git_hash] during package. Automatically set by Stride.GitVersioning.GenerateVersionFile.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.AssemblyInformationalVersion">
            <summary>
            The informational assembly version, containing -beta01 or +g[git_hash] during package.
            </summary>
        </member>
        <member name="T:Stride.PublicKeys">
            <summary>
            Assembly signing information.
            </summary>
        </member>
        <member name="F:Stride.PublicKeys.Default">
            <summary>
            Assembly name suffix that contains signing information.
            </summary>
        </member>
        <member name="T:GoldParser.DfaState">
            <summary>
            State in the Deterministic Finite Automata 
            which is used by the tokenizer.
            </summary>
        </member>
        <member name="M:GoldParser.DfaState.#ctor(System.Int32,GoldParser.Symbol,GoldParser.ObjectMap)">
            <summary>
            Creates a new instance of the <c>DfaState</c> class.
            </summary>
            <param name="index">Index in the DFA state table.</param>
            <param name="acceptSymbol">Symbol to accept.</param>
            <param name="transitionVector">Transition vector.</param>
        </member>
        <member name="P:GoldParser.DfaState.Index">
            <summary>
            Gets index of the state in DFA state table.
            </summary>
        </member>
        <member name="P:GoldParser.DfaState.AcceptSymbol">
            <summary>
            Gets the symbol which can be accepted in this DFA state.
            </summary>
        </member>
        <member name="T:GoldParser.Grammar">
            <summary>
            Contains grammar tables required for parsing.
            </summary>
        </member>
        <member name="F:GoldParser.Grammar.FileHeader">
            <summary>
            Identifies Gold parser grammar file.
            </summary>
        </member>
        <member name="M:GoldParser.Grammar.#ctor(System.IO.BinaryReader)">
            <summary>
            Creates a new instance of <c>Grammar</c> class
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:GoldParser.Grammar.SymbolTable">
            <summary>
            Gets the symbol table.
            </summary>
        </member>
        <member name="P:GoldParser.Grammar.Name">
            <summary>
            Gets grammar name.
            </summary>
        </member>
        <member name="P:GoldParser.Grammar.Version">
            <summary>
            Gets grammar version.
            </summary>
        </member>
        <member name="P:GoldParser.Grammar.Author">
            <summary>
            Gets grammar author.
            </summary>
        </member>
        <member name="P:GoldParser.Grammar.About">
            <summary>
            Gets grammar description.
            </summary>
        </member>
        <member name="P:GoldParser.Grammar.StartSymbol">
            <summary>
            Gets the start symbol for the grammar.
            </summary>
        </member>
        <member name="P:GoldParser.Grammar.CaseSensitive">
            <summary>
            Gets the value indicating if the grammar is case sensitive.
            </summary>
        </member>
        <member name="P:GoldParser.Grammar.DfaInitialState">
            <summary>
            Gets initial DFA state.
            </summary>
        </member>
        <member name="P:GoldParser.Grammar.InitialLRState">
            <summary>
            Gets initial LR state.
            </summary>
        </member>
        <member name="P:GoldParser.Grammar.EndSymbol">
            <summary>
            Gets a special symbol to designate last token in the input stream.
            </summary>
        </member>
        <member name="M:GoldParser.Grammar.Load">
            <summary>
            Loads grammar from the binary reader.
            </summary>
        </member>
        <member name="M:GoldParser.Grammar.ReadNextRecord">
            <summary>
            Reads the next record in the binary grammar file.
            </summary>
            <returns>Read record type.</returns>
        </member>
        <member name="M:GoldParser.Grammar.ReadHeader">
            <summary>
            Reads grammar header information.
            </summary>
        </member>
        <member name="M:GoldParser.Grammar.ReadTableCounts">
            <summary>
            Reads table record counts and initializes tables.
            </summary>
        </member>
        <member name="M:GoldParser.Grammar.ReadInitialStates">
            <summary>
            Read initial DFA and LR states.
            </summary>
        </member>
        <member name="M:GoldParser.Grammar.ReadSymbols">
            <summary>
            Read symbol information.
            </summary>
        </member>
        <member name="M:GoldParser.Grammar.ReadCharSets">
            <summary>
            Read char set information.
            </summary>
        </member>
        <member name="M:GoldParser.Grammar.ReadRules">
            <summary>
            Read rule information.
            </summary>
        </member>
        <member name="M:GoldParser.Grammar.ReadDfaStates">
            <summary>
            Read DFA state information.
            </summary>
        </member>
        <member name="M:GoldParser.Grammar.ReadLRStates">
            <summary>
            Read LR state information.
            </summary>
        </member>
        <member name="M:GoldParser.Grammar.CreateDfaTransitionVector(GoldParser.Grammar.DfaEdge[])">
            <summary>
            Creates the DFA state transition vector.
            </summary>
            <param name="edges">Array of automata edges.</param>
            <returns>Hashtable with the transition information.</returns>
        </member>
        <member name="M:GoldParser.Grammar.ReadEmptyEntry">
            <summary>
            Reads empty entry from the grammar file.
            </summary>
        </member>
        <member name="M:GoldParser.Grammar.ReadStringEntry">
            <summary>
            Reads string entry from the grammar file.
            </summary>
            <returns>String entry content.</returns>
        </member>
        <member name="M:GoldParser.Grammar.ReadInt16Entry">
            <summary>
            Reads Int16 entry from the grammar file.
            </summary>
            <returns>Int16 entry content.</returns>
        </member>
        <member name="M:GoldParser.Grammar.ReadByteEntry">
            <summary>
            Reads byte entry from the grammar file.
            </summary>
            <returns>Byte entry content.</returns>
        </member>
        <member name="M:GoldParser.Grammar.ReadBoolEntry">
            <summary>
            Reads boolean entry from the grammar file.
            </summary>
            <returns>Boolean entry content.</returns>
        </member>
        <member name="M:GoldParser.Grammar.ReadEntryType">
            <summary>
            Reads entry type.
            </summary>
            <returns>Entry type.</returns>
        </member>
        <member name="M:GoldParser.Grammar.ReadString">
            <summary>
            Reads string from the grammar file.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:GoldParser.Grammar.ReadInt16">
            <summary>
            Reads two byte integer Int16 from the grammar file.
            </summary>
            <returns>Int16 value.</returns>
        </member>
        <member name="M:GoldParser.Grammar.ReadByte">
            <summary>
            Reads byte from the grammar file.
            </summary>
            <returns>Byte value.</returns>
        </member>
        <member name="M:GoldParser.Grammar.ReadBool">
            <summary>
            Reads boolean from the grammar file.
            </summary>
            <returns>Boolean value.</returns>
        </member>
        <member name="T:GoldParser.Grammar.RecordType">
            <summary>
            Record type byte in the binary grammar file.
            </summary>
        </member>
        <member name="T:GoldParser.Grammar.EntryType">
            <summary>
            Entry type byte in the binary grammar file.
            </summary>
        </member>
        <member name="T:GoldParser.Grammar.DfaEdge">
            <summary>
            Edge between DFA states.
            </summary>
        </member>
        <member name="T:GoldParser.LRAction">
            <summary>
            LR parser action type.
            </summary>
        </member>
        <member name="F:GoldParser.LRAction.None">
            <summary>
            No action. Not used.
            </summary>
        </member>
        <member name="F:GoldParser.LRAction.Shift">
            <summary>
            Shift a symbol and go to a state
            </summary>
        </member>
        <member name="F:GoldParser.LRAction.Reduce">
            <summary>
            Reduce by a specified rule
            </summary>
        </member>
        <member name="F:GoldParser.LRAction.Goto">
            <summary>
            Goto to a state on reduction
            </summary>
        </member>
        <member name="F:GoldParser.LRAction.Accept">
            <summary>
            Input successfully parsed
            </summary>
        </member>
        <member name="F:GoldParser.LRAction.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="T:GoldParser.LRState">
            <summary>
            State of LR parser.
            </summary>
        </member>
        <member name="M:GoldParser.LRState.#ctor(System.Int32,GoldParser.LRStateAction[],GoldParser.LRStateAction[])">
            <summary>
            Creates a new instance of the <c>LRState</c> class
            </summary>
            <param name="index">Index of the LR state in the LR state table.</param>
            <param name="actions">List of all available LR actions in this state.</param>
            <param name="transitionVector">Transition vector which has symbol index as an index.</param>
        </member>
        <member name="P:GoldParser.LRState.Index">
            <summary>
            Gets index of the LR state in LR state table.
            </summary>
        </member>
        <member name="P:GoldParser.LRState.ActionCount">
            <summary>
            Gets LR state action count.
            </summary>
        </member>
        <member name="M:GoldParser.LRState.GetAction(System.Int32)">
            <summary>
            Returns state action by its index.
            </summary>
            <param name="index">State action index.</param>
            <returns>LR state action for the given index.</returns>
        </member>
        <member name="M:GoldParser.LRState.GetActionBySymbolIndex(System.Int32)">
            <summary>
            Returns LR state action by symbol index.
            </summary>
            <param name="symbolIndex">Symbol Index to search for.</param>
            <returns>LR state action object.</returns>
        </member>
        <member name="T:GoldParser.LRStateAction">
            <summary>
            Action in a LR State. 
            </summary>
        </member>
        <member name="M:GoldParser.LRStateAction.#ctor(System.Int32,GoldParser.Symbol,GoldParser.LRAction,System.Int32)">
            <summary>
            Creats a new instance of the <c>LRStateAction</c> class.
            </summary>
            <param name="index">Index of the LR state action.</param>
            <param name="symbol">Symbol associated with the action.</param>
            <param name="action">Action type.</param>
            <param name="value">Action value.</param>
        </member>
        <member name="P:GoldParser.LRStateAction.Index">
            <summary>
            Gets index of the LR state action.
            </summary>
        </member>
        <member name="P:GoldParser.LRStateAction.Symbol">
            <summary>
            Gets symbol associated with the LR state action.
            </summary>
        </member>
        <member name="P:GoldParser.LRStateAction.Action">
            <summary>
            Gets action type.
            </summary>
        </member>
        <member name="P:GoldParser.LRStateAction.Value">
            <summary>
            Gets the action value.
            </summary>
        </member>
        <member name="T:GoldParser.ObjectMap">
            <summary>
            Maps integer values used for transition vectors to objects.
            </summary>
        </member>
        <member name="M:GoldParser.ObjectMap.#ctor">
            <summary>
            Creates new instance of <see cref="T:GoldParser.ObjectMap"/> class.
            </summary>
        </member>
        <member name="P:GoldParser.ObjectMap.Count">
            <summary>
            Gets number of entries in the map.
            </summary>
        </member>
        <member name="P:GoldParser.ObjectMap.ReadOnly">
            <summary>
            Gets or sets read only flag.
            </summary>
        </member>
        <member name="P:GoldParser.ObjectMap.Item(System.Int32)">
            <summary>
            Gets or sets value by key.
            </summary>
        </member>
        <member name="M:GoldParser.ObjectMap.GetKey(System.Int32)">
            <summary>
            Returns key by index.
            </summary>
            <param name="index">Zero based index of the requested key.</param>
            <returns>Returns key for the given index.</returns>
        </member>
        <member name="M:GoldParser.ObjectMap.Remove(System.Int32)">
            <summary>
            Removes entry by its key.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:GoldParser.ObjectMap.Add(System.Int32,System.Object)">
            <summary>
            Adds a new key and value pair. 
            If key exists then value is applied to existing key.
            </summary>
            <param name="key">New key to add.</param>
            <param name="value">Value for the key.</param>
        </member>
        <member name="T:GoldParser.ParseMessage">
            <summary>
            Available parse messages.
            </summary>
        </member>
        <member name="F:GoldParser.ParseMessage.Empty">
            <summary>
            Nothing
            </summary>
        </member>
        <member name="F:GoldParser.ParseMessage.TokenRead">
            <summary>
            Each time a token is read, this message is generated.
            </summary>
        </member>
        <member name="F:GoldParser.ParseMessage.Reduction">
            <summary>
            When the engine is able to reduce a rule,
            this message is returned. The rule that was
            reduced is set in the GOLDParser's ReduceRule property.
            The tokens that are reduced and correspond the
            rule's definition are stored in the Tokens() property.
            </summary>
        </member>
        <member name="F:GoldParser.ParseMessage.Accept">
            <summary>
            The engine will returns this message when the source
            text has been accepted as both complete and correct.
            In other words, the source text was successfully analyzed.
            </summary>
        </member>
        <member name="F:GoldParser.ParseMessage.NotLoadedError">
            <summary>
            Before any parsing can take place,
            a Compiled Grammar Table file must be loaded.
            </summary>
        </member>
        <member name="F:GoldParser.ParseMessage.LexicalError">
            <summary>
            The tokenizer will generate this message when
            it is unable to recognize a series of characters
            as a valid token. To recover, pop the invalid
            token from the input queue.
            </summary>
        </member>
        <member name="F:GoldParser.ParseMessage.SyntaxError">
            <summary>
            Often the parser will read a token that is not expected
            in the grammar. When this happens, the Tokens() property
            is filled with tokens the parsing engine expected to read.
            To recover: push one of the expected tokens on the input queue.
            </summary>
        </member>
        <member name="F:GoldParser.ParseMessage.CommentError">
            <summary>
            The parser reached the end of the file while reading a comment.
            This is caused when the source text contains a "run-away"
            comment, or in other words, a block comment that lacks the
            delimiter.
            </summary>
        </member>
        <member name="F:GoldParser.ParseMessage.InternalError">
            <summary>
            Something is wrong, very wrong.
            </summary>
        </member>
        <member name="F:GoldParser.ParseMessage.CommentBlockRead">
            <summary>
            A block comment is complete.
            When this message is returned, the content of the CurrentComment
            property is set to the comment text. The text includes starting and ending
            block comment characters.
            </summary>
        </member>
        <member name="F:GoldParser.ParseMessage.CommentLineRead">
            <summary>
            Line comment is read.
            When this message is returned, the content of the CurrentComment
            property is set to the comment text. The text includes starting 
            line comment characters.
            </summary>
        </member>
        <member name="T:GoldParser.Parser">
            <summary>
            Pull parser which uses Grammar table to parser input stream.
            </summary>
        </member>
        <member name="M:GoldParser.Parser.#ctor(GoldParser.Grammar)">
            <summary>
            Initializes new instance of Parser class.
            </summary>
            <param name="textReader">TextReader instance to read data from.</param>
            <param name="grammar">Grammar with parsing tables to parser input stream.</param>
        </member>
        <member name="P:GoldParser.Parser.Grammar">
            <summary>
            Gets the parser's grammar.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.TrimReductions">
            <summary>
            Gets or sets flag to trim reductions.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.CharPosition">
            <summary>
            Gets current char position.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.LineNumber">
            <summary>
            Gets current line number. It is 1-based.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.LinePosition">
            <summary>
            Gets current char position in the current source line. It is 1-based.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.LineText">
            <summary>
            Gets current source line text. It can be truncated if line is longer than 2048 characters.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.SourceLineReadCallback">
            <summary>
            Gets or sets callback function to track source line text.
            </summary>
        </member>
        <member name="M:GoldParser.Parser.MoveBy(System.Int32)">
            <summary>
            Increments current char index by delta character positions.
            </summary>
            <param name="delta">Number to increment char index.</param>
        </member>
        <member name="M:GoldParser.Parser.MoveToLineEnd">
            <summary>
            Moves current char pointer to the end of source line.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.TokenSymbol">
            <summary>
            Gets or sets current token symbol.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.TokenText">
            <summary>
            Gets or sets current token text.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.TokenCharPosition">
            <summary>
            Gets or sets current token position relative to input stream beginning.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.TokenLength">
            <summary>
            Gets or sets current token text length.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.TokenLineNumber">
            <summary>
            Gets or sets current token line number. It is 1-based.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.TokenLinePosition">
            <summary>
            Gets or sets current token position in current source line. It is 1-based.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.TokenSyntaxNode">
            <summary>
            Gets or sets token syntax object associated with the current token or reduction.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.TokenString">
            <summary>
            Returns string representation of the token.
            </summary>
            <returns>String representation of the token.</returns>
        </member>
        <member name="M:GoldParser.Parser.PushInputToken(GoldParser.Symbol,System.String,System.Object)">
            <summary>
            Pushes a token to the input token stack.
            </summary>
            <param name="symbol">Token symbol.</param>
            <param name="text">Token text.</param>
            <param name="syntaxNode">Syntax node associated with the token.</param>
        </member>
        <member name="M:GoldParser.Parser.PopInputToken">
            <summary>
            Pops token from the input token stack.
            </summary>
            <returns>Token symbol from the top of input token stack.</returns>
        </member>
        <member name="M:GoldParser.Parser.ReadToken">
            <summary>
            Reads next token from the input stream.
            </summary>
            <returns>Token symbol which was read.</returns>
        </member>
        <member name="M:GoldParser.Parser.DiscardInputToken">
            <summary>
            Removes current token and pops next token from the input stack.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.CurrentLRState">
            <summary>
            Gets current LR state.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.ReductionCount">
            <summary>
            Gets number of items in the current reduction
            </summary>
        </member>
        <member name="M:GoldParser.Parser.GetReductionSyntaxNode(System.Int32)">
            <summary>
            Gets reduction item syntax object by its index.
            </summary>
            <param name="index">Index of reduction item.</param>
            <returns>Syntax object attached to reduction item.</returns>
        </member>
        <member name="M:GoldParser.Parser.GetExpectedTokens">
            <summary>
            Gets array of expected token symbols.
            </summary>
        </member>
        <member name="M:GoldParser.Parser.CommentTextLength(System.Int32)">
            <summary>
            Gets current comment text.
            </summary>
        </member>
        <member name="T:GoldParser.Parser.TokenParseResult">
            <summary>
            Result of parsing token.
            </summary>
        </member>
        <member name="T:GoldParser.Parser.Token">
            <summary>
            Represents data about current token.
            </summary>
        </member>
        <member name="T:GoldParser.Parser.LRStackItem">
            <summary>
            Represents item in the LR parsing stack.
            </summary>
        </member>
        <member name="T:GoldParser.Rule">
            <summary>
            Rule is the logical structures of the grammar.
            </summary>
            <remarks>
            Rules consist of a head containing a nonterminal 
            followed by a series of both nonterminals and terminals.
            </remarks>	
        </member>
        <member name="M:GoldParser.Rule.#ctor(System.Int32,GoldParser.Symbol,GoldParser.Symbol[])">
            <summary>
            Creates a new instance of <c>Rule</c> class.
            </summary>
            <param name="index">Index of the rule in the grammar rule table.</param>
            <param name="nonTerminal">Nonterminal of the rule.</param>
            <param name="symbols">Terminal and nonterminal symbols of the rule.</param>
        </member>
        <member name="P:GoldParser.Rule.Index">
            <summary>
            Gets index of the rule in the rule table.
            </summary>
        </member>
        <member name="P:GoldParser.Rule.NonTerminal">
            <summary>
            Gets the head symbol of the rule.
            </summary>
        </member>
        <member name="P:GoldParser.Rule.Name">
            <summary>
            Gets name of the rule.
            </summary>
        </member>
        <member name="P:GoldParser.Rule.Count">
            <summary>
            Gets number of symbols.
            </summary>
        </member>
        <member name="P:GoldParser.Rule.Item(System.Int32)">
            <summary>
            Gets symbol by its index.
            </summary>
        </member>
        <member name="P:GoldParser.Rule.ContainsOneNonTerminal">
            <summary>
            Gets true if the rule contains exactly one symbol.
            </summary>
            <remarks>Used by the Parser object to TrimReductions</remarks>
        </member>
        <member name="P:GoldParser.Rule.Definition">
            <summary>
            Gets the rule definition.
            </summary>
        </member>
        <member name="M:GoldParser.Rule.ToString">
            <summary>
            Returns the Backus-Noir representation of the rule.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GoldParser.SourceLineReadCallback">
            <summary>
            This callback is used by parser to notify read source line.
            Use parser.LineText to get line source.
            </summary>
        </member>
        <member name="T:GoldParser.SR">
            <summary>
            Custom resource class. Usage:
            string s = Res.GetString(Res.MyIdenfitier);
            </summary>
        </member>
        <member name="T:GoldParser.Symbol">
            <summary>
            Represents a terminal or nonterminal symbol used by the Deterministic
            Finite Automata (DFA) and LR Parser. 
            </summary>
            <remarks>
            Symbols can be either terminals (which represent a class of 
            tokens - such as identifiers) or nonterminals (which represent 
            the rules and structures of the grammar).  Terminal symbols fall 
            into several categories for use by the GOLD Parser Engine 
            which are enumerated in <c>SymbolType</c> enumeration.
            </remarks>
        </member>
        <member name="M:GoldParser.Symbol.#ctor(System.Int32,System.String,GoldParser.SymbolType)">
            <summary>
            Creates a new instance of <c>Symbol</c> class.
            </summary>
            <param name="index">Symbol index in symbol table.</param>
            <param name="name">Name of the symbol.</param>
            <param name="symbolType">Type of the symbol.</param>
        </member>
        <member name="P:GoldParser.Symbol.Index">
            <summary>
            Returns the index of the symbol in the GOLDParser object's Symbol Table.
            </summary>
        </member>
        <member name="P:GoldParser.Symbol.Name">
            <summary>
            Returns the name of the symbol.
            </summary>
        </member>
        <member name="P:GoldParser.Symbol.SymbolType">
            <summary>
            Returns an enumerated data type that denotes
            the class of symbols that the object belongs to.
            </summary>
        </member>
        <member name="M:GoldParser.Symbol.ToString">
            <summary>
            Returns the text representation of the symbol.
            In the case of nonterminals, the name is delimited by angle brackets,
            special terminals are delimited by parenthesis
            and terminals are delimited by single quotes 
            (if special characters are present).
            </summary>
            <returns>String representation of symbol.</returns>
        </member>
        <member name="T:GoldParser.SymbolType">
            <summary>
            Type of symbol.
            </summary>
        </member>
        <member name="F:GoldParser.SymbolType.NonTerminal">
            <summary>
            Normal nonterminal
            </summary>
        </member>
        <member name="F:GoldParser.SymbolType.Terminal">
            <summary>
            Normal terminal
            </summary>
        </member>
        <member name="F:GoldParser.SymbolType.WhiteSpace">
            <summary>
            This Whitespace symbols is a special terminal
            that is automatically ignored the the parsing engine.
            Any text accepted as whitespace is considered
            to be inconsequential and "meaningless".
            </summary>
        </member>
        <member name="F:GoldParser.SymbolType.End">
            <summary>
            The End symbol is generated when the tokenizer
            reaches the end of the source text.
            </summary>
        </member>
        <member name="F:GoldParser.SymbolType.CommentStart">
            <summary>
            This type of symbol designates the start of a block quote.
            </summary>
        </member>
        <member name="F:GoldParser.SymbolType.CommentEnd">
            <summary>
            This type of symbol designates the end of a block quote.
            </summary>
        </member>
        <member name="F:GoldParser.SymbolType.CommentLine">
            <summary>
            When the engine reads a token that is recognized as
            a line comment, the remaining characters on the line
            are automatically ignored by the parser.
            </summary>
        </member>
        <member name="F:GoldParser.SymbolType.Error">
            <summary>
            The Error symbol is a general-purpose means
            of representing characters that were not recognized
            by the tokenizer. In other words, when the tokenizer
            reads a series of characters that is not accepted
            by the DFA engine, a token of this type is created.
            </summary>
        </member>
    </members>
</doc>
