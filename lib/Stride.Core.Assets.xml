<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stride.Core.Assets</name>
    </assembly>
    <members>
        <member name="T:Stride.Core.Assets.Analysis.AssetAnalysis">
            <summary>
            Analysis for <see cref="T:Stride.Core.Assets.AssetItem"/>.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.AssetAnalysisParameters">
            <summary>
            Parameters for asset analysis.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.AssetBaseAnalysis">
            <summary>
            An analysis to validate that all assets in a package have a valid <see cref="!:Asset.Base"/>.
             In order to be valid, this analysis must be run after a <see cref="T:Stride.Core.Assets.Analysis.PackageAnalysis"/>
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetBaseAnalysis.#ctor(Stride.Core.Assets.PackageSession)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Analysis.AssetBaseAnalysis"/> class.
            </summary>
            <param name="packageSession">The package session.</param>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetBaseAnalysis.Run(Stride.Core.Diagnostics.ILogger)">
            <summary>
            Performs a wide package validation analysis.
            </summary>
            <param name="log">The log to output the result of the validation.</param>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetBaseAnalysis.ValidateAssetBase(Stride.Core.Diagnostics.ILogger)">
            <summary>
            Validates the inheritance of all assets in the package.
            </summary>
            <param name="log">The log to output the result of the analysis.</param>
            <returns>A collection that contains all valid assets.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetBaseAnalysis.ValidateAssetBase(Stride.Core.Assets.AssetItem)">
            <summary>
            Validates the inheritance of an asset by checking base accessibility up to the root base.
            </summary>
            <param name="assetItem">The asset item.</param>
            <returns>A logger result with a list of all the base in bottom-up orde.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetBaseAnalysis.ValidateAssetBase(Stride.Core.Assets.AssetItem,Stride.Core.Diagnostics.ILogger)">
            <summary>
            Validates the inheritance of an asset by checking base accessibility up to the root base.
            </summary>
            <param name="assetItem">The asset item.</param>
            <param name="log">The log to output the result of the analysis.</param>
            <returns>A list of all the base in bottom-up order.</returns>
            <exception cref="T:System.ArgumentNullException">asset
            or
            log</exception>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetCollision.Clean(Stride.Core.Assets.Package,System.Collections.Generic.ICollection{Stride.Core.Assets.AssetItem},System.Collections.Generic.ICollection{Stride.Core.Assets.AssetItem},Stride.Core.Assets.Analysis.AssetResolver,System.Boolean,System.Boolean)">
            <summary>
            Cleans the specified input items.
            </summary>
            <param name="package">The package to process (optional).</param>
            <param name="inputItems">The input items.</param>
            <param name="outputItems">The output items.</param>
            <param name="assetResolver">The asset resolver.</param>
            <param name="cloneInput">if set to <c>true</c> [clone input].</param>
            <param name="removeUnloadableObjects">If set to <c>true</c>, assets will be cloned with <see cref="F:Stride.Core.Assets.AssetClonerFlags.RemoveUnloadableObjects"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            inputItems
            or
            outputItems
            or
            assetResolver
            </exception>
            <exception cref="T:System.ArgumentException">List cannot contain null items;inputItems</exception>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.AssetDependencies">
            <summary>
            Describes dependencies (in/out/broken) for a specific asset.
            </summary>
            <remarks>There are 3 types of dependencies:
            <ul>
            <li><c>in</c> dependencies: through the <see cref="P:Stride.Core.Assets.Analysis.AssetDependencies.LinksIn"/> property, contains assets                                 
            that are referencing this asset.</li>
            <li><c>out</c> dependencies: through the <see cref="P:Stride.Core.Assets.Analysis.AssetDependencies.LinksOut"/> property, contains assets 
            that are referenced by this asset.</li>
            <li><c>broken</c> dependencies: through the <see cref="P:Stride.Core.Assets.Analysis.AssetDependencies.BrokenLinksOut"/> property, 
            contains output links to assets that are missing.</li>
            </ul>
            </remarks>
        </member>
        <member name="P:Stride.Core.Assets.Analysis.AssetDependencies.Item">
            <summary>
            Gets the itemReferenced.
            </summary>
            <value>The itemReferenced.</value>
        </member>
        <member name="P:Stride.Core.Assets.Analysis.AssetDependencies.LinksIn">
            <summary>
            Gets the links coming into the element.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Analysis.AssetDependencies.LinksOut">
            <summary>
            Gets the links going out of the element.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Analysis.AssetDependencies.BrokenLinksOut">
            <summary>
            Gets the links out.
            </summary>
            <value>The missing references.</value>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetDependencies.Reset(System.Boolean)">
            <summary>
            Resets this instance and clear all dependencies (including missing)
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Analysis.AssetDependencies.HasMissingDependencies">
            <summary>
            Gets a value indicating whether this instance has missing references.
            </summary>
            <value><c>true</c> if this instance has missing references; otherwise, 
            <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.Assets.Analysis.AssetDependencies.MissingDependencyCount">
            <summary>
            Gets the number of missing dependencies of the asset.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetDependencies.AddLinkIn(Stride.Core.Assets.AssetItem,Stride.Core.Assets.Analysis.ContentLinkType)">
            <summary>
            Adds a link going into the element.
            </summary>
            <param name="fromItem">The element the link is coming from</param>
            <param name="contentLinkType">The type of link</param>
            <exception cref="T:System.ArgumentException">A link from this element already exists</exception>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetDependencies.AddLinkIn(Stride.Core.Assets.Analysis.AssetLink)">
            <summary>
            Adds a link coming from the provided element.
            </summary>
            <param name="contentLink">The link in</param>
            <exception cref="T:System.ArgumentException">A link from this element already exists</exception>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetDependencies.GetLinkIn(Stride.Core.Assets.AssetItem)">
            <summary>
            Gets the link coming from the provided element.
            </summary>
            <param name="fromItem">The element the link is coming from</param>
            <returns>The link</returns>
            <exception cref="T:System.ArgumentException">There is not link to the provided element</exception>
            <exception cref="T:System.ArgumentNullException">fromItem</exception>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetDependencies.RemoveLinkIn(Stride.Core.Assets.AssetItem)">
            <summary>
            Removes the link coming from the provided element.
            </summary>
            <param name="fromItem">The element the link is coming from</param>
            <exception cref="T:System.ArgumentNullException">fromItem</exception>
            <returns>The removed link</returns>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetDependencies.AddLinkOut(Stride.Core.Assets.AssetItem,Stride.Core.Assets.Analysis.ContentLinkType)">
            <summary>
            Adds a link going to the provided element.
            </summary>
            <param name="toItem">The element the link is going to</param>
            <param name="contentLinkType">The type of link</param>
            <exception cref="T:System.ArgumentException">A link to this element already exists</exception>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetDependencies.AddLinkOut(Stride.Core.Assets.Analysis.AssetLink)">
            <summary>
            Adds a link going to the provided element.
            </summary>
            <param name="contentLink">The link out</param>
            <exception cref="T:System.ArgumentException">A link to this element already exists</exception>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetDependencies.GetLinkOut(Stride.Core.Assets.AssetItem)">
            <summary>
            Gets the link going to the provided element.
            </summary>
            <param name="toItem">The element the link is going to</param>
            <returns>The link</returns>
            <exception cref="T:System.ArgumentException">There is not link to the provided element</exception>
            <exception cref="T:System.ArgumentNullException">toItem</exception>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetDependencies.RemoveLinkOut(Stride.Core.Assets.AssetItem)">
            <summary>
            Removes the link going to the provided element.
            </summary>
            <param name="toItem">The element the link is going to</param>
            <exception cref="T:System.ArgumentNullException">toItem</exception>
            <returns>The removed link</returns>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetDependencies.AddBrokenLinkOut(Stride.Core.Serialization.Contents.IReference,Stride.Core.Assets.Analysis.ContentLinkType)">
            <summary>
            Adds a broken link out.
            </summary>
            <param name="reference">the reference to the missing element</param>
            <param name="contentLinkType">The type of link</param>
            <exception cref="T:System.ArgumentException">A broken link to this element already exists</exception>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetDependencies.AddBrokenLinkOut(Stride.Core.Assets.Analysis.IContentLink)">
            <summary>
            Adds a broken link out.
            </summary>
            <param name="contentLink">The broken link</param>
            <exception cref="T:System.ArgumentException">A broken link to this element already exists</exception>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetDependencies.GetBrokenLinkOut(Stride.Core.Assets.AssetId)">
            <summary>
            Gets the broken link out to the provided element.
            </summary>
            <param name="id">The id of the element the link is going to</param>
            <returns>The link</returns>
            <exception cref="T:System.ArgumentException">There is not link to the provided element</exception>
            <exception cref="T:System.ArgumentNullException">toItem</exception>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetDependencies.RemoveBrokenLinkOut(Stride.Core.Assets.AssetId)">
            <summary>
            Removes the broken link to the provided element.
            </summary>
            <param name="id">The id to the missing element</param>
            <exception cref="T:System.ArgumentNullException">toItem</exception>
            <returns>The removed link</returns>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.AssetDependencyManager">
            <summary>
            A class responsible for providing asset dependencies for a <see cref="T:Stride.Core.Assets.PackageSession"/> and file tracking dependency.
            </summary>
            <remarks>
            This class provides methods to:
            <ul>
            <li>Find assets referencing a particular asset (recursively or not)</li>
            <li>Find assets referenced by a particular asset (recursively or not)</li>
            <li>Find missing references</li>
            <li>Find missing references for a particular asset</li>
            <li>Find assets file changed events that have changed on the disk</li>
            </ul>
            </remarks>
        </member>
        <member name="E:Stride.Core.Assets.Analysis.AssetDependencyManager.AssetChanged">
            <summary>
            Occurs when a asset changed. This event is called in the critical section of the dependency manager,
            meaning that dependencies can be safely computed via <see cref="M:Stride.Core.Assets.Analysis.AssetDependencyManager.ComputeDependencies(Stride.Core.Assets.AssetId,Stride.Core.Assets.Analysis.AssetDependencySearchOptions,Stride.Core.Assets.Analysis.ContentLinkType,System.Collections.Generic.HashSet{Stride.Core.Assets.AssetId})"/> method from this callback.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetDependencyManager.#ctor(Stride.Core.Assets.PackageSession)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Analysis.AssetDependencyManager" /> class.
            </summary>
            <param name="session">The session.</param>
            <exception cref="T:System.ArgumentNullException">session</exception>
        </member>
        <member name="P:Stride.Core.Assets.Analysis.AssetDependencyManager.IsInitialized">
            <summary>
            Gets a value indicating whether this instance is initialized. See remarks.
            </summary>
            <value><c>true</c> if this instance is initialized; otherwise, <c>false</c>.</value>
            <remarks>
            If this instance is not initialized, all public methods may block until the full initialization of this instance.
            </remarks>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetDependencyManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetDependencyManager.ComputeDependencies(Stride.Core.Assets.AssetId,Stride.Core.Assets.Analysis.AssetDependencySearchOptions,Stride.Core.Assets.Analysis.ContentLinkType,System.Collections.Generic.HashSet{Stride.Core.Assets.AssetId})">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetDependencyManager.CollectDynamicOutReferences(Stride.Core.Assets.Analysis.AssetDependencies,System.Func{Stride.Core.Assets.AssetId,Stride.Core.Assets.AssetItem},System.Boolean,System.Boolean)">
            <summary>
            Collects all references of an asset dynamically.
            </summary>
            <param name="result">The result.</param>
            <param name="assetResolver">The asset resolver.</param>
            <param name="isRecursive">if set to <c>true</c> collects references recursively.</param>
            <param name="keepParents">Indicate if the parent of the provided <paramref name="result"/> should be kept or not</param>
            <exception cref="T:System.ArgumentNullException">
            result
            or
            assetResolver
            </exception>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetDependencyManager.BeginSavingSession">
            <summary>
            This methods is called when a session is about to being saved.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetDependencyManager.EndSavingSession">
            <summary>
            This methods is called when a session has been saved.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetDependencyManager.CalculateDependencies(Stride.Core.Assets.AssetId)">
            <summary>
            Calculate the dependencies for the specified asset either by using the internal cache if the asset is already in the session
            or by calculating 
            </summary>
            <param name="assetId">The asset id.</param>
            <returns>The dependencies.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetDependencyManager.TrackPackage(Stride.Core.Assets.Package)">
            <summary>
            This method is called when a package needs to be tracked
            </summary>
            <param name="package">The package to track.</param>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetDependencyManager.UnTrackPackage(Stride.Core.Assets.Package)">
            <summary>
            This method is called when a package needs to be un-tracked
            </summary>
            <param name="package">The package to un-track.</param>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetDependencyManager.TrackAsset(Stride.Core.Assets.AssetItem)">
            <summary>
            This method is called when an asset needs to be tracked
            </summary>
            <param name="assetItemSource">The asset item source.</param>
            <returns>AssetDependencies.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetDependencyManager.TrackAsset(Stride.Core.Assets.AssetId)">
            <summary>
            This method is called when an asset needs to be tracked
            </summary>
            <returns>AssetDependencies.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetDependencyManager.UnTrackAsset(Stride.Core.Assets.AssetItem)">
            <summary>
            This method is called when an asset needs to be un-tracked
            </summary>
            <param name="assetItemSource">The asset item source.</param>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.AssetDependencyManager.IDependenciesCollector">
            <summary>
            An interface providing methods to collect of asset references from an <see cref="T:Stride.Core.Assets.AssetItem"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetDependencyManager.IDependenciesCollector.GetDependencies(Stride.Core.Assets.AssetItem)">
            <summary>
            Get the asset references of an <see cref="T:Stride.Core.Assets.AssetItem"/>. This function is not recursive.
            </summary>
            <param name="item">The item we when the references of</param>
            <returns></returns>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.AssetDependencyManager.DependenciesCollector">
            <summary>
            Visitor that collect all asset references.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.AssetDependencySearchOptions">
            <summary>
            Options used when searching asset dependencies.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Analysis.AssetDependencySearchOptions.In">
            <summary>
            Search for <c>in</c> only dependencies.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Analysis.AssetDependencySearchOptions.Out">
            <summary>
            Search for <c>out</c> only dependencies.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Analysis.AssetDependencySearchOptions.InOut">
            <summary>
            Search for <c>in</c> and <c>out</c> dependencies.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Analysis.AssetDependencySearchOptions.Recursive">
            <summary>
            Search recursively
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Analysis.AssetDependencySearchOptions.All">
            <summary>
            Search recursively all <c>in</c> and <c>out</c> dependencies.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.AssetFileChangedEvent">
            <summary>
            An event that notifies the type of disk change for an asset.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetFileChangedEvent.#ctor(Stride.Core.Assets.Package,Stride.Core.Assets.Analysis.AssetFileChangedType,Stride.Core.IO.UFile)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Analysis.AssetFileChangedEvent"/> class.
            </summary>
            <param name="package">The package.</param>
            <param name="changeType">Type of the change.</param>
            <param name="assetLocation">The asset URL.</param>
        </member>
        <member name="P:Stride.Core.Assets.Analysis.AssetFileChangedEvent.Package">
            <summary>
            Gets the package the event is related to.
            </summary>
            <value>The package.</value>
        </member>
        <member name="P:Stride.Core.Assets.Analysis.AssetFileChangedEvent.ChangeType">
            <summary>
            Gets the type of the change.
            </summary>
            <value>The type of the change.</value>
        </member>
        <member name="P:Stride.Core.Assets.Analysis.AssetFileChangedEvent.AssetId">
            <summary>
            Gets or sets the asset identifier.
            </summary>
            <value>The asset identifier.</value>
        </member>
        <member name="P:Stride.Core.Assets.Analysis.AssetFileChangedEvent.AssetLocation">
            <summary>
            Gets the asset location relative to the package.
            </summary>
            <value>The asset location.</value>
        </member>
        <member name="P:Stride.Core.Assets.Analysis.AssetFileChangedEvent.Hash">
            <summary>
            Gets or sets the hash of the asset source (optional).
            </summary>
            <value>
            The hash of the asset source.
            </value>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.AssetFileChangedEventSquasher">
            <summary>
            Used to squash a list of <see cref="T:Stride.Core.Assets.Analysis.AssetFileChangedEvent"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetFileChangedEventSquasher.Squash(System.Collections.Generic.List{Stride.Core.Assets.Analysis.AssetFileChangedEvent})">
            <summary>
            Squashes the list of events and returned a compact form of it. This method guaranty that for a specific file, there will be only a single event.
            So for example, if there is a Added + Changed + Deleted event, there will be only a Deleted event in final.
            </summary>
            <param name="currentAssetFileChangedEvents">The current asset file changed events.</param>
            <returns>An enumeration of events.</returns>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.AssetFileChangedType">
            <summary>
            Type of a change event for an asset.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Analysis.AssetFileChangedType.Added">
            <summary>
            An asset was added to the disk
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Analysis.AssetFileChangedType.Deleted">
            <summary>
            The asset was deleted from the disk
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Analysis.AssetFileChangedType.Updated">
            <summary>
            The asset is updated on the disk
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Analysis.AssetFileChangedType.AssetEventMask">
            <summary>
            The asset event mask (Added | Deleted | Updated).
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Analysis.AssetFileChangedType.SourceUpdated">
            <summary>
            The asset import was modified on the disk
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Analysis.AssetFileChangedType.SourceDeleted">
            <summary>
            The asset import was deleted from the disk
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Analysis.AssetFileChangedType.SourceEventMask">
            <summary>
            The source event mask (SourceUpdated | SourceDeleted).
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.AssetInheritanceSearchOptions">
            <summary>
            Possible options used when searching asset inheritance.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Analysis.AssetInheritanceSearchOptions.Base">
            <summary>
            Search for inheritances from base (direct object inheritance).
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Analysis.AssetInheritanceSearchOptions.Composition">
            <summary>
            Search for inheritances from compositions.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Analysis.AssetInheritanceSearchOptions.All">
            <summary>
            Search for all types of inheritances.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.AssetLink">
            <summary>
            Represent a link between Assets.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Analysis.AssetLink.Item">
            <summary>
            The asset item pointed by the dependency.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetLink.#ctor(Stride.Core.Assets.AssetItem,Stride.Core.Assets.Analysis.ContentLinkType)">
            <summary>
            Create an asset dependency of type <paramref name="type"/> and pointing to <paramref name="item"/>
            </summary>
            <param name="item">The item the dependency is pointing to</param>
            <param name="type">The type of the dependency between the items</param>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetLink.Clone">
            <summary>
            Gets a clone copy of the asset dependency.
            </summary>
            <returns>the clone instance</returns>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetPartsAnalysis.GenerateNewBaseInstanceIds``2(Stride.Core.Assets.AssetCompositeHierarchyData{``0,``1})">
            <summary>
            Assigns new unique identifiers for base part <see cref="P:Stride.Core.Assets.BasePart.InstanceId"/> in the given <paramref name="hierarchy"/>.
            </summary>
            <typeparam name="TAssetPartDesign"></typeparam>
            <typeparam name="TAssetPart">The underlying type of part.</typeparam>
            <param name="hierarchy">The hierarchy which part groups should have new identifiers.</param>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.AssetReferenceAnalysis">
            <summary>
            This analysis provides a method for visiting asset and file references 
            (<see cref="T:Stride.Core.Serialization.Contents.IReference" /> or <see cref="T:Stride.Core.IO.UFile" /> or <see cref="T:Stride.Core.IO.UDirectory" />)
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Analysis.AssetReferenceAnalysis.EnableCaching">
            <summary>
            Gets or sets the enable caching. Only used when loading packages
            </summary>
            <value>The enable caching.</value>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetReferenceAnalysis.Visit(System.Object)">
            <summary>
            Gets all references (subclass of <see cref="T:Stride.Core.Serialization.Contents.IReference" /> and <see cref="T:Stride.Core.IO.UFile" />) from the specified asset
            </summary>
            <param name="obj">The object.</param>
            <returns>A list of references.</returns>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.AssetReferenceLink">
            <summary>
            Updatable reference link returned by <see cref="M:Stride.Core.Assets.Analysis.AssetReferenceAnalysis.Visit(System.Object)"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetReferenceLink.#ctor(Stride.Core.Reflection.MemberPath,System.Object,System.Func{System.Nullable{Stride.Core.Assets.AssetId},System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Analysis.AssetReferenceLink" /> class.
            </summary>
            <param name="path">The path.</param>
            <param name="reference">The reference.</param>
            <param name="updateReference">The update reference.</param>
        </member>
        <member name="F:Stride.Core.Assets.Analysis.AssetReferenceLink.Path">
            <summary>
            The path to the member holding this reference.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Analysis.AssetReferenceLink.Reference">
            <summary>
            A <see cref="T:Stride.Core.Serialization.Contents.IReference"/> or <see cref="T:Stride.Core.IO.UFile"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetReferenceLink.UpdateReference(System.Nullable{Stride.Core.Assets.AssetId},System.String)">
            <summary>
            Updates the reference.
            </summary>
            <param name="guid">The unique identifier.</param>
            <param name="location">The location.</param>
        </member>
        <member name="F:Stride.Core.Assets.Analysis.AssetReferenceLink.updateReference">
            <summary>
            A specialized method to update the reference (guid, and location).
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.AssetResolver">
            <summary>
            Helper to find available new asset locations and identifiers.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.AssetResolver.ContainsAssetWithIdDelegate">
            <summary>
            Delegate to test if an asset id is already used.
            </summary>
            <param name="id">The unique identifier.</param>
            <returns><c>true</c> if an asset id is already used, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Analysis.AssetResolver"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetResolver.#ctor(Stride.Core.NamingHelper.ContainsLocationDelegate,Stride.Core.Assets.Analysis.AssetResolver.ContainsAssetWithIdDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Analysis.AssetResolver" /> class.
            </summary>
            <param name="containsLocation">The delegate used to check if an asset location is already used.</param>
            <param name="containsAssetWithId">The delegate used to check if an asset identifier is already used.</param>
        </member>
        <member name="P:Stride.Core.Assets.Analysis.AssetResolver.ExistingLocations">
            <summary>
            Gets the locations already used.
            </summary>
            <value>The locations.</value>
        </member>
        <member name="P:Stride.Core.Assets.Analysis.AssetResolver.ExistingIds">
            <summary>
            Gets the asset ids already used.
            </summary>
            <value>The existing ids.</value>
        </member>
        <member name="P:Stride.Core.Assets.Analysis.AssetResolver.AlwaysCreateNewId">
            <summary>
            Gets or sets a value indicating whether to always generate a new id on <see cref="M:Stride.Core.Assets.Analysis.AssetResolver.RegisterId(Stride.Core.Assets.AssetId,Stride.Core.Assets.AssetId@)"/>.
            </summary>
            <value><c>true</c> if [force new identifier]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.Assets.Analysis.AssetResolver.ContainsLocation">
            <summary>
            Gets or sets a delegate to test if a location is already used.
            </summary>
            <value>A delegate to test if a location is already used.</value>
        </member>
        <member name="P:Stride.Core.Assets.Analysis.AssetResolver.ContainsAssetWithId">
            <summary>
            Gets or sets a delegate to test if an asset id is already used.
            </summary>
            <value>A delegate to test if an asset id is already used.</value>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetResolver.RegisterLocation(Stride.Core.IO.UFile,Stride.Core.IO.UFile@)">
            <summary>
            Finds a name available for a new asset. This method will try to create a name based on an existing name and will append
            "_" + (number++) on every try. The new location found is added to the known existing locations.
            </summary>
            <param name="location">The location.</param>
            <param name="newLocation">The new location.</param>
            <returns><c>true</c> if there is a new location, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetResolver.RegisterId(Stride.Core.Assets.AssetId,Stride.Core.Assets.AssetId@)">
            <summary>
            Registers an asset identifier for usage.
            </summary>
            <param name="assetId">The asset identifier.</param>
            <param name="newGuid">The new unique identifier if an asset has already been registered with the same id.</param>
            <returns><c>true</c> if the asset id is already in used. <paramref name="newGuid" /> contains a new guid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetResolver.FromPackage(Stride.Core.Assets.Package)">
            <summary>
            Creates a new <see cref="T:Stride.Core.Assets.Analysis.AssetResolver" /> using an existing package to check the existence of asset locations and ids.
            </summary>
            <param name="package">The package.</param>
            <returns>A new AssetResolver.</returns>
            <exception cref="T:System.ArgumentNullException">package</exception>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetResolver.FromPackage(System.Collections.Generic.IList{Stride.Core.Assets.Package})">
            <summary>
            Creates a new <see cref="T:Stride.Core.Assets.Analysis.AssetResolver"/> using an existing package to check the existence of asset locations and ids.
            </summary>
            <param name="packages">The packages.</param>
            <returns>A new AssetResolver.</returns>
            <exception cref="T:System.ArgumentNullException">package</exception>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetResolver.IsContainingId(Stride.Core.Assets.AssetId)">
            <summary>
            Checks whether the <paramref name="id"/> is already contained.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.AssetResolver.IsContainingLocation(Stride.Core.IO.UFile)">
            <summary>
            Checks whether the <paramref name="location"/> is already contained.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.BuildAssetLink">
            <summary>
            A structure representing a link (a dependency) between two <see cref="T:Stride.Core.Assets.Analysis.BuildAssetNode"/> instances (assets).
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.BuildAssetLink.#ctor(Stride.Core.Assets.Analysis.BuildAssetNode,Stride.Core.Assets.Analysis.BuildAssetNode,Stride.Core.Assets.Analysis.BuildDependencyType)">
            <summary>
            Initialize a new instance of the <see cref="T:Stride.Core.Assets.Analysis.BuildAssetLink"/> structure.
            </summary>
            <param name="source">The source asset of the dependency.</param>
            <param name="target">The target asset of the dependency.</param>
            <param name="dependencyType">The type of dependency.</param>
        </member>
        <member name="P:Stride.Core.Assets.Analysis.BuildAssetLink.DependencyType">
            <summary>
            The type of dependency.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Analysis.BuildAssetLink.Source">
            <summary>
            The source asset of the dependency.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Analysis.BuildAssetLink.Target">
            <summary>
            The target asset of the dependency.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.BuildAssetLink.HasOne(Stride.Core.Assets.Analysis.BuildDependencyType)">
            <summary>
            Indicates whether this <see cref="T:Stride.Core.Assets.Analysis.BuildAssetLink"/> has at least one of the dependency of the given flags.
            </summary>
            <param name="type">A bitset of <see cref="T:Stride.Core.Assets.Analysis.BuildDependencyType"/>.</param>
            <returns>True if it has at least one of the given dependencies, false otherwise.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.BuildAssetLink.HasAll(Stride.Core.Assets.Analysis.BuildDependencyType)">
            <summary>
            Indicates whether this <see cref="T:Stride.Core.Assets.Analysis.BuildAssetLink"/> has at all dependencies of the given flags.
            </summary>
            <param name="type">A bitset of <see cref="T:Stride.Core.Assets.Analysis.BuildDependencyType"/>.</param>
            <returns>True if it has all the given dependencies, false otherwise.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.BuildAssetLink.Equals(Stride.Core.Assets.Analysis.BuildAssetLink)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.BuildAssetLink.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.BuildAssetLink.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.BuildAssetLink.op_Equality(Stride.Core.Assets.Analysis.BuildAssetLink,Stride.Core.Assets.Analysis.BuildAssetLink)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.BuildAssetLink.op_Inequality(Stride.Core.Assets.Analysis.BuildAssetLink,Stride.Core.Assets.Analysis.BuildAssetLink)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.BuildAssetNode.Analyze(Stride.Core.Assets.Compiler.AssetCompilerContext)">
            <summary>
            Performs analysis on the asset to figure out all the needed dependencies
            </summary>
            <param name="context">The compiler context</param>
            <returns>True if the node was updated, false otherwise.</returns>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.BuildDependencyInfo">
            <summary>
            A structure representing information related to a build dependency between one source assets and a target type of asset.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Analysis.BuildDependencyInfo.CompilationContext">
            <summary>
            The compilation context in which to compile the target asset.
            </summary>
            <remarks>This context is not relevant if the asset is not compiled, like when <see cref="F:Stride.Core.Assets.Analysis.BuildDependencyInfo.DependencyType"/> is <see cref="F:Stride.Core.Assets.Analysis.BuildDependencyType.CompileAsset"/></remarks>
        </member>
        <member name="F:Stride.Core.Assets.Analysis.BuildDependencyInfo.AssetType">
            <summary>
            The type of asset targeted by this dependency.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Analysis.BuildDependencyInfo.DependencyType">
            <summary>
            The type of dependency, indicating whether the target asset must actually be compiled, and whether it should be compiled before the referecing asset or can be at the same time.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.BuildDependencyInfo.#ctor(System.Type,System.Type,Stride.Core.Assets.Analysis.BuildDependencyType)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Analysis.BuildDependencyInfo"/> structure.
            </summary>
            <param name="assetType">The type of asset targeted by this dependency info.</param>
            <param name="compilationContext">The compilation context in which to compile the target asset.</param>
            <param name="dependencyType">The type of dependency.</param>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.BuildDependencyInfo.Equals(Stride.Core.Assets.Analysis.BuildDependencyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.BuildDependencyInfo.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.BuildDependencyInfo.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.BuildDependencyInfo.op_Equality(Stride.Core.Assets.Analysis.BuildDependencyInfo,Stride.Core.Assets.Analysis.BuildDependencyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.BuildDependencyInfo.op_Inequality(Stride.Core.Assets.Analysis.BuildDependencyInfo,Stride.Core.Assets.Analysis.BuildDependencyInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.BuildDependencyManager">
            <summary>
            Build dependency manager
            Basically is a container of BuildAssetNode
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.BuildDependencyManager.BuildNodeDesc">
            <summary>
            A structure used as key of the dictionary containing all the build nodes
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Analysis.BuildDependencyManager.AssetCompilerRegistry">
            <summary>
            The AssetCompilerRegistry, here mostly for ease of access
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.BuildDependencyManager.FindOrCreateNode(Stride.Core.Assets.AssetItem,System.Type)">
            <summary>
            Finds or creates a node, notice that this will not perform an analysis on the node, which must be explicitly called on the node
            </summary>
            <param name="item">The asset item to find or create</param>
            <param name="compilationContext">The context in which the asset is compiled.</param>
            <returns>The build node associated with item</returns>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.BuildDependencyManager.FindNode(Stride.Core.Assets.AssetItem,System.Type)">
            <summary>
            Finds a node, notice that this will not perform an analysis on the node, which must be explicitly called on the node
            </summary>
            <param name="item">The asset item to find</param>
            <param name="compilationContext">The context in which the asset is compiled.</param>
            <returns>The build node associated with item or null if it was not found</returns>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.BuildDependencyManager.FindNodes(Stride.Core.Assets.AssetItem)">
            <summary>
            Finds all the nodes associated with the asset
            </summary>
            <param name="item">The asset item to find</param>
            <returns>The build nodes associated with item or null if it was not found</returns>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.BuildDependencyManager.RemoveNode(Stride.Core.Assets.Analysis.BuildAssetNode)">
            <summary>
            Removes the node from the build graph
            </summary>
            <param name="node">The node to remove</param>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.BuildDependencyManager.RemoveNode(Stride.Core.Assets.AssetItem)">
            <summary>
            Removes the nodes associated with item from the build graph
            </summary>
            <param name="item">The item to use to find nodes to remove</param>
        </member>
        <member name="F:Stride.Core.Assets.Analysis.BuildDependencyType.Runtime">
            <summary>
            The content generated during compilation needs the content compiled from the target asset to be loaded at runtime.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Analysis.BuildDependencyType.CompileAsset">
            <summary>
            The uncompiled target asset is accessed during compilation.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Analysis.BuildDependencyType.CompileContent">
            <summary>
            The content compiled from the target asset is needed during compilation.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.CollectionItemIdsAnalysis">
            <summary>
            A static class that analyzes an <see cref="T:Stride.Core.Assets.AssetItem"/> and fixes issues in <see cref="T:Stride.Core.Reflection.CollectionItemIdentifiers"/> of collections contained in this asset.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.CollectionItemIdsAnalysis.FixupItemIds(Stride.Core.Assets.AssetItem,Stride.Core.Diagnostics.ILogger)">
            <summary>
            Fixes up the <see cref="T:Stride.Core.Reflection.CollectionItemIdentifiers"/> of collections contained in the given asset. by generating new ids if there are any duplicate.
            </summary>
            <param name="assetItem">The asset to analyze.</param>
            <param name="logger">A logger to output fixed entries.</param>
            <remarks>This method doesn't handle collections in derived assets that will be desynchronized afterwards.</remarks>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.CollectionItemIdsAnalysis.CollectionItemIdsAnalysisVisitor.Fixup(System.Object)">
            <summary>
            Fixes up the <see cref="T:Stride.Core.Reflection.CollectionItemIdentifiers"/> of a collection by generating new ids if there are any duplicate.
            </summary>
            <param name="collection">The collection to fix up.</param>
            <remarks>This method doesn't handle collections in derived objects that will be desynchronized afterwards.</remarks>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.ContentLinkType">
            <summary>
            The different possible types of link between elements.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Analysis.ContentLinkType.Reference">
            <summary>
            A simple reference to the asset.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Analysis.ContentLinkType.All">
            <summary>
            All type of links.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.IAssetDependencyManager.ComputeDependencies(Stride.Core.Assets.AssetId,Stride.Core.Assets.Analysis.AssetDependencySearchOptions,Stride.Core.Assets.Analysis.ContentLinkType,System.Collections.Generic.HashSet{Stride.Core.Assets.AssetId})">
            <summary>
            Computes the dependencies for the specified asset.
            </summary>
            <param name="assetId">The asset id.</param>
            <param name="dependenciesOptions">The dependencies options.</param>
            <param name="linkTypes">The type of links to visit while computing the dependencies</param>
            <param name="visited">The list of element already visited.</param>
            <returns>The dependencies, or <c>null</c> if the object is not tracked.</returns>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.IContentLink">
            <summary>
            The interface for types representing a link between elements.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Analysis.IContentLink.Element">
            <summary>
            The reference to the element at the opposite side of the link.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Analysis.IContentLink.Type">
            <summary>
            The type of the link.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.IdentifiableObjectAnalysis">
            <summary>
            A static class that visit an object and make sure that none of the <see cref="T:Stride.Core.IIdentifiable"/> it references share the same identifier. In case there are duplicate identifier,
            the visitor can generate new identifiers for the duplicate
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.IdentifiableObjectAnalysis.Visit(System.Object,System.Boolean,Stride.Core.Diagnostics.ILogger)">
            <summary>
            Visits the object and look up for duplicates identifier in <see cref="T:Stride.Core.IIdentifiable"/> instances.
            </summary>
            <param name="obj">The object to visit.</param>
            <param name="fixDuplicate">If true, duplicate identifiers will be fixed by generating new identifiers.</param>
            <param name="logger">A logger to report duplicates and fixes.</param>
            <returns>True if the given object has been modified, false otherwise.</returns>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.PackageAnalysis">
            <summary>
            An analysis to check the validity of a <see cref="T:Stride.Core.Assets.Package"/>, convert <see cref="T:Stride.Core.IO.UFile"/> or <see cref="T:Stride.Core.IO.UDirectory"/>
            references to absolute/relative paths, check asset references...etc, change <see cref="T:Stride.Core.Serialization.Contents.IReference"/> location
            if location changed.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Analysis.PackageAnalysis.Parameters">
            <summary>
            Gets the parameters used for this analysis.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.PackageAnalysis.Run">
            <summary>
            Runs a full analysis on this package.
            </summary>
            <returns>LoggerResult.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.PackageAnalysis.Run(Stride.Core.Diagnostics.ILogger)">
            <summary>
            Runs a full analysis on this package.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.PackageAnalysis.CheckDependencies">
            <summary>
            Checks the package.
            </summary>
            <returns>LoggerResult.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.PackageAnalysis.ProcessPackageUPaths">
            <summary>
            Processes the UPaths on package (but not on assets, use <see cref="M:Stride.Core.Assets.Analysis.PackageAnalysis.ProcessAssets"/> for this)
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.PackageAnalysis.ProcessRootAssetReferences(Stride.Core.Assets.RootAssetCollection,Stride.Core.Assets.Package,Stride.Core.Diagnostics.ILogger)">
            <summary>
            Fix and/or remove invalid RootAssets entries.
            Note: at some point, we might want to make IReference be part of the same workflow as standard asset references.
            </summary>
            <param name="rootAssets">The root assets to check.</param>
            <param name="referencedPackage">The package where to look for root reference.</param>
            <param name="log">The logger.</param>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.PackageAnalysisParameters">
            <summary>
            Class PackageAnalysisParameters. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.PackageSessionAnalysis">
            <summary>
            A package analysis provides methods to validate the integrity of a whole package.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.PackageSessionAnalysis.#ctor(Stride.Core.Assets.PackageSession,Stride.Core.Assets.Analysis.PackageAnalysisParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Analysis.PackageSessionAnalysis" /> class.
            </summary>
            <param name="packageSession">The package session.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="P:Stride.Core.Assets.Analysis.PackageSessionAnalysis.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.PackageSessionAnalysis.Run(Stride.Core.Diagnostics.ILogger)">
            <summary>
            Performs a wide package validation analysis.
            </summary>
            <param name="log">The log to output the result of the validation.</param>
        </member>
        <member name="T:Stride.Core.Assets.Analysis.PackageSessionAnalysisBase">
            <summary>
            Base class for all <see cref="P:Stride.Core.Assets.Analysis.PackageSessionAnalysisBase.Session"/> and <see cref="T:Stride.Core.Assets.Asset"/> integrity analysis.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.PackageSessionAnalysisBase.#ctor(Stride.Core.Assets.PackageSession)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Analysis.PackageSessionAnalysis" /> class.
            </summary>
            <param name="packageSession">The package session.</param>
            <exception cref="T:System.ArgumentNullException">packageSession</exception>
        </member>
        <member name="P:Stride.Core.Assets.Analysis.PackageSessionAnalysisBase.Session">
            <summary>
            Gets the session.
            </summary>
            <value>The session.</value>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.PackageSessionAnalysisBase.Run">
            <summary>
            Performs a wide package validation analysis.
            </summary>
            <returns>Result of the validation.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Analysis.PackageSessionAnalysisBase.Run(Stride.Core.Diagnostics.ILogger)">
            <summary>
            Performs a wide package validation analysis.
            </summary>
            <param name="log">The log to output the result of the validation.</param>
        </member>
        <member name="T:Stride.Core.Assets.Asset">
            <summary>
            Base class for Asset.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Asset.IsIdLocked">
            <summary>
            Locks the unique identifier for further changes.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Asset.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Asset"/> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Asset.Id">
            <summary>
            Gets or sets the unique identifier of this asset.
            </summary>
            <value>The identifier.</value>
            <exception cref="T:System.InvalidOperationException">Cannot change an Asset Object Id once it is locked</exception>
        </member>
        <member name="P:Stride.Core.Assets.Asset.SerializedVersion">
            <summary>
            Gets or sets the version number for this asset, used internally when migrating assets.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Stride.Core.Assets.Asset.Tags">
            <summary>
            Gets the tags for this asset.
            </summary>
            <value>
            The tags for this asset.
            </value>
        </member>
        <member name="P:Stride.Core.Assets.Asset.MainSource">
            <summary>
            Gets the main source file for this asset, used in the editor.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Asset.CreateDerivedAsset(System.String)">
            <summary>
            Creates an asset that inherits from this asset.
            </summary>
            <param name="baseLocation">The location of this asset.</param>
            <returns>An asset that inherits this asset instance</returns>
        </member>
        <member name="M:Stride.Core.Assets.Asset.CreateDerivedAsset(System.String,System.Collections.Generic.Dictionary{System.Guid,System.Guid}@)">
            <summary>
            Creates an asset that inherits from this asset.
            </summary>
            <param name="baseLocation">The location of this asset.</param>
            <param name="idRemapping">A dictionary in which will be stored all the <see cref="T:System.Guid"/> remapping done for the child asset.</param>
            <returns>An asset that inherits this asset instance</returns>
        </member>
        <member name="T:Stride.Core.Assets.AssetAliasAttribute">
            <summary>
            Associates a type name used in YAML content.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.AssetAliasAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.AssetAliasAttribute"/> class.
            </summary>
            <param name="alias">The type name.</param>
        </member>
        <member name="P:Stride.Core.Assets.AssetAliasAttribute.Alias">
            <summary>
            Gets the type name.
            </summary>
            <value>The type name.</value>
        </member>
        <member name="T:Stride.Core.Assets.AssetCloner">
            <summary>
            Allows to clone an asset or values stored in an asset.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.AssetCloner.#ctor(System.Object,Stride.Core.Assets.AssetClonerFlags,System.Collections.Generic.IEnumerable{Stride.Core.IIdentifiable})">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.AssetCloner" /> struct.
            </summary>
            <param name="value">The value to clone.</param>
            <param name="flags">Cloning flags</param>
            <param name="externalIdentifiables"></param>
        </member>
        <member name="M:Stride.Core.Assets.AssetCloner.Clone(System.Collections.Generic.Dictionary{System.Guid,System.Guid}@)">
            <summary>
            Clones the current value of this cloner with the specified new shadow registry (optional)
            </summary>
            <param name="idRemapping">A dictionary containing the remapping of <see cref="P:Stride.Core.IIdentifiable.Id"/> if <see cref="F:Stride.Core.Assets.AssetClonerFlags.GenerateNewIdsForIdentifiableObjects"/> has been passed to the cloner.</param>
            <returns>A clone of the value associated with this cloner.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetCloner.Clone(System.Object,Stride.Core.Assets.AssetClonerFlags,System.Collections.Generic.HashSet{Stride.Core.IIdentifiable},System.Collections.Generic.Dictionary{System.Guid,System.Guid}@)">
            <summary>
            Clones the specified asset using asset serialization.
            </summary>
            <param name="asset">The asset.</param>
            <param name="flags">Flags used to control the cloning process</param>
            <param name="externalIdentifiable"></param>
            <param name="idRemapping">A dictionary containing the remapping of <see cref="P:Stride.Core.IIdentifiable.Id"/> if <see cref="F:Stride.Core.Assets.AssetClonerFlags.GenerateNewIdsForIdentifiableObjects"/> has been passed to the cloner.</param>
            <returns>A clone of the asset.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetCloner.Clone(System.Object,Stride.Core.Assets.AssetClonerFlags,System.Collections.Generic.Dictionary{System.Guid,System.Guid}@)">
            <summary>
            Clones the specified asset using asset serialization.
            </summary>
            <param name="asset">The asset.</param>
            <param name="flags">Flags used to control the cloning process</param>
            <param name="idRemapping">A dictionary containing the remapping of <see cref="P:Stride.Core.IIdentifiable.Id"/> if <see cref="F:Stride.Core.Assets.AssetClonerFlags.GenerateNewIdsForIdentifiableObjects"/> has been passed to the cloner.</param>
            <returns>A clone of the asset.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetCloner.Clone(System.Object,Stride.Core.Assets.AssetClonerFlags)">
            <summary>
            Clones the specified asset using asset serialization.
            </summary>
            <param name="asset">The asset.</param>
            <param name="flags">Flags used to control the cloning process</param>
            <returns>A clone of the asset.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetCloner.Clone``1(``0,Stride.Core.Assets.AssetClonerFlags)">
            <summary>
            Clones the specified asset using asset serialization.
            </summary>
            <typeparam name="T">The type of the asset.</typeparam>
            <param name="asset">The asset.</param>
            <param name="flags">Flags used to control the cloning process</param>
            <returns>A clone of the asset.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetCloner.Clone``1(``0,Stride.Core.Assets.AssetClonerFlags,System.Collections.Generic.Dictionary{System.Guid,System.Guid}@)">
            <summary>
            Clones the specified asset using asset serialization.
            </summary>
            <typeparam name="T">The type of the asset.</typeparam>
            <param name="asset">The asset.</param>
            <param name="flags">Flags used to control the cloning process</param>
            <param name="idRemapping">A dictionary containing the remapping of <see cref="P:Stride.Core.IIdentifiable.Id"/> if <see cref="F:Stride.Core.Assets.AssetClonerFlags.GenerateNewIdsForIdentifiableObjects"/> has been passed to the cloner.</param>
            <returns>A clone of the asset.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetCloner.Clone``1(``0,Stride.Core.Assets.AssetClonerFlags,System.Collections.Generic.HashSet{Stride.Core.IIdentifiable},System.Collections.Generic.Dictionary{System.Guid,System.Guid}@)">
            <summary>
            Clones the specified asset using asset serialization.
            </summary>
            <typeparam name="T">The type of the asset.</typeparam>
            <param name="asset">The asset.</param>
            <param name="flags">Flags used to control the cloning process</param>
            <param name="externalIdentifiable"></param>
            <param name="idRemapping">A dictionary containing the remapping of <see cref="P:Stride.Core.IIdentifiable.Id"/> if <see cref="F:Stride.Core.Assets.AssetClonerFlags.GenerateNewIdsForIdentifiableObjects"/> has been passed to the cloner.</param>
            <returns>A clone of the asset.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetCloner.ComputeHash(System.Object,Stride.Core.Assets.AssetClonerFlags)">
            <summary>
            Generates a runtime hash id from the serialization of this asset.
            </summary>
            <param name="asset">The asset to get the runtime hash id</param>
            <param name="flags">Flags used to control the serialization process</param>
            <returns>An object id</returns>
        </member>
        <member name="T:Stride.Core.Assets.AssetClonerFlags">
            <summary>
            Flags used by <see cref="T:Stride.Core.Assets.AssetCloner"/>
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.AssetClonerFlags.None">
            <summary>
            No special flags while cloning.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.AssetClonerFlags.ReferenceAsNull">
            <summary>
            Attached references will be cloned as <c>null</c>
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.AssetClonerFlags.RemoveItemIds">
            <summary>
            Remove ids attached to item of collections when cloning
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.AssetClonerFlags.RemoveUnloadableObjects">
            <summary>
            Removes invalid objects
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.AssetClonerFlags.GenerateNewIdsForIdentifiableObjects">
            <summary>
            Generates new ids for objects that implement <see cref="T:Stride.Core.IIdentifiable"/>.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.AssetClonerFlags.ClearExternalReferences">
            <summary>
            Clears any external references in the cloned object
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.AssetClonerFlags.KeepReferences">
            <summary>
            Attached references will be kept as is
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.AssetComposite">
            <summary>
            Base class for an asset that supports inheritance by composition.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.AssetCompositeHierarchy`2.Hierarchy">
            <summary>
            Gets or sets the container of the hierarchy of asset parts.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.AssetCompositeHierarchy`2.GetParent(`1)">
            <summary>
            Gets the parent of the given part.
            </summary>
            <param name="part"></param>
            <returns>The part that is the parent of the given part, or null if the given part is at the root level.</returns>
            <remarks>Implementations of this method should not rely on the <see cref="P:Stride.Core.Assets.AssetCompositeHierarchy`2.Hierarchy"/> property to determine the parent.</remarks>
            <exception cref="T:System.ArgumentNullException">The given part is null.</exception>
        </member>
        <member name="M:Stride.Core.Assets.AssetCompositeHierarchy`2.IndexOf(`1)">
            <summary>
            Gets the index of the given part in the child list of its parent, or in the list of root if this part is a root part.
            </summary>
            <param name="part">The part for which to retrieve the index.</param>
            <returns>The index of the part, or a negative value if the part is an orphan part that is not a member of this asset.</returns>
            <exception cref="T:System.ArgumentNullException">The given part is null.</exception>
        </member>
        <member name="M:Stride.Core.Assets.AssetCompositeHierarchy`2.GetChild(`1,System.Int32)">
            <summary>
            Gets the child of the given part that matches the given index.
            </summary>
            <param name="part">The part for which to retrieve a child.</param>
            <param name="index">The index of the child to retrieve.</param>
            <returns>The the child of the given part that matches the given index.</returns>
            <exception cref="T:System.ArgumentNullException">The given part is null.</exception>
            <exception cref="T:System.IndexOutOfRangeException">The given index is out of range.</exception>
        </member>
        <member name="M:Stride.Core.Assets.AssetCompositeHierarchy`2.GetChildCount(`1)">
            <summary>
            Gets the number of children in the given part.
            </summary>
            <param name="part">The part for which to retrieve the number of children.</param>
            <returns>The number of children in the given part.</returns>
            <exception cref="T:System.ArgumentNullException">The given part is null.</exception>
        </member>
        <member name="M:Stride.Core.Assets.AssetCompositeHierarchy`2.EnumerateChildParts(`1,System.Boolean)">
            <summary>
            Enumerates parts that are children of the given part.
            </summary>
            <param name="part">The part for which to enumerate child parts.</param>
            <param name="isRecursive">If true, child parts will be enumerated recursively.</param>
            <returns>A sequence containing the child parts of the given part.</returns>
            <remarks>Implementations of this method should not rely on the <see cref="P:Stride.Core.Assets.AssetCompositeHierarchy`2.Hierarchy"/> property to enumerate.</remarks>
        </member>
        <member name="M:Stride.Core.Assets.AssetCompositeHierarchy`2.EnumerateChildPartDesigns(`0,Stride.Core.Assets.AssetCompositeHierarchyData{`0,`1},System.Boolean)">
            <summary>
            Enumerates design parts that are children of the given design part.
            </summary>
            <param name="partDesign">The design part for which to enumerate child parts.</param>
            <param name="hierarchyData">The hierarchy data object in which the design parts can be retrieved.</param>
            <param name="isRecursive">If true, child design parts will be enumerated recursively.</param>
            <returns>A sequence containing the child design parts of the given design part.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetCompositeHierarchy`2.CollectParts">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Assets.AssetCompositeHierarchy`2.FindPart(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Assets.AssetCompositeHierarchy`2.ContainsPart(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Assets.AssetCompositeHierarchy`2.CreateDerivedAsset(System.String,System.Collections.Generic.Dictionary{System.Guid,System.Guid}@)">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Assets.AssetCompositeHierarchyData`2">
            <summary>
            A class containing the information of a hierarchy of asset parts contained in an <see cref="T:Stride.Core.Assets.AssetCompositeHierarchy`2"/>.
            </summary>
            <typeparam name="TAssetPartDesign">The type used for the design information of a part.</typeparam>
            <typeparam name="TAssetPart">The type used for the actual parts,</typeparam>
        </member>
        <member name="P:Stride.Core.Assets.AssetCompositeHierarchyData`2.RootParts">
            <summary>
            Gets a collection if identifier of all the parts that are root of this hierarchy.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.AssetCompositeHierarchyData`2.Parts">
            <summary>
            Gets a collection of all the parts, root or not, contained in this hierarchy.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.AssetCompositeHierarchyExtensions">
            <summary>
            Extension methods for <see cref="T:Stride.Core.Assets.AssetCompositeHierarchy`2"/> and <see cref="T:Stride.Core.Assets.AssetCompositeHierarchyData`2"/>
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.AssetCompositeHierarchyExtensions.EnumerateRootPartDesigns``2(Stride.Core.Assets.AssetCompositeHierarchyData{``0,``1})">
            <summary>
            Enumerates the root design parts of this hierarchy.
            </summary>
            <typeparam name="TAssetPartDesign">The type used for the design information of a part.</typeparam>
            <typeparam name="TAssetPart">The type used for the actual parts,</typeparam>
            <param name="asset">This hierarchy.</param>
            <returns>A sequence containing the root design parts of this hierarchy.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetCompositeHierarchyExtensions.MergeInto``2(Stride.Core.Assets.AssetCompositeHierarchyData{``0,``1},Stride.Core.Assets.AssetCompositeHierarchyData{``0,``1})">
            <summary>
            Merges the <paramref name="other"/> hierarchy into this hierarchy.
            </summary>
            <remarks>
            This method does not check whether the two hierarchies have independent parts and will fail otherwise.
            </remarks>
            <typeparam name="TAssetPartDesign">The type used for the design information of a part.</typeparam>
            <typeparam name="TAssetPart">The type used for the actual parts,</typeparam>
            <param name="asset">This hierarchy.</param>
            <param name="other">The other hierarchy which parts will added to this hierarchy.</param>
        </member>
        <member name="T:Stride.Core.Assets.AssetContentTypeAttribute">
            <summary>
            Describes which runtime-type, loadable through the <see cref="T:Stride.Core.Serialization.Contents.ContentManager"/>, corresponds to the associated asset type.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.AssetContentTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.AssetContentTypeAttribute"/> class.
            </summary>
            <param name="contentType">The content type corresponding to the associated asset type.</param>
        </member>
        <member name="P:Stride.Core.Assets.AssetContentTypeAttribute.ContentType">
            <summary>
            The content type corresponding to the associated asset type.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.AssetDescriptionAttribute">
            <summary>
            Associates meta-information to a particular <see cref="T:Stride.Core.Assets.Asset"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.AssetDescriptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.AssetDescriptionAttribute"/> class.
            </summary>
            <param name="fileExtensions">The file extensions supported by a type of asset.</param>
        </member>
        <member name="P:Stride.Core.Assets.AssetDescriptionAttribute.FileExtensions">
            <summary>
            Gets the file extensions supported by a type of asset.
            </summary>
            <value>The extension.</value>
        </member>
        <member name="P:Stride.Core.Assets.AssetDescriptionAttribute.AllowArchetype">
            <summary>
            Gets whether this asset can be an archetype.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.AssetDescriptionAttribute.Referenceable">
            <summary>
            Defines if an asset is referenceable through an <see cref="T:Stride.Core.Assets.AssetReference"/>.
            Asset name collision is allowed in this case because they exist only at compile-time.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.AssetDescriptionAttribute.AlwaysMarkAsRoot">
            <summary>
            Always mark this asset type as root.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.AssetException">
            <summary>
            An AssetException.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.AssetException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.AssetException"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.AssetException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Stride.Core.Assets.AssetException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="formattedArguments">The formatted arguments.</param>
        </member>
        <member name="M:Stride.Core.Assets.AssetException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Stride.Core.Assets.AssetFactory`1">
            <summary>
            A base implementation of the <see cref="T:Stride.Core.Assets.IAssetFactory`1"/> interface.
            </summary>
            <typeparam name="T">The type of asset this factory can create.</typeparam>
        </member>
        <member name="P:Stride.Core.Assets.AssetFactory`1.AssetType">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.AssetFactory`1.New">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Assets.AssetFileSerializer">
            <summary>
            Main entry point for serializing/deserializing <see cref="T:Stride.Core.Assets.Asset"/>.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.AssetFileSerializer.Default">
            <summary>
            The default serializer.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.AssetFileSerializer.Register(Stride.Core.Assets.Serializers.IAssetSerializerFactory)">
            <summary>
            Registers the specified serializer factory.
            </summary>
            <param name="serializerFactory">The serializer factory.</param>
            <exception cref="T:System.ArgumentNullException">serializerFactory</exception>
        </member>
        <member name="M:Stride.Core.Assets.AssetFileSerializer.FindSerializer(System.String)">
            <summary>
            Finds a serializer for the specified asset file extension.
            </summary>
            <param name="assetFileExtension">The asset file extension.</param>
            <returns>IAssetSerializerFactory.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetFileSerializer.Load``1(System.String,Stride.Core.Diagnostics.ILogger)">
            <summary>
            Deserializes an <see cref="T:Stride.Core.Assets.Asset"/> from the specified stream.
            </summary>
            <typeparam name="T">Type of the asset</typeparam>
            <param name="filePath">The file path.</param>
            <param name="log">The logger.</param>
            <returns>An instance of Asset not a valid asset asset object file.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetFileSerializer.Save(System.String,System.Object,Stride.Core.Assets.Yaml.AttachedYamlAssetMetadata,Stride.Core.Diagnostics.ILogger)">
            <summary>
            Serializes an <see cref="T:Stride.Core.Assets.Asset" /> to the specified file path.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="asset">The asset object.</param>
            <param name="yamlMetadata"></param>
            <param name="log">The logger.</param>
            <exception cref="T:System.ArgumentNullException">filePath</exception>
        </member>
        <member name="M:Stride.Core.Assets.AssetFileSerializer.Save(System.IO.Stream,System.Object,Stride.Core.Assets.Yaml.AttachedYamlAssetMetadata,Stride.Core.Diagnostics.ILogger)">
            <summary>
            Serializes an <see cref="T:Stride.Core.Assets.Asset" /> to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="asset">The asset object.</param>
            <param name="yamlMetadata"></param>
            <param name="log">The logger.</param>
            <exception cref="T:System.ArgumentNullException">
            stream
            or
            assetFileExtension
            </exception>
        </member>
        <member name="T:Stride.Core.Assets.AssetFolder">
            <summary>
            A location relative to a package from where assets will be loaded
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.AssetFolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.AssetFolder"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.AssetFolder.#ctor(Stride.Core.IO.UDirectory)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.AssetFolder"/> class.
            </summary>
            <param name="path">The folder.</param>
        </member>
        <member name="P:Stride.Core.Assets.AssetFolder.Path">
            <summary>
            Gets or sets the folder.
            </summary>
            <value>The folder.</value>
        </member>
        <member name="T:Stride.Core.Assets.AssetFolderCollection">
            <summary>
            A collection of <see cref="T:Stride.Core.Assets.AssetFolder"/>
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.AssetFolderCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.AssetFolderCollection"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.AssetFolderCollection.Add(Stride.Core.Assets.AssetFolder)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.AssetFolderCollection.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.AssetFolderCollection.Contains(Stride.Core.Assets.AssetFolder)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.AssetFolderCollection.CopyTo(Stride.Core.Assets.AssetFolder[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.AssetFolderCollection.CloneTo(Stride.Core.Assets.AssetFolderCollection)">
            <summary>
            Clones this instance to the specified instance.
            </summary>
            <param name="foldersTo">The folders.</param>
            <exception cref="T:System.ArgumentNullException">folders</exception>
        </member>
        <member name="M:Stride.Core.Assets.AssetFolderCollection.Remove(Stride.Core.Assets.AssetFolder)">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Assets.AssetFolderCollection.Count">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Assets.AssetFolderCollection.System#Collections#Generic#ICollection{Stride#Core#Assets#AssetFolder}#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.AssetFolderCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.AssetFolderCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Assets.AssetFormatVersionAttribute">
            <summary>
            Describes what format version this asset currently uses, for asset upgrading.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.AssetFormatVersionAttribute.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.AssetFormatVersionAttribute"/> class.
            </summary>
            <param name="name">The dependency name.</param>
            <param name="version">The current format version of this asset.</param>
            <param name="minUpgradableVersion">The minimum format version that supports upgrade for this asset.</param>
        </member>
        <member name="M:Stride.Core.Assets.AssetFormatVersionAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.AssetFormatVersionAttribute"/> class.
            </summary>
            <param name="name">The dependency name.</param>
            <param name="version">The current format version of this asset.</param>
            <param name="minUpgradableVersion">The minimum format version that supports upgrade for this asset.</param>
        </member>
        <member name="P:Stride.Core.Assets.AssetFormatVersionAttribute.Name">
            <summary>
            Gets or sets the dependency name.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.AssetFormatVersionAttribute.Version">
            <summary>
            Gets the current format version of this asset.
            </summary>
            <value>
            The current format version of this asset.
            </value>
        </member>
        <member name="P:Stride.Core.Assets.AssetFormatVersionAttribute.MinUpgradableVersion">
            <summary>
            Gets the minimum format version that supports upgrade for this asset.
            </summary>
            <value>
            The minimum format version that supports upgrade for this asset.
            </value>
        </member>
        <member name="T:Stride.Core.Assets.AssetHash">
            <summary>
            Helper to compute a stable hash from an asset including all meta informations (ids, overrides).
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.AssetHash.Compute(System.Object,Stride.Core.Assets.AssetClonerFlags)">
            <summary>
            Computes a stable hash from an asset including all meta informations (ids, overrides).
            </summary>
            <param name="asset">An object instance</param>
            <param name="flags">Flags used to control the serialization process</param>
            <returns>a stable hash</returns>
        </member>
        <member name="T:Stride.Core.Assets.AssetImporterParameters">
            <summary>
            Parameters used by <see cref="M:Stride.Core.Assets.IAssetImporter.Import(Stride.Core.IO.UFile,Stride.Core.Assets.AssetImporterParameters)"/>
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.AssetImporterParameters.Logger">
            <summary>
            Gets or sets the logger to use during the import.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.AssetImporterParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.AssetImporterParameters"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.AssetImporterParameters.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.AssetImporterParameters"/> class.
            </summary>
            <param name="supportedTypes">The supported types.</param>
        </member>
        <member name="M:Stride.Core.Assets.AssetImporterParameters.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.AssetImporterParameters"/> class.
            </summary>
            <param name="supportedTypes">The supported types.</param>
            <exception cref="T:System.ArgumentNullException">supportedTypes</exception>
            <exception cref="T:System.ArgumentException">Invalid type [{0}]. Type must be assignable to Asset.ToFormat(type);supportedTypes</exception>
        </member>
        <member name="P:Stride.Core.Assets.AssetImporterParameters.InputParameters">
            <summary>
            Gets the import input parameters.
            </summary>
            <value>The import input parameters.</value>
        </member>
        <member name="P:Stride.Core.Assets.AssetImporterParameters.SelectedOutputTypes">
            <summary>
            Gets the selected output types.
            </summary>
            <value>The selected output types.</value>
        </member>
        <member name="M:Stride.Core.Assets.AssetImporterParameters.IsTypeSelectedForOutput``1">
            <summary>
            Determines whether the specified type is type selected for output by this importer.
            </summary>
            <typeparam name="T">A Type asset </typeparam>
            <returns><c>true</c> if the specified type is type selected for output by this importer; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetImporterParameters.IsTypeSelectedForOutput(System.Type)">
            <summary>
            Determines whether the specified type is type selected for output by this importer.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is type selected for output by this importer; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Stride.Core.Assets.AssetImporterParameters.HasSelectedOutputTypes">
            <summary>
            Gets a value indicating whether this instance has valid selected output types.
            </summary>
            <value><c>true</c> if this instance has selected output types; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Stride.Core.Assets.AssetItem">
            <summary>
            An asset item part of a <see cref="P:Stride.Core.Assets.AssetItem.Package"/> accessible through <see cref="P:Stride.Core.Assets.Package.Assets"/>.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.AssetItem.DefaultComparerById">
            <summary>
            The default comparer use only the id of an assetitem to match assets.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.AssetItem.#ctor(Stride.Core.IO.UFile,Stride.Core.Assets.Asset)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.AssetItem" /> class.
            </summary>
            <param name="location">The location inside the package.</param>
            <param name="asset">The asset.</param>
            <exception cref="T:System.ArgumentNullException">location</exception>
            <exception cref="T:System.ArgumentNullException">asset</exception>
        </member>
        <member name="M:Stride.Core.Assets.AssetItem.#ctor(Stride.Core.IO.UFile,Stride.Core.Assets.Asset,Stride.Core.Assets.Package)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.AssetItem" /> class.
            </summary>
            <param name="location">The location.</param>
            <param name="asset">The asset.</param>
            <param name="package">The package.</param>
            <exception cref="T:System.ArgumentNullException">location</exception>
            <exception cref="T:System.ArgumentNullException">asset</exception>
        </member>
        <member name="P:Stride.Core.Assets.AssetItem.Location">
            <summary>
            Gets the location of this asset.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:Stride.Core.Assets.AssetItem.AlternativePath">
            <summary>
            Gets or sets the real location of this asset if it is overriden (similar to `Link` in C# project files).
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.AssetItem.SourceFolder">
            <summary>
            Gets the directory where the assets will be stored on the disk relative to the <see cref="P:Stride.Core.Assets.AssetItem.Package"/>. The directory
            will update the list found in <see cref="P:Stride.Core.Assets.Package.AssetFolders"/>
            </summary>
            <value>The directory.</value>
        </member>
        <member name="P:Stride.Core.Assets.AssetItem.Id">
            <summary>
            Gets the unique identifier of this asset.
            </summary>
            <value>The unique identifier.</value>
        </member>
        <member name="P:Stride.Core.Assets.AssetItem.Package">
            <summary>
            Gets the package where this asset is stored.
            </summary>
            <value>The package.</value>
        </member>
        <member name="P:Stride.Core.Assets.AssetItem.YamlMetadata">
            <summary>
            Gets the attached metadata for YAML serialization.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.AssetItem.ToReference">
            <summary>
            Converts this item to a reference.
            </summary>
            <returns>AssetReference.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetItem.Clone(Stride.Core.IO.UFile,Stride.Core.Assets.Asset,Stride.Core.Assets.AssetClonerFlags)">
            <summary>
            Clones this instance without the attached package.
            </summary>
            <param name="newLocation">The new location that will be used in the cloned <see cref="T:Stride.Core.Assets.AssetItem"/>. If this parameter
            is null, it keeps the original location of the asset.</param>
            <param name="newAsset">The new asset that will be used in the cloned <see cref="T:Stride.Core.Assets.AssetItem"/>. If this parameter
            is null, it clones the original asset. otherwise, the specified asset is used as-is in the new <see cref="T:Stride.Core.Assets.AssetItem"/>
            (no clone on newAsset is performed)</param>
            <param name="flags">Flags used with <see cref="M:Stride.Core.Assets.AssetCloner.Clone(System.Collections.Generic.Dictionary{System.Guid,System.Guid}@)"/>.</param>
            <returns>A clone of this instance.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetItem.Clone(System.Boolean,Stride.Core.IO.UFile,Stride.Core.Assets.Asset,Stride.Core.Assets.AssetClonerFlags)">
            <summary>
            Clones this instance without the attached package.
            </summary>
            <param name="keepPackage">if set to <c>true</c> copy package information, only used by the <see cref="T:Stride.Core.Assets.Analysis.AssetDependencyManager" />.</param>
            <param name="newLocation">The new location that will be used in the cloned <see cref="T:Stride.Core.Assets.AssetItem" />. If this parameter
            is null, it keeps the original location of the asset.</param>
            <param name="newAsset">The new asset that will be used in the cloned <see cref="T:Stride.Core.Assets.AssetItem" />. If this parameter
            is null, it clones the original asset. otherwise, the specified asset is used as-is in the new <see cref="T:Stride.Core.Assets.AssetItem" />
            (no clone on newAsset is performed)</param>
            <param name="flags">Flags used with <see cref="M:Stride.Core.Assets.AssetCloner.Clone(System.Collections.Generic.Dictionary{System.Guid,System.Guid}@)"/>.</param>
            <returns>A clone of this instance.</returns>
        </member>
        <member name="P:Stride.Core.Assets.AssetItem.FullPath">
            <summary>
            Gets the full absolute path of this asset on the disk, taking into account the <see cref="P:Stride.Core.Assets.AssetItem.SourceFolder"/>, and the
            <see cref="P:Stride.Core.Assets.Package.RootDirectory"/>. See remarks.
            </summary>
            <value>The full absolute path of this asset on the disk.</value>
            <remarks>
            This value is only valid if this instance is attached to a <see cref="P:Stride.Core.Assets.AssetItem.Package"/>, and that the package has
            a non null <see cref="P:Stride.Core.Assets.Package.RootDirectory"/>.
            </remarks>
        </member>
        <member name="P:Stride.Core.Assets.AssetItem.Asset">
            <summary>
            Gets or sets the asset.
            </summary>
            <value>The asset.</value>
        </member>
        <member name="P:Stride.Core.Assets.AssetItem.ModifiedTime">
            <summary>
            Gets the modified time. See remarks.
            </summary>
            <value>The modified time.</value>
            <remarks>
            By default, contains the last modified time of the asset from the disk. If IsDirty is also updated from false to true
            , this time will get current time of modification.
            </remarks>
        </member>
        <member name="P:Stride.Core.Assets.AssetItem.Version">
            <summary>
            Gets the asset version incremental counter, increased everytime the asset is edited.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.AssetItem.IsDirty">
            <summary>
            Gets or sets a value indicating whether this instance is dirty. See remarks.
            </summary>
            <value><c>true</c> if this instance is dirty; otherwise, <c>false</c>.</value>
            <remarks>
            When an asset is modified, this property must be set to true in order to track assets changes.
            </remarks>
        </member>
        <member name="M:Stride.Core.Assets.AssetItem.CreateDerivedAsset">
            <summary>
            Creates a child asset that is inheriting the values of this asset.
            </summary>
            <returns>A new asset inheriting the values of this asset.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetItem.FindBase">
            <summary>
            Finds the base item referenced by this item from the current session (using the <see cref="P:Stride.Core.Assets.AssetItem.Package"/> setup
            on this instance)
            </summary>
            <returns>The base item or null if not found.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetItem.UpdateSourceFolders">
            <summary>
            In case <see cref="P:Stride.Core.Assets.AssetItem.SourceFolder"/> was null, generates it.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.AssetItemExtensions.GetProjectInclude(Stride.Core.Assets.AssetItem)">
            <summary>
            Gets the asset filename relative to its .csproj file for <see cref="T:Stride.Core.Assets.IProjectAsset"/>.
            </summary>
            <param name="assetItem">The asset item.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetItemExtensions.GetGeneratedAbsolutePath(Stride.Core.Assets.AssetItem)">
            <summary>
            If the asset is a <see cref="T:Stride.Core.Assets.IProjectFileGeneratorAsset"/>, gets the generated file full path.
            </summary>
            <param name="assetItem">The asset item.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetItemExtensions.GetGeneratedInclude(Stride.Core.Assets.AssetItem)">
            <summary>
            If the asset is a <see cref="T:Stride.Core.Assets.IProjectFileGeneratorAsset"/>, gets the generated file path relative to its containing .csproj.
            </summary>
            <param name="assetItem">The asset item.</param>
            <returns></returns>
        </member>
        <member name="T:Stride.Core.Assets.AssetMember">
            <summary>
            Represents a member of an asset.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.AssetMember.Asset">
            <summary>
            The asset.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.AssetMember.MemberPath">
            <summary>
            The path to the member in the asset.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.AssetMigration">
            <summary>
            Helper for migrating asset to newer versions.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.AssetMigrationContext">
            <summary>
            Context used by <see cref="T:Stride.Core.Assets.IAssetUpgrader"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.AssetMigrationContext.#ctor(Stride.Core.Assets.Package,Stride.Core.Serialization.Contents.IReference,System.String,Stride.Core.Diagnostics.ILogger)">
            <summary>
            Initializes a new instance of <see cref="T:Stride.Core.Assets.AssetMigrationContext"/>.
            </summary>
            <param name="package"></param>
            <param name="assetReference"></param>
            <param name="assetFullPath"></param>
            <param name="log"></param>
        </member>
        <member name="P:Stride.Core.Assets.AssetMigrationContext.Package">
            <summary>
            The current package where the current asset is being migrated. This is null when the asset being migrated is a package.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.AssetMigrationContext.Log">
            <summary>
            The logger for this context.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.AssetPart">
            <summary>
            A part asset contained by an asset that is <see cref="T:Stride.Core.Assets.IAssetComposite"/>.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.AssetPart.PartId">
            <summary>
            Asset identifier.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.AssetPart.Base">
            <summary>
            Base asset identifier.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.AssetPart.Equals(Stride.Core.Assets.AssetPart)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.AssetPart.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.AssetPart.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.AssetPartCollection`2.RefreshKeys">
            <summary>
            Refreshes the keys of this collection. Must be called if some ids of the contained parts have changed.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.AssetPartCollectionSerializer`2.Initialize(Stride.Core.Serialization.SerializerSelector)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.AssetPartCollectionSerializer`2.PreSerialize(Stride.Core.Assets.AssetPartCollection{`0,`1}@,Stride.Core.Serialization.ArchiveMode,Stride.Core.Serialization.SerializationStream)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.AssetPartCollectionSerializer`2.Serialize(Stride.Core.Assets.AssetPartCollection{`0,`1}@,Stride.Core.Serialization.ArchiveMode,Stride.Core.Serialization.SerializationStream)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.AssetPartCollectionSerializer`2.EnumerateGenericInstantiations(Stride.Core.Serialization.SerializerSelector,System.Collections.Generic.IList{System.Type})">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Assets.AssetReference">
            <summary>
            An asset reference.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.AssetReference.#ctor(Stride.Core.Assets.AssetId,Stride.Core.IO.UFile)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.AssetReference"/> class.
            </summary>
            <param name="id">The unique identifier of the asset.</param>
            <param name="location">The location.</param>
        </member>
        <member name="P:Stride.Core.Assets.AssetReference.Id">
            <summary>
            Gets or sets the unique identifier of the reference asset.
            </summary>
            <value>The unique identifier of the reference asset..</value>
        </member>
        <member name="P:Stride.Core.Assets.AssetReference.Location">
            <summary>
            Gets or sets the location of the asset.
            </summary>
            <value>The location.</value>
        </member>
        <member name="M:Stride.Core.Assets.AssetReference.op_Equality(Stride.Core.Assets.AssetReference,Stride.Core.Assets.AssetReference)">
            <summary>
            Implements the ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetReference.op_Inequality(Stride.Core.Assets.AssetReference,Stride.Core.Assets.AssetReference)">
            <summary>
            Implements the !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetReference.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.AssetReference.New(Stride.Core.Assets.AssetId,Stride.Core.IO.UFile)">
            <summary>
            Tries to parse an asset reference in the format "GUID:Location".
            </summary>
            <param name="id">The identifier.</param>
            <param name="location">The location.</param>
            <returns><c>true</c> if parsing was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetReference.TryParse(System.String,Stride.Core.Assets.AssetId@,Stride.Core.IO.UFile@)">
            <summary>
            Tries to parse an asset reference in the format "[GUID/]GUID:Location". The first GUID is optional and is used to store the ID of the reference.
            </summary>
            <param name="assetReferenceText">The asset reference.</param>
            <param name="id">The unique identifier of asset pointed by this reference.</param>
            <param name="location">The location.</param>
            <returns><c>true</c> if parsing was successful, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">assetReferenceText</exception>
        </member>
        <member name="M:Stride.Core.Assets.AssetReference.TryParse(System.String,Stride.Core.Assets.AssetReference@)">
            <summary>
            Tries to parse an asset reference in the format "GUID:Location".
            </summary>
            <param name="assetReferenceText">The asset reference.</param>
            <param name="assetReference">The reference.</param>
            <returns><c>true</c> if parsing was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Stride.Core.Assets.AssetReferenceExtensions">
            <summary>
            Extension methods for <see cref="T:Stride.Core.Assets.AssetReference"/>
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.AssetReferenceExtensions.HasLocation(Stride.Core.Assets.AssetReference)">
            <summary>
            Determines whether the specified asset reference has location. If the reference is null, return <c>false</c>.
            </summary>
            <param name="assetReference">The asset reference.</param>
            <returns><c>true</c> if the specified asset reference has location; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Stride.Core.Assets.AssetReferenceDataSerializer">
            <summary>
            Serializer for <see cref="T:Stride.Core.Assets.AssetReference"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Stride.Core.Assets.AssetReferenceDataSerializer.Serialize(Stride.Core.Assets.AssetReference@,Stride.Core.Serialization.ArchiveMode,Stride.Core.Serialization.SerializationStream)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Assets.AssetRegistry">
            <summary>
            A registry for various content associated with assets.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.AssetRegistry.EngineAssemblies">
            <summary>
            Gets the list of engine assemblies currently registered.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.AssetRegistry.AssetAssemblies">
            <summary>
            Gets the list of asset assemblies currently registered.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.AssetRegistry.SupportedPlatforms">
            <summary>
            Gets the supported platforms.
            </summary>
            <value>The supported platforms.</value>
        </member>
        <member name="P:Stride.Core.Assets.AssetRegistry.RegisteredImporters">
            <summary>
            Gets an enumeration of registered importers.
            </summary>
            <value>The registered importers.</value>
        </member>
        <member name="M:Stride.Core.Assets.AssetRegistry.RegisterSupportedPlatforms(System.Collections.Generic.List{Stride.Core.Assets.SolutionPlatform})">
            <summary>
            Registers the supported platforms.
            </summary>
            <param name="platforms">The platforms.</param>
            <exception cref="T:System.ArgumentNullException">platforms</exception>
        </member>
        <member name="M:Stride.Core.Assets.AssetRegistry.IsAssetFileExtension(System.String)">
            <summary>
            Determines whether the file is an asset file type.
            </summary>
            <param name="extension">The file.</param>
            <returns><c>true</c> if [is asset file file] [the specified file]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetRegistry.GetAssetTypeFromFileExtension(System.String)">
            <summary>
            Gets the asset type from the extension. If no asset type is found, return null.
            </summary>
            <param name="extension">The extension of the asset file.</param>
            <returns>Type of the associated asset or null if not found.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetRegistry.GetDefaultExtension(System.Type)">
            <summary>
            Gets the default file associated with an asset.
            </summary>
            <param name="assetType">The type.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetRegistry.GetCurrentFormatVersions(System.Type)">
            <summary>
            Gets the current format version of an asset.
            </summary>
            <param name="assetType">The asset type.</param>
            <returns>The current format version of this asset.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetRegistry.GetAssetUpgraders(System.Type,System.String)">
            <summary>
            Gets the <see cref="T:Stride.Core.Assets.AssetUpgraderCollection"/> of an asset type, if available.
            </summary>
            <param name="assetType">The asset type.</param>
            <param name="dependencyName">The dependency name.</param>
            <returns>The <see cref="T:Stride.Core.Assets.AssetUpgraderCollection"/> of an asset type if available, or <c>null</c> otherwise.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetRegistry.GetDefaultExtension``1">
            <summary>
            Gets the default file associated with an asset.
            </summary>
            <typeparam name="T">Type of the asset.</typeparam>
            <returns>System.String.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetRegistry.GetPublicTypes">
            <summary>
            Returns an array of asset types that are non-abstract and public.
            </summary>
            <returns>An array of <see cref="T:System.Type"/> elements.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetRegistry.FindImporterForFile(System.String)">
            <summary>
            Finds the importer associated with an asset by the file of the file to import.
            </summary>
            <param name="file">The file to import.</param>
            <returns>An instance of the importer of null if not found.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetRegistry.FindImporterById(System.Guid)">
            <summary>
            Finds an importer by its id.
            </summary>
            <param name="importerId">The importer identifier.</param>
            <returns>An instance of the importer of null if not found.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetRegistry.RegisterImporter(Stride.Core.Assets.IAssetImporter)">
            <summary>
            Registers a <see cref="T:Stride.Core.Assets.IAssetImporter" /> for the specified asset type.
            </summary>
            <param name="importer">The importer.</param>
            <exception cref="T:System.ArgumentNullException">importer</exception>
        </member>
        <member name="M:Stride.Core.Assets.AssetRegistry.IsAssetType(System.Type,System.Boolean)">
            <summary>
            Check if the specified type is an asset.
            </summary>
            <param name="assetType">Type of the asset.</param>
            <param name="throwException">A boolean indicating whether this method should throw an exception if the type is not an asset type.</param>
            <returns><c>true</c> if the asset is an asset type, false otherwise.</returns>
        </member>
        <member name="M:Stride.Core.Assets.AssetRegistry.IsAssetOrPackageType(System.Type,System.Boolean)">
            <summary>
            Check if the specified type is an asset.
            </summary>
            <param name="assetType">Type of the asset.</param>
            <param name="throwException">A boolean indicating whether this method should throw an exception if the type is not an asset type.</param>
            <returns><c>true</c> if the asset is an asset type, false otherwise.</returns>
        </member>
        <member name="T:Stride.Core.Assets.AssetSelector">
            <summary>
            An asset selector
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.AssetTracker">
            <summary>
            Base class for tracking assets and executing an action on each change.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.AssetTracker.TrackAsset(Stride.Core.Assets.AssetItem)">
            <summary>
            Called when a new asset is tracked.
            </summary>
            <param name="assetItem"></param>
        </member>
        <member name="M:Stride.Core.Assets.AssetTracker.NotifyAssetChanged(Stride.Core.Assets.Asset)">
            <summary>
            Called when an asset changes.
            </summary>
            <param name="asset"></param>
        </member>
        <member name="M:Stride.Core.Assets.AssetTracker.UnTrackAsset(Stride.Core.Assets.AssetItem)">
            <summary>
            Called when an asset stop being tracked.
            </summary>
            <param name="assetItem"></param>
        </member>
        <member name="M:Stride.Core.Assets.AssetTracker.TrackPackage(Stride.Core.Assets.Package)">
            <summary>
            This method is called when a package needs to be tracked
            </summary>
            <param name="package">The package to track.</param>
        </member>
        <member name="M:Stride.Core.Assets.AssetTracker.UnTrackPackage(Stride.Core.Assets.Package)">
            <summary>
            This method is called when a package needs to be un-tracked
            </summary>
            <param name="package">The package to un-track.</param>
        </member>
        <member name="T:Stride.Core.Assets.AssetUpgraderAttribute">
            <summary>
            Describes which upgrader type to use to upgrade an asset, depending on this current version number.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.AssetUpgraderAttribute.#ctor(System.String,System.String,System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.AssetUpgraderAttribute"/> with a range of supported initial version numbers.
            </summary>
            <param name="name">The dependency name.</param>
            <param name="startMinVersion">The minimal initial version number this upgrader can work on.</param>
            <param name="targetVersion">The target version number of this upgrader.</param>
            <param name="assetUpgraderType">The type of upgrader to instantiate to upgrade the asset.</param>
        </member>
        <member name="M:Stride.Core.Assets.AssetUpgraderAttribute.#ctor(System.String,System.Int32,System.Int32,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.AssetUpgraderAttribute"/> with a single supported initial version number.
            </summary>
            <param name="name">The dependency name.</param>
            <param name="startVersion">The initial version number this upgrader can work on.</param>
            <param name="targetVersion">The target version number of this upgrader.</param>
            <param name="assetUpgraderType">The type of upgrader to instantiate to upgrade the asset.</param>
        </member>
        <member name="P:Stride.Core.Assets.AssetUpgraderAttribute.Name">
            <summary>
            Gets or sets the dependency name.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.AssetUpgraderAttribute.StartVersion">
            <summary>
            Gets or sets the minimal initial version number this upgrader can work on.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.AssetUpgraderAttribute.TargetVersion">
            <summary>
            Gets or sets the target version number of this upgrader.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.AssetUpgraderAttribute.AssetUpgraderType">
            <summary>
            Gets or sets the type of upgrader to instantiate to upgrade the asset.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.AssetWithSource">
            <summary>
            An asset that references a source file used during the compilation of the asset.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.AssetWithSource.Source">
            <summary>
            Gets or sets the source file of this asset.
            </summary>
            <value>The source.</value>
            <userdoc>
            The source file of this asset.
            </userdoc>
        </member>
        <member name="M:Stride.Core.Assets.BasePart.Equals(Stride.Core.Assets.BasePart)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Assets.BasePart.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Assets.BasePart.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Assets.BasePart.op_Equality(Stride.Core.Assets.BasePart,Stride.Core.Assets.BasePart)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Assets.BasePart.op_Inequality(Stride.Core.Assets.BasePart,Stride.Core.Assets.BasePart)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Assets.BasePartDataSerializer.Serialize(Stride.Core.Assets.BasePart@,Stride.Core.Serialization.ArchiveMode,Stride.Core.Serialization.SerializationStream)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Assets.Bundle">
            <summary>
            Description of an asset bundle.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Bundle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Bundle"/> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Bundle.Name">
            <summary>
            Gets or sets the name of this bundle.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Stride.Core.Assets.Bundle.Selectors">
            <summary>
            Gets the selectors used by this bundle.
            </summary>
            <value>The selectors.</value>
        </member>
        <member name="P:Stride.Core.Assets.Bundle.Dependencies">
            <summary>
            Gets the bundle dependencies.
            </summary>
            <value>The dependencies.</value>
        </member>
        <member name="P:Stride.Core.Assets.Bundle.OutputGroup">
            <summary>
            Gets the output group (used in conjonction with <see cref="!:ProjectBuildProfile.OutputGroupDirectories"/> to control where file will be put).
            </summary>
            <value>
            The output group.
            </value>
        </member>
        <member name="T:Stride.Core.Assets.BundleCollection">
            <summary>
            A collection of bundles.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.BundleCollection.#ctor(Stride.Core.Assets.Package)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.BundleCollection"/> class.
            </summary>
            <param name="package">The package.</param>
        </member>
        <member name="P:Stride.Core.Assets.BundleCollection.Package">
            <summary>
            Gets the package this bundle collection is defined for.
            </summary>
            <value>The package.</value>
        </member>
        <member name="T:Stride.Core.Assets.CollectionIdGenerator">
            <summary>
            A visitor that will generate a <see cref="T:Stride.Core.Reflection.CollectionItemIdentifiers"/> collection for each collection or dictionary of the visited object,
            and attach it to the related collection.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Compiler.AssetBuildStep">
            <summary>
            Represents a list of <see cref="T:Stride.Core.BuildEngine.BuildStep"/> instances that compiles a given asset.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.AssetBuildStep.#ctor(Stride.Core.Assets.AssetItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Compiler.AssetBuildStep"/> class.
            </summary>
            <param name="assetItem">The asset that can be build by this build step.</param>
        </member>
        <member name="P:Stride.Core.Assets.Compiler.AssetBuildStep.AssetItem">
            <summary>
            Gets the <see cref="P:Stride.Core.Assets.Compiler.AssetBuildStep.AssetItem"/> corresponding to the asset being built by this build step.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.AssetBuildStep.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Assets.Compiler.AssetCommand">
            <summary>
            A command processing an <see cref="T:Stride.Core.Assets.Asset"/>.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Compiler.AssetCommand`1.Version">
            <summary>
            This is useful if the asset binary format has changed and we want to bump the version to force re-evaluation/compilation of the command
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Compiler.AssetCompiledArgs">
            <summary>
            The class represents the argument of the <see cref="F:Stride.Core.Assets.Compiler.ItemListCompiler.AssetCompiled"/> event raised by the <see cref="T:Stride.Core.Assets.Compiler.ItemListCompiler"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.AssetCompiledArgs.#ctor(Stride.Core.Assets.AssetItem,Stride.Core.Assets.Compiler.AssetCompilerResult)">
            <summary>
            Constructs an <see cref="T:Stride.Core.Assets.Compiler.AssetCompiledArgs"/> instance.
            </summary>
            <param name="asset">The asset that has been compiled. Cannot be null.</param>
            <param name="result">The result of the asset compilation. Cannot be null.</param>
        </member>
        <member name="P:Stride.Core.Assets.Compiler.AssetCompiledArgs.Asset">
            <summary>
            The asset item that has just been compiled.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Compiler.AssetCompiledArgs.Result">
            <summary>
            The result of the asset compilation.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Compiler.AssetCompilerAttribute">
            <summary>
            Attribute to define an asset compiler for a <see cref="T:Stride.Core.Assets.Asset"/>.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Compiler.AssetCompilerBase">
            <summary>
            Base implementation for <see cref="T:Stride.Core.Assets.Compiler.IAssetCompiler"/> suitable to compile a single type of <see cref="T:Stride.Core.Assets.Asset"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.AssetCompilerBase.GetInputFiles(Stride.Core.Assets.AssetItem)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.AssetCompilerBase.GetInputTypes(Stride.Core.Assets.AssetItem)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.AssetCompilerBase.GetInputTypesToExclude(Stride.Core.Assets.AssetItem)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.AssetCompilerBase.Prepare(Stride.Core.Assets.Compiler.AssetCompilerContext,Stride.Core.Assets.AssetItem,System.String,Stride.Core.Assets.Compiler.AssetCompilerResult)">
            <summary>
            Compiles the asset from the specified package.
            </summary>
            <param name="context">The context to use to compile the asset.</param>
            <param name="assetItem">The asset to compile</param>
            <param name="targetUrlInStorage">The absolute URL to the asset, relative to the storage.</param>
            <param name="result">The result where the commands and logs should be output.</param>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.AssetCompilerBase.GetAbsolutePath(Stride.Core.Assets.AssetItem,Stride.Core.IO.UFile)">
            <summary>
            Returns the absolute path on the disk of an <see cref="T:Stride.Core.IO.UFile"/> that is relative to the asset location.
            </summary>
            <param name="assetItem">The asset on which is based the relative path.</param>
            <param name="relativePath">The path relative to the asset path that must be converted to an absolute path.</param>
            <returns>The absolute path on the disk of the <see cref="!:relativePath"/> argument.</returns>
            <exception cref="T:System.ArgumentException">The <see cref="!:relativePath"/> argument is a null or empty <see cref="T:Stride.Core.IO.UFile"/>.</exception>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.AssetCompilerBase.EnsureSourcesExist(Stride.Core.Assets.Compiler.AssetCompilerResult,Stride.Core.Assets.AssetItem)">
            <summary>
            Ensures that the sources of an <see cref="T:Stride.Core.Assets.Asset"/> exist.
            </summary>
            <param name="result">The <see cref="T:Stride.Core.Assets.Compiler.AssetCompilerResult"/> in which to output log of potential errors.</param>
            <param name="assetItem">The asset to check.</param>
            <returns><c>true</c> if the source file exists, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Any of the argument is <c>null</c>.</exception>
        </member>
        <member name="T:Stride.Core.Assets.Compiler.AssetCompilerContext">
            <summary>
            The context used when compiling an asset in a Package.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Compiler.AssetCompilerContext.Profile">
            <summary>
            Gets or sets the name of the profile being built.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Compiler.AssetCompilerContext.BuildConfiguration">
            <summary>
            Gets or sets the build configuration (Debug, Release, AppStore, Testing)
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Compiler.AssetCompilerContext.Package">
            <summary>
            Gets or sets the entry package this build was called upon.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Compiler.AssetCompilerContext.Platform">
            <summary>
            Gets or sets the target platform for compiler is being used for.
            </summary>
            <value>The platform.</value>
        </member>
        <member name="F:Stride.Core.Assets.Compiler.AssetCompilerContext.CompilationContext">
            <summary>
            The compilation context type of this compiler context
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Compiler.AssetCompilerRegistry">
            <summary>
            A registry containing the asset compilers of the assets.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.AssetCompilerRegistry.#ctor">
            <summary>
            Create an instance of that registry
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Compiler.AssetCompilerRegistry.DefaultCompiler">
            <summary>
            Gets or sets the default compiler to use when no compiler are explicitly registered for a type.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.AssetCompilerRegistry.GetCompiler(System.Type,System.Type)">
            <summary>
            Gets the compiler associated to an <see cref="T:Stride.Core.Assets.Asset"/> type.
            </summary>
            <param name="type">The type of the <see cref="T:Stride.Core.Assets.Asset"/></param>
            <param name="context"></param>
            <returns>The compiler associated the provided asset type or null if no compiler exists for that type.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.AssetCompilerRegistry.RegisterCompiler(System.Type,Stride.Core.Assets.Compiler.IAssetCompiler,System.Type)">
            <summary>
            Register a compiler for a given <see cref="T:Stride.Core.Assets.Asset"/> type.
            </summary>
            <param name="type">The type of asset the compiler can compile</param>
            <param name="compiler">The compiler to use</param>
            <param name="context"></param>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.AssetCompilerRegistry.CompilerTypeData.Equals(Stride.Core.Assets.Compiler.AssetCompilerRegistry.CompilerTypeData)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Assets.Compiler.AssetCompilerRegistry.CompilerTypeData.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.AssetCompilerRegistry.CompilerTypeData.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Assets.Compiler.AssetCompilerResult">
            <summary>
            Result of a compilation of assets when using <see cref="M:Stride.Core.Assets.Compiler.IAssetCompiler.Prepare(Stride.Core.Assets.Compiler.AssetCompilerContext,Stride.Core.Assets.AssetItem)"/>
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.AssetCompilerResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Diagnostics.LoggerResult" /> class.
            </summary>
            <param name="moduleName">Name of the module.</param>
        </member>
        <member name="P:Stride.Core.Assets.Compiler.AssetCompilerResult.BuildSteps">
            <summary>
            Gets or sets the build steps generated for the build engine. This can be null if <see cref="!:LoggerResult.HasErrors"/> is true.
            </summary>
            <value>The build step.</value>
        </member>
        <member name="T:Stride.Core.Assets.Compiler.AssetDependenciesCompiler">
            <summary>
            An asset compiler that will compile an asset with all its dependencies.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Compiler.AssetDependenciesCompiler.AssetCompiled">
            <summary>
            Raised when a single asset has been compiled.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.AssetDependenciesCompiler.PrepareMany(Stride.Core.Assets.Compiler.AssetCompilerContext,System.Collections.Generic.List{Stride.Core.Assets.AssetItem})">
            <summary>
            Prepare the list of assets to be built, building all the steps and linking them properly
            </summary>
            <param name="context">The AssetCompilerContext</param>
            <param name="assetItems">The assets to prepare for build</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.AssetDependenciesCompiler.Prepare(Stride.Core.Assets.Compiler.AssetCompilerContext,Stride.Core.Assets.AssetItem)">
            <summary>
            Prepare a single asset to be built
            </summary>
            <param name="context">The AssetCompilerContext</param>
            <param name="assetItem">The asset to build</param>
            <returns></returns>
        </member>
        <member name="T:Stride.Core.Assets.Compiler.CompilerContext">
            <summary>
            The context used when compiling an asset in a Package.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.CompilerContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Compiler.CompilerContext"/> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Compiler.CompilerContext.OptionProperties">
            <summary>
            Properties passed on the command line.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Compiler.CompilerContext.Properties">
            <summary>
            Gets the attributes attached to this context.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="T:Stride.Core.Assets.Compiler.DummyAssetCommand`2">
            <summary>
            An <see cref="T:Stride.Core.Assets.Compiler.AssetCommand"/> that will create a default instance of the content type for a given asset, rather than compiling it.
            </summary>
            <typeparam name="TAsset">The type of asset for which to generate a default instance of content.</typeparam>
            <typeparam name="TContent">The type of content to generate.</typeparam>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.DummyAssetCommand`2.#ctor(Stride.Core.Assets.AssetItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Compiler.DummyAssetCommand`2"/> class.
            </summary>
            <param name="assetItem">The asset to compile.</param>
        </member>
        <member name="T:Stride.Core.Assets.Compiler.IAssetCompiler">
            <summary>
            Main interface for compiling an <see cref="T:Stride.Core.Assets.Asset"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.IAssetCompiler.Prepare(Stride.Core.Assets.Compiler.AssetCompilerContext,Stride.Core.Assets.AssetItem)">
            <summary>
            Compiles a list of assets from the specified package.
            </summary>
            <param name="context"></param>
            <param name="assetItem">The asset reference.</param>
            <returns>The result of the compilation.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.IAssetCompiler.GetInputFiles(Stride.Core.Assets.AssetItem)">
            <summary>
            Enumerates all the dependencies required to compile this asset
            </summary>
            <param name="assetItem">The asset for which dependencies are enumerated</param>
            <returns>The dependencies</returns>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.IAssetCompiler.GetInputTypes(Stride.Core.Assets.AssetItem)">
            <summary>
            Enumerates all the asset types required to compile this asset
            </summary>
            <param name="assetItem">The asset for which types are enumerated</param>
            <returns>The dependencies</returns>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.IAssetCompiler.GetInputTypesToExclude(Stride.Core.Assets.AssetItem)">
            <summary>
            Enumerates all the asset types to exclude when compiling this asset
            </summary>
            <param name="assetItem">The asset for which types are enumerated</param>
            <returns>The types to exclude</returns>
            <remarks>This method takes higher priority, it will exclude assets included with inclusion methods even in the same compiler</remarks>
        </member>
        <member name="P:Stride.Core.Assets.Compiler.ImportStreamCommand.Title">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Assets.Compiler.IPackageCompiler">
            <summary>
            Interface for compiling a package.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.IPackageCompiler.Prepare(Stride.Core.Assets.Compiler.AssetCompilerContext)">
            <summary>
            Prepares a package with the specified compiler context.
            </summary>
            <param name="compilerContext">The compiler context.</param>
            <returns>Result of compilation.</returns>
        </member>
        <member name="T:Stride.Core.Assets.Compiler.IPackageCompilerSource">
            <summary>
            Enumerate assets that <see cref="T:Stride.Core.Assets.Compiler.PackageCompiler"/> will process.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.IPackageCompilerSource.GetAssets(Stride.Core.Assets.Compiler.AssetCompilerResult)">
            <summary>
            Enumerates assets.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Compiler.ItemListCompiler">
            <summary>
            The base class to compile a series of <see cref="T:Stride.Core.Assets.AssetItem"/>s using associated <see cref="T:Stride.Core.Assets.Compiler.IAssetCompiler"/>s.
            An item list compiler only creates the build steps required to creates some output items.
            The result of a compilation has then to be executed by the build engine to effectively create the outputs items.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Compiler.ItemListCompiler.AssetCompiled">
            <summary>
            Raised when a single asset has been compiled.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.ItemListCompiler.#ctor(Stride.Core.Assets.Compiler.AssetCompilerRegistry,System.Type)">
            <summary>
            Create an instance of <see cref="T:Stride.Core.Assets.Compiler.ItemListCompiler"/> using the provided compiler registry.
            </summary>
            <param name="compilerRegistry">The registry that contains the compiler to use for each asset type</param>
            <param name="compilationContext">The context in which this list will compile the assets (Asset, Preview, thumbnail etc)</param>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.ItemListCompiler.Prepare(Stride.Core.Assets.Compiler.AssetCompilerContext,System.Collections.Generic.IEnumerable{Stride.Core.Assets.AssetItem},Stride.Core.Assets.Compiler.AssetCompilerResult)">
            <summary>
            Compile the required build steps necessary to produce the desired outputs items.
            </summary>
            <param name="context">The context source.</param>
            <param name="assetItems">The list of items to compile</param>
            <param name="compilationResult">The current compilation result, containing the build steps and the logging</param>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.ItemListCompiler.CompileItem(Stride.Core.Assets.Compiler.AssetCompilerContext,Stride.Core.Assets.Compiler.AssetCompilerResult,Stride.Core.Assets.AssetItem)">
            <summary>
            Compile the required build step necessary to produce the desired output item.
            </summary>
            <param name="context">The context.</param>
            <param name="compilationResult">The compilation result.</param>
            <param name="assetItem">The asset item.</param>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.ItemListCompiler.SetAssetLogger(Stride.Core.BuildEngine.BuildStep,Stride.Core.Assets.Package,Stride.Core.Serialization.Contents.IReference,System.String)">
            <summary>
            Sets recursively the <see cref="T:Stride.Core.Assets.Module"/>.
            </summary>
            <param name="buildStep">The build step.</param>
            <param name="assetReference"></param>
            <param name="assetFullPath"></param>
        </member>
        <member name="T:Stride.Core.Assets.Compiler.PackageAssetEnumerator">
            <summary>
            Enumerate all assets of this package and its references.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.PackageAssetEnumerator.GetAssets(Stride.Core.Assets.Compiler.AssetCompilerResult)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Assets.Compiler.PackageCompiler">
            <summary>
            A package assets compiler.
            Creates the build steps necessary to produce the assets of a package.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Compiler.PackageCompiler.AssetCompiled">
            <summary>
            Raised when a single asset has been compiled.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Compiler.PackageCompiler.SdkDirectory">
            <summary>
            Gets or sets the SDK directory. Default is bound to env variable StrideSdkDir
            </summary>
            <value>The SDK directory.</value>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.PackageCompiler.Prepare(Stride.Core.Assets.Compiler.AssetCompilerContext)">
            <summary>
            Compile the current package session.
            That is generate the list of build steps to execute to create the package assets.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Compiler.RootPackageAssetEnumerator">
            <summary>
            Only enumerates assets that are marked as roots and their dependencies.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.RootPackageAssetEnumerator.#ctor(Stride.Core.Assets.Package)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="package">The start package.</param>
            <param name="extraRoots">The extra roots that needs to be collected with their dependencies.</param>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.RootPackageAssetEnumerator.GetAssets(Stride.Core.Assets.Compiler.AssetCompilerResult)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Compiler.RootPackageAssetEnumerator.CollectReferences(Stride.Core.Assets.Package,System.Collections.Generic.HashSet{Stride.Core.Assets.AssetItem},System.Collections.Generic.HashSet{Stride.Core.Assets.Package})">
            <summary>
            Helper method to collect explicit AssetReferences
            </summary>
            <param name="package"></param>
            <param name="assetsReferenced"></param>
            <param name="packagesProcessed"></param>
        </member>
        <member name="T:Stride.Core.Assets.DefaultAssetFactory`1">
            <summary>
            An implementation of the <see cref="T:Stride.Core.Assets.AssetFactory`1"/> class that uses the default public parameterless constructor
            of the associated asset type.
            </summary>
            <typeparam name="T">The type of asset this factory can create.</typeparam>
        </member>
        <member name="M:Stride.Core.Assets.DefaultAssetFactory`1.New">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Assets.Diagnostics.AssetLoggerExtensions">
            <summary>
            Extension to <see cref="T:Stride.Core.Diagnostics.Logger"/> for loggin specific error with assets.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Diagnostics.AssetLogMessage">
            <summary>
            Provides a specialized <see cref="T:Stride.Core.Diagnostics.LogMessage"/> to give specific information about an asset.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Diagnostics.AssetLogMessage.#ctor(Stride.Core.Assets.Package,Stride.Core.Serialization.Contents.IReference,Stride.Core.Diagnostics.LogMessageType,Stride.Core.Assets.Diagnostics.AssetMessageCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Diagnostics.AssetLogMessage" /> class.
            </summary>
            <param name="package">The package.</param>
            <param name="assetReference">The asset reference.</param>
            <param name="type">The type.</param>
            <param name="messageCode">The message code.</param>
            <exception cref="T:System.ArgumentNullException">asset</exception>
        </member>
        <member name="M:Stride.Core.Assets.Diagnostics.AssetLogMessage.#ctor(Stride.Core.Assets.Package,Stride.Core.Serialization.Contents.IReference,Stride.Core.Diagnostics.LogMessageType,Stride.Core.Assets.Diagnostics.AssetMessageCode,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Diagnostics.AssetLogMessage" /> class.
            </summary>
            <param name="package">The package.</param>
            <param name="assetReference">The asset reference.</param>
            <param name="type">The type.</param>
            <param name="messageCode">The message code.</param>
            <param name="arguments">The arguments.</param>
            <exception cref="T:System.ArgumentNullException">asset</exception>
        </member>
        <member name="M:Stride.Core.Assets.Diagnostics.AssetLogMessage.#ctor(Stride.Core.Assets.Package,Stride.Core.Serialization.Contents.IReference,Stride.Core.Diagnostics.LogMessageType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Diagnostics.AssetLogMessage" /> class.
            </summary>
            <param name="package">The package.</param>
            <param name="assetReference">The asset reference.</param>
            <param name="type">The type.</param>
            <param name="messageCode">The message code.</param>
            <param name="arguments">The arguments.</param>
            <exception cref="T:System.ArgumentNullException">asset</exception>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetLogMessage.MessageCode">
            <summary>
            Gets or sets the message code.
            </summary>
            <value>The message code.</value>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetLogMessage.AssetReference">
            <summary>
            Gets or sets the asset this message applies to (optional).
            </summary>
            <value>The asset.</value>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetLogMessage.Package">
            <summary>
            Gets or sets the package.
            </summary>
            <value>The package.</value>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetLogMessage.Member">
            <summary>
            Gets or sets the member of the asset this message applies to. May be null.
            </summary>
            <value>The member.</value>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetLogMessage.Related">
            <summary>
            Gets or sets the related references.
            </summary>
            <value>The related.</value>
        </member>
        <member name="T:Stride.Core.Assets.Diagnostics.AssetMessageCode">
            <summary>
            A message code used by <see cref="T:Stride.Core.Assets.Diagnostics.AssetLogMessage"/> to identify an error/warning.
            </summary>
            Note that internally AssetMessageStrings.resx should contain an associated error message to this enum.
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.RawAssetNotFound">
            <summary>
            A raw asset was not found
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.AssetForPackageNotFound">
            <summary>
            The asset required for the current package was not found
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.AssetFoundInDifferentPackage">
            <summary>
            The asset required for the current package was found in a different package
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.AssetReferenceChanged">
            <summary>
            The asset reference has been changed for a particular location
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.AssetLoadingFailed">
            <summary>
            The asset loading failed
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.AssetCannotDelete">
            <summary>
            The asset cannot be deleted
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.AssetCannotSave">
            <summary>
            The asset cannot be saved
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.PackageNotFound">
            <summary>
            The package not found
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.PackageFilePathNotSet">
            <summary>
            The package filepath is not set for saving
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.PackageLocationChanged">
            <summary>
            The package not found
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.PackageCannotSave">
            <summary>
            The package cannot be saved
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.PackageDependencyModified">
            <summary>
            The package dependency is modified
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.BuildProfileCannotBeNull">
            <summary>
            The package build profile cannot be null
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.BuildProfileFileExtensionCannotBeNull">
            <summary>
            The package build profile should not have a File extension null
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.InvalidCircularReferences">
            <summary>
            Asset contains invalid circular references
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.BaseNotFound">
            <summary>
            The base not found
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.BaseChanged">
            <summary>
            The base was changed
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.BaseInvalidType">
            <summary>
            The base is not the same type as the current asset.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.CompilationSucceeded">
            <summary>
            The asset has been successfully compiled.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.CompilationFailed">
            <summary>
            The asset compilation failed.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.CompilationCancelled">
            <summary>
            The asset compilation has been cancelled.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.AssetUpToDate">
            <summary>
            The asset has not been compiled because it is already up-to-date.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.PrerequisiteFailed">
            <summary>
            The asset has not been compiled because its prerequisites failed to compile.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.InternalCompilerError">
            <summary>
            An unexpected internal error occurred.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.CompilationFatal">
            <summary>
            A fatal error that caused the asset compilation to fail.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.CompilationMessage">
            <summary>
            A message log happened inside the asset compiler.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.CompilationError">
            <summary>
            An error that caused the asset compilation to fail.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.CompilationWarning">
            <summary>
            A warning that occurred in the asset compilation.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.DefaultSceneNotFound">
            <summary>
            A default scene was not found in the package.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Diagnostics.AssetMessageCode.InvalidBasePartInstance">
            <summary>
            Occurs when a asset templating instance is duplicated.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Diagnostics.AssetMessageStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.AssetCannotDelete">
            <summary>
              Looks up a localized string similar to Cannot delete asset from path [{0}].
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.AssetCannotSave">
            <summary>
              Looks up a localized string similar to The asset cannot be saved to path [{0}].
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.AssetForPackageNotFound">
            <summary>
              Looks up a localized string similar to Asset [{0}] not found. Required for package [{1}].
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.AssetFoundInDifferentPackage">
            <summary>
              Looks up a localized string similar to Asset [{0}] was found in package [{1}]. Perhaps a package dependency is missing?.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.AssetLoadingFailed">
            <summary>
              Looks up a localized string similar to Failed to load asset from path [{0}]. Reason: {1}.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.AssetReferenceChanged">
            <summary>
              Looks up a localized string similar to The asset reference [{0}] id has changed to a new asset [{1}].
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.AssetUpToDate">
            <summary>
              Looks up a localized string similar to Asset [{0}] already up-to-date.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.BaseChanged">
            <summary>
              Looks up a localized string similar to Original asset not found. A new asset with the same location was found [{0}].
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.BaseInvalidType">
            <summary>
              Looks up a localized string similar to Invalid base type. Base type [{0}] is not of the same type as current asset [{1}].
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.BaseNotFound">
            <summary>
              Looks up a localized string similar to The base of the asset was not found.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.BuildProfileCannotBeNull">
            <summary>
              Looks up a localized string similar to The build profile [{0}] cannot be null.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.BuildProfileFileExtensionCannotBeNull">
            <summary>
              Looks up a localized string similar to The file extension for build profile [{0}] cannot be null.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.CompilationCancelled">
            <summary>
              Looks up a localized string similar to Compilation of asset [{0}] cancelled.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.CompilationError">
            <summary>
              Looks up a localized string similar to Error while compiling asset [{0}]: {1}.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.CompilationFailed">
            <summary>
              Looks up a localized string similar to Asset [{0}] failed to compile.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.CompilationFatal">
            <summary>
              Looks up a localized string similar to Fatal error while compiling asset [{0}]: {1}.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.CompilationMessage">
            <summary>
              Looks up a localized string similar to {1}.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.CompilationSucceeded">
            <summary>
              Looks up a localized string similar to Asset [{0}] successfully compiled.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.CompilationWarning">
            <summary>
              Looks up a localized string similar to Warning while compiling asset [{0}]: {1}.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.DefaultSceneNotFound">
            <summary>
              Looks up a localized string similar to A default scene was not found in the package.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.InternalCompilerError">
            <summary>
              Looks up a localized string similar to Unexpected internal error while compiling [{0}].
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.InvalidBasePartInstance">
            <summary>
              Looks up a localized string similar to Invalid state for the Entity [{0}] referencing the same base instance ({1}). We will apply a fix that can cause a change to this entity and the referencer links. .
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.InvalidCircularReferences">
            <summary>
              Looks up a localized string similar to Invalid circular references in the asset.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.PackageCannotSave">
            <summary>
              Looks up a localized string similar to The package cannot be saved to path [{0}].
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.PackageDependencyModified">
            <summary>
              Looks up a localized string similar to The package dependency [{0}] is modified to [{1}].
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.PackageFilePathNotSet">
            <summary>
              Looks up a localized string similar to Package filepath is not set.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.PackageLocationChanged">
            <summary>
              Looks up a localized string similar to The reference package has been moved to a new location [{0}]. Reference has been updated..
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.PackageNotFound">
            <summary>
              Looks up a localized string similar to Package [{0}] not found.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.PrerequisiteFailed">
            <summary>
              Looks up a localized string similar to Asset [{0}] not compiled, prerequisites failed.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Diagnostics.AssetMessageStrings.RawAssetNotFound">
            <summary>
              Looks up a localized string similar to The raw asset [{0}] was not found on disk.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.DirectoryHelper">
            <summary>
            Helper class that contains methods to retrieve and manipulate SDK locations.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.DirectoryHelper.GetPackageFile(System.String,System.String)">
            <summary>
            Gets the path to the file corresponding to the given package name in the given directory.
            </summary>
            <param name="directory">The directory where the package file is located.</param>
            <param name="packageName">The name of the package.</param>
            <returns>The path to the file corresponding to the given package name in the given directory.</returns>
        </member>
        <member name="M:Stride.Core.Assets.DirectoryHelper.IsRootDevDirectory(System.String)">
            <summary>
            Indicates whether the given directory is the root directory of the repository, when executing from a development build. 
            </summary>
            <param name="directory">The directory to check.</param>
            <returns><c>True</c> if the given directory is the root directory of the repository, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Stride.Core.Assets.DirtyFlagChangedDelegate`1">
            <summary>
            A delegate used for events raised when the dirty flag of an object has changed
            </summary>
            <param name="sender">The object that had its dirty flag changed.</param>
            <param name="oldValue">The old value of the dirty flag.</param>
            <param name="newValue">The new value of the dirty flag.</param>
        </member>
        <member name="T:Stride.Core.Assets.EmptyAssetUpgrader">
            <summary>
            Empty asset upgrader (useful when we want to bump version without changing anything).
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.EmptyAssetUpgrader.UpgradeAsset(Stride.Core.Assets.AssetMigrationContext,Stride.Core.PackageVersion,Stride.Core.PackageVersion,System.Object,Stride.Core.Assets.PackageLoadingAssetFile,Stride.Core.Assets.OverrideUpgraderHint)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Assets.IAssetComposite">
            <summary>
            An interface that defines the composition declared by an asset inheriting from another asset.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.IAssetComposite.CollectParts">
            <summary>
            Collects the part assets.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.IAssetComposite.ContainsPart(System.Guid)">
            <summary>
            Checks if this <see cref="T:Stride.Core.Assets.AssetPart"/> container contains the part with the specified id.
            </summary>
            <param name="id">Unique identifier of the asset part</param>
            <returns><c>true</c> if this asset contains the part with the specified id; otherwise <c>false</c></returns>
        </member>
        <member name="T:Stride.Core.Assets.IAssetFactory`1">
            <summary>
            An interface that represents an asset factory.
            </summary>
            <typeparam name="T">The type of asset this factory can create.</typeparam>
        </member>
        <member name="P:Stride.Core.Assets.IAssetFactory`1.AssetType">
            <summary>
            Retrieve the asset type associated to this factory.
            </summary>
            <returns>The asset type associated to this factory.</returns>
        </member>
        <member name="M:Stride.Core.Assets.IAssetFactory`1.New">
            <summary>
            Creates a new instance of the asset type associated to this factory.
            </summary>
            <returns>A new instance of the asset type associated to this factory.</returns>
        </member>
        <member name="M:Stride.Core.Assets.IAssetFinder.FindAsset(Stride.Core.Assets.AssetId)">
            <summary>
            Finds an asset by its identifier.
            </summary>
            <param name="assetId">The identifier of the asset.</param>
            <returns>The corresponding <see cref="T:Stride.Core.Assets.AssetItem" /> if found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Stride.Core.Assets.IAssetFinder.FindAsset(Stride.Core.IO.UFile)">
            <summary>
            Finds an asset by its location.
            </summary>
            <param name="location">The location of the asset.</param>
            <returns>The corresponding <see cref="T:Stride.Core.Assets.AssetItem" /> if found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Stride.Core.Assets.IAssetFinder.FindAssetFromProxyObject(System.Object)">
            <summary>
            Finds an asset from a proxy object.
            </summary>
            <param name="proxyObject">The proxy object which is represent the targeted asset.</param>
            <returns>The corresponding <see cref="T:Stride.Core.Assets.AssetItem" /> if found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="T:Stride.Core.Assets.IAssetImporter">
            <summary>
            Imports a raw asset into the asset system.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.IAssetImporter.Id">
            <summary>
            Gets an unique identifier to identify the importer. See remarks.
            </summary>
            <value>The identifier.</value>
            <remarks>This identifier is used to recover the importer used for a particular asset. This 
            Guid must be unique and stored statically in the definition of an importer. It is used to 
            reimport an existing asset with the same importer.
            </remarks>
        </member>
        <member name="P:Stride.Core.Assets.IAssetImporter.Name">
            <summary>
            Gets the name of this importer.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Stride.Core.Assets.IAssetImporter.Description">
            <summary>
            Gets the description of this importer.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Stride.Core.Assets.IAssetImporter.Order">
            <summary>
            Gets the order of precedence between the importers, so that an importer can override another one.
            </summary>
            <value>The order.</value>
        </member>
        <member name="P:Stride.Core.Assets.IAssetImporter.SupportedFileExtensions">
            <summary>
            Gets the supported file extensions (separated by ',' for multiple extensions) by this importer. This is used for display purpose only. The method <see cref="M:Stride.Core.Assets.IAssetImporter.IsSupportingFile(System.String)"/> is used for matching extensions.
            </summary>
            <returns>Returns a list of supported file extensions handled by this importer.</returns>
        </member>
        <member name="M:Stride.Core.Assets.IAssetImporter.IsSupportingFile(System.String)">
            <summary>
            Determines whether this importer is supporting the specified file.
            </summary>
            <param name="filePath">The file path.</param>
            <returns><c>true</c> if this importer is supporting the specified file; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Stride.Core.Assets.IAssetImporter.RootAssetTypes">
            <summary>
            Gets the types of asset that are mainly generated by this importer.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.IAssetImporter.AdditionalAssetTypes">
            <summary>
            Gets the additional types of asset that can be generated by this importer in complement of the root assets
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.IAssetImporter.GetDefaultParameters(System.Boolean)">
            <summary>
            Gets the default parameters for this importer.
            </summary>
            <param name="isForReImport"></param>
            <value>The supported types.</value>
        </member>
        <member name="M:Stride.Core.Assets.IAssetImporter.Import(Stride.Core.IO.UFile,Stride.Core.Assets.AssetImporterParameters)">
            <summary>
            Imports a raw assets from the specified path into the specified package.
            </summary>
            <param name="rawAssetPath">The path to a raw asset on the disk.</param>
            <param name="importParameters">The parameters. It is mandatory to call <see cref="M:Stride.Core.Assets.IAssetImporter.GetDefaultParameters(System.Boolean)"/> and pass the parameters instance here</param>
        </member>
        <member name="T:Stride.Core.Assets.IAssetPartDesign">
            <summary>
            An interface representing a design-time part in an <see cref="T:Stride.Core.Assets.AssetComposite"/>.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.IAssetPartDesign`1">
            <summary>
            An interface representing a design-time part in an <see cref="T:Stride.Core.Assets.AssetComposite"/>.
            </summary>
            <typeparam name="TAssetPart">The underlying type of part.</typeparam>
        </member>
        <member name="P:Stride.Core.Assets.IAssetPartDesign`1.Part">
            <summary>
            The actual part.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.IAssetWithSource.Source">
            <summary>
            The source file of this asset.
            </summary>
            <userdoc>
            The source file of this asset.
            </userdoc>
        </member>
        <member name="T:Stride.Core.Assets.IFileSynchronizable">
            <summary>
            Identify an object that is associated with an anchor file on the disk where all the <see cref="T:Stride.Core.IO.UPath"/> members of this 
            instance are relative to the <see cref="P:Stride.Core.Assets.IFileSynchronizable.FullPath"/> of this instance.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.IFileSynchronizable.FullPath">
            <summary>
            Gets the full path on disk where this instance is stored.
            </summary>
            <value>The full path.</value>
        </member>
        <member name="P:Stride.Core.Assets.IFileSynchronizable.IsDirty">
            <summary>
            Gets or sets a value indicating whether this instance is dirty.
            </summary>
            <value><c>true</c> if this instance is dirty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Stride.Core.Assets.IO.FileExtensionCollection">
            <summary>
            A class describing a collection of file extensions, with a facultative description string.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.IO.FileExtensionCollection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.IO.FileExtensionCollection"/> class.
            </summary>
            <param name="extensions">The extensions to add in this collection. Extensions must be separated with the semi-colon character (;).</param>
        </member>
        <member name="M:Stride.Core.Assets.IO.FileExtensionCollection.#ctor(System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.IO.FileExtensionCollection"/> class.
            </summary>
            <param name="description">The description of this file extension collection. Can be null.</param>
            <param name="extensions">The extensions to add in this collection. Extensions must be separated with the semi-colon character (;).</param>
            <param name="additionalExtensions">Additional extensions to add in this collection. Extensions inside each string must be separated with the semi-colon character (;).</param>
        </member>
        <member name="P:Stride.Core.Assets.IO.FileExtensionCollection.Description">
            <summary>
            Gets the description of this file extension collection.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.IO.FileExtensionCollection.SingleExtensions">
            <summary>
            Gets each extension in this collection individually splitted in an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.IO.FileExtensionCollection.ConcatenatedExtensions">
            <summary>
            Gets a string containing all extensions separated with the semi-colon character (;).
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.IO.FileExtensionCollection.Contains(System.String)">
            <summary>
            Indicates whether the given extension matches any of the extension in this collection.
            </summary>
            <param name="extension">The extension to match. Can contain wildcards.</param>
            <returns>True if the given extension matches, false otherwise.</returns>
        </member>
        <member name="T:Stride.Core.Assets.FileUtility">
            <summary>
            File Utilities methods.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.FileUtility.IsFileLocked(System.String)">
            <summary>
            Determines whether the specified file is locked.
            </summary>
            <param name="filePath">The file path.</param>
            <returns><c>true</c> if the specified file is locked; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is null</exception>
        </member>
        <member name="M:Stride.Core.Assets.FileUtility.IsFileLocked(System.IO.FileInfo)">
            <summary>
            Determines whether the specified file is locked.
            </summary>
            <param name="file">The file.</param>
            <returns><c>true</c> if the specified file is locked; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> is null</exception>
        </member>
        <member name="M:Stride.Core.Assets.FileUtility.GetAbsolutePath(System.String)">
            <summary>
            Converts a relative path to an absolute path using the current working directoy.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>An absolute path.</returns>
        </member>
        <member name="M:Stride.Core.Assets.FileUtility.NormalizeFileExtension(System.String)">
            <summary>
            Normalizes the file extension by adding a '.' prefix and making it lowercase.
            </summary>
            <param name="fileExtension">The file extension.</param>
            <returns>A normalized file extension.</returns>
        </member>
        <member name="M:Stride.Core.Assets.FileUtility.GetFileExtensionsAsSet(System.String)">
            <summary>
            Gets the file extensions normalized separated by ',' ';'.
            </summary>
            <param name="fileExtensions">The file extensions separated by ',' ';'.</param>
            <returns>An array of file extensions.</returns>
        </member>
        <member name="M:Stride.Core.Assets.FileUtility.GetFileExtensions(System.String)">
            <summary>
            Gets the file extensions normalized separated by ',' ';'.
            </summary>
            <param name="fileExtensions">The file extensions separated by ',' ';'.</param>
            <returns>An array of file extensions.</returns>
        </member>
        <member name="T:Stride.Core.Assets.SearchDirection">
            <summary>
            A direction to search for files in directories
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.SearchDirection.Down">
            <summary>
            Search files in all sub-directories.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.SearchDirection.Up">
            <summary>
            Searchg files going upward in the directory hierarchy.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.IProjectAsset">
            <summary>
            An asset that is stored in a project file (such as .csproj).
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.IProjectFileGeneratorAsset">
            <summary>
            An asset that generates another file.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.OverrideUpgraderHint">
            <summary>
            Defines a context for overrides when upgrading an asset.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.OverrideUpgraderHint.Unknown">
            <summary>
            The upgrader is performed on an asset that may be used as the base for another asset
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.OverrideUpgraderHint.Derived">
            <summary>
            The upgrader is performed on an asset that has at least one base asset (for asset templating)
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.OverrideUpgraderHint.Base">
            <summary>
            The upgrader is performed on the base asset of an asset being upgraded (<see cref="!:Asset.Base"/> or <see cref="!:Asset.BaseParts"/>)
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Package">
            <summary>
            A package managing assets.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Package.PackageFileExtension">
            <summary>
            The file extension used for <see cref="T:Stride.Core.Assets.Package"/>.
            </summary>
        </member>
        <member name="E:Stride.Core.Assets.Package.PackageDirtyChanged">
            <summary>
            Occurs when package dirty changed occurred.
            </summary>
        </member>
        <member name="E:Stride.Core.Assets.Package.AssetDirtyChanged">
            <summary>
            Occurs when an asset dirty changed occurred.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Package.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Package"/> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Package.SerializedVersion">
            <summary>
            Gets or sets the version number for this asset, used internally when migrating assets.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Stride.Core.Assets.Package.IsSystem">
            <summary>
            Gets or sets a value indicating whether this package is a system package.
            </summary>
            <value><c>true</c> if this package is a system package; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.Assets.Package.Meta">
            <summary>
            Gets or sets the metadata associated with this package.
            </summary>
            <value>The meta.</value>
        </member>
        <member name="P:Stride.Core.Assets.Package.AssetFolders">
            <summary>
            Gets the asset directories to lookup.
            </summary>
            <value>The asset directories.</value>
        </member>
        <member name="P:Stride.Core.Assets.Package.ResourceFolders">
            <summary>
            Gets the resource directories to lookup.
            </summary>
            <value>The resource directories.</value>
        </member>
        <member name="P:Stride.Core.Assets.Package.OutputGroupDirectories">
            <summary>
            Gets the output group directories.
            </summary>
            <value>The output group directories.</value>
        </member>
        <member name="P:Stride.Core.Assets.Package.ExplicitFolders">
            <summary>
            Gets or sets the list of folders that are explicitly created but contains no assets.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Package.Bundles">
            <summary>
            Gets the bundles defined for this package.
            </summary>
            <value>The bundles.</value>
        </member>
        <member name="P:Stride.Core.Assets.Package.TemplateFolders">
            <summary>
            Gets the template folders.
            </summary>
            <value>The template folders.</value>
        </member>
        <member name="P:Stride.Core.Assets.Package.RootAssets">
            <summary>
            Asset references that needs to be compiled even if not directly or indirectly referenced (useful for explicit code references).
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Package.Templates">
            <summary>
            Gets the loaded templates from the <see cref="P:Stride.Core.Assets.Package.TemplateFolders"/>
            </summary>
            <value>The templates.</value>
        </member>
        <member name="P:Stride.Core.Assets.Package.Assets">
            <summary>
            Gets the assets stored in this package.
            </summary>
            <value>The assets.</value>
        </member>
        <member name="P:Stride.Core.Assets.Package.TemporaryAssets">
            <summary>
            Gets the temporary assets list loaded from disk before they are going into <see cref="P:Stride.Core.Assets.Package.Assets"/>.
            </summary>
            <value>The temporary assets.</value>
        </member>
        <member name="P:Stride.Core.Assets.Package.FullPath">
            <summary>
            Gets the path to the package file. May be null if the package was not loaded or saved.
            </summary>
            <value>The package path.</value>
        </member>
        <member name="P:Stride.Core.Assets.Package.IsDirty">
            <summary>
            Gets or sets a value indicating whether this instance has been modified since last saving.
            </summary>
            <value><c>true</c> if this instance is dirty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.Assets.Package.RootDirectory">
            <summary>
            Gets the top directory of this package on the local disk.
            </summary>
            <value>The top directory.</value>
        </member>
        <member name="P:Stride.Core.Assets.Package.Session">
            <summary>
            Gets the session.
            </summary>
            <value>The session.</value>
            <exception cref="T:System.InvalidOperationException">Cannot attach a package to more than one session</exception>
        </member>
        <member name="P:Stride.Core.Assets.Package.UserSettings">
            <summary>
            Gets the package user settings. Usually stored in a .user file alongside the package. Lazily loaded on first time.
            </summary>
            <value>
            The package user settings.
            </value>
        </member>
        <member name="P:Stride.Core.Assets.Package.LoadedAssemblies">
            <summary>
            Gets the list of assemblies loaded by this package.
            </summary>
            <value>
            The loaded assemblies.
            </value>
        </member>
        <member name="M:Stride.Core.Assets.Package.AddExistingProject(Stride.Core.IO.UFile)">
            <summary>
            Adds an existing project to this package.
            </summary>
            <param name="pathToMsproj">The path to msproj.</param>
            <returns>LoggerResult.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Package.AddExistingProject(Stride.Core.IO.UFile,Stride.Core.Diagnostics.LoggerResult)">
            <summary>
            Adds an existing project to this package.
            </summary>
            <param name="pathToMsproj">The path to msproj.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Stride.Core.Assets.Package.FindAsset(Stride.Core.Assets.AssetId)">
            <inheritdoc />
            <remarks>Looks for the asset amongst the current package and its dependencies.</remarks>
        </member>
        <member name="M:Stride.Core.Assets.Package.FindAsset(Stride.Core.IO.UFile)">
            <inheritdoc />
            <remarks>Looks for the asset amongst the current package and its dependencies.</remarks>
        </member>
        <member name="M:Stride.Core.Assets.Package.FindAssetFromProxyObject(System.Object)">
            <inheritdoc />
            <remarks>Looks for the asset amongst the current package and its dependencies.</remarks>
        </member>
        <member name="M:Stride.Core.Assets.Package.Clone">
            <summary>
            Deep clone this package.
            </summary>
            <returns>The package cloned.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Package.SetPackagePath(Stride.Core.IO.UFile,System.Boolean)">
            <summary>
            Sets the package path.
            </summary>
            <param name="newPath">The new path.</param>
            <param name="copyAssets">if set to <c>true</c> assets will be copied relatively to the new location.</param>
        </member>
        <member name="M:Stride.Core.Assets.Package.GetPackageIdFromFile(System.String)">
            <summary>
            Gets the package identifier from file.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>Guid.</returns>
            <exception cref="T:System.ArgumentNullException">
            log
            or
            filePath
            </exception>
        </member>
        <member name="M:Stride.Core.Assets.Package.Load(Stride.Core.Diagnostics.ILogger,System.String,Stride.Core.Assets.PackageLoadParameters)">
            <summary>
            Loads only the package description but not assets or plugins.
            </summary>
            <param name="log">The log to receive error messages.</param>
            <param name="filePath">The file path.</param>
            <param name="loadParametersArg">The load parameters argument.</param>
            <returns>A package.</returns>
            <exception cref="T:System.ArgumentNullException">log
            or
            filePath</exception>
        </member>
        <member name="M:Stride.Core.Assets.Package.LoadRaw(Stride.Core.Diagnostics.ILogger,System.String)">
            <summary>
            Performs first part of the loading sequence, by deserializing the package but without processing anything yet.
            </summary>
            <param name="log">The log.</param>
            <param name="filePath">The file path.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            log
            or
            filePath
            </exception>
        </member>
        <member name="M:Stride.Core.Assets.Package.LoadAssembliesAndAssets(Stride.Core.Diagnostics.ILogger,Stride.Core.Assets.PackageLoadParameters)">
            <summary>
            Second part of the package loading process, when references, assets and package analysis is done.
            </summary>
            <param name="package">The package.</param>
            <param name="log">The log.</param>
            <param name="loadParametersArg">The load parameters argument.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Core.Assets.Package.LoadAssemblies(Stride.Core.Diagnostics.ILogger,Stride.Core.Assets.PackageLoadParameters)">
            <summary>
            Load only assembly references
            </summary>
            <param name="package">The package.</param>
            <param name="log">The log.</param>
            <param name="loadParametersArg">The load parameters argument.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Core.Assets.Package.LoadAssets(Stride.Core.Diagnostics.ILogger,Stride.Core.Assets.PackageLoadParameters)">
            <summary>
            Load assets and perform package analysis.
            </summary>
            <param name="package">The package.</param>
            <param name="log">The log.</param>
            <param name="loadParametersArg">The load parameters argument.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Core.Assets.Package.LoadTemporaryAssets(Stride.Core.Diagnostics.ILogger,System.Collections.Generic.List{Stride.Core.Assets.PackageLoadingAssetFile},System.Nullable{System.Threading.CancellationToken},System.Boolean,System.Func{Stride.Core.Assets.PackageLoadingAssetFile,System.Boolean})">
            <summary>
            Refreshes this package from the disk by loading or reloading all assets.
            </summary>
            <param name="log">The log.</param>
            <param name="assetFiles">The asset files (loaded from <see cref="M:Stride.Core.Assets.Package.ListAssetFiles(Stride.Core.Diagnostics.ILogger,Stride.Core.Assets.Package,System.Boolean,System.Boolean,System.Nullable{System.Threading.CancellationToken})"/> if null).</param>
            <param name="cancelToken">The cancel token.</param>
            <param name="listAssetsInMsbuild">Specifies if we need to evaluate MSBuild files for assets.</param>
            <param name="filterFunc">A function that will filter assets loading</param>
            <returns>A logger that contains error messages while refreshing.</returns>
            <exception cref="T:System.InvalidOperationException">Package RootDirectory is null
            or
            Package RootDirectory [{0}] does not exist.ToFormat(RootDirectory)</exception>
        </member>
        <member name="M:Stride.Core.Assets.Package.UpdateAssemblyReferences(Stride.Core.Diagnostics.ILogger,Stride.Core.Assets.PackageLoadParameters)">
            <summary>
            Loads the assembly references that were not loaded before.
            </summary>
            <param name="log">The log.</param>
            <param name="loadParametersArg">The load parameters argument.</param>
        </member>
        <member name="M:Stride.Core.Assets.Package.UpdateSourceFolders(System.Collections.Generic.IReadOnlyCollection{Stride.Core.Assets.AssetItem})">
            <summary>
            In case <see cref="P:Stride.Core.Assets.AssetItem.SourceFolder"/> was null, generates it.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Package.LoadTemplates(Stride.Core.Diagnostics.ILogger)">
            <summary>
            Loads the templates.
            </summary>
            <param name="log">The log result.</param>
        </member>
        <member name="F:Stride.Core.Assets.PackageState.Raw">
            <summary>
            Package has been deserialized. References and assets are not ready.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.PackageState.DependenciesReady">
            <summary>
            Dependencies have all been resolved and are also in <see cref="F:Stride.Core.Assets.PackageState.DependenciesReady"/> state.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.PackageState.UpgradeFailed">
            <summary>
            Package upgrade has been failed (either error or denied by user).
            Dependencies are ready, but not assets.
            Should be manually switched back to DependenciesReady to try upgrade again.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.PackageState.AssetsReady">
            <summary>
            Assembly references and assets have all been loaded.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.PackageAssetCollection">
            <summary>
            A collection of <see cref="T:Stride.Core.Assets.AssetItem"/> that contains only absolute location without any drive information. This class cannot be inherited.
            </summary>
        </member>
        <member name="E:Stride.Core.Assets.PackageAssetCollection.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.PackageAssetCollection.#ctor(Stride.Core.Assets.Package)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.PackageAssetCollection" /> class.
            </summary>
            <param name="package">The package that will contain assets.</param>
        </member>
        <member name="P:Stride.Core.Assets.PackageAssetCollection.Package">
            <summary>
            Gets the package this collection is attached to.
            </summary>
            <value>The package.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageAssetCollection.IsDirty">
            <summary>
            Gets or sets a value indicating whether this instance is dirty. Sets this flag when moving assets between packages
            or removing assets.
            </summary>
            <value><c>true</c> if this instance is dirty; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Stride.Core.Assets.PackageAssetCollection.ContainsById(Stride.Core.Assets.AssetId)">
            <summary>
            Determines whether this instance contains an asset with the specified identifier.
            </summary>
            <param name="assetId">The asset identifier.</param>
            <returns><c>true</c> if this instance contains an asset with the specified identifier; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.Assets.PackageAssetCollection.Find(System.String)">
            <summary>
            Finds an asset by its location.
            </summary>
            <param name="location">The location of the assets.</param>
            <returns>AssetItem.</returns>
        </member>
        <member name="M:Stride.Core.Assets.PackageAssetCollection.Find(Stride.Core.Assets.AssetId)">
            <summary>
            Finds an asset by its location.
            </summary>
            <param name="assetId">The asset unique identifier.</param>
            <returns>AssetItem.</returns>
        </member>
        <member name="M:Stride.Core.Assets.PackageAssetCollection.Add(Stride.Core.Assets.AssetItem)">
            <summary>
            Adds an <see cref="T:Stride.Core.Assets.AssetItem"/> to this instance.
            </summary>
            <param name="item">The item to add to this instance.</param>
        </member>
        <member name="M:Stride.Core.Assets.PackageAssetCollection.Clear">
            <summary>
            Removes all items from this instance.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.PackageAssetCollection.Contains(Stride.Core.Assets.AssetItem)">
            <summary>
            Checks this collection contains the specified asset reference, throws an exception if not found.
            </summary>
            <param name="assetItem">The asset item.</param>
            <exception cref="T:System.ArgumentNullException">assetItem</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Asset [{0}] was not found.ToFormat(assetItem)</exception>
        </member>
        <member name="M:Stride.Core.Assets.PackageAssetCollection.CopyTo(Stride.Core.Assets.AssetItem[],System.Int32)">
            <summary>
            Copies items to the specified array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Stride.Core.Assets.PackageAssetCollection.Remove(Stride.Core.Assets.AssetItem)">
            <summary>
            Removes an <see cref="T:Stride.Core.Assets.AssetItem"/> from this instance.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="M:Stride.Core.Assets.PackageAssetCollection.RemoveById(Stride.Core.Assets.AssetId)">
            <summary>
            Removes an <see cref="T:Stride.Core.Assets.AssetItem" /> from this instance.
            </summary>
            <param name="itemId">The item identifier.</param>
            <returns>true if <paramref name="itemId" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="M:Stride.Core.Assets.PackageAssetCollection.SuspendCollectionChanged">
            <summary>
            Suspends the collection changed that can happen on this collection.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.PackageAssetCollection.ResumeCollectionChanged">
            <summary>
            Resumes the collection changed that happened on this collection and fire a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/>
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.PackageAssetCollection.Count">
            <summary>
            Gets the number of elements contained in this instance.
            </summary>
            <returns>The number of elements contained in this instance.</returns>
        </member>
        <member name="P:Stride.Core.Assets.PackageAssetCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether this collection is read-only. Default is false.
            </summary>
            <returns>false</returns>
        </member>
        <member name="M:Stride.Core.Assets.PackageAssetCollection.CheckCanAdd(Stride.Core.Assets.AssetItem)">
            <summary>
            Checks if the specified item can be add to this collection.
            </summary>
            <param name="item">The item.</param>
            <exception cref="T:System.ArgumentNullException">
            item;Cannot add an empty asset item reference
            or
            item;Cannot add an item with an empty asset
            or
            item;Cannot add an asset with an empty Id
            or
            item;Location cannot be null when adding an asset reference
            </exception>
            <exception cref="T:System.ArgumentException">
            An asset with the same location is already registered [{0}].ToFormat(location.Path);item
            or
            An asset with the same id [{0}] is already registered with the location [{1}].ToFormat(item.Id, location.Path);item
            or
            Asset location [{0}] cannot contain drive information.ToFormat(location);item
            or
            Asset location [{0}] must be relative and not absolute (not start with '/').ToFormat(location);item
            or
            Asset location [{0}] cannot start with relative '..'.ToFormat(location);item
            </exception>
        </member>
        <member name="T:Stride.Core.Assets.PackageCollection">
            <summary>
            A collection of <see cref="T:Stride.Core.Assets.Package"/>.
            </summary>
        </member>
        <member name="E:Stride.Core.Assets.PackageCollection.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.PackageCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.PackageCollection"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.PackageCollection.Find(Stride.Core.Assets.Dependency)">
            <summary>
            Finds the a package already in this collection from the specified dependency.
            </summary>
            <param name="packageDependency">The package dependency.</param>
            <returns>Package.</returns>
        </member>
        <member name="M:Stride.Core.Assets.PackageCollection.Find(Stride.Core.Assets.PackageDependency)">
            <summary>
            Finds the a package already in this collection from the specified dependency.
            </summary>
            <param name="packageDependency">The package dependency.</param>
            <returns>Package.</returns>
        </member>
        <member name="M:Stride.Core.Assets.PackageCollection.Find(System.String,Stride.Core.PackageVersionRange)">
            <summary>
            Finds a package with the specified name and <see cref="T:Stride.Core.PackageVersionRange"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="versionRange">The version range.</param>
            <returns>Package.</returns>
        </member>
        <member name="T:Stride.Core.Assets.PackageDependencyCollection">
            <summary>
            A collection of <see cref="T:Stride.Core.Assets.PackageDependency"/>.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.PackageDependency">
            <summary>
            A reference to a package either internal (directly to a <see cref="T:Stride.Core.Assets.Package"/> inside the same solution) or external
            (to a package distributed on the store).
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.PackageDependency.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.PackageDependency"/> class.
            </summary>
            <remarks>
            This constructor is used only for serialization.
            </remarks>
        </member>
        <member name="M:Stride.Core.Assets.PackageDependency.#ctor(System.String,Stride.Core.PackageVersionRange)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.PackageDependency"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="version">The version.</param>
        </member>
        <member name="P:Stride.Core.Assets.PackageDependency.Name">
            <summary>
            Gets or sets the package name Id.
            </summary>
            <value>The name.</value>
            <remarks>
            The setter should only be used during serialization.
            </remarks>
        </member>
        <member name="P:Stride.Core.Assets.PackageDependency.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="M:Stride.Core.Assets.PackageDependency.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>PackageDependency.</returns>
        </member>
        <member name="M:Stride.Core.Assets.PackageDependency.ToString">
            <inherit/>
        </member>
        <member name="T:Stride.Core.Assets.PackageExtensions">
            <summary>
            Extensions for <see cref="T:Stride.Core.Assets.Package"/>
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.PackageExtensions.FindAsset(Stride.Core.Assets.Package,Stride.Core.Serialization.Contents.IReference)">
            <summary>
            Finds an asset from all the packages by its asset reference.
            It will first try by id, then location.
            </summary>
            <param name="package">The package.</param>
            <param name="reference">The reference to the asset.</param>
            <returns>An <see cref="T:Stride.Core.Assets.AssetItem" /> or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Stride.Core.Assets.PackageExtensions.FindDependencies(Stride.Core.Assets.Package,System.Boolean)">
            <summary>
            Finds the package dependencies for the specified <see cref="T:Stride.Core.Assets.Package" />. See remarks.
            </summary>
            <param name="rootPackage">The root package.</param>
            <param name="includeRootPackage">if set to <c>true</c> [include root package].</param>
            <param name="isRecursive">if set to <c>true</c> [is recursive].</param>
            <param name="storeOnly">if set to <c>true</c> [ignores local packages and keeps only store packages].</param>
            <returns>List&lt;Package&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">rootPackage</exception>
            <exception cref="T:System.ArgumentException">Root package must be part of a session;rootPackage</exception>
        </member>
        <member name="M:Stride.Core.Assets.PackageExtensions.ContainsAsset(System.Collections.Generic.IEnumerable{Stride.Core.Assets.Package},Stride.Core.Assets.AssetId)">
            <summary>
            Determines whether the specified packages contains an asset by its guid.
            </summary>
            <param name="packages">The packages.</param>
            <param name="assetId">The asset unique identifier.</param>
            <returns><c>true</c> if the specified packages contains asset; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.Assets.PackageExtensions.ContainsAsset(System.Collections.Generic.IEnumerable{Stride.Core.Assets.Package},Stride.Core.IO.UFile)">
            <summary>
            Determines whether the specified packages contains an asset by its location.
            </summary>
            <param name="packages">The packages.</param>
            <param name="location">The location.</param>
            <returns><c>true</c> if the specified packages contains asset; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Stride.Core.Assets.PackageLoadedAssembly">
            <summary>
            Represents an assembly that is loaded at runtime by the package.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.PackageLoadedAssembly.ProjectReference">
            <summary>
            Gets the project reference for this assembly.
            </summary>
            <value>
            The project reference.
            </value>
        </member>
        <member name="P:Stride.Core.Assets.PackageLoadedAssembly.Path">
            <summary>
            Gets the path of the assembly.
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="P:Stride.Core.Assets.PackageLoadedAssembly.Assembly">
            <summary>
            Gets or sets the loaded assembly. Could be null if not properly loaded.
            </summary>
            <value>
            The assembly.
            </value>
        </member>
        <member name="T:Stride.Core.Assets.PackageLoadingAssetFile">
            <summary>
            Represents an asset before being loaded. Used mostly for asset upgrading.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.PackageLoadingAssetFile.#ctor(Stride.Core.IO.UFile,Stride.Core.IO.UDirectory)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.PackageLoadingAssetFile"/> class.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="sourceFolder">The source folder.</param>
        </member>
        <member name="M:Stride.Core.Assets.PackageLoadingAssetFile.#ctor(Stride.Core.Assets.Package,Stride.Core.IO.UFile,Stride.Core.IO.UDirectory)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.PackageLoadingAssetFile" /> class.
            </summary>
            <param name="package">The package this asset will be part of.</param>
            <param name="filePath">The relative file path (from default asset folder).</param>
            <param name="sourceFolder">The source folder (optional, can be null).</param>
            <exception cref="T:System.ArgumentException">filePath must be relative</exception>
        </member>
        <member name="M:Stride.Core.Assets.PackageLoadingAssetFile.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Assets.PackageLoadParameters">
            <summary>
            Parameters used for loading a package.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.PackageLoadParameters.Default">
            <summary>
            Gets the default parameters.
            </summary>
            <returns>PackageLoadParameters.</returns>
        </member>
        <member name="M:Stride.Core.Assets.PackageLoadParameters.ShouldUpgrade(Stride.Core.Assets.PackageUpgradeRequestedAnswer)">
            <summary>
            Indicates if the given value of <see cref="T:Stride.Core.Assets.PackageUpgradeRequestedAnswer"/> should trigger an upgrade.
            </summary>
            <param name="answer">The value to evaluate.</param>
            <returns>True if it should trigger an upgrade, false otherwise.</returns>
        </member>
        <member name="M:Stride.Core.Assets.PackageLoadParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.PackageLoadParameters"/> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.PackageLoadParameters.LoadMissingDependencies">
            <summary>
            Gets or sets a value indicating whether [load missing dependencies].
            </summary>
            <value><c>true</c> if [load missing dependencies]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageLoadParameters.LoadAssemblyReferences">
            <summary>
            Gets or sets a value indicating whether [load assembly references].
            </summary>
            <value><c>true</c> if [load assembly references]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageLoadParameters.AutoCompileProjects">
            <summary>
            Gets or sets a value indicating whether to automatically compile projects that don't have their assembly generated.
            </summary>
            <value><c>true</c> if [automatic compile projects]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageLoadParameters.BuildConfiguration">
            <summary>
            Gets or sets the build configuration used to <see cref="P:Stride.Core.Assets.PackageLoadParameters.AutoCompileProjects"/>.
            </summary>
            <value>The build configuration.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageLoadParameters.ExtraCompileProperties">
            <summary>
            Gets or sets the extra compile properties, used when <see cref="P:Stride.Core.Assets.PackageLoadParameters.AutoCompileProjects"/> is true.
            </summary>
            <value>
            The extra compile parameters.
            </value>
        </member>
        <member name="P:Stride.Core.Assets.PackageLoadParameters.AssetFiles">
            <summary>
            Gets or sets the asset files to load, if you want to not rely on the default <see cref="M:Stride.Core.Assets.Package.ListAssetFiles(Stride.Core.Diagnostics.ILogger,Stride.Core.Assets.Package,System.Boolean,System.Boolean,System.Nullable{System.Threading.CancellationToken})"/>.
            </summary>
            <value>
            The load asset files.
            </value>
        </member>
        <member name="P:Stride.Core.Assets.PackageLoadParameters.AutoLoadTemporaryAssets">
            <summary>
            Gets or sets a value indicating whether to automatically load assets. Default is <c>true</c>
            </summary>
            <value><c>true</c> if [automatic load assets]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageLoadParameters.ConvertUPathToAbsolute">
            <summary>
            Gets or sets a value indicating whether to convert all <see cref="T:Stride.Core.IO.UPath"/> to absolute paths when loading. Default
            is <c>true</c>
            </summary>
            <value><c>true</c> if [convert u path to absolute]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageLoadParameters.CancelToken">
            <summary>
            Gets or sets the cancelation token.
            </summary>
            <value>The cancel token.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageLoadParameters.AssemblyContainer">
            <summary>
            Gets or sets the assembly container used to load assemblies referenced by the package. If null, will use the 
            <see cref="F:Stride.Core.Reflection.AssemblyContainer.Default"/>
            </summary>
            <value>The assembly container.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageLoadParameters.GenerateNewAssetIds">
            <summary>
            Gets or sets the generate new asset ids.
            </summary>
            <value>The generate new asset ids.</value>
            <remarks>Only makes sense for <see cref="M:Stride.Core.Assets.PackageSession.AddExistingProject(Stride.Core.IO.UFile,Stride.Core.Diagnostics.ILogger,Stride.Core.Assets.PackageLoadParameters)"/>.</remarks>
        </member>
        <member name="P:Stride.Core.Assets.PackageLoadParameters.RemoveUnloadableObjects">
            <summary>
            If <c>true</c>, unloadable objects will be removed, similar to <see cref="F:Stride.Core.Assets.AssetClonerFlags.RemoveUnloadableObjects"/>.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.PackageLoadParameters.PackageUpgradeRequested">
            <summary>
            Occurs when one or more package upgrades are required for a single package. Returning false will cancel upgrades on this package.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.PackageLoadParameters.TemporaryAssetFilter">
            <summary>
            Occurs when an asset is about to be loaded, if false is returned the asset will be ignored and not loaded.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.PackageLoadParameters.TemporaryAssetsInMsbuild">
            <summary>
            Gets a boolean telling if MSBuild files should be evaluated when listing assets.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.PackageLoadParameters.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>PackageLoadParameters.</returns>
        </member>
        <member name="T:Stride.Core.Assets.PackageMeta">
            <summary>
            Metadata for a <see cref="T:Stride.Core.Assets.Package"/> accessible from <see cref="T:Stride.Core.Assets.PackageMeta"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.PackageMeta.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.PackageMeta"/> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.PackageMeta.Name">
            <summary>
            Gets or sets the identifier name of this package.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageMeta.Version">
            <summary>
            Gets or sets the version of this package.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageMeta.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageMeta.Authors">
            <summary>
            Gets the authors.
            </summary>
            <value>The authors.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageMeta.Owners">
            <summary>
            Gets the owners.
            </summary>
            <value>The owners.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageMeta.IconUrl">
            <summary>
            Gets or sets the icon URL.
            </summary>
            <value>The icon URL.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageMeta.LicenseUrl">
            <summary>
            Gets or sets the license URL.
            </summary>
            <value>The license URL.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageMeta.ProjectUrl">
            <summary>
            Gets or sets the project URL.
            </summary>
            <value>The project URL.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageMeta.RequireLicenseAcceptance">
            <summary>
            Gets or sets a value indicating whether it requires license acceptance.
            </summary>
            <value><c>true</c> if it requires license acceptance; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageMeta.Description">
            <summary>
            Gets or sets the description of this package.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageMeta.Summary">
            <summary>
            Gets or sets the summary of this package.
            </summary>
            <value>The summary.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageMeta.ReleaseNotes">
            <summary>
            Gets or sets the release notes of this package.
            </summary>
            <value>The release notes.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageMeta.Language">
            <summary>
            Gets or sets the language supported by this package.
            </summary>
            <value>The language.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageMeta.Tags">
            <summary>
            Gets or sets the tags associated to this package.
            </summary>
            <value>The tags.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageMeta.Copyright">
            <summary>
            Gets or sets the copyright.
            </summary>
            <value>The copyright.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageMeta.RootNamespace">
            <summary>
            Gets or sets the default namespace for this package.
            </summary>
            <value>The default namespace.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageMeta.Dependencies">
            <summary>
            Gets the package dependencies.
            </summary>
            <value>The package dependencies.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageMeta.ReportAbuseUrl">
            <summary>
            Gets the report abuse URL. Only valid for store packages.
            </summary>
            <value>The report abuse URL.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageMeta.DownloadCount">
            <summary>
            Gets the download count. Only valid for store packages.
            </summary>
            <value>The download count.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageMeta.Listed">
            <summary>
            Gets a value indicating whether this <see cref="T:Stride.Core.Assets.PackageMeta"/> is listed.
            </summary>
            <value><c>true</c> if listed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageMeta.Published">
            <summary>
            Gets the published time.
            </summary>
            <value>The published.</value>
        </member>
        <member name="M:Stride.Core.Assets.PackageMeta.NewDefault(System.String)">
            <summary>
            Creates a new <see cref="T:Stride.Core.Assets.PackageMeta" /> with default values.
            </summary>
            <param name="packageName">Name of the package.</param>
            <returns>PackageMeta.</returns>
            <exception cref="T:System.ArgumentNullException">packageName</exception>
        </member>
        <member name="T:Stride.Core.Assets.PackageReferenceBase">
            <summary>
            Common class used by both <see cref="!:PackageReference"/> and <see cref="T:Stride.Core.Assets.PackageDependency"/>.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.PackageReferenceBase.RootAssets">
            <summary>
            Asset references that needs to be compiled even if not directly or indirectly referenced (useful for explicit code references).
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.PackageSaveParameters.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>PackageLoadParameters.</returns>
        </member>
        <member name="P:Stride.Core.Assets.PackageContainer.Session">
            <summary>
            Gets the session.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.PackageContainer.Save(Stride.Core.Diagnostics.ILogger,Stride.Core.Assets.PackageSaveParameters)">
            <summary>
            Saves this package and all dirty assets. See remarks.
            </summary>
            <param name="log">The log.</param>
            <exception cref="T:System.ArgumentNullException">log</exception>
            <remarks>When calling this method directly, it does not handle moving assets between packages.
            Call <see cref="M:Stride.Core.Assets.PackageSession.Save(Stride.Core.Diagnostics.ILogger,Stride.Core.Assets.PackageSaveParameters)" /> instead.</remarks>
        </member>
        <member name="P:Stride.Core.Assets.StandalonePackage.Assemblies">
            <summary>
            Optional list of assemblies to load, typically filled using NuGet.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.PackageSession">
            <summary>
            A session for editing a package.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.PackageSession.DefaultVisualStudioVersion">
            <summary>
            The visual studio version property used for newly created project solution files
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.PackageSession.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.PackageSession"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.PackageSession.#ctor(Stride.Core.Assets.Package)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.PackageSession"/> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.PackageSession.Packages">
            <summary>
            Gets the packages referenced by the solution.
            </summary>
            <value>The packages.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageSession.Projects">
            <summary>
            The projects referenced by the solution.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.PackageSession.LocalPackages">
            <summary>
            Gets the user packages (excluding system packages).
            </summary>
            <value>The user packages.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageSession.SaveCompletion">
            <summary>
            Gets a task that completes when the session is finished saving.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.PackageSession.SolutionPath">
            <summary>
            Gets or sets the solution path (sln) in case the session was loaded from a solution.
            </summary>
            <value>The solution path.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageSession.VisualStudioVersion">
            <summary>
            The targeted visual studio version (if specified by the loaded package)
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.PackageSession.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.PackageSession.HasDependencyManager">
            <summary>
            Gets a value indicating whether this instance has dependency manager.
            </summary>
            <value><c>true</c> if this instance has dependency manager; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageSession.CurrentProject">
            <summary>
            Gets or sets the selected current package.
            </summary>
            <value>The selected current package.</value>
            <exception cref="T:System.InvalidOperationException">Expecting a package that is already registered in this session</exception>
        </member>
        <member name="M:Stride.Core.Assets.PackageSession.GetPackagesFromCurrent">
            <summary>
            Gets the packages referenced by the current package.
            </summary>
            <returns>IEnumerable&lt;Package&gt;.</returns>
        </member>
        <member name="P:Stride.Core.Assets.PackageSession.DependencyManager">
            <summary>
            Gets the dependency manager.
            </summary>
            <value>AssetDependencyManager.</value>
        </member>
        <member name="M:Stride.Core.Assets.PackageSession.AddExistingProject(Stride.Core.IO.UFile,Stride.Core.Diagnostics.ILogger,Stride.Core.Assets.PackageLoadParameters)">
            <summary>
            Adds an existing package to the current session.
            </summary>
            <param name="projectPath">The project or package path.</param>
            <param name="logger">The session result.</param>
            <param name="loadParametersArg">The load parameters argument.</param>
            <exception cref="T:System.ArgumentNullException">packagePath</exception>
            <exception cref="T:System.ArgumentException">Invalid relative path. Expecting an absolute package path;packagePath</exception>
            <exception cref="T:System.IO.FileNotFoundException">Unable to find package</exception>
        </member>
        <member name="M:Stride.Core.Assets.PackageSession.AddExistingPackage(Stride.Core.Assets.Package,Stride.Core.Diagnostics.ILogger)">
            <summary>
            Adds an existing package to the current session and runs the package analysis before adding it.
            </summary>
            <param name="package">The package to add</param>
            <param name="logger">The logger</param>
        </member>
        <member name="M:Stride.Core.Assets.PackageSession.FindAsset(Stride.Core.Assets.AssetId)">
            <inheritdoc />
            <remarks>Looks for the asset amongst all the packages of this session.</remarks>
        </member>
        <member name="M:Stride.Core.Assets.PackageSession.FindAsset(Stride.Core.IO.UFile)">
            <inheritdoc />
            <remarks>Looks for the asset amongst all the packages of this session.</remarks>
        </member>
        <member name="M:Stride.Core.Assets.PackageSession.FindAssetFromProxyObject(System.Object)">
            <inheritdoc />
            <remarks>Looks for the asset amongst all the packages of this session.</remarks>
        </member>
        <member name="M:Stride.Core.Assets.PackageSession.Load(System.String,Stride.Core.Assets.PackageSessionResult,Stride.Core.Assets.PackageLoadParameters)">
            <summary>
            Loads a package from specified file path.
            </summary>
            <param name="filePath">The file path to a package file.</param>
            <param name="sessionResult">The session result.</param>
            <param name="loadParameters">The load parameters.</param>
            <exception cref="T:System.ArgumentNullException">filePath</exception>
            <exception cref="T:System.ArgumentException">File [{0}] must exist.ToFormat(filePath);filePath</exception>
        </member>
        <member name="M:Stride.Core.Assets.PackageSession.Load(System.String,Stride.Core.Assets.PackageLoadParameters)">
            <summary>
            Loads a package from specified file path.
            </summary>
            <param name="filePath">The file path to a package file.</param>
            <param name="loadParameters">The load parameters.</param>
            <returns>A package.</returns>
            <exception cref="T:System.ArgumentNullException">filePath</exception>
        </member>
        <member name="M:Stride.Core.Assets.PackageSession.LoadMissingReferences(Stride.Core.Diagnostics.ILogger,Stride.Core.Assets.PackageLoadParameters)">
            <summary>
            Make sure packages have their dependencies and assets loaded.
            </summary>
            <param name="log">The log.</param>
            <param name="loadParameters">The load parameters.</param>
        </member>
        <member name="M:Stride.Core.Assets.PackageSession.LoadMissingDependencies(Stride.Core.Diagnostics.ILogger,Stride.Core.Assets.PackageLoadParameters)">
            <summary>
            Make sure packages have their dependencies loaded.
            </summary>
            <param name="log">The log.</param>
            <param name="loadParametersArg">The load parameters argument.</param>
        </member>
        <member name="M:Stride.Core.Assets.PackageSession.LoadMissingAssets(Stride.Core.Diagnostics.ILogger,System.Collections.Generic.IEnumerable{Stride.Core.Assets.Package},Stride.Core.Assets.PackageLoadParameters)">
            <summary>
            Make sure packages have their assets loaded.
            </summary>
            <param name="log">The log.</param>
            <param name="packages">The packages to try to load missing assets from.</param>
            <param name="loadParametersArg">The load parameters argument.</param>
        </member>
        <member name="M:Stride.Core.Assets.PackageSession.Save(Stride.Core.Diagnostics.ILogger,Stride.Core.Assets.PackageSaveParameters)">
            <summary>
            Saves all packages and assets.
            </summary>
            <param name="log">The <see cref="T:Stride.Core.Diagnostics.LoggerResult"/> in which to report result.</param>
            <param name="saveParameters">The parameters for the save operation.</param>
        </member>
        <member name="M:Stride.Core.Assets.PackageSession.UpdateAssemblyReferences(Stride.Core.Diagnostics.LoggerResult)">
            <summary>
            Loads the assembly references that were not loaded before.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="M:Stride.Core.Assets.PackageSession.FreezePackage(Stride.Core.Assets.Package)">
            <summary>
            Freeze a package once it is loaded with all its assets
            </summary>
            <param name="package">The package to freeze.</param>
        </member>
        <member name="T:Stride.Core.Assets.PackageSessionExtensions">
            <summary>
            Extension methods for <see cref="T:Stride.Core.Assets.PackageSession"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.PackageSessionExtensions.CreateCompilePackageFromAsset(Stride.Core.Assets.PackageSession,Stride.Core.Assets.AssetItem)">
            <summary>
            Create a <see cref="T:Stride.Core.Assets.Package"/> that can be used to compile an <see cref="T:Stride.Core.Assets.AssetItem"/> by analyzing and resolving its dependencies.
            </summary>
            <returns>The package packageSession that can be used to compile the asset item.</returns>
        </member>
        <member name="T:Stride.Core.Assets.PackageSessionProfilingKeys">
            <summary>
            Keys used for profiling the game class.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.PackageSessionProfilingKeys.Loading">
            <summary>
            Profiling load of a session.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.PackageSessionProfilingKeys.Saving">
            <summary>
            Profiling save of a session.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.PackageSessionPublicHelper">
            <summary>
            Helper class to load/save a VisualStudio solution.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.PackageSessionPublicHelper.FindAndSetMSBuildVersion">
            <summary>
            This method finds a compatible version of MSBuild.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.PackageSessionResult">
            <summary>
            Result returned when loading a session using <see cref="!:PackageSession.Load(string,PackageSessionResult,System.Nullable&lt;System.Threading.CancellationToken&gt;,bool)"/>
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.PackageSessionResult.Session">
            <summary>
            Gets or sets the loaded session.
            </summary>
            <value>The session.</value>
        </member>
        <member name="P:Stride.Core.Assets.PackageSessionResult.OperationCancelled">
            <summary>
            Gets or sets whether the operation has been cancelled by user.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.PackageSessionResult.Clear">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Assets.PackageStore">
            <summary>
            Manage packages locally installed and accessible on the store.
            </summary>
            <remarks>
            This class is the frontend to the packaging/distribution system. It is currently using nuget for its packaging but may
            change in the future.
            </remarks>
        </member>
        <member name="F:Stride.Core.Assets.PackageStore.store">
            <summary>
            Associated NugetStore for our packages. Cannot be null.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.PackageStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.PackageStore"/> class.
            </summary>
            <exception cref="T:System.InvalidOperationException">Unable to find a valid Stride installation path</exception>
        </member>
        <member name="M:Stride.Core.Assets.PackageStore.GetPackages">
            <summary>
            Gets the packages available online.
            </summary>
            <returns>IEnumerable&lt;PackageMeta&gt;.</returns>
        </member>
        <member name="M:Stride.Core.Assets.PackageStore.GetPackageWithFileName(System.String)">
            <summary>
            Gets the filename to the specific package using just a package name.
            </summary>
            <param name="packageName">Name of the package.</param>
            <returns>A location on the disk to the specified package or null if not found.</returns>
            <exception cref="T:System.ArgumentNullException">packageName</exception>
        </member>
        <member name="M:Stride.Core.Assets.PackageStore.GetPackageFileName(System.String,Stride.Core.PackageVersionRange,Stride.Core.Packages.ConstraintProvider,System.Boolean,System.Boolean)">
            <summary>
            Gets the filename to the specific package <paramref name="packageName"/> using the version <paramref name="versionRange"/> if not null, otherwise the <paramref name="constraintProvider"/> if specified.
            If no constraints are specified, the first entry if any are founds is used to get the filename.
            </summary>
            <param name="packageName">Name of the package.</param>
            <param name="versionRange">The version range.</param>
            <param name="constraintProvider">The package constraint provider.</param>
            <param name="allowPreleaseVersion">if set to <c>true</c> [allow prelease version].</param>
            <param name="allowUnlisted">if set to <c>true</c> [allow unlisted].</param>
            <returns>A location on the disk to the specified package or null if not found.</returns>
            <exception cref="T:System.ArgumentNullException">packageName</exception>
        </member>
        <member name="P:Stride.Core.Assets.PackageStore.Instance">
            <summary>
            Gets the default package manager.
            </summary>
            <value>A default instance.</value>
        </member>
        <member name="M:Stride.Core.Assets.PackageStore.PackageMetaFromNugetPackage(Stride.Core.Packages.NugetPackage)">
            <summary>
            New instance of <see cref="T:Stride.Core.Assets.PackageMeta"/> from a nuget package <paramref name="metadata"/>.
            </summary>
            <param name="metadata">The nuget metadata used to initialized an instance of <see cref="T:Stride.Core.Assets.PackageMeta"/>.</param>
        </member>
        <member name="T:Stride.Core.Assets.PackageUpgrader">
            <summary>
            Offers a way for package to upgrade dependent packages.
            For example, if you write package A and Game1 depends on it, you might want to offer a new version of package A that would automatically perform some upgrades on Game1.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.PackageUpgrader.UpgradeBeforeAssembliesLoaded(Stride.Core.Assets.PackageLoadParameters,Stride.Core.Assets.PackageSession,Stride.Core.Diagnostics.ILogger,Stride.Core.Assets.Package,Stride.Core.Assets.PackageDependency,Stride.Core.Assets.Package)">
            <summary>
            Performs a preprocessing step of package migration, before assembly references are loaded.
            </summary>
            <param name="loadParameters">The load parameters.</param>
            <param name="session">The session.</param>
            <param name="log">The log.</param>
            <param name="dependentPackage">The source package.</param>
            <param name="dependency">The dependency.</param>
            <param name="dependencyPackage">The dependency package.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Core.Assets.PackageUpgrader.Upgrade(Stride.Core.Assets.PackageLoadParameters,Stride.Core.Assets.PackageSession,Stride.Core.Diagnostics.ILogger,Stride.Core.Assets.Package,Stride.Core.Assets.PackageDependency,Stride.Core.Assets.Package,System.Collections.Generic.IList{Stride.Core.Assets.PackageLoadingAssetFile})">
            <summary>
            Performs the package migration, before assets are loaded
            </summary>
            <param name="loadParameters">The load parameters.</param>
            <param name="session">The session.</param>
            <param name="log">The log.</param>
            <param name="dependentPackage">The source package.</param>
            <param name="dependency">The dependency.</param>
            <param name="dependencyPackage">The dependency package.</param>
            <param name="assetFiles">The asset files.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Core.Assets.PackageUpgrader.UpgradeAfterAssetsLoaded(Stride.Core.Assets.PackageLoadParameters,Stride.Core.Assets.PackageSession,Stride.Core.Diagnostics.ILogger,Stride.Core.Assets.Package,Stride.Core.Assets.PackageDependency,Stride.Core.Assets.Package,Stride.Core.PackageVersionRange)">
            <summary>
            Performs the second step of package migration, after assets have been loaded.
            </summary>
            <param name="loadParameters">The load parameters.</param>
            <param name="session">The session.</param>
            <param name="log">The log.</param>
            <param name="dependentPackage">The source package.</param>
            <param name="dependency">The dependency.</param>
            <param name="dependencyPackage">The dependency package.</param>
            <param name="dependencyVersionBeforeUpdate">The version before the update.</param>
            <returns></returns>
        </member>
        <member name="T:Stride.Core.Assets.PackageUpgraderAttribute">
            <summary>
            Attribute that describes what a package upgrader can do.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.PackageUpgradeRequestedAnswer">
            <summary>
            An enum representing the user answer to a package upgrade request.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.PackageUpgradeRequestedAnswer.Upgrade">
            <summary>
            The related package should be upgraded.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.PackageUpgradeRequestedAnswer.UpgradeAll">
            <summary>
            The related package and all following packages should be upgraded.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.PackageUpgradeRequestedAnswer.DoNotUpgrade">
            <summary>
            The related package should not be upgraded.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.PackageUpgradeRequestedAnswer.DoNotUpgradeAny">
            <summary>
            The related package and all following packages should not be upgraded.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.PackageUserSettings">
            <summary>
            A class representing the user settings related to a <see cref="T:Stride.Core.Assets.Package"/>. These settings are stored in a .user
            file along the package file.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.ProjectSourceCodeWithFileGeneratorAsset.Generator">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.ProjectSourceCodeWithFileGeneratorAsset.SaveGeneratedAsset(Stride.Core.Assets.AssetItem)">
            <param name="assetItem"></param>
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Assets.ProjectReference">
            <summary>
            A reference to a Visual Studio project that is part of a <see cref="T:Stride.Core.Assets.Package"/>
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.ProjectReference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.ProjectReference"/> class.
            </summary>
            <remarks>
            This constructor is used only for serialization.
            </remarks>
        </member>
        <member name="M:Stride.Core.Assets.ProjectReference.#ctor(System.Guid,Stride.Core.IO.UFile,Stride.Core.Assets.ProjectType)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.ProjectReference"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="location">The location.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:Stride.Core.Assets.ProjectReference.Id">
            <summary>
            Gets or sets the unique identifier of the VS project.
            </summary>
            <value>The identifier.</value>
            <remarks>
            The setter should only be used during serialization.
            </remarks>
        </member>
        <member name="P:Stride.Core.Assets.ProjectReference.Location">
            <summary>
            Gets or sets the location of the file on the disk.
            </summary>
            <value>The location.</value>
            <remarks>
            The setter should only be used during serialization.
            </remarks>
        </member>
        <member name="P:Stride.Core.Assets.ProjectReference.Type">
            <summary>
            Gets or sets the type of project.
            </summary>
            <value>The type.</value>
            <remarks>
            The setter should only be used during serialization.
            </remarks>
        </member>
        <member name="P:Stride.Core.Assets.ProjectReference.RootNamespace">
            <summary>
            Gets or set the root namespace of the project
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.ProjectType">
            <summary>
            Type of the project.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.ProjectType.Library">
            <summary>
            A library.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.ProjectType.Executable">
            <summary>
            An executable.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.PropertyCollection">
            <summary>
            A collection of properties.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.PropertyCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.PropertyCollection"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.PropertyCollection.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Stride.Core.PropertyKey,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.PropertyCollection"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Stride.Core.Assets.PropertyCollection.Get(Stride.Core.PropertyKey)">
            <summary>
            Gets a value for the specified key, null if not found.
            </summary>
            <param name="key">The key.</param>
            <returns>A value for the specified key, null if not found.</returns>
        </member>
        <member name="M:Stride.Core.Assets.PropertyCollection.Get``1(Stride.Core.PropertyKey{``0})">
            <summary>
            Gets a value for the specified key, null if not found.
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="key">The key.</param>
            <returns>a value for the specified key, null if not found.</returns>
        </member>
        <member name="M:Stride.Core.Assets.PropertyCollection.TryGet``1(Stride.Core.PropertyKey{``0},``0@)">
            <summary>
            Gets a value for the specified key, null if not found.
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
            A value for the specified key, null if not found.
            </returns>
        </member>
        <member name="M:Stride.Core.Assets.PropertyCollection.Set(Stride.Core.PropertyKey,System.Object)">
            <summary>
            Sets a value for the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Stride.Core.Assets.PropertyCollection.Set``1(Stride.Core.PropertyKey{``0},``0)">
            <summary>
            Sets a value for the specified key.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Stride.Core.Assets.PropertyCollection.CopyTo(System.Collections.Generic.IDictionary{Stride.Core.PropertyKey,System.Object},System.Boolean)">
            <summary>
            Copies this properties to a output dictionary.
            </summary>
            <param name="properties">The dictionary to receive a copy of the properties of this instance.</param>
            <param name="overrideValues">if set to <c>true</c> [override values].</param>
            <exception cref="T:System.ArgumentNullException">properties</exception>
        </member>
        <member name="T:Stride.Core.Assets.RawAsset">
            <summary>
            A raw asset, an asset that is imported as-is.
            </summary>
            <userdoc>A raw asset, an asset that is imported as-is.</userdoc>
        </member>
        <member name="M:Stride.Core.Assets.RawAsset.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.RawAsset"/> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.RawAsset.Compress">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Stride.Core.Assets.RawAsset"/> will be compressed when compiled.
            </summary>
            <value><c>true</c> if this asset will be compressed when compiled; otherwise, <c>false</c>.</value>
            <userdoc>A boolean indicating whether this asset will be compressed when compiled</userdoc>
        </member>
        <member name="T:Stride.Core.Assets.RawAssetCompiler">
            <summary>
            Raw asset compiler.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.RawAssetImporter.Id">
            <inheritdoc />
        </member>
        <member name="P:Stride.Core.Assets.RawAssetImporter.Description">
            <inheritdoc />
        </member>
        <member name="P:Stride.Core.Assets.RawAssetImporter.SupportedFileExtensions">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Assets.RawAssetImporter.IsSupportingFile(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Stride.Core.Assets.RawAssetImporterBase`1.RootAssetTypes">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Assets.RawAssetImporterBase`1.Import(Stride.Core.IO.UFile,Stride.Core.Assets.AssetImporterParameters)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Assets.RootAssetCollection.GetKeyForItem(Stride.Core.Assets.AssetReference)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Assets.Selectors.PathSelector">
            <summary>
            Matches asset depending on their URL, using a gitignore-like format (based on fnmatch()).
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Selectors.PathSelector.Paths">
            <summary>
            Gets or sets the paths (gitignore format).
            </summary>
            <value>
            The paths (gitignore format).
            </value>
        </member>
        <member name="M:Stride.Core.Assets.Selectors.PathSelector.Select(Stride.Core.Assets.PackageSession,Stride.Core.Serialization.Contents.IContentIndexMap)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Assets.Selectors.TagSelector">
            <summary>
            An <see cref="T:Stride.Core.Assets.AssetSelector"/> using tags stored in <see cref="P:Stride.Core.Assets.Asset.Tags"/>
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Selectors.TagSelector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Selectors.TagSelector"/> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Selectors.TagSelector.Tags">
            <summary>
            Gets the tags that will be used to select an asset.
            </summary>
            <value>The tags.</value>
        </member>
        <member name="T:Stride.Core.Assets.Serializers.AssetItemSerializer">
            <summary>
            A Yaml Serializer for <see cref="!:AssetBase"/>. Because this type is immutable
            we need to implement a special serializer.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Serializers.AssetPartContainedAttribute">
            <summary>
            Changes rules on what types can be naturally contained inside a given member. All other types will be serialized as references.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Serializers.AssetPartContainedAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Serializers.AssetPartContainedAttribute"/>.
            </summary>
            <param name="containedTypes">The collection of asset part types that are naturally contained in the member having this attribute.</param>
        </member>
        <member name="P:Stride.Core.Assets.Serializers.AssetPartContainedAttribute.ContainedTypes">
            <summary>
            Gets the types of asset part that will still be fully serialized if contained in a part of the member having this attribute.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Serializers.AssetReferenceSerializer">
            <summary>
            A Yaml serializer for <see cref="T:Stride.Core.Assets.AssetReference"/>
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Serializers.FixupObjectReferences">
            <summary>
            A static class that can be used to fix up object references.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Serializers.FixupObjectReferences.RunFixupPass(System.Object,Stride.Core.Assets.Yaml.YamlAssetMetadata{System.Guid},System.Boolean,System.Boolean,Stride.Core.Diagnostics.ILogger)">
            <summary>
            Fix up references represented by the <paramref name="objectReferences"/> dictionary into the <paramref name="root"/> object, by visiting the object
            to find all <see cref="T:Stride.Core.IIdentifiable"/> instances it references, and modify the references described by <paramref name="objectReferences"/> to point
            to the proper identifiable object matching the same <see cref="T:System.Guid"/>.
            </summary>
            <param name="root">The root object to fix up.</param>
            <param name="objectReferences">The path to each object reference and the <see cref="T:System.Guid"/> of the tar</param>
            <param name="clearBrokenObjectReferences">If true, any object refernce that cannot be resolved will be reset to null.</param>
            <param name="throwOnDuplicateIds">If true, an exception will be thrown if two <see cref="T:Stride.Core.IIdentifiable"/></param>
            <param name="logger">An optional logger.</param>
        </member>
        <member name="T:Stride.Core.Assets.Serializers.IAssetPartReference">
            <summary>
            An interface representing a reference to an asset part that is used for serialization.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Serializers.IAssetPartReference.InstanceType">
            <summary>
            Gets or sets the actual type of object that is being deserialized.
            </summary>
            <remarks>
            This property is transient and used only during serialization. Therefore, implementations should have the <see cref="T:Stride.Core.DataMemberIgnoreAttribute"/> set on this property.
            </remarks>
        </member>
        <member name="M:Stride.Core.Assets.Serializers.IAssetPartReference.FillFromPart(System.Object)">
            <summary>
            Fills properties of this object from the actual asset part being referenced.
            </summary>
            <param name="assetPart">The actual asset part being referenced.</param>
        </member>
        <member name="M:Stride.Core.Assets.Serializers.IAssetPartReference.GenerateProxyPart(System.Type)">
            <summary>
            Generates a proxy asset part from the information contained in this instance.
            </summary>
            <param name="partType">The type of asset part to generate.</param>
            <returns>A proxy asset part built from this instance.</returns>
        </member>
        <member name="T:Stride.Core.Assets.Serializers.IdentifiableAssetPartReference">
            <summary>
            An implementation of <see cref="T:Stride.Core.Assets.Serializers.IAssetPartReference"/> that represents an asset part implementing <see cref="T:Stride.Core.IIdentifiable"/>.
            </summary>
            <remarks>
            This type is the default type used when <see cref="!:AssetPartReferenceAttribute.ReferenceType"/> is undefined.
            </remarks>
        </member>
        <member name="P:Stride.Core.Assets.Serializers.IdentifiableAssetPartReference.Id">
            <summary>
            Gets or sets the identifier of the asset part represented by this reference.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Serializers.IdentifiableAssetPartReference.InstanceType">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Serializers.IdentifiableAssetPartReference.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Serializers.IdentifiableAssetPartReference.FillFromPart(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Serializers.IdentifiableAssetPartReference.GenerateProxyPart(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Assets.Serializers.IdentifiableObjectSerializer">
            <summary>
            A serializer for <see cref="T:Stride.Core.IIdentifiable"/> instances, that can either serialize them directly or as an object reference.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Serializers.InvariantObjectCloneSerializer`1">
            <summary>
            A fake serializer used for cloning invariant objects. 
            Instead of actually cloning the invariant object, this serializer store it in a list of the context and restore when deserializing.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Stride.Core.Assets.Serializers.PackageVersionRangeSerializer">
            <summary>
            A Yaml serializer for <see cref="T:Stride.Core.PackageVersionRange"/>
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Serializers.PackageVersionSerializer">
            <summary>
            A Yaml serializer for <see cref="T:Stride.Core.PackageVersion"/>
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Serializers.ScalarOrObjectSerializer">
            <summary>
            Serializer that works with scalar, but could still read older ObjectSerializer format.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Serializers.UriYamlSerializer">
            <summary>
            A Yaml serializer for <see cref="T:Stride.Core.PackageVersion"/>
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Serializers.UrlReferenceSerializer">
            <summary>
            A Yaml serializer for <see cref="T:Stride.Core.Serialization.UrlReference"/>
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Serializers.YamlAssetSerializer">
            <summary>
            Default serializer used for all Yaml content
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.SolutionPlatform">
            <summary>
            Defines a solution platform.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.SolutionPlatform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.SolutionPlatform"/> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.SolutionPlatform.PlatformsPart">
            <summary>
            Gets the alternative names that will appear in the .sln file equivalent to this platform.
            </summary>
            <value>The alternative names.</value>
        </member>
        <member name="P:Stride.Core.Assets.SolutionPlatform.Type">
            <summary>
            Gets or sets the type of the platform.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Stride.Core.Assets.SolutionPlatform.TargetFramework">
            <summary>
            Gets or sets the type of the platform.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Stride.Core.Assets.SolutionPlatform.RuntimeIdentifier">
            <summary>
            Gets or sets the runtime identifier.
            </summary>
            <value>The runtime identifier.</value>
        </member>
        <member name="P:Stride.Core.Assets.SolutionPlatform.DefineConstants">
            <summary>
            Gets the define constants that will be used by the csproj of the platform.
            </summary>
            <value>The define constants.</value>
        </member>
        <member name="P:Stride.Core.Assets.SolutionPlatform.IsAvailable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Stride.Core.Assets.SolutionPlatform"/> is available on this machine.
            </summary>
            <value><c>true</c> if available; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.Assets.SolutionPlatform.Templates">
            <summary>
            The list of templates. If empty, no choice will be given to user and default one will be created by concatening ProjectExecutable and <see cref="P:Stride.Core.Assets.SolutionPlatformPart.Name"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.SolutionPlatform.GetParts">
            <summary>
            Gets the all <see cref="T:Stride.Core.Assets.SolutionPlatformPart"/>.
            </summary>
            <returns>IEnumerable&lt;SolutionPlatformPart&gt;.</returns>
        </member>
        <member name="T:Stride.Core.Assets.SolutionPlatformPart">
            <summary>
            Class SolutionAlternativePlatform.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.SolutionPlatformPart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.SolutionPlatformPart"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.SolutionPlatformPart.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.SolutionPlatformPart"/> class.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="P:Stride.Core.Assets.SolutionPlatformPart.Name">
            <summary>
            Gets or sets the name of the alternative platform.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Stride.Core.Assets.SolutionPlatformPart.SolutionName">
            <summary>
            Gets or sets the solution name. If null, use the <see cref="P:Stride.Core.Assets.SolutionPlatformPart.Name"/>
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Stride.Core.Assets.SolutionPlatformPart.DisplayName">
            <summary>
            Gets or sets the display name. If null, use the <see cref="P:Stride.Core.Assets.SolutionPlatformPart.Name"/>.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="P:Stride.Core.Assets.SolutionPlatformPart.SafeSolutionName">
            <summary>
            Gets the name of the solution from <see cref="P:Stride.Core.Assets.SolutionPlatformPart.SolutionName"/>, using <see cref="P:Stride.Core.Assets.SolutionPlatformPart.Name"/> as a fallback.
            </summary>
            <value>The name of the safe solution.</value>
        </member>
        <member name="P:Stride.Core.Assets.SolutionPlatformPart.Cpu">
            <summary>
            Gets or sets the CPU name, if this platform is CPU specific.
            </summary>
            <value>
            The CPU name.
            </value>
        </member>
        <member name="P:Stride.Core.Assets.SolutionPlatformPart.Alias">
            <summary>
            Gets or sets the name of the alias. If != null, then this platform is only available in the solution and remapped
            to the platform with this <see cref="P:Stride.Core.Assets.SolutionPlatformPart.Alias"/>
            </summary>
            <value>The name of the alias.</value>
        </member>
        <member name="P:Stride.Core.Assets.SolutionPlatformPart.InheritConfigurations">
            <summary>
            Gets or sets a value indicating whether inherit configurations from parent <see cref="T:Stride.Core.Assets.SolutionPlatform"/>
            </summary>
            <value><c>true</c> if [inherit configurations]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.Assets.SolutionPlatformPart.Configurations">
            <summary>
            Gets the configurations supported by this platform (by default contains 'Debug' and 'Release')
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.SolutionPlatformPart.IsProjectHandled(Stride.Core.Assets.ProjectType)">
            <summary>
            Determines whether the project is handled by this platform.
            </summary>
            <param name="projectType">Type of the project.</param>
            <returns><c>true</c> if the project is handled by this platform; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.Assets.SolutionPlatformPart.GetProjectName(Stride.Core.Assets.ProjectType)">
            <summary>
            Gets the name of the project configuration from <see cref="P:Stride.Core.Assets.SolutionPlatformPart.Alias"/>, with <see cref="P:Stride.Core.Assets.SolutionPlatformPart.SafeSolutionName"/> as a fallback.
            </summary>
            <value>The name of the safe solution.</value>
        </member>
        <member name="T:Stride.Core.Assets.SolutionPlatformPartCollection">
            <summary>
            A collection of <see cref="T:Stride.Core.Assets.SolutionPlatformPart"/>
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.SolutionConfigurationCollection">
            <summary>
            A collection of <see cref="T:Stride.Core.Assets.SolutionConfiguration"/>
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.SolutionConfiguration">
            <summary>
            A solution configuration used by <see cref="T:Stride.Core.Assets.SolutionPlatform"/>
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.SolutionConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.SolutionConfiguration"/> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.SolutionConfiguration.Name">
            <summary>
            Gets or sets the configuration name (e.g. Debug, Release)
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Stride.Core.Assets.SolutionConfiguration.IsDebug">
            <summary>
            Gets or sets a value indicating whether this instance is a debug configuration.
            </summary>
            <value><c>true</c> if this instance is debug; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.Assets.SolutionConfiguration.Properties">
            <summary>
            Gets the additional msbuild properties for a specific configuration (Debug or Release)
            </summary>
            <value>The msbuild configuration properties.</value>
        </member>
        <member name="T:Stride.Core.Assets.SolutionPlatformCollection">
            <summary>
            A collection of <see cref="T:Stride.Core.Assets.SolutionPlatform"/>.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.SolutionPlatformTemplate">
            <summary>
            Defines a custom project template for a <see cref="T:Stride.Core.Assets.SolutionPlatform"/>.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.SolutionPlatformTemplate.TemplatePath">
            <summary>
            The template path.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.SolutionPlatformTemplate.DisplayName">
            <summary>
            The display name, which will be shown to user when choosing template.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.SourceCodeAsset">
            <summary>
            Class SourceCodeAsset.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.SourceCodeAsset.InternalSerializableTextAccessor">
            <summary>
            Used internally by serialization.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.SourceCodeAsset.Text">
            <summary>
            Gets the sourcecode text.
            </summary>
            <value>The sourcecode text.</value>
        </member>
        <member name="M:Stride.Core.Assets.SourceCodeAsset.Save(System.IO.Stream)">
            <summary>
            Saves the content to a stream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Stride.Core.Assets.SourceCodeAsset.GenerateIdFromLocation(System.String,System.String)">
            <summary>
            Generates a unique identifier from location.
            </summary>
            <param name="location">The location.</param>
            <returns>Guid.</returns>
        </member>
        <member name="T:Stride.Core.Assets.SourceFileMemberAttribute">
            <summary>
            An attribute indicating whether a member of an asset represents the path to a source file for this asset.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.SourceFileMemberAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.SourceFileMemberAttribute"/> class.
            </summary>
            <param name="updateAssetIfChanged">If true, the asset should be updated when the related source file changes.</param>
        </member>
        <member name="P:Stride.Core.Assets.SourceFileMemberAttribute.UpdateAssetIfChanged">
            <summary>
            Gets whether the asset should be updated when the related source file changes.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.SourceFileMemberAttribute.Optional">
            <summary>
            Gets or sets whether this source file is optional for the compilation of the asset.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.TagCollection">
            <summary>
            A collection of tags.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.TemplateFolder">
            <summary>
            Describes a template folder.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.TemplateFolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.TemplateFolder"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.TemplateFolder.#ctor(Stride.Core.IO.UDirectory)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.TemplateFolder"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="P:Stride.Core.Assets.TemplateFolder.Path">
            <summary>
            Gets or sets the folder relative to the package where templates are available.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Stride.Core.Assets.TemplateFolder.Group">
            <summary>
            Gets or sets the group (used when building a package archive)
            </summary>
            <value>The group.</value>
        </member>
        <member name="P:Stride.Core.Assets.TemplateFolder.Exclude">
            <summary>
            Gets or sets the exclude pattern to exclude files from package archive.
            </summary>
            <value>The exclude.</value>
        </member>
        <member name="P:Stride.Core.Assets.TemplateFolder.Files">
            <summary>
            Gets or sets the files.
            </summary>
            <value>The files.</value>
        </member>
        <member name="T:Stride.Core.Assets.Templates.ITemplateGenerator">
            <summary>
            The interface to represent a template generator.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Templates.ITemplateGenerator.IsSupportingTemplate(Stride.Core.Assets.Templates.TemplateDescription)">
            <summary>
            Determines whether this generator is supporting the specified template
            </summary>
            <param name="templateDescription">The template description.</param>
            <returns><c>true</c> if this generator is supporting the specified template; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Stride.Core.Assets.Templates.ITemplateGenerator`1">
            <summary>
            The interface to represent a template generator.
            </summary>
            <typeparam name="TParameters">The type of parameters this generator uses.</typeparam>
        </member>
        <member name="M:Stride.Core.Assets.Templates.ITemplateGenerator`1.PrepareForRun(`0)">
            <summary>
            Prepares this generator with the specified parameters.
            </summary>
            <param name="parameters">The parameters for the template generator.</param>
            <remarks>This method should be used to verify that the parameters are correct, and to ask user for additional
            information before running the template.
            </remarks>
            <returns>A task completing when the preparation is finished, with the result <c>True</c> if the preparation was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Templates.ITemplateGenerator`1.Run(`0)">
            <summary>
            Runs the generator with the given parameter.
            </summary>
            <param name="parameters">The parameters for the template generator.</param>
            <remarks>
            This method should work in unattended mode and should not ask user for information anymore.
            </remarks>
            <returns><c>True</c> if the generation was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Stride.Core.Assets.Templates.TemplateAssetDescription">
            <summary>
            A template for creating assets.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Templates.TemplateDescription">
            <summary>
            Description of a template generator that can be displayed in the GameStudio.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Templates.TemplateDescription.FileExtension">
            <summary>
            The file extension used when loading/saving this template description.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Templates.TemplateDescription.Id">
            <summary>
            Gets or sets the unique identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Stride.Core.Assets.Templates.TemplateDescription.Name">
            <summary>
            Gets or sets the short name of this template 
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Stride.Core.Assets.Templates.TemplateDescription.Scope">
            <summary>
            Gets or sets the scope of this template.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Stride.Core.Assets.Templates.TemplateDescription.Order">
            <summary>
            Gets or sets the order (lower value means higher order)
            </summary>
            <value>The order.</value>
        </member>
        <member name="P:Stride.Core.Assets.Templates.TemplateDescription.Group">
            <summary>
            Gets or sets the group.
            </summary>
            <value>The group.</value>
        </member>
        <member name="P:Stride.Core.Assets.Templates.TemplateDescription.Icon">
            <summary>
            Gets or sets the icon/bitmap.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:Stride.Core.Assets.Templates.TemplateDescription.Screenshots">
            <summary>
            Gets the screenshots.
            </summary>
            <value>The screenshots.</value>
        </member>
        <member name="P:Stride.Core.Assets.Templates.TemplateDescription.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Stride.Core.Assets.Templates.TemplateDescription.FullDescription">
            <summary>
            Gets or sets a longer description.
            </summary>
            <value>The longer description.</value>
        </member>
        <member name="P:Stride.Core.Assets.Templates.TemplateDescription.DefaultOutputName">
            <summary>
            Gets or set the default name for the output package/library.
            </summary>
            <value>The default output name.</value>
        </member>
        <member name="P:Stride.Core.Assets.Templates.TemplateDescription.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:Stride.Core.Assets.Templates.TemplateDescription.IsDirty">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Assets.Templates.TemplateDescription.FullPath">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Assets.Templates.TemplateDescription.TemplateDirectory">
            <summary>
            Gets the directory from where this template was loaded
            </summary>
            <value>The resource directory.</value>
        </member>
        <member name="T:Stride.Core.Assets.Templates.TemplateGeneratorBase`1">
            <summary>
            Base implementation for <see cref="T:Stride.Core.Assets.Templates.ITemplateGenerator"/> and <see cref="T:Stride.Core.Assets.Templates.ITemplateGenerator`1"/>.
            </summary>
            <typeparam name="TParameters">The type of parameters this generator uses.</typeparam>
        </member>
        <member name="M:Stride.Core.Assets.Templates.TemplateGeneratorBase`1.IsSupportingTemplate(Stride.Core.Assets.Templates.TemplateDescription)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Templates.TemplateGeneratorBase`1.PrepareForRun(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Templates.TemplateGeneratorBase`1.Run(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Assets.Templates.TemplateGeneratorContext">
            <summary>
            Context that will be used to run the tempplate generator.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Templates.TemplateGeneratorContext.#ctor(Stride.Core.Assets.PackageSession)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Templates.TemplateGeneratorContext"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Stride.Core.Assets.Templates.TemplateGeneratorContext.#ctor(Stride.Core.Assets.Package)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Templates.TemplateGeneratorContext"/> class.
            </summary>
            <param name="package">The package.</param>
        </member>
        <member name="P:Stride.Core.Assets.Templates.TemplateGeneratorContext.Session">
            <summary>
            Gets or sets the current session.
            </summary>
            <value>The session.</value>
        </member>
        <member name="P:Stride.Core.Assets.Templates.TemplateGeneratorContext.Package">
            <summary>
            Gets or sets the current package (may be null)
            </summary>
            <value>The package.</value>
        </member>
        <member name="P:Stride.Core.Assets.Templates.SessionTemplateGeneratorParameters.Session">
            <summary>
            Gets or sets the current session.
            </summary>
            <value>The session.</value>
        </member>
        <member name="P:Stride.Core.Assets.Templates.PackageTemplateGeneratorParameters.Package">
            <summary>
            Gets or sets the package in which to execute this template
            </summary>
            <value>The package.</value>
        </member>
        <member name="P:Stride.Core.Assets.Templates.AssetTemplateGeneratorParameters.RequestSessionSave">
            <summary>
            Indicates whether the session has to be saved after the asset template generator has completed. The default is <c>false</c>.
            </summary>
            <remarks>This is an out parameter that asset template generator should set if needed.</remarks>
        </member>
        <member name="T:Stride.Core.Assets.Templates.TemplateGeneratorParameters">
            <summary>
            Parameters used by <see cref="T:Stride.Core.Assets.Templates.ITemplateGenerator`1"/>
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Templates.TemplateGeneratorParameters.Name">
            <summary>
            Gets or sets the project name used to generate the template.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Stride.Core.Assets.Templates.TemplateGeneratorParameters.Id">
            <summary>
            Gets or sets the project ID used to generate the template.
            </summary>
            <value>The ID</value>
        </member>
        <member name="P:Stride.Core.Assets.Templates.TemplateGeneratorParameters.Namespace">
            <summary>
            Gets or sets the default namespace of this project.
            </summary>
            <value> The namespace. </value>
        </member>
        <member name="P:Stride.Core.Assets.Templates.TemplateGeneratorParameters.OutputDirectory">
            <summary>
            Gets or sets the output directory.
            </summary>
            <value>The output directory.</value>
        </member>
        <member name="P:Stride.Core.Assets.Templates.TemplateGeneratorParameters.Description">
            <summary>
            The actual template description.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Templates.TemplateGeneratorParameters.Unattended">
            <summary>
            Specifies if the template generator should run in unattended mode (no UI).
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Templates.TemplateGeneratorParameters.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="F:Stride.Core.Assets.Templates.TemplateGeneratorParameters.Tags">
            <summary>
            Contains extra properties that can be consumed by template generators.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Templates.TemplateGeneratorParameters.Validate">
            <summary>
            Validates this instance (all fields must be setup)
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Templates.TemplateGeneratorParameters.GetTag``1(Stride.Core.PropertyKey{``0})">
            <summary>
            Gets the tag corresponding to the given property key. This will fail if key doesn't exist.
            </summary>
            <typeparam name="T">The generic type of the property key.</typeparam>
            <param name="key">The property key for which to retrieve the value.</param>
            <returns>The value of the tag corresponding to the given property key.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Tag not found in template generator parameters.</exception>
        </member>
        <member name="M:Stride.Core.Assets.Templates.TemplateGeneratorParameters.TryGetTag``1(Stride.Core.PropertyKey{``0})">
            <summary>
            Gets the tag corresponding to the given property key if available, otherwise returns default value.
            </summary>
            <typeparam name="T">The generic type of the property key.</typeparam>
            <param name="key">The property key for which to retrieve the value.</param>
            <returns>The value of the tag corresponding to the given property key if available, the default value of the property key otherwise.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Templates.TemplateGeneratorParameters.HasTag``1(Stride.Core.PropertyKey{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Stride.Core.Assets.Templates.TemplateManager">
            <summary>
            Handle templates for creating <see cref="T:Stride.Core.Assets.Package"/>, <see cref="T:Stride.Core.Assets.ProjectReference"/>
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Templates.TemplateManager.Register(Stride.Core.Assets.Templates.ITemplateGenerator)">
            <summary>
            Registers the specified factory.
            </summary>
            <param name="generator">The factory.</param>
            <exception cref="T:System.ArgumentNullException">factory</exception>
        </member>
        <member name="M:Stride.Core.Assets.Templates.TemplateManager.Unregister(Stride.Core.Assets.Templates.ITemplateGenerator)">
            <summary>
            Unregisters the specified factory.
            </summary>
            <param name="generator">The factory.</param>
            <exception cref="T:System.ArgumentNullException">factory</exception>
        </member>
        <member name="M:Stride.Core.Assets.Templates.TemplateManager.FindTemplates(Stride.Core.Assets.PackageSession)">
            <summary>
            Finds all template descriptions.
            </summary>
            <returns>A sequence containing all registered template descriptions.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Templates.TemplateManager.FindTemplates(Stride.Core.Assets.Templates.TemplateScope,Stride.Core.Assets.PackageSession)">
            <summary>
            Finds template descriptions that match the given scope.
            </summary>
            <returns>A sequence containing all registered template descriptions that match the given scope.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Templates.TemplateManager.FindTemplateGenerator``1(Stride.Core.Assets.Templates.TemplateDescription)">
            <summary>
            Finds a template generator supporting the specified template description
            </summary>
            <param name="description">The description.</param>
            <returns>A template generator supporting the specified description or null if not found.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Templates.TemplateManager.FindTemplateGenerator``1(``0)">
            <summary>
            Finds a template generator supporting the specified template description
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>A template generator supporting the specified description or null if not found.</returns>
        </member>
        <member name="T:Stride.Core.Assets.Templates.TemplateSampleDescription">
            <summary>
            A template for using an existing package as a template, expecting a <see cref="T:Stride.Core.Assets.Package"/> to be accessible 
            from <see cref="P:Stride.Core.Assets.Templates.TemplateDescription.FullPath"/> with the same name as this template.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Templates.TemplateSampleDescription.PatternName">
            <summary>
            Gets or sets the name of the pattern used to substitute files and content. If null, use the 
            <see cref="P:Stride.Core.Assets.Templates.TemplateDescription.DefaultOutputName"/>.
            </summary>
            <value>The name of the pattern.</value>
        </member>
        <member name="T:Stride.Core.Assets.Templates.TemplateScope">
            <summary>
            Describes if a template is supporting a particular context
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Templates.TemplateScope.Session">
            <summary>
            The template can be applied to an existing <see cref="T:Stride.Core.Assets.PackageSession"/>.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Templates.TemplateScope.Package">
            <summary>
            The template can be applied to an existing <see cref="T:Stride.Core.Assets.Package"/>.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Templates.TemplateScope.Asset">
            <summary>
            The template can be applied to certain types of Assets <see cref="T:Stride.Core.Assets.Asset"/>.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Templates.TemplateStatus">
            <summary>
            Status of the template
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Templates.TemplateStatus.None">
            <summary>
            Nothing particular.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Templates.TemplateStatus.New">
            <summary>
            The template is new
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Templates.TemplateStatus.Updated">
            <summary>
            The template has been updated
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.TextAccessors.DefaultTextAccessor.Get">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.TextAccessors.DefaultTextAccessor.Set(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.TextAccessors.ITextAccessor.Get">
            <summary>
            Gets the underlying text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stride.Core.Assets.TextAccessors.ITextAccessor.Set(System.String)">
            <summary>
            Sets the underlying text.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Stride.Core.Assets.TextAccessors.ITextAccessor.Save(System.IO.Stream)">
            <summary>
            Writes the text to the given <see cref="T:System.IO.StreamWriter"/>.
            </summary>
            <param name="streamWriter"></param>
        </member>
        <member name="M:Stride.Core.Assets.Tracking.AssetSourceTracker.#ctor(Stride.Core.Assets.PackageSession)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Analysis.AssetDependencyManager" /> class.
            </summary>
            <param name="session">The session.</param>
            <exception cref="T:System.ArgumentNullException">session</exception>
        </member>
        <member name="P:Stride.Core.Assets.Tracking.AssetSourceTracker.SourceFileChanged">
            <summary>
            Gets a source dataflow block in which notifications that a source file has changed are pushed.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Tracking.AssetSourceTracker.EnableTracking">
            <summary>
            Gets or sets a value indicating whether this instance should track file disk changed events. Default is <c>false</c>
            </summary>
            <value><c>true</c> if this instance should track file disk changed events; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.Assets.Tracking.AssetSourceTracker.IsTrackingPaused">
            <summary>
            Gets or sets a value indicating whether this instance is processing tracking events or it is paused. Default is <c>false</c>.
            </summary>
            <value><c>true</c> if this instance is tracking paused; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.Assets.Tracking.AssetSourceTracker.TrackingSleepTime">
            <summary>
            Gets or sets the number of ms the file tracker should sleep before checking changes. Default is 1000ms.
            </summary>
            <value>The tracking sleep time.</value>
        </member>
        <member name="M:Stride.Core.Assets.Tracking.AssetSourceTracker.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Tracking.AssetSourceTracker.TrackPackage(Stride.Core.Assets.Package)">
            <summary>
            This method is called when a package needs to be tracked
            </summary>
            <param name="package">The package to track.</param>
        </member>
        <member name="M:Stride.Core.Assets.Tracking.AssetSourceTracker.UnTrackPackage(Stride.Core.Assets.Package)">
            <summary>
            This method is called when a package needs to be un-tracked
            </summary>
            <param name="package">The package to un-track.</param>
        </member>
        <member name="M:Stride.Core.Assets.Tracking.AssetSourceTracker.TrackAsset(Stride.Core.Assets.AssetId)">
            <summary>
            This method is called when an asset needs to be tracked
            </summary>
            <returns>AssetDependencies.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Tracking.AssetSourceTracker.RunChangeWatcher">
            <summary>
            This method is running in a separate thread and process file events received from <see cref="T:Stride.Core.IO.DirectoryWatcher"/>
            in order to generate the appropriate list of <see cref="T:Stride.Core.Assets.Analysis.AssetFileChangedEvent"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Tracking.AssetSourceTracker.SourceImportFileHashCallback(Stride.Core.IO.UFile,Stride.Core.Storage.ObjectId)">
            <summary>
            This callback is receiving hash calculated from asset source file. If the source hash is changing from what
            we had previously stored, we can emit a <see cref="F:Stride.Core.Assets.Analysis.AssetFileChangedType.SourceUpdated" /> event.
            </summary>
            <param name="sourceFile">The source file.</param>
            <param name="hash">The object identifier hash calculated from this source file.</param>
        </member>
        <member name="T:Stride.Core.Assets.Tracking.SourceFileChangedData">
            <summary>
            Data structure for the <see cref="P:Stride.Core.Assets.Tracking.AssetSourceTracker.SourceFileChanged"/> block.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Tracking.SourceFileChangedData.#ctor(Stride.Core.Assets.Tracking.SourceFileChangeType,Stride.Core.Assets.AssetId,System.Collections.Generic.IReadOnlyList{Stride.Core.IO.UFile},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Tracking.SourceFileChangedData"/> structure.
            </summary>
            <param name="type">The type of change that occurred.</param>
            <param name="assetId">The id of the asset affected by this change.</param>
            <param name="files">The list of files that changed.</param>
            <param name="needUpdate">Indicate whether the asset needs to be updated from its sources due to this change.</param>
        </member>
        <member name="P:Stride.Core.Assets.Tracking.SourceFileChangedData.Type">
            <summary>
            Gets the type of change that occurred.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Tracking.SourceFileChangedData.AssetId">
            <summary>
            Gets the id of the asset affected by this change.
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Tracking.SourceFileChangedData.Files">
            <summary>
            Gets the list of files that changed
            </summary>
        </member>
        <member name="P:Stride.Core.Assets.Tracking.SourceFileChangedData.NeedUpdate">
            <summary>
            Gets whether the asset needs to be updated from its sources due to this change.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Tracking.SourceFileChangeType">
            <summary>
            Describes a change related to the source files used by an asset.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Tracking.SourceFileChangeType.Asset">
            <summary>
            The change occurred in an asset that now has a different list of source files.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Tracking.SourceFileChangeType.SourceFile">
            <summary>
            The change occurred in an source file that has been modified externally.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Tracking.TrackedAsset">
            <summary>
            Represents a single asset which has source files currently being tracked for changes.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Tracking.TrackedAsset.#ctor(Stride.Core.Assets.Tracking.AssetSourceTracker,Stride.Core.Assets.Asset,Stride.Core.Assets.Asset)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Tracking.TrackedAsset"/> class.
            </summary>
            <param name="tracker">The source tracker managing this object.</param>
            <param name="sessionAsset">The actual asset in the current session.</param>
            <param name="clonedAsset">A clone of the actual asset. If the actual asset is read-only, it is acceptable to use it instead of a clone.</param>
        </member>
        <member name="P:Stride.Core.Assets.Tracking.TrackedAsset.AssetId">
            <summary>
            Gets the id of this asset.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Tracking.TrackedAsset.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Tracking.TrackedAsset.NotifyAssetChanged">
            <summary>
            Notifies this object that the asset has been modified.
            </summary>
            <remarks>This method will trigger the re-evaluation of properties containing the path to a source file.</remarks>
        </member>
        <member name="T:Stride.Core.Assets.UnloadableObjectRemover">
            <summary>
            Removes objects implementing <see cref="!:IYamlProxy"/> from the object.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.UPathRelativeTo">
            <summary>
            Enum UPathRelativeTo
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.UPathRelativeTo.None">
            <summary>
            The UPath is stored as-is without post-processing
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.UPathRelativeTo.Package">
            <summary>
            The UPath is stored in relative mode when storing on the disk and relative to the current package.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.UPathAttribute">
            <summary>
            Specifies how to normalize a UPath stored in a class after loading/saving an asset.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.UPathAttribute.#ctor(Stride.Core.Assets.UPathRelativeTo)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.UPathAttribute"/> class.
            </summary>
            <param name="relativeTo">The relative to.</param>
        </member>
        <member name="P:Stride.Core.Assets.UPathAttribute.RelativeTo">
            <summary>
            Gets how to normalize the path relative to.
            </summary>
            <value>The relative to.</value>
        </member>
        <member name="P:Stride.Core.Assets.Visitors.AssetMemberVisitorBase.MemberPath">
            <summary>
            Gets the <see cref="T:Stride.Core.Reflection.MemberPath"/> that will be checked against when visiting.
            </summary>
            <seealso cref="!:AssetVisitorBase.CurrentPath"/>
        </member>
        <member name="M:Stride.Core.Assets.Visitors.AssetMemberVisitorBase.VisitArrayItem(System.Array,Stride.Core.Reflection.ArrayDescriptor,System.Int32,System.Object,Stride.Core.Reflection.ITypeDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Visitors.AssetMemberVisitorBase.VisitCollectionItem(System.Collections.IEnumerable,Stride.Core.Reflection.CollectionDescriptor,System.Int32,System.Object,Stride.Core.Reflection.ITypeDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Visitors.AssetMemberVisitorBase.VisitDictionaryKeyValue(System.Object,Stride.Core.Reflection.DictionaryDescriptor,System.Object,Stride.Core.Reflection.ITypeDescriptor,System.Object,Stride.Core.Reflection.ITypeDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Visitors.AssetMemberVisitorBase.VisitObject(System.Object,Stride.Core.Reflection.ObjectDescriptor,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Assets.Visitors.AssetMemberVisitorBase.VisitObjectMember(System.Object,Stride.Core.Reflection.ObjectDescriptor,Stride.Core.Reflection.IMemberDescriptor,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Visitors.AssetMemberVisitorBase.VisitPrimitive(System.Object,Stride.Core.Reflection.PrimitiveDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Visitors.AssetMemberVisitorBase.VisitAssetMember(System.Object,Stride.Core.Reflection.ITypeDescriptor)">
            <summary>
            Called when <see cref="!:AssetVisitorBase.CurrentPath"/> matches the <see cref="P:Stride.Core.Assets.Visitors.AssetMemberVisitorBase.MemberPath"/> given when creating this instance.
            </summary>
            <param name="value"></param>
            <param name="descriptor"></param>
        </member>
        <member name="T:Stride.Core.Assets.Visitors.AssetVisitorBase">
            <summary>
            Visitor for assets.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Yaml.AttachedYamlAssetMetadata">
            <summary>
            An interface representing an object that has <see cref="T:Stride.Core.Assets.Yaml.IYamlAssetMetadata"/> attached to it.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.AttachedYamlAssetMetadata.AttachMetadata``1(Stride.Core.PropertyKey{Stride.Core.Assets.Yaml.YamlAssetMetadata{``0}},Stride.Core.Assets.Yaml.YamlAssetMetadata{``0})">
            <summary>
            Attaches metadata to this object.
            </summary>
            <typeparam name="T">The type of metadata being attached.</typeparam>
            <param name="key">The property key that identifies this type of metadata.</param>
            <param name="metadata">The metadata to attach.</param>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.AttachedYamlAssetMetadata.RetrieveMetadata``1(Stride.Core.PropertyKey{Stride.Core.Assets.Yaml.YamlAssetMetadata{``0}})">
            <summary>
            Retrieves metadata attached to this object.
            </summary>
            <typeparam name="T">The type of metadata being attached.</typeparam>
            <param name="key">The property key that identifies this type of metadata.</param>
            <returns>The corresponding metadata attached to this object, or null if it couldn't be found.</returns>
        </member>
        <member name="T:Stride.Core.Assets.Yaml.IYamlAssetMetadata">
            <summary>
            An interface representing a container used to transfer metadata between the asset and the YAML serializer.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.IYamlAssetMetadata.Attach">
            <summary>
            Notifies that this metadata has been attached and cannot be modified anymore.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.IYamlAssetMetadata.Set(Stride.Core.Assets.Yaml.YamlAssetPath,System.Object)">
            <summary>
            Attaches the given metadata value to the given YAML path.
            </summary>
            <param name="path">The path at which to attach metadata.</param>
            <param name="value">The metadata to attach.</param>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.IYamlAssetMetadata.Remove(Stride.Core.Assets.Yaml.YamlAssetPath)">
            <summary>
            Removes attached metadata from the given YAML path.
            </summary>
            <param name="path">The path at which to remove metadata.</param>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.IYamlAssetMetadata.TryGet(Stride.Core.Assets.Yaml.YamlAssetPath)">
            <summary>
            Tries to retrieve the metadata for the given path.
            </summary>
            <param name="path">The path at which to retrieve metadata.</param>
            <returns>The metadata attached to the given path, or the default value of the underlying type if no metadata is attached at the given path.</returns>
        </member>
        <member name="T:Stride.Core.Assets.Yaml.YamlAssetPathComparer">
            <summary>
            Equality comparer for <see cref="T:Stride.Core.Assets.Yaml.YamlAssetPath"/> hwne used as a key in a hashing collection (e.g. <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <remarks>
            To stay valid the compared <see cref="T:Stride.Core.Assets.Yaml.YamlAssetPath"/> must not change while used as keys in the hashing collection.
            </remarks>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.YamlAssetPathComparer.Equals(Stride.Core.Assets.Yaml.YamlAssetPath,Stride.Core.Assets.Yaml.YamlAssetPath)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Assets.Yaml.YamlAssetPathComparer.GetHashCode(Stride.Core.Assets.Yaml.YamlAssetPath)">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Assets.Yaml.YamlAssetMetadata`1">
            <summary>
            A container class to transfer metadata between the asset and the YAML serializer.
            </summary>
            <typeparam name="T">The type of metadata.</typeparam>
        </member>
        <member name="P:Stride.Core.Assets.Yaml.YamlAssetMetadata`1.Count">
            <summary>
            Gets the number of key/value pairs contained in the <see cref="T:Stride.Core.Assets.Yaml.YamlAssetMetadata`1"/>
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.YamlAssetMetadata`1.Set(Stride.Core.Assets.Yaml.YamlAssetPath,`0)">
            <summary>
            Attaches the given metadata value to the given YAML path.
            </summary>
            <param name="path">The path at which to attach metadata.</param>
            <param name="value">The metadata to attach.</param>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.YamlAssetMetadata`1.Remove(Stride.Core.Assets.Yaml.YamlAssetPath)">
            <summary>
            Removes attached metadata from the given YAML path.
            </summary>
            <param name="path">The path at which to remove metadata.</param>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.YamlAssetMetadata`1.TryGet(Stride.Core.Assets.Yaml.YamlAssetPath)">
            <summary>
            Tries to retrieve the metadata for the given path.
            </summary>
            <param name="path">The path at which to retrieve metadata.</param>
            <returns>The metadata attached to the given path, or the default value of <typeparamref name="T"/> if no metadata is attached at the given path.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.YamlAssetMetadata`1.Stride#Core#Assets#Yaml#IYamlAssetMetadata#Set(Stride.Core.Assets.Yaml.YamlAssetPath,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.YamlAssetMetadata`1.Stride#Core#Assets#Yaml#IYamlAssetMetadata#TryGet(Stride.Core.Assets.Yaml.YamlAssetPath)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.YamlAssetMetadata`1.Stride#Core#Assets#Yaml#IYamlAssetMetadata#Attach">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Assets.Yaml.YamlAssetPath">
            <summary>
            A class representing the path of a member or item of an Asset as it is created/consumed by the YAML asset serializers.
            </summary>
        </member>
        <member name="T:Stride.Core.Assets.Yaml.YamlAssetPath.ElementType">
            <summary>
            An enum representing the type of an element of the path.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Yaml.YamlAssetPath.ElementType.Member">
            <summary>
            An element that is a member.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Yaml.YamlAssetPath.ElementType.Index">
            <summary>
            An element that is an index or a key.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Yaml.YamlAssetPath.ElementType.ItemId">
            <summary>
            An element that is an item identifier of a collection with ids
            </summary>
            <seealso cref="T:Stride.Core.Reflection.ItemId"/>
        </member>
        <member name="T:Stride.Core.Assets.Yaml.YamlAssetPath.Element">
            <summary>
            A structure representing an element of a <see cref="T:Stride.Core.Assets.Yaml.YamlAssetPath"/>.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Yaml.YamlAssetPath.Element.Type">
            <summary>
            The type of the element.
            </summary>
        </member>
        <member name="F:Stride.Core.Assets.Yaml.YamlAssetPath.Element.Value">
            <summary>
            The value of the element, corresonding to its <see cref="F:Stride.Core.Assets.Yaml.YamlAssetPath.Element.Type"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.YamlAssetPath.Element.#ctor(Stride.Core.Assets.Yaml.YamlAssetPath.ElementType,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Yaml.YamlAssetPath.Element"/> structure.
            </summary>
            <param name="type">The type of element.</param>
            <param name="value">The value of the element.</param>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.YamlAssetPath.Element.AsMember">
            <summary>
            Fetches the name of the member, considering this element is a <see cref="F:Stride.Core.Assets.Yaml.YamlAssetPath.ElementType.Member"/>.
            </summary>
            <returns>The name of the member.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.YamlAssetPath.Element.AsItemId">
            <summary>
            Returns the <see cref="T:Stride.Core.Reflection.ItemId"/> of this element, considering this element is a <see cref="F:Stride.Core.Assets.Yaml.YamlAssetPath.ElementType.ItemId"/>.
            </summary>
            <returns>The <see cref="T:Stride.Core.Reflection.ItemId"/> of the item.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.YamlAssetPath.Element.Equals(Stride.Core.Assets.Yaml.YamlAssetPath.Element)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.YamlAssetPath.Element.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.YamlAssetPath.Element.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.YamlAssetPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Yaml.YamlAssetPath"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.YamlAssetPath.#ctor(System.Collections.Generic.IEnumerable{Stride.Core.Assets.Yaml.YamlAssetPath.Element})">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Assets.Yaml.YamlAssetPath"/> class.
            </summary>
            <param name="elements">The elements constituting this path, in proper order.</param>
        </member>
        <member name="P:Stride.Core.Assets.Yaml.YamlAssetPath.Elements">
            <summary>
            The elements constituting this path.
            </summary>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.YamlAssetPath.Match(Stride.Core.Assets.Yaml.YamlAssetPath)">
            <summary>
            Indicates whether the current path represents the same path of another object.
            </summary>
            <param name="other">An object to compare with this path.</param>
            <returns><c>true</c> if the current path matches the <paramref name="other"/> parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.YamlAssetPath.PushMember(System.String)">
            <summary>
            Adds an additional element to the path representing an access to a member of an object.
            </summary>
            <param name="memberName">The name of the member.</param>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.YamlAssetPath.PushIndex(System.Object)">
            <summary>
            Adds an additional element to the path representing an access to an item of a collection or a value of a dictionary that does not use <see cref="T:Stride.Core.Reflection.ItemId"/>.
            </summary>
            <param name="index">The index of the item.</param>
            <seealso cref="T:Stride.Core.Annotations.NonIdentifiableCollectionItemsAttribute"/>
            <seealso cref="T:Stride.Core.Reflection.ItemId"/>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.YamlAssetPath.PushItemId(Stride.Core.Reflection.ItemId)">
            <summary>
            Adds an additional element to the path representing an access to an item of an collection or a value of a dictionary.
            </summary>
            <param name="itemId">The <see cref="T:Stride.Core.Reflection.ItemId"/> of the item.</param>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.YamlAssetPath.Push(Stride.Core.Assets.Yaml.YamlAssetPath.Element)">
            <summary>
            Adds an additional element.
            </summary>
            <param name="element">The <see cref="T:Stride.Core.Assets.Yaml.YamlAssetPath.Element"/> to add.</param>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.YamlAssetPath.Append(Stride.Core.Assets.Yaml.YamlAssetPath)">
            <summary>
            Appends the given <see cref="T:Stride.Core.Assets.Yaml.YamlAssetPath"/> to this instance.
            </summary>
            <param name="other">The <see cref="T:Stride.Core.Assets.Yaml.YamlAssetPath"/></param>
            <returns>A new instance of <see cref="T:Stride.Core.Assets.Yaml.YamlAssetPath"/> corresonding to the given instance appended to this instance.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.YamlAssetPath.Clone">
            <summary>
            Creates a clone of this <see cref="T:Stride.Core.Assets.Yaml.YamlAssetPath"/> instance.
            </summary>
            <returns>A new copy of this <see cref="T:Stride.Core.Assets.Yaml.YamlAssetPath"/>.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.YamlAssetPath.ToMemberPath(System.Object)">
            <summary>
            Convert this <see cref="T:Stride.Core.Assets.Yaml.YamlAssetPath"/> into a <see cref="T:Stride.Core.Reflection.MemberPath"/>.
            </summary>
            <param name="root">The actual instance that is root of this path.</param>
            <returns>An instance of <see cref="T:Stride.Core.Reflection.MemberPath"/> corresponding to the same target than this <see cref="T:Stride.Core.Assets.Yaml.YamlAssetPath"/>.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.YamlAssetPath.FromMemberPath(Stride.Core.Reflection.MemberPath,System.Object)">
            <summary>
            Creates a <see cref="T:Stride.Core.Assets.Yaml.YamlAssetPath"/> out of a <see cref="T:Stride.Core.Reflection.MemberPath"/> instance.
            </summary>
            <param name="path">The <see cref="T:Stride.Core.Reflection.MemberPath"/> from which to create a <see cref="T:Stride.Core.Assets.Yaml.YamlAssetPath"/>.</param>
            <param name="root">The root object of the given <see cref="T:Stride.Core.Reflection.MemberPath"/>.</param>
            <returns>An instance of <see cref="T:Stride.Core.Assets.Yaml.YamlAssetPath"/> corresponding to the same target than the given <see cref="T:Stride.Core.Reflection.MemberPath"/>.</returns>
        </member>
        <member name="M:Stride.Core.Assets.Yaml.YamlAssetPath.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Yaml.AssetObjectSerializerBackend">
            <summary>
            Internal class used when serializing/deserializing an object.
            </summary>
        </member>
        <member name="T:Stride.Core.Yaml.AssetPartCollectionSerializer">
            <summary>
            A custom serializer for asset part collections, that serializes this dictionary in the form of a collection.
            </summary>
        </member>
        <member name="M:Stride.Core.Yaml.AssetPartCollectionSerializer.TryCreate(Stride.Core.Yaml.Serialization.SerializerContext,Stride.Core.Reflection.ITypeDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Yaml.AssetPartCollectionSerializer.CheckIsSequence(Stride.Core.Yaml.Serialization.ObjectContext@)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Yaml.AssetPartCollectionSerializer.CreateOrTransformObject(Stride.Core.Yaml.Serialization.ObjectContext@)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Yaml.AssetPartCollectionSerializer.TransformObjectAfterRead(Stride.Core.Yaml.Serialization.ObjectContext@)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Yaml.AssetPartCollectionSerializer.FixupPaths``2(Stride.Core.Yaml.Serialization.ObjectContext@,System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Converts all <see cref="T:Stride.Core.Assets.Yaml.YamlAssetPath"/> from the metadata to switch between <see cref="T:System.Guid"/> keys of the
            <see cref="T:Stride.Core.Assets.AssetPartCollection`2"/> and the integer indices of the serialized list, and vice-versa.
            </summary>
            <typeparam name="TIndexSource">The current type of indices in the metadata.</typeparam>
            <typeparam name="TIndexTarget">The type of indices to convert to.</typeparam>
            <param name="objectContext">The current object context of the serialization.</param>
            <param name="mapping">The mapping between the source indices and the target indices.</param>
        </member>
        <member name="M:Stride.Core.Yaml.AssetPartCollectionSerializer.CanVisit(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Yaml.AssetPartCollectionSerializer.Visit(Stride.Core.Reflection.VisitorContext@)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Yaml.AssetYamlSerializer">
            <summary>
            Default Yaml serializer used to serialize assets by default.
            </summary>
        </member>
        <member name="M:Stride.Core.Yaml.AssetYamlSerializer.Deserialize(System.IO.Stream,System.Type,Stride.Core.Yaml.Serialization.SerializerContextSettings)">
            <summary>
            Deserializes an object from the specified stream (expecting a YAML string).
            </summary>
            <param name="stream">A YAML string from a stream.</param>
            <param name="expectedType">The expected type.</param>
            <param name="contextSettings">The context settings.</param>
            <returns>An instance of the YAML data.</returns>
        </member>
        <member name="M:Stride.Core.Yaml.AssetYamlSerializer.Deserialize(System.IO.Stream,System.Type,Stride.Core.Yaml.Serialization.SerializerContextSettings,System.Boolean@,Stride.Core.PropertyContainer@)">
            <summary>
            Deserializes an object from the specified stream (expecting a YAML string).
            </summary>
            <param name="stream">A YAML string from a stream .</param>
            <param name="expectedType">The expected type.</param>
            <param name="contextSettings">The context settings.</param>
            <param name="aliasOccurred">if set to <c>true</c> a class/field/property/enum name has been renamed during deserialization.</param>
            <param name="contextProperties">A dictionary or properties that were generated during deserialization.</param>
            <returns>An instance of the YAML data.</returns>
        </member>
        <member name="M:Stride.Core.Yaml.AssetYamlSerializer.Deserialize(Stride.Core.Yaml.EventReader,System.Object,System.Type,Stride.Core.PropertyContainer@,Stride.Core.Yaml.Serialization.SerializerContextSettings)">
            <summary>
            Deserializes an object from the specified stream (expecting a YAML string).
            </summary>
            <param name="eventReader">A YAML event reader.</param>
            <param name="value">The value.</param>
            <param name="expectedType">The expected type.</param>
            <param name="contextProperties">A dictionary or properties that were generated during deserialization.</param>
            <param name="contextSettings">The context settings.</param>
            <returns>An instance of the YAML data.</returns>
        </member>
        <member name="M:Stride.Core.Yaml.AssetYamlSerializer.DeserializeMultiple``1(System.IO.Stream)">
            <summary>
            Deserializes an object from the specified stream (expecting a YAML string).
            </summary>
            <param name="stream">A YAML string from a stream .</param>
            <returns>An instance of the YAML data.</returns>
        </member>
        <member name="M:Stride.Core.Yaml.AssetYamlSerializer.Serialize(Stride.Core.Yaml.IEmitter,System.Object,System.Type,Stride.Core.Yaml.Serialization.SerializerContextSettings)">
            <summary>
            Serializes an object to specified stream in YAML format.
            </summary>
            <param name="emitter">The emitter.</param>
            <param name="instance">The object to serialize.</param>
            <param name="type">The type.</param>
            <param name="contextSettings">The context settings.</param>
        </member>
        <member name="M:Stride.Core.Yaml.AssetYamlSerializer.Serialize(System.IO.Stream,System.Object,System.Type,Stride.Core.Yaml.Serialization.SerializerContextSettings)">
            <summary>
            Serializes an object to specified stream in YAML format.
            </summary>
            <param name="stream">The stream to receive the YAML representation of the object.</param>
            <param name="instance">The instance.</param>
            <param name="type">The expected type.</param>
            <param name="contextSettings">The context settings.</param>
        </member>
        <member name="M:Stride.Core.Yaml.AssetYamlSerializer.GetSerializerSettings">
            <summary>
            Gets the serializer settings.
            </summary>
            <returns>SerializerSettings.</returns>
        </member>
        <member name="M:Stride.Core.Yaml.AssetYamlSerializer.ResetCache">
            <summary>
            Reset the assembly cache used by this class.
            </summary>
        </member>
        <member name="T:Stride.Core.Yaml.CollectionWithIdsSerializer">
            <summary>
            An implementation of <see cref="T:Stride.Core.Yaml.CollectionWithIdsSerializerBase"/> for actual collections.
            </summary>
        </member>
        <member name="F:Stride.Core.Yaml.CollectionWithIdsSerializer.collectionSerializer">
            <summary>
            A collection serializer used in case we determine that the given collection should not be serialized with ids.
            </summary>
        </member>
        <member name="M:Stride.Core.Yaml.CollectionWithIdsSerializer.TryCreate(Stride.Core.Yaml.Serialization.SerializerContext,Stride.Core.Reflection.ITypeDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Yaml.CollectionWithIdsSerializer.ReadYamlAfterTransform(Stride.Core.Yaml.Serialization.ObjectContext@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Yaml.CollectionWithIdsSerializer.WriteYamlAfterTransform(Stride.Core.Yaml.Serialization.ObjectContext@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Yaml.CollectionWithIdsSerializer.TransformObjectAfterRead(Stride.Core.Yaml.Serialization.ObjectContext@)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Yaml.CollectionWithIdsSerializer.TransformForSerialization(Stride.Core.Reflection.ITypeDescriptor,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Yaml.CollectionWithIdsSerializer.CreatEmptyContainer(Stride.Core.Reflection.ITypeDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Yaml.CollectionWithIdsSerializer.TransformAfterDeserialization(System.Collections.IDictionary,Stride.Core.Reflection.ITypeDescriptor,System.Object,System.Collections.Generic.ICollection{Stride.Core.Reflection.ItemId})">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Yaml.CollectionWithIdsSerializerBase">
            <summary>
            A base class to serialize collections with unique identifiers for each item.
            </summary>
        </member>
        <member name="F:Stride.Core.Yaml.CollectionWithIdsSerializerBase.YamlDeletedKey">
            <summary>
            A string token to identify deleted items in a collection.
            </summary>
        </member>
        <member name="F:Stride.Core.Yaml.CollectionWithIdsSerializerBase.NonIdentifiableCollectionItemsKey">
            <summary>
            A property key to indicate whether a collection has non-identifiable items
            </summary>
        </member>
        <member name="F:Stride.Core.Yaml.CollectionWithIdsSerializerBase.InstanceInfoKey">
            <summary>
            A key that identifies the information about the instance that we need the store in the <see cref="F:Stride.Core.Yaml.Serialization.ObjectContext.Properties"/> dictionary.
            </summary>
        </member>
        <member name="F:Stride.Core.Yaml.CollectionWithIdsSerializerBase.DeletedItemsKey">
            <summary>
            A key that identifies deleted items during deserialization.
            </summary>
        </member>
        <member name="T:Stride.Core.Yaml.CollectionWithIdsSerializerBase.InstanceInfo">
            <summary>
            A structure containing the information about the instance that we need the store in the <see cref="F:Stride.Core.Yaml.Serialization.ObjectContext.Properties"/> dictionary. 
            </summary>
        </member>
        <member name="M:Stride.Core.Yaml.CollectionWithIdsSerializerBase.CreateOrTransformObject(Stride.Core.Yaml.Serialization.ObjectContext@)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Yaml.CollectionWithIdsSerializerBase.ReadDictionaryItems(Stride.Core.Yaml.Serialization.ObjectContext@)">
            <summary>
            Reads the dictionary items key-values.
            </summary>
            <param name="objectContext"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Stride.Core.Yaml.CollectionWithIdsSerializerBase.TransformForSerialization(Stride.Core.Reflection.ITypeDescriptor,System.Object)" -->
        <member name="M:Stride.Core.Yaml.CollectionWithIdsSerializerBase.CreatEmptyContainer(Stride.Core.Reflection.ITypeDescriptor)">
            <summary>
            Creates an empty dictionary that can store the mapping of ids to items of the collection.
            </summary>
            <param name="descriptor">The type descriptor of the collection for which to create the dictionary.</param>
            <returns>An empty dictionary for mapping ids to elements.</returns>
        </member>
        <member name="M:Stride.Core.Yaml.CollectionWithIdsSerializerBase.TransformAfterDeserialization(System.Collections.IDictionary,Stride.Core.Reflection.ITypeDescriptor,System.Object,System.Collections.Generic.ICollection{Stride.Core.Reflection.ItemId})">
            <summary>
            Transforms a dictionary containing the mapping of ids to items into the actual collection, and store the ids in the <see cref="T:Stride.Core.Reflection.ShadowObject"/>.
            </summary>
            <param name="container">The dictionary mapping ids to item.</param>
            <param name="targetDescriptor">The type descriptor of the actual collection to fill.</param>
            <param name="targetCollection">The instance of the actual collection to fill.</param>
            <param name="deletedItems">A collection of items that are marked as deleted. Can be null.</param>
        </member>
        <member name="T:Stride.Core.Yaml.CollectionWithItemIds`1">
            <summary>
            A container used to serialize collection whose items have identifiers.
            </summary>
            <typeparam name="TItem">The type of item contained in the collection.</typeparam>
        </member>
        <member name="T:Stride.Core.Yaml.ContextAttributeSerializer">
            <summary>
            A serializer that is run before the <see cref="T:Stride.Core.Yaml.Serialization.Serializers.RoutingSerializer"/> and allow to push and pop contextual properties.
            </summary>
        </member>
        <member name="T:Stride.Core.Yaml.ContextAttributeSerializer.ContextToken">
            <summary>
            A structure containing all the information needed to pop contextual properties after serialization.
            </summary>
        </member>
        <member name="F:Stride.Core.Yaml.ContextAttributeSerializer.ContextToken.NonIdentifiableItems">
            <summary>
            Indicates if we entered a context where no collection should be identifiable anymore, indicated by the <see cref="T:Stride.Core.Annotations.NonIdentifiableCollectionItemsAttribute"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Yaml.ContextAttributeSerializer.WriteYaml(Stride.Core.Yaml.Serialization.ObjectContext@)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Yaml.ContextAttributeSerializer.ReadYaml(Stride.Core.Yaml.Serialization.ObjectContext@)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Yaml.DeletedKeyWithId`1">
            <summary>
            A generic structure that implements the <see cref="T:Stride.Core.Yaml.IKeyWithId"/> interface for keys that are deleted.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:Stride.Core.Yaml.DeletedKeyWithId`1.#ctor(Stride.Core.Reflection.ItemId)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Yaml.KeyWithId`1"/> structure.
            </summary>
            <param name="id">The <see cref="T:Stride.Core.Reflection.ItemId"/> associated to the deleted key.</param>
        </member>
        <member name="F:Stride.Core.Yaml.DeletedKeyWithId`1.Id">
            <summary>
            The <see cref="T:Stride.Core.Reflection.ItemId"/> associated to the key.
            </summary>
        </member>
        <member name="P:Stride.Core.Yaml.DeletedKeyWithId`1.Stride#Core#Yaml#IKeyWithId#Id">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Yaml.DeletedKeyWithId`1.Stride#Core#Yaml#IKeyWithId#Key">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Yaml.DeletedKeyWithId`1.Stride#Core#Yaml#IKeyWithId#IsDeleted">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Yaml.DeletedKeyWithId`1.Stride#Core#Yaml#IKeyWithId#KeyType">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Yaml.DictionaryWithIdsSerializer">
            <summary>
            An implementation of <see cref="T:Stride.Core.Yaml.CollectionWithIdsSerializerBase"/> for dictionaries.
            </summary>
        </member>
        <member name="M:Stride.Core.Yaml.DictionaryWithIdsSerializer.TryCreate(Stride.Core.Yaml.Serialization.SerializerContext,Stride.Core.Reflection.ITypeDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Yaml.DictionaryWithIdsSerializer.TransformObjectAfterRead(Stride.Core.Yaml.Serialization.ObjectContext@)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Yaml.DictionaryWithIdsSerializer.TransformForSerialization(Stride.Core.Reflection.ITypeDescriptor,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Yaml.DictionaryWithIdsSerializer.CreatEmptyContainer(Stride.Core.Reflection.ITypeDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Yaml.DictionaryWithIdsSerializer.TransformAfterDeserialization(System.Collections.IDictionary,Stride.Core.Reflection.ITypeDescriptor,System.Object,System.Collections.Generic.ICollection{Stride.Core.Reflection.ItemId})">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Yaml.DictionaryWithItemIds`2">
            <summary>
            A container used to serialize dictionary whose entries have identifiers.
            </summary>
            <typeparam name="TKey">The type of key contained in the dictionary.</typeparam>
            <typeparam name="TValue">The type of value contained in the dictionary.</typeparam>
        </member>
        <member name="T:Stride.Core.Yaml.ErrorRecoverySerializer">
            <summary>
            Objects that can't be loaded as valid Yaml will be converted to a proxy object implementing <see cref="T:Stride.Core.Yaml.IUnloadable"/>.
            </summary>
        </member>
        <member name="T:Stride.Core.Yaml.IKeyWithId">
            <summary>
            An interface representing an association between an <see cref="T:Stride.Core.Reflection.ItemId"/> and the key of a dictionary.
            </summary>
        </member>
        <member name="P:Stride.Core.Yaml.IKeyWithId.Id">
            <summary>
            The <see cref="T:Stride.Core.Reflection.ItemId"/> associated to the key.
            </summary>
        </member>
        <member name="P:Stride.Core.Yaml.IKeyWithId.Key">
            <summary>
            The key of the dictionary.
            </summary>
        </member>
        <member name="P:Stride.Core.Yaml.IKeyWithId.KeyType">
            <summary>
            The type of the key.
            </summary>
        </member>
        <member name="P:Stride.Core.Yaml.IKeyWithId.IsDeleted">
            <summary>
            Indicates whether this key is considered to be deleted in the dictionary, and kept around for reconcilation purpose.
            </summary>
        </member>
        <member name="T:Stride.Core.Yaml.ItemIdSerializer">
            <summary>
            A Yaml serializer for <see cref="T:Stride.Core.Reflection.ItemId"/> without associated data.
            </summary>
        </member>
        <member name="M:Stride.Core.Yaml.ItemIdSerializer.CanVisit(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Yaml.ItemIdSerializer.ConvertFrom(Stride.Core.Yaml.Serialization.ObjectContext@,Stride.Core.Yaml.Events.Scalar)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Yaml.ItemIdSerializerBase">
            <summary>
            A base class to serialize <see cref="T:Stride.Core.Reflection.ItemId"/>.
            </summary>
        </member>
        <member name="F:Stride.Core.Yaml.ItemIdSerializerBase.OverrideInfoKey">
            <summary>
            A key used in properties of serialization contexts to notify whether an override flag should be appened when serializing the related <see cref="T:Stride.Core.Reflection.ItemId"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Yaml.ItemIdSerializerBase.ConvertTo(Stride.Core.Yaml.Serialization.ObjectContext@)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Yaml.IUnloadable">
            <summary>
            Objects that can't be loaded as valid Yaml will be converted to a proxy object implementing this interface by <see cref="T:Stride.Core.Yaml.ErrorRecoverySerializer"/>.
            </summary>
        </member>
        <member name="T:Stride.Core.Yaml.KeyValuePairSerializer">
            <summary>
            A Yaml Serializer for <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            Because this type is immutable we need to implement a special serializer.
            </summary>
        </member>
        <member name="M:Stride.Core.Yaml.KeyValuePairSerializer.TryCreate(Stride.Core.Yaml.Serialization.SerializerContext,Stride.Core.Reflection.ITypeDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Yaml.KeyValuePairSerializer.CreateOrTransformObject(Stride.Core.Yaml.Serialization.ObjectContext@)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Yaml.KeyValuePairSerializer.TransformObjectAfterRead(Stride.Core.Yaml.Serialization.ObjectContext@)">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Yaml.KeyWithId`1">
            <summary>
            A generic structure that implements the <see cref="T:Stride.Core.Yaml.IKeyWithId"/> interface for keys that are not deleted.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:Stride.Core.Yaml.KeyWithId`1.#ctor(Stride.Core.Reflection.ItemId,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Yaml.KeyWithId`1"/> structure.
            </summary>
            <param name="id">The <see cref="T:Stride.Core.Reflection.ItemId"/> associated to the key.</param>
            <param name="key">The key of the dictionary.</param>
        </member>
        <member name="F:Stride.Core.Yaml.KeyWithId`1.Id">
            <summary>
            The <see cref="T:Stride.Core.Reflection.ItemId"/> associated to the key.
            </summary>
        </member>
        <member name="F:Stride.Core.Yaml.KeyWithId`1.Key">
            <summary>
            The key of the dictionary.
            </summary>
        </member>
        <member name="P:Stride.Core.Yaml.KeyWithId`1.Stride#Core#Yaml#IKeyWithId#Id">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Yaml.KeyWithId`1.Stride#Core#Yaml#IKeyWithId#Key">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Yaml.KeyWithId`1.Stride#Core#Yaml#IKeyWithId#IsDeleted">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Yaml.KeyWithId`1.Stride#Core#Yaml#IKeyWithId#KeyType">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Yaml.KeyWithIdSerializer">
            <summary>
            A Yaml serializer for <see cref="T:Stride.Core.Yaml.IKeyWithId"/>.
            </summary>
        </member>
        <member name="F:Stride.Core.Yaml.KeyWithIdSerializer.OverrideKeyInfoKey">
            <summary>
            A key used in properties of serialization contexts to notify whether an override flag should be appened when serializing the key of the related <see cref="T:Stride.Core.Reflection.ItemId"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Yaml.KeyWithIdSerializer.ConvertFrom(Stride.Core.Yaml.Serialization.ObjectContext@,Stride.Core.Yaml.Events.Scalar)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Yaml.KeyWithIdSerializer.ConvertTo(Stride.Core.Yaml.Serialization.ObjectContext@)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Yaml.KeyWithIdSerializer.CanVisit(System.Type)">
            <inheritdoc/>
        </member>
        <member name="F:Stride.Core.Yaml.UnloadableObjectInstantiator.ProcessProxyType">
            <summary>
            Callback to perform additional changes to the generated proxy object.
            </summary>
        </member>
        <member name="M:Stride.Core.Yaml.UnloadableObjectInstantiator.CreateUnloadableObject(System.Type,System.String,System.String,System.String,System.Collections.Generic.List{Stride.Core.Yaml.Events.ParsingEvent})">
            <summary>
            Creates an object that implements the given <paramref name="baseType"/> and <see cref="T:Stride.Core.Yaml.IUnloadable"/>.
            </summary>
            <param name="baseType"></param>
            <param name="typeName"></param>
            <param name="parsingEvents"></param>
            <returns></returns>
        </member>
        <member name="T:Stride.Core.Yaml.DynamicYaml">
            <summary>
            Allows to manipulate dynamically a YAML content.
            </summary>
        </member>
        <member name="M:Stride.Core.Yaml.DynamicYaml.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Stride.Core.Yaml.DynamicYaml"/> from the specified stream.
            </summary>
            <param name="stream">A stream that contains a YAML content. The stream will be disposed</param>
            <param name="disposeStream">Dispose the stream when reading the YAML content is done. <c>true</c> by default</param>
        </member>
        <member name="M:Stride.Core.Yaml.DynamicYaml.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Stride.Core.Yaml.DynamicYaml"/> from the specified stream.
            </summary>
            <param name="text">A text that contains a YAML content</param>
        </member>
        <member name="P:Stride.Core.Yaml.DynamicYaml.RootNode">
            <summary>
            Gets the root YAML node.
            </summary>
        </member>
        <member name="P:Stride.Core.Yaml.DynamicYaml.DynamicRootNode">
            <summary>
            Gets a dynamic YAML node around the <see cref="P:Stride.Core.Yaml.DynamicYaml.RootNode"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Yaml.DynamicYaml.WriteTo(System.IO.Stream,Stride.Core.Yaml.Serialization.SerializerSettings)">
            <summary>
            Writes the content of this YAML node to the specified stream.
            </summary>
            <param name="stream">The stream to output YAML to.</param>
            <param name="settings">The settings to use to generate YAML. If null, a default <see cref="T:Stride.Core.Yaml.Serialization.SerializerSettings"/> will be used.</param>
        </member>
        <member name="M:Stride.Core.Yaml.DynamicYaml.WriteTo(System.IO.TextWriter,Stride.Core.Yaml.Serialization.SerializerSettings)">
            <summary>
            Writes the content of this YAML node to the specified writer.
            </summary>
            <param name="writer">The writer to output YAML to.</param>
            <param name="settings">The settings to use to generate YAML. If null, a default <see cref="T:Stride.Core.Yaml.Serialization.SerializerSettings"/> will be used.</param>
        </member>
        <member name="T:Stride.Core.Yaml.DynamicYamlArray">
            <summary>
            Dynamic version of <see cref="T:Stride.Core.Yaml.Serialization.YamlSequenceNode"/>.
            </summary>
        </member>
        <member name="T:Stride.Core.Yaml.DynamicYamlEmpty">
            <summary>
            Placeholder value to remove keys from <see cref="T:Stride.Core.Yaml.DynamicYamlMapping"/>.
            </summary>
        </member>
        <member name="T:Stride.Core.Yaml.DynamicYamlMapping">
            <summary>
            Dynamic version of <see cref="T:Stride.Core.Yaml.Serialization.YamlMappingNode"/>.
            </summary>
        </member>
        <member name="F:Stride.Core.Yaml.DynamicYamlMapping.keyMapping">
            <summary>
            A mapping used between a property name (e.g: MyProperty) and the property name as serialized
            in YAML taking into account overrides (e.g: MyProperty! or MyProperty* or MyProperty*!)
            </summary>
            <remarls>
            NOTE that both <see cref="F:Stride.Core.Yaml.DynamicYamlMapping.keyMapping"/> and <see cref="F:Stride.Core.Yaml.DynamicYamlMapping.overrides"/> and node.Children
            are kept synchronized.
            </remarls>
        </member>
        <member name="F:Stride.Core.Yaml.DynamicYamlMapping.overrides">
            <summary>
            A mapping between a property name (e.g: MyProperty) and the current Override type
            </summary>
        </member>
        <member name="M:Stride.Core.Yaml.DynamicYamlMapping.RenameChild(System.Object,System.Object)">
            <summary>
            Renames a property to a new name while keeping all overrides and key mappings
            </summary>
            <param name="oldKey">Old property name</param>
            <param name="newKey">New property name</param>
        </member>
        <member name="M:Stride.Core.Yaml.DynamicYamlMapping.TransferChild(System.Object,System.Object,System.Object)">
            <summary>
            Transfers ownership of a property to another parent object and removes it from the current one
            </summary>
            <param name="oldKey">Old property name</param>
            <param name="newParent">New owner for the property</param>
            <param name="newKey">New property name</param>
        </member>
        <member name="M:Stride.Core.Yaml.DynamicYamlMapping.GetOverride(System.String)">
            <summary>
            Gets the override for the specified member.
            </summary>
            <param name="key">The member name to get the override</param>
            <returns>The type of override (if no override, return <see cref="F:Stride.Core.Reflection.OverrideType.Base"/></returns>
        </member>
        <member name="M:Stride.Core.Yaml.DynamicYamlMapping.SetOverride(System.String,Stride.Core.Reflection.OverrideType)">
            <summary>
            Sets the override type for the specified member.
            </summary>
            <param name="key">The member name to setup an override</param>
            <param name="type">Type of the override</param>
        </member>
        <member name="M:Stride.Core.Yaml.DynamicYamlMapping.RemoveOverride(System.String)">
            <summary>
            Removes an override information from the specified member.
            </summary>
            <param name="key">The member name</param>
        </member>
        <member name="M:Stride.Core.Yaml.DynamicYamlMapping.ConvertFromDynamicForKey(System.Object)">
            <summary>
            Helper method to gets the real member key for the specified key (taking into account overrides)
            </summary>
            <param name="key">The member name</param>
            <returns>A member YamlNode</returns>
        </member>
        <member name="M:Stride.Core.Yaml.DynamicYamlMapping.ParseOverrides">
            <summary>
            This method will extract overrides information and maintain a separate dictionary to ensure mapping between
            a full property name without override (MyProperty) and with its override (e.g: MyProperty! for sealed MyProperty)
            </summary>
        </member>
        <member name="T:Stride.Core.Yaml.DynamicYamlScalar">
            <summary>
            Dynamic version of <see cref="T:Stride.Core.Yaml.Serialization.YamlScalarNode"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Reflection.AbstractObjectInstantiator.CreateConcreteInstance(System.Type)">
            <summary>
            Creates an instance of a type implementing the specified <paramref name="baseType"/>.
            </summary>
            <param name="baseType"></param>
            <remarks>
            If <paramref name="baseType"/> is already a concrete type (not an abstract type nor an interface, the method returns an instance of <paramref name="baseType"/> itself.
            </remarks>
            <returns>An instance of a type implementing the specified <paramref name="baseType"/>.</returns>
            <seealso cref="M:System.Activator.CreateInstance(System.Type)"/>
        </member>
        <member name="M:Stride.Core.Reflection.AbstractObjectInstantiator.InitializeTypeBuilderFromType(System.Reflection.Emit.TypeBuilder,System.Type)">
            <summary>
            Initializes the <paramref name="typeBuilder"/> using the provided <paramref name="baseType"/>.
            </summary>
            <param name="typeBuilder">The type builder to initialize.</param>
            <param name="baseType">The base type of the type currently under construction.</param>
        </member>
        <member name="M:Stride.Core.Reflection.AbstractObjectInstantiator.CompareMethodSignature(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Compares the parameter types of two <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <param name="method1"></param>
            <param name="method2"></param>
            <returns><c>true</c> if the parameter types match one by one; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Stride.Core.Reflection.CollectionItemIdentifiers">
            <summary>
            A container for item identifiers and similar metadata that is associated to a collection or a dictionary.
            </summary>
        </member>
        <member name="P:Stride.Core.Reflection.CollectionItemIdentifiers.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:Stride.Core.Reflection.ItemId"/> corresponding to the given key.
            </summary>
            <param name="key">The key for which to retrieve the <see cref="T:Stride.Core.Reflection.ItemId"/>.</param>
            <returns>The <see cref="T:Stride.Core.Reflection.ItemId"/> corresponding to the given key.</returns>
        </member>
        <member name="P:Stride.Core.Reflection.CollectionItemIdentifiers.DeletedItems">
            <summary>
            Gets the list of <see cref="T:Stride.Core.Reflection.ItemId"/> corresponding to deleted items that are being kept in this <see cref="T:Stride.Core.Reflection.CollectionItemIdentifiers"/>.
            </summary>
        </member>
        <member name="P:Stride.Core.Reflection.CollectionItemIdentifiers.KeyCount">
            <summary>
            Gets the number of keys/identifiers in this <see cref="T:Stride.Core.Reflection.CollectionItemIdentifiers"/>.
            </summary>
        </member>
        <member name="P:Stride.Core.Reflection.CollectionItemIdentifiers.DeletedCount">
            <summary>
            Gets the number of deleted identifiers that are being kept in this <see cref="T:Stride.Core.Reflection.CollectionItemIdentifiers"/>.
            </summary>
        </member>
        <member name="T:Stride.Core.Reflection.CollectionItemIdHelper">
            <summary>
            A helper static class to retrieve <see cref="T:Stride.Core.Reflection.CollectionItemIdentifiers"/> from a collection or dictionary through the <see cref="T:Stride.Core.Reflection.ShadowObject"/> registry.
            </summary>
        </member>
        <member name="T:Stride.Core.Reflection.ItemId">
            <summary>
            Represents the identifier of an item in a collection or an entry in a dictionary.
            </summary>
        </member>
        <member name="M:Stride.Core.Reflection.ItemId.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Reflection.ItemId"/> structure from an array of bytes.
            </summary>
            <param name="bytes">The array of bytes from which to create this <see cref="T:Stride.Core.Reflection.ItemId"/>.</param>
        </member>
        <member name="M:Stride.Core.Reflection.ItemId.#ctor(Stride.Core.Storage.ObjectId)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Reflection.ItemId"/> structure from an <see cref="T:Stride.Core.Storage.ObjectId"/>.
            </summary>
            <param name="id">The <see cref="T:Stride.Core.Storage.ObjectId"/> from which to create this <see cref="T:Stride.Core.Reflection.ItemId"/>.</param>
        </member>
        <member name="P:Stride.Core.Reflection.ItemId.Empty">
            <summary>
            Gets an <see cref="T:Stride.Core.Reflection.ItemId"/> representing an empty or non-existing item.
            </summary>
        </member>
        <member name="M:Stride.Core.Reflection.ItemId.New">
            <summary>
            Generates a new random <see cref="T:Stride.Core.Reflection.ItemId"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stride.Core.Reflection.ItemId.Parse(System.String)">
            <summary>
            Parses an <see cref="T:Stride.Core.Reflection.ItemId"/> from a string.
            </summary>
            <param name="input">The input string to parse.</param>
            <returns>An <see cref="T:Stride.Core.Reflection.ItemId"/> corresponding to the parsed string.</returns>
            <exception cref="T:System.FormatException">The given string cannot be parsed as an <see cref="T:Stride.Core.Reflection.ItemId"/>.</exception>
        </member>
        <member name="M:Stride.Core.Reflection.ItemId.TryParse(System.String,Stride.Core.Reflection.ItemId@)">
            <summary>
            Attempts to parse an <see cref="T:Stride.Core.Reflection.ItemId"/> from a string.
            </summary>
            <param name="input">The input string to parse.</param>
            <param name="itemId">The resulting <see cref="T:Stride.Core.Reflection.ItemId"/>.</param>
            <returns>True if the string could be successfully parsed, False otherwise.</returns>
        </member>
        <member name="M:Stride.Core.Reflection.ItemId.Equals(Stride.Core.Reflection.ItemId)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Reflection.ItemId.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Reflection.ItemId.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Reflection.ItemId.op_Equality(Stride.Core.Reflection.ItemId,Stride.Core.Reflection.ItemId)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Reflection.ItemId.op_Inequality(Stride.Core.Reflection.ItemId,Stride.Core.Reflection.ItemId)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Reflection.ItemId.CompareTo(Stride.Core.Reflection.ItemId)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Reflection.ItemId.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Reflection.OverrideTarget">
            <summary>
            Describes what is targeted by an override information.
            </summary>
        </member>
        <member name="F:Stride.Core.Reflection.OverrideTarget.Content">
            <summary>
            The content itself.
            </summary>
        </member>
        <member name="F:Stride.Core.Reflection.OverrideTarget.Item">
            <summary>
            An item of the content if it's a collection, or a value of the content if it's a dictionary.
            </summary>
        </member>
        <member name="F:Stride.Core.Reflection.OverrideTarget.Key">
            <summary>
            A key of the content. This is valid only for dictionary.
            </summary>
        </member>
        <member name="T:Stride.Core.Reflection.OverrideType">
            <summary>
            A Type of override used on a member value.
            </summary>
        </member>
        <member name="F:Stride.Core.Reflection.OverrideType.Base">
            <summary>
            The value is taken from a base value or this instance if no base (default).
            </summary>
        </member>
        <member name="F:Stride.Core.Reflection.OverrideType.New">
            <summary>
            The value is new and overridden locally. Base value is ignored.
            </summary>
        </member>
        <member name="F:Stride.Core.Reflection.OverrideType.Sealed">
            <summary>
            The value is sealed and cannot be changed by inherited instances.
            </summary>
        </member>
        <member name="M:Stride.Utilities.BuildValidClassName(System.String,System.Char)">
            <summary>
            Build a valid C# class name from the provided string.
            It replaces all the forbidden characters by the provided replacement character.
            </summary>
            <param name="originalName">The original name</param>
            <param name="replacementCharacter">The replacement character</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Utilities.BuildValidClassName(System.String,System.Collections.Generic.IEnumerable{System.String},System.Char)">
            <summary>
            Build a valid C# class name from the provided string.
            It replaces all the forbidden characters by the provided replacement character.
            </summary>
            <param name="originalName">The original name</param>
            <param name="additionalReservedWords">Reserved words that must be escaped if used directly</param>
            <param name="replacementCharacter">The replacement character</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Utilities.BuildValidNamespaceName(System.String,System.Char)">
            <summary>
            Build a valid C# namespace name from the provided string.
            It replaces all the forbidden characters by the provided replacement character.
            </summary>
            <param name="originalName">The original name</param>
            <param name="replacementCharacter">The replacement character</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Utilities.BuildValidNamespaceName(System.String,System.Collections.Generic.IEnumerable{System.String},System.Char)">
            <summary>
            Build a valid C# namespace name from the provided string.
            It replaces all the forbidden characters by the provided replacement character.
            </summary>
            <param name="originalName">The original name</param>
            <param name="additionalReservedWords">Reserved words that must be escaped if used directly</param>
            <param name="replacementCharacter">The replacement character</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Utilities.BuildValidProjectName(System.String,System.Char)">
            <summary>
            Build a valid C# project name from the provided string.
            It replaces all the forbidden characters by the provided replacement character.
            </summary>
            <param name="originalName">The original name</param>
            <param name="replacementCharacter">The replacement character</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Utilities.BuildValidFileName(System.String,System.Char)">
            <summary>
            Build a valid file name from the provided string.
            It replaces all the forbidden characters by the provided replacement character.
            For reference see: https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx
            </summary>
            <param name="originalName">The original name</param>
            <param name="replacementCharacter">The replacement character</param>
            <returns></returns>
        </member>
        <member name="M:Stride.ShellHelper.RunProcessAndGetOutputAsync(System.String,System.String,Stride.Core.Diagnostics.ILogger,System.Threading.CancellationToken)">
            <summary>
            Run the process and get the output without deadlocks.
            </summary>
            <param name="command">The name or path of the command.</param>
            <param name="parameters">The parameters of the command.</param>
            <returns>The outputs.</returns>
        </member>
        <member name="M:Stride.ShellHelper.RunProcessAndGetOutput(System.String,System.String)">
            <summary>
            Run the process and get the output without deadlocks.
            </summary>
            <param name="command">The name or path of the command.</param>
            <param name="parameters">The parameters of the command.</param>
            <returns>The outputs.</returns>
        </member>
        <member name="M:Stride.ShellHelper.RunProcess(System.String,System.String)">
            <summary>
            Run a process without waiting for its output.
            </summary>
            <param name="command">The name or path of the command.</param>
            <param name="parameters">The parameters of the command.</param>
        </member>
        <member name="M:Stride.ShellHelper.LockProcessAndAddDataToList(System.Diagnostics.Process,System.Collections.Generic.List{System.String},System.Diagnostics.DataReceivedEventArgs)">
            <summary>
            Lock the process and save the string.
            </summary>
            <param name="process">The current process.</param>
            <param name="output">List of saved strings.</param>
            <param name="args">arguments of the process.</param>
        </member>
        <member name="M:Stride.ShellHelper.LockProcessAndAddDataToLogger(System.Diagnostics.Process,Stride.Core.Diagnostics.LoggerResult,System.Boolean,System.Diagnostics.DataReceivedEventArgs)">
            <summary>
            Lock the process and save the string.
            </summary>
            <param name="process">The current process.</param>
            <param name="logger">Logger were out current process.</param>
            <param name="isError">Is this the error output or the standard one?</param>
            <param name="args">arguments of the process.</param>
        </member>
        <member name="T:Stride.StrideVersion">
            <summary>
            Internal version used to identify Stride version.
            </summary>
            <remarks>
            During package build, PackageUpdateVersionTask is updating that file and expect some specific text regex so be careful if you change any of this.
            </remarks>
        </member>
        <member name="F:Stride.StrideVersion.PublicVersion">
            <summary>
            The version used by editor for display purpose. 4th digit needs to be at least 1 if used (due to NuGet special cases).
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.AssemblyVersion">
            <summary>
            The current assembly version as text, currently same as <see cref="F:Stride.StrideVersion.PublicVersion"/>.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersionSimple">
            <summary>
            The NuGet package version without special tags.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersion">
            <summary>
            The NuGet package version.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersionSuffix">
            <summary>
            The NuGet package suffix (i.e. -beta01). Automatically set by Stride.GitVersioning.GenerateVersionFile.
            Three possible values:
            - Empty: official release
            - -betaXX: development version (XX should corespond to development asset versioning)
            - -betaXX-YYYY: beta release (YYYY is the git height since current version has been bumped)
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.BuildMetadata">
            <summary>
            The build metadata, usually +g[git_hash] during package. Automatically set by Stride.GitVersioning.GenerateVersionFile.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.AssemblyInformationalVersion">
            <summary>
            The informational assembly version, containing -beta01 or +g[git_hash] during package.
            </summary>
        </member>
        <member name="T:Stride.PublicKeys">
            <summary>
            Assembly signing information.
            </summary>
        </member>
        <member name="F:Stride.PublicKeys.Default">
            <summary>
            Assembly name suffix that contains signing information.
            </summary>
        </member>
    </members>
</doc>
