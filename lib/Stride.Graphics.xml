<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stride.Graphics</name>
    </assembly>
    <members>
        <member name="T:Stride.Games.AppContextType">
            <summary>
            Type of a <see cref="!:GameContext"/>.
            </summary>
        </member>
        <member name="F:Stride.Games.AppContextType.Desktop">
            <summary>
            Game running on desktop in a form or <see cref="!:System.Windows.Forms.Control"/>.
            </summary>
        </member>
        <member name="F:Stride.Games.AppContextType.DesktopSDL">
            <summary>
            Game running on desktop in a SDL window.
            </summary>
        </member>
        <member name="F:Stride.Games.AppContextType.DesktopWpf">
            <summary>
            Game running on desktop in a WPF window through a D3DImage.
            </summary>
        </member>
        <member name="F:Stride.Games.AppContextType.DesktopOpenTK">
            <summary>
            Game running on desktop in an OpenTK form.
            </summary>
        </member>
        <member name="F:Stride.Games.AppContextType.Android">
            <summary>
            Game running on Android in an AndroidStrideGameView.
            </summary>
        </member>
        <member name="F:Stride.Games.AppContextType.UWPXaml">
            <summary>
            Game running on UWP in a Xaml SwapChainPanel.
            </summary>
        </member>
        <member name="F:Stride.Games.AppContextType.UWPCoreWindow">
            <summary>
            Game running on UWP in a CoreWindow.
            </summary>
        </member>
        <member name="F:Stride.Games.AppContextType.iOS">
            <summary>
            Game running on iOS in a iPhoneOSGameView.
            </summary>
        </member>
        <member name="T:Stride.Graphics.BatchBase`1">
            <summary>
            Base class to batch a group of draw calls into one.
            </summary>
            <typeparam name="TDrawInfo">A structure containing all the required information to draw one element of the batch.</typeparam>
        </member>
        <member name="T:Stride.Graphics.BatchBase`1.ElementInfo">
            <summary>
            The structure containing all the information required to batch one element.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BatchBase`1.ElementInfo.VertexCount">
            <summary>
            The number of vertex needed to draw the element.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BatchBase`1.ElementInfo.IndexCount">
            <summary>
            The number of indices needed to draw the element.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BatchBase`1.ElementInfo.Depth">
            <summary>
            The depth of the element. Used to sort the elements.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BatchBase`1.ElementInfo.DrawInfo">
            <summary>
            The user draw information.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BatchBase`1.isBeginCalled">
            <summary>
            Boolean indicating if we are between a call of Begin and End.
            </summary>
        </member>
        <member name="P:Stride.Graphics.BatchBase`1.Effect">
            <summary>
            The effect used for the current Begin/End session.
            </summary>
        </member>
        <member name="P:Stride.Graphics.BatchBase`1.Parameters">
            <summary>
            Gets the parameters applied on the SpriteBatch effect.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="M:Stride.Graphics.BatchBase`1.Begin(Stride.Graphics.GraphicsContext,Stride.Rendering.EffectInstance,Stride.Graphics.SpriteSortMode,System.Nullable{Stride.Graphics.BlendStateDescription},Stride.Graphics.SamplerState,System.Nullable{Stride.Graphics.DepthStencilStateDescription},System.Nullable{Stride.Graphics.RasterizerStateDescription},System.Int32)">
            <summary>
            Begins a sprite batch rendering using the specified sorting mode and blend state, sampler, depth stencil, rasterizer state objects and a custom effect.
            Passing null for any of the state objects selects the default default state objects (BlendState.AlphaBlend, depthStencilState.None, RasterizerState.CullCounterClockwise, SamplerState.LinearClamp).
            Passing a null effect selects the default effect shader.
            </summary>
            <param name="graphicsContext">The graphics context to use.</param>
            <param name="effect">The effect to use for this begin/end draw session (default effect if null)</param>
            <param name="sessionSortMode">Sprite drawing order used for the Begin/End session.</param>
            <param name="sessionBlendState">Blending state used for the Begin/End session</param>
            <param name="sessionSamplerState">Texture sampling used for the Begin/End session</param>
            <param name="sessionDepthStencilState">Depth and stencil state used for the Begin/End session</param>
            <param name="sessionRasterizerState">Rasterization state used for the Begin/End session</param>
            <param name="stencilValue">The value of the stencil buffer to take as reference for the Begin/End session</param>
            <exception cref="T:System.InvalidOperationException">Only one SpriteBatch at a time can use SpriteSortMode.Immediate</exception>
        </member>
        <member name="M:Stride.Graphics.BatchBase`1.End">
            <summary>
            Flushes the sprite batch and restores the device state to how it was before Begin was called. 
            </summary>
        </member>
        <member name="M:Stride.Graphics.BatchBase`1.UpdateBufferValuesFromElementInfo(Stride.Graphics.BatchBase{`0}.ElementInfo@,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Update the mapped vertex and index buffer values using the provided element info.
            </summary>
            <param name="elementInfo">The structure containing the information about the element to draw.</param>
            <param name="vertexPointer">The pointer to the vertex array buffer to update.</param>
            <param name="indexPointer">The pointer to the index array buffer to update. This value is null if the index buffer used is static.</param>
            <param name="vexterStartOffset">The offset in the vertex buffer where the vertex of the element starts</param>
        </member>
        <member name="T:Stride.Graphics.BatchBase`1.ResourceBufferInfo">
            <summary>
            A class containing information on how to build the batch vertex and index buffer.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BatchBase`1.ResourceBufferInfo.ResourceKey">
            <summary>
            The key used to identify the GPU resource.
            </summary>
        </member>
        <member name="P:Stride.Graphics.BatchBase`1.ResourceBufferInfo.BatchCapacity">
            <summary>
            The initial number of draw calls that can be batched at one time.
            </summary>
            <remarks>Data structure will adjust their size when needed if capacity is not sufficient</remarks>
        </member>
        <member name="P:Stride.Graphics.BatchBase`1.ResourceBufferInfo.VertexCount">
            <summary>
            Gets the number indices of the vertex buffer.
            </summary>
        </member>
        <member name="P:Stride.Graphics.BatchBase`1.ResourceBufferInfo.IndexCount">
            <summary>
            Gets the number indices of the index buffer.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BatchBase`1.ResourceBufferInfo.StaticIndices">
            <summary>
            Gets or sets the static indices to use for the index buffer.
            </summary>
        </member>
        <member name="P:Stride.Graphics.BatchBase`1.ResourceBufferInfo.IsIndexBufferDynamic">
            <summary>
            Gets the value indicating whether the index buffer is static or dynamic.
            </summary>
        </member>
        <member name="M:Stride.Graphics.BatchBase`1.ResourceBufferInfo.CreateDynamicIndexBufferInfo(System.String,System.Int32,System.Int32)">
            <summary>
            Create the buffer resource information for a batch having both a dynamic index buffer and vertex buffer.
            </summary>
            <param name="resourceKey">The name of key to use to identify the resource</param>
            <param name="indexCount">The number of indices contained by the index buffer</param>
            <param name="vertexCount">The number of vertices contained by the vertex buffer</param>
        </member>
        <member name="M:Stride.Graphics.BatchBase`1.ResourceBufferInfo.CreateStaticIndexBufferInfo(System.String,System.Int16[],System.Int32)">
            <summary>
            Create the buffer resource information for a batch having a dynamic vertex buffer but a static index buffer.
            </summary>
            <param name="resourceKey">The name of key to use to identify the resource</param>
            <param name="staticIndices">The value of the indices to upload into the index buffer.</param>
            <param name="vertexCount">The number of vertices contained by the vertex buffer</param>
        </member>
        <member name="T:Stride.Graphics.BatchBase`1.StaticQuadBufferInfo">
            <summary>
            A class containing the information required to build a vertex and index buffer for simple quad based batching.
            </summary>
            <remarks>
            The index buffer is used in static mode and contains six indices for each quad. The vertex buffer contains 4 vertices for each quad.
            Rectangle is composed of two triangles as follow: 
                             v0 - - - v1                  v0 - - - v1
                             |  \      |                  | t1   /  |
             If cycle=true:  |    \ t1 | If cycle=false:  |    /    |
                             | t2   \  |                  | /    t2 |
                             v3 - - - v2                  v2 - - - v3
            </remarks>
        </member>
        <member name="T:Stride.Graphics.BatchBase`1.DeviceResourceContext">
            <summary>
            Use a ResourceContext per GraphicsDevice (DeviceContext)
            </summary>
        </member>
        <member name="F:Stride.Graphics.BatchBase`1.DeviceResourceContext.VertexCount">
            <summary>
            Gets the number of vertices.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BatchBase`1.DeviceResourceContext.VertexBuffer">
            <summary>
            The vertex buffer of the batch.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BatchBase`1.DeviceResourceContext.IndexCount">
            <summary>
            Gets the number of indices.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BatchBase`1.DeviceResourceContext.IndexBuffer">
            <summary>
            The index buffer of the batch.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BatchBase`1.DeviceResourceContext.IsIndexBufferDynamic">
            <summary>
            Gets a boolean indicating if the index buffer is dynamic.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BatchBase`1.DeviceResourceContext.VertexBufferPosition">
            <summary>
            The current position in vertex into the vertex array buffer.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BatchBase`1.DeviceResourceContext.IndexBufferPosition">
            <summary>
            The current position in index into the index array buffer.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BatchBase`1.DeviceResourceContext.IsInImmediateMode">
            <summary>
            Indicate if the batch system is drawing in immediate mode for this buffer.
            </summary>
        </member>
        <member name="T:Stride.Graphics.Blend">
            <summary>
            Blend option. A blend option identifies the data source and an optional pre-blend operation.
            </summary>
            <remarks>
            Blend options are specified in a <see cref="!:BlendState"/>. 
            </remarks>
        </member>
        <member name="F:Stride.Graphics.Blend.Zero">
            <summary>
            The data source is the color black (0, 0, 0, 0). No pre-blend operation. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.Blend.One">
            <summary>
            The data source is the color white (1, 1, 1, 1). No pre-blend operation. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.Blend.SourceColor">
            <summary>
            The data source is color data (RGB) from a pixel shader. No pre-blend operation. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.Blend.InverseSourceColor">
            <summary>
            The data source is color data (RGB) from a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.Blend.SourceAlpha">
            <summary>
            The data source is alpha data (A) from a pixel shader. No pre-blend operation. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.Blend.InverseSourceAlpha">
            <summary>
            The data source is alpha data (A) from a pixel shader. The pre-blend operation inverts the data, generating 1 - A. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.Blend.DestinationAlpha">
            <summary>
            The data source is alpha data from a rendertarget. No pre-blend operation. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.Blend.InverseDestinationAlpha">
            <summary>
            The data source is alpha data from a rendertarget. The pre-blend operation inverts the data, generating 1 - A. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.Blend.DestinationColor">
            <summary>
            The data source is color data from a rendertarget. No pre-blend operation. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.Blend.InverseDestinationColor">
            <summary>
            The data source is color data from a rendertarget. The pre-blend operation inverts the data, generating 1 - RGB. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.Blend.SourceAlphaSaturate">
            <summary>
            The data source is alpha data from a pixel shader. The pre-blend operation clamps the data to 1 or less. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.Blend.BlendFactor">
            <summary>
            The data source is the blend factor set with <see cref="!:GraphicsDevice.BlendStates"/>. No pre-blend operation. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.Blend.InverseBlendFactor">
            <summary>
            The data source is the blend factor set with <see cref="!:GraphicsDevice.SetBlendState"/>. The pre-blend operation inverts the blend factor, generating 1 - blend_factor. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.Blend.SecondarySourceColor">
            <summary>
            The data sources are both color data output by a pixel shader. There is no pre-blend operation. This options supports dual-source color blending. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.Blend.InverseSecondarySourceColor">
            <summary>
            The data sources are both color data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB. This options supports dual-source color blending. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.Blend.SecondarySourceAlpha">
            <summary>
            The data sources are alpha data output by a pixel shader. There is no pre-blend operation. This options supports dual-source color blending. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.Blend.InverseSecondarySourceAlpha">
            <summary>
            The data sources are alpha data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - A. This options supports dual-source color blending. 
            </summary>
        </member>
        <member name="T:Stride.Graphics.BlendFunction">
            <summary>
            RGB or alpha blending operation.
            </summary>
            <remarks>
            The runtime implements RGB blending and alpha blending separately. Therefore, blend state requires separate blend operations for RGB data and alpha data. These blend operations are specified in a <see cref="!:BlendState"/>.
            </remarks>
        </member>
        <member name="F:Stride.Graphics.BlendFunction.Add">
            <summary>
            Add source 1 and source 2. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.BlendFunction.Subtract">
            <summary>
            Subtract source 1 from source 2. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.BlendFunction.ReverseSubtract">
            <summary>
            Subtract source 2 from source 1. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.BlendFunction.Min">
            <summary>
            Find the minimum of source 1 and source 2. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.BlendFunction.Max">
            <summary>
            Find the maximum of source 1 and source 2. 
            </summary>
        </member>
        <member name="T:Stride.Graphics.BlendStateDescription">
            <summary>
            Describes a blend state.
            </summary>
        </member>
        <member name="M:Stride.Graphics.BlendStateDescription.#ctor(Stride.Graphics.Blend,Stride.Graphics.Blend)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.BlendStateDescription"/> class.
            </summary>
            <param name="sourceBlend">The source blend.</param>
            <param name="destinationBlend">The destination blend.</param>
        </member>
        <member name="M:Stride.Graphics.BlendStateDescription.SetDefaults">
            <summary>
            Setup this blend description with defaults value.
            </summary>
        </member>
        <member name="P:Stride.Graphics.BlendStateDescription.Default">
            <summary>
            Gets default values for this instance.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BlendStateDescription.AlphaToCoverageEnable">
            <summary>
            Determines whether or not to use alpha-to-coverage as a multisampling technique when setting a pixel to a rendertarget. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.BlendStateDescription.IndependentBlendEnable">
            <summary>
            Set to true to enable independent blending in simultaneous render targets.  If set to false, only the RenderTarget[0] members are used. RenderTarget[1..7] are ignored. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.BlendStateDescription.RenderTarget0">
            <summary>
            An array of render-target-blend descriptions (see <see cref="T:Stride.Graphics.BlendStateRenderTargetDescription"/>); these correspond to the eight rendertargets  that can be set to the output-merger stage at one time. 
            </summary>
        </member>
        <member name="M:Stride.Graphics.BlendStateDescription.Equals(Stride.Graphics.BlendStateDescription)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Graphics.BlendStateDescription.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Graphics.BlendStateDescription.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Graphics.BlendStateRenderTargetDescription">
            <summary>
            Describes the blend state for a render target.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BlendStateRenderTargetDescription.BlendEnable">
            <summary>
            Enable (or disable) blending. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.BlendStateRenderTargetDescription.ColorSourceBlend">
            <summary>
            This <see cref="T:Stride.Graphics.Blend"/> specifies the first RGB data source and includes an optional pre-blend operation. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.BlendStateRenderTargetDescription.ColorDestinationBlend">
            <summary>
            This <see cref="T:Stride.Graphics.Blend"/> specifies the second RGB data source and includes an optional pre-blend operation. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.BlendStateRenderTargetDescription.ColorBlendFunction">
            <summary>
            This <see cref="T:Stride.Graphics.BlendFunction"/> defines how to combine the RGB data sources. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.BlendStateRenderTargetDescription.AlphaSourceBlend">
            <summary>
            This <see cref="T:Stride.Graphics.Blend"/> specifies the first alpha data source and includes an optional pre-blend operation. Blend options that end in _COLOR are not allowed. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.BlendStateRenderTargetDescription.AlphaDestinationBlend">
            <summary>
            This <see cref="T:Stride.Graphics.Blend"/> specifies the second alpha data source and includes an optional pre-blend operation. Blend options that end in _COLOR are not allowed. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.BlendStateRenderTargetDescription.AlphaBlendFunction">
            <summary>
            This <see cref="T:Stride.Graphics.BlendFunction"/> defines how to combine the alpha data sources. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.BlendStateRenderTargetDescription.ColorWriteChannels">
            <summary>
            A write mask. 
            </summary>
        </member>
        <member name="T:Stride.Graphics.BlendStates">
            <summary>
            Known values for <see cref="T:Stride.Graphics.BlendStateDescription"/>.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BlendStates.Default">
            <summary>
            A built-in state object with settings for default blend, that is no blend at all.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BlendStates.Additive">
            <summary>
            A built-in state object with settings for additive blend, that is adding the destination data to the source data without using alpha.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BlendStates.AlphaBlend">
            <summary>
            A built-in state object with settings for alpha blend, that is blending the source and destination data using alpha.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BlendStates.NonPremultiplied">
            <summary>
            A built-in state object with settings for blending with non-premultipled alpha, that is blending source and destination data using alpha while assuming the color data contains no alpha information.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BlendStates.Opaque">
            <summary>
            A built-in state object with settings for opaque blend, that is overwriting the source with the destination data.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BlendStates.ColorDisabled">
            <summary>
            A built-in state object with settings for no color rendering on target 0, that is only render to depth stencil buffer.
            </summary>
        </member>
        <member name="T:Stride.Graphics.Buffer">
            <summary>
            All-in-One Buffer class linked <see cref="T:SharpDX.Direct3D11.Buffer"/>.
            </summary>
            <remarks>
            This class is able to create constant buffers, indexelementCountrtex buffers, structured buffer, raw buffers, argument buffers.
            </remarks>
        </member>
        <member name="T:Stride.Graphics.Buffer.Argument">
            <summary>
            Argument buffer helper methods.
            </summary>
        </member>
        <member name="M:Stride.Graphics.Buffer.Argument.New(Stride.Graphics.GraphicsDevice,System.Int32,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Argument buffer with <see cref="F:Stride.Graphics.GraphicsResourceUsage.Default"/> uasge by default.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="size">The size in bytes.</param>
            <param name="usage">The usage.</param>
            <returns>A Argument buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.Argument.New``1(Stride.Graphics.GraphicsDevice,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Argument buffer with <see cref="F:Stride.Graphics.GraphicsResourceUsage.Default"/> uasge by default.
            </summary>
            <typeparam name="T">Type of the Argument buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="usage">The usage.</param>
            <returns>A Argument buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.Argument.New``1(Stride.Graphics.GraphicsDevice,``0@,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Argument buffer with <see cref="F:Stride.Graphics.GraphicsResourceUsage.Default"/> uasge by default.
            </summary>
            <typeparam name="T">Type of the Argument buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Argument buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A Argument buffer</returns>
        </member>
        <member name="T:Stride.Graphics.Buffer.Constant">
            <summary>
            Constant buffer helper methods.
            </summary>
        </member>
        <member name="M:Stride.Graphics.Buffer.Constant.New(Stride.Graphics.GraphicsDevice,System.Int32,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new constant buffer with a default <see cref="F:Stride.Graphics.GraphicsResourceUsage.Dynamic"/> usage.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="size">The size in bytes.</param>
            <param name="usage">The usage.</param>
            <returns>A constant buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.Constant.New``1(Stride.Graphics.GraphicsDevice)">
            <summary>
            Creates a new constant buffer with <see cref="F:Stride.Graphics.GraphicsResourceUsage.Dynamic"/> usage.
            </summary>
            <typeparam name="T">Type of the constant buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <returns>A constant buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.Constant.New``1(Stride.Graphics.GraphicsDevice,``0@,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new constant buffer with <see cref="F:Stride.Graphics.GraphicsResourceUsage.Dynamic"/> usage.
            </summary>
            <typeparam name="T">Type of the constant buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the constant buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A constant buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.Constant.New``1(Stride.Graphics.GraphicsDevice,``0[],Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new constant buffer with <see cref="F:Stride.Graphics.GraphicsResourceUsage.Dynamic"/> usage.
            </summary>
            <typeparam name="T">Type of the constant buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the constant buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A constant buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.Constant.New(Stride.Graphics.GraphicsDevice,Stride.Graphics.DataPointer,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new constant buffer with <see cref="F:Stride.Graphics.GraphicsResourceUsage.Dynamic"/> usage.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the constant buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A constant buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.#ctor(Stride.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.Buffer" /> class.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
        </member>
        <member name="P:Stride.Graphics.Buffer.Description">
            <summary>
            Gets the description of this buffer.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Buffer.Usage">
            <summary>
            Value that identifies how the buffer is to be read from and written to.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Buffer.Flags">
            <summary>
            Buffer flags describing the type of buffer.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Buffer.SizeInBytes">
            <summary>
            Gets the size of the buffer in bytes.
            </summary>
            <value>
            The size of the buffer in bytes.
            </value>
        </member>
        <member name="P:Stride.Graphics.Buffer.StructureByteStride">
            <summary>
            The size of the structure (in bytes) when it represents a structured/typed buffer.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Buffer.ElementCount">
            <summary>
            Gets the number of elements.
            </summary>
            <remarks>
            This value is valid for structured buffers, raw buffers and index buffers that are used as a SharedResourceView.
            </remarks>
        </member>
        <member name="P:Stride.Graphics.Buffer.ViewFlags">
            <summary>
            Gets the type of this buffer view.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Buffer.ViewFormat">
            <summary>
            Gets the format of this buffer view.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Buffer.InitialCounterOffset">
            <summary>
            The initial Append/Consume buffer counter offset. A value of -1 indicates the current offset
            should be kept. Any other values set the hidden counter for that Appendable/Consumable
            Buffer. This value is only relevant for Buffers which have the 'Append' or 'Counter'
            flag, otherwise it is ignored. The value get's initialized to -1.
            </summary>
        </member>
        <member name="M:Stride.Graphics.Buffer.ToStaging">
            <summary>
            Return an equivalent staging texture CPU read-writable from this instance.
            </summary>
            <returns>A new instance of this buffer as a staging resource</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>A clone of this instance</returns>
            <remarks>
            This method will not copy the content of the buffer to the clone
            </remarks>
        </member>
        <member name="M:Stride.Graphics.Buffer.GetData``1(Stride.Graphics.CommandList)">
            <summary>
            Gets the content of this buffer to an array of data.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:Stride.Graphics.GraphicsDevice"/>.
            This method creates internally a stagging resource if this texture is not already a stagging resouce, copies to it and map it to memory. Use method with explicit staging resource
            for optimal performances.</remarks>
        </member>
        <member name="M:Stride.Graphics.Buffer.GetData``1(Stride.Graphics.CommandList,``0[])">
            <summary>
            Copies the content of this buffer to an array of data.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="toData">The destination buffer to receive a copy of the texture datas.</param>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:Stride.Graphics.GraphicsDevice"/>.
            This method creates internally a stagging resource if this texture is not already a stagging resouce, copies to it and map it to memory. Use method with explicit staging resource
            for optimal performances.</remarks>
        </member>
        <member name="M:Stride.Graphics.Buffer.GetData``1(Stride.Graphics.CommandList,``0@)">
            <summary>
            Copies the content of this buffer to an array of data.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="toData">The destination buffer to receive a copy of the texture datas.</param>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:Stride.Graphics.GraphicsDevice"/>.
            This method creates internally a stagging resource if this texture is not already a stagging resouce, copies to it and map it to memory. Use method with explicit staging resource
            for optimal performances.</remarks>
        </member>
        <member name="M:Stride.Graphics.Buffer.GetData``1(Stride.Graphics.CommandList,Stride.Graphics.Buffer,``0@)">
            <summary>
            Copies the content of this buffer from GPU memory to an array of data on CPU memory using a specific staging resource.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="stagingTexture">The staging buffer used to transfer the buffer.</param>
            <param name="toData">To data.</param>
            <exception cref="T:System.ArgumentException">When strides is different from optimal strides, and TData is not the same size as the pixel format, or Width * Height != toData.Length</exception>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:Stride.Graphics.GraphicsDevice"/>.
            </remarks>
        </member>
        <member name="M:Stride.Graphics.Buffer.GetData``1(Stride.Graphics.CommandList,Stride.Graphics.Buffer,``0[])">
            <summary>
            Copies the content of this buffer from GPU memory to an array of data on CPU memory using a specific staging resource.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="stagingTexture">The staging buffer used to transfer the buffer.</param>
            <param name="toData">To data.</param>
            <exception cref="T:System.ArgumentException">When strides is different from optimal strides, and TData is not the same size as the pixel format, or Width * Height != toData.Length</exception>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:Stride.Graphics.GraphicsDevice"/>.
            </remarks>
        </member>
        <member name="M:Stride.Graphics.Buffer.SetData``1(Stride.Graphics.CommandList,``0@,System.Int32)">
            <summary>
            Copies the content an array of data on CPU memory to this buffer into GPU memory.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="fromData">The data to copy from.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <remarks>
            See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
        </member>
        <member name="M:Stride.Graphics.Buffer.SetData``1(Stride.Graphics.CommandList,``0[],System.Int32)">
            <summary>
            Copies the content an array of data on CPU memory to this buffer into GPU memory.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="fromData">The data to copy from.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <remarks>
            See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
        </member>
        <member name="M:Stride.Graphics.Buffer.GetData(Stride.Graphics.CommandList,Stride.Graphics.Buffer,Stride.Graphics.DataPointer)">
            <summary>
            Copies the content of this buffer from GPU memory to a CPU memory using a specific staging resource.
            </summary>
            <param name="stagingTexture">The staging buffer used to transfer the buffer.</param>
            <param name="toData">To data pointer.</param>
            <exception cref="T:System.ArgumentException">When strides is different from optimal strides, and TData is not the same size as the pixel format, or Width * Height != toData.Length</exception>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:Stride.Graphics.GraphicsDevice"/>.
            </remarks>
        </member>
        <member name="M:Stride.Graphics.Buffer.SetData(Stride.Graphics.CommandList,Stride.Graphics.DataPointer,System.Int32)">
            <summary>
            Copies the content an array of data on CPU memory to this buffer into GPU memory.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="fromData">A data pointer.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <remarks>
            See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
        </member>
        <member name="M:Stride.Graphics.Buffer.New(Stride.Graphics.GraphicsDevice,Stride.Graphics.BufferDescription,Stride.Graphics.PixelFormat)">
            <summary>
            Creates a new <see cref="T:Stride.Graphics.Buffer" /> instance.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="description">The description of the buffer.</param>
            <param name="viewFormat">View format used if the buffer is used as a shared resource view.</param>
            <returns>An instance of a new <see cref="T:Stride.Graphics.Buffer" /></returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.New(Stride.Graphics.GraphicsDevice,System.Int32,Stride.Graphics.BufferFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:Stride.Graphics.Buffer" /> instance.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="bufferSize">Size of the buffer in bytes.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:Stride.Graphics.Buffer" /></returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.New``1(Stride.Graphics.GraphicsDevice,System.Int32,Stride.Graphics.BufferFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:Stride.Graphics.Buffer" /> instance.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="elementCount">Number of T elment in this buffer.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:Stride.Graphics.Buffer" /></returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.New(Stride.Graphics.GraphicsDevice,System.Int32,Stride.Graphics.BufferFlags,Stride.Graphics.PixelFormat,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:Stride.Graphics.Buffer" /> instance.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="bufferSize">Size of the buffer in bytes.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="viewFormat">The view format must be specified if the buffer is declared as a shared resource view.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:Stride.Graphics.Buffer" /></returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.New(Stride.Graphics.GraphicsDevice,System.Int32,System.Int32,Stride.Graphics.BufferFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:Stride.Graphics.Buffer" /> instance.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="bufferSize">Size of the buffer in bytes.</param>
            <param name="elementSize">Size of an element in the buffer.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:Stride.Graphics.Buffer" /></returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.New(Stride.Graphics.GraphicsDevice,System.Int32,System.Int32,Stride.Graphics.BufferFlags,Stride.Graphics.PixelFormat,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:Stride.Graphics.Buffer" /> instance.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="bufferSize">Size of the buffer in bytes.</param>
            <param name="elementSize">Size of an element in the buffer.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="viewFormat">The view format must be specified if the buffer is declared as a shared resource view.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:Stride.Graphics.Buffer" /></returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.New``1(Stride.Graphics.GraphicsDevice,``0@,Stride.Graphics.BufferFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:Stride.Graphics.Buffer" /> instance.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <typeparam name="T">Type of the buffer, to get the sizeof from.</typeparam>
            <param name="value">The initial value of this buffer.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:Stride.Graphics.Buffer" /></returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.New``1(Stride.Graphics.GraphicsDevice,``0@,Stride.Graphics.BufferFlags,Stride.Graphics.PixelFormat,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:Stride.Graphics.Buffer" /> instance.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <typeparam name="T">Type of the buffer, to get the sizeof from.</typeparam>
            <param name="value">The initial value of this buffer.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="viewFormat">The view format must be specified if the buffer is declared as a shared resource view.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:Stride.Graphics.Buffer" /></returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.New``1(Stride.Graphics.GraphicsDevice,``0[],Stride.Graphics.BufferFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:Stride.Graphics.Buffer" /> instance.
            </summary>
            <typeparam name="T">Type of the buffer, to get the sizeof from.</typeparam>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="initialValue">The initial value of this buffer.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:Stride.Graphics.Buffer" /></returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.New``1(Stride.Graphics.GraphicsDevice,``0[],Stride.Graphics.BufferFlags,Stride.Graphics.PixelFormat,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:Stride.Graphics.Buffer" /> instance.
            </summary>
            <typeparam name="T">Type of the buffer, to get the sizeof from.</typeparam>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="initialValue">The initial value of this buffer.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="viewFormat">The view format must be specified if the buffer is declared as a shared resource view.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:Stride.Graphics.Buffer" /></returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.New(Stride.Graphics.GraphicsDevice,System.Byte[],System.Int32,Stride.Graphics.BufferFlags,Stride.Graphics.PixelFormat,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:Stride.Graphics.Buffer" /> instance from a byte array.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="initialValue">The initial value of this buffer.</param>
            <param name="elementSize">Size of an element. Must be equal to 2 or 4 for an index buffer, or to the size of a struct for a structured/typed buffer. Can be set to 0 for other buffers.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="viewFormat">The view format must be specified if the buffer is declared as a shared resource view.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:Stride.Graphics.Buffer" /></returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.New(Stride.Graphics.GraphicsDevice,Stride.Graphics.DataPointer,System.Int32,Stride.Graphics.BufferFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:Stride.Graphics.Buffer" /> instance.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="dataPointer">The data pointer.</param>
            <param name="elementSize">Size of the element.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:Stride.Graphics.Buffer" /></returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.New(Stride.Graphics.GraphicsDevice,Stride.Graphics.DataPointer,System.Int32,Stride.Graphics.BufferFlags,Stride.Graphics.PixelFormat,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:Stride.Graphics.Buffer" /> instance.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="dataPointer">The data pointer.</param>
            <param name="elementSize">Size of the element.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="viewFormat">The view format must be specified if the buffer is declared as a shared resource view.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:Stride.Graphics.Buffer" /></returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.RecreateWith``1(``0[])">
            <summary>
            Reload <see cref="T:Stride.Graphics.Buffer"/> from given data if <see cref="T:Stride.Graphics.GraphicsDevice"/> has been reset.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataPointer">The data pointer.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.RecreateWith(System.IntPtr)">
            <summary>
            Reload <see cref="T:Stride.Graphics.Buffer"/> from given data if <see cref="T:Stride.Graphics.GraphicsDevice"/> has been reset.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataPointer">The data pointer.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.Recreate``1(``0[])">
            <summary>
            Explicitly recreate buffer with given data. Usually called after a <see cref="T:Stride.Graphics.GraphicsDevice"/> reset.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataPointer"></param>
        </member>
        <member name="T:Stride.Graphics.Buffer.Index">
            <summary>
            Index buffer helper methods.
            </summary>
        </member>
        <member name="M:Stride.Graphics.Buffer.Index.New(Stride.Graphics.GraphicsDevice,System.Int32,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new index buffer with <see cref="F:Stride.Graphics.GraphicsResourceUsage.Default"/> uasge by default.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="size">The size in bytes.</param>
            <param name="usage">The usage.</param>
            <returns>A index buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.Index.New``1(Stride.Graphics.GraphicsDevice,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new index buffer with <see cref="F:Stride.Graphics.GraphicsResourceUsage.Default"/> uasge by default.
            </summary>
            <typeparam name="T">Type of the index buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="usage">The usage.</param>
            <returns>A index buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.Index.New``1(Stride.Graphics.GraphicsDevice,``0@,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new index buffer with <see cref="F:Stride.Graphics.GraphicsResourceUsage.Immutable"/> uasge by default.
            </summary>
            <typeparam name="T">Type of the index buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the index buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A index buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.Index.New``1(Stride.Graphics.GraphicsDevice,``0[],Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new index buffer with <see cref="F:Stride.Graphics.GraphicsResourceUsage.Immutable"/> uasge by default.
            </summary>
            <typeparam name="T">Type of the index buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the index buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A index buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.Index.New(Stride.Graphics.GraphicsDevice,System.Byte[],System.Boolean,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new index buffer with <see cref="F:Stride.Graphics.GraphicsResourceUsage.Immutable"/> uasge by default.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the index buffer.</param>
            <param name="is32BitIndex">Set to true if the buffer is using a 32 bit index or false for 16 bit index.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A index buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.Index.New(Stride.Graphics.GraphicsDevice,Stride.Graphics.DataPointer,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new index buffer with <see cref="F:Stride.Graphics.GraphicsResourceUsage.Immutable"/> uasge by default.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the index buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A index buffer</returns>
        </member>
        <member name="T:Stride.Graphics.Buffer.Raw">
            <summary>
            Raw buffer helper methods.
            </summary>
            <remarks>
            Example in HLSL: ByteAddressBuffer or RWByteAddressBuffer for raw buffers supporting unordered access.
            </remarks>
        </member>
        <member name="M:Stride.Graphics.Buffer.Raw.New(Stride.Graphics.GraphicsDevice,System.Int32,Stride.Graphics.BufferFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Raw buffer <see cref="F:Stride.Graphics.GraphicsResourceUsage.Default" /> uasge.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="size">The size in bytes.</param>
            <param name="additionalBindings">The additional bindings (for example, to create a combined raw/index buffer, pass <see cref="F:Stride.Graphics.BufferFlags.IndexBuffer" />)</param>
            <param name="usage">The usage.</param>
            <returns>A Raw buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.Raw.New``1(Stride.Graphics.GraphicsDevice,Stride.Graphics.BufferFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Raw buffer with <see cref="F:Stride.Graphics.GraphicsResourceUsage.Default"/> uasge by default.
            </summary>
            <typeparam name="T">Type of the Raw buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="additionalBindings">The additional bindings (for example, to create a combined raw/index buffer, pass <see cref="F:Stride.Graphics.BufferFlags.IndexBuffer" />)</param>
            <param name="usage">The usage.</param>
            <returns>A Raw buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.Raw.New``1(Stride.Graphics.GraphicsDevice,``0@,Stride.Graphics.BufferFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Raw buffer with <see cref="F:Stride.Graphics.GraphicsResourceUsage.Default"/> uasge by default.
            </summary>
            <typeparam name="T">Type of the Raw buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Raw buffer.</param>
            <param name="additionalBindings">The additional bindings (for example, to create a combined raw/index buffer, pass <see cref="F:Stride.Graphics.BufferFlags.IndexBuffer" />)</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A Raw buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.Raw.New``1(Stride.Graphics.GraphicsDevice,``0[],Stride.Graphics.BufferFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Raw buffer with <see cref="F:Stride.Graphics.GraphicsResourceUsage.Default"/> uasge by default.
            </summary>
            <typeparam name="T">Type of the Raw buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Raw buffer.</param>
            <param name="additionalBindings">The additional bindings (for example, to create a combined raw/index buffer, pass <see cref="F:Stride.Graphics.BufferFlags.IndexBuffer" />)</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A Raw buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.Raw.New(Stride.Graphics.GraphicsDevice,Stride.Graphics.DataPointer,Stride.Graphics.BufferFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Raw buffer with <see cref="F:Stride.Graphics.GraphicsResourceUsage.Default"/> uasge by default.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Raw buffer.</param>
            <param name="additionalBindings">The additional bindings (for example, to create a combined raw/index buffer, pass <see cref="F:Stride.Graphics.BufferFlags.IndexBuffer" />)</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A Raw buffer</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Stride.Graphics.Buffer.Structured" -->
        <member name="M:Stride.Graphics.Buffer.Structured.New(Stride.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new Structured buffer accessible as a <see cref="!:ShaderResourceView" /> and optionaly as a <see cref="!:UnorderedAccessView" />.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="count">The number of element in this buffer.</param>
            <param name="elementSize">Size of the struct.</param>
            <param name="isUnorderedAccess">if set to <c>true</c> this buffer supports unordered access (RW in HLSL).</param>
            <returns>A Structured buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.Structured.New``1(Stride.Graphics.GraphicsDevice,System.Int32,System.Boolean)">
            <summary>
            Creates a new Structured buffer accessible as a <see cref="!:ShaderResourceView" /> and optionaly as a <see cref="!:UnorderedAccessView" />.
            </summary>
            <typeparam name="T">Type of the element in the structured buffer</typeparam>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="count">The number of element in this buffer.</param>
            <param name="isUnorderedAccess">if set to <c>true</c> this buffer supports unordered access (RW in HLSL).</param>
            <returns>A Structured buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.Structured.New``1(Stride.Graphics.GraphicsDevice,``0[],System.Boolean)">
            <summary>
            Creates a new Structured buffer <see cref="F:Stride.Graphics.GraphicsResourceUsage.Default" /> uasge.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <typeparam name="T">Type of the Structured buffer to get the sizeof from</typeparam>
            <param name="value">The value to initialize the Structured buffer.</param>
            <param name="isUnorderedAccess">if set to <c>true</c> this buffer supports unordered access (RW in HLSL).</param>
            <returns>A Structured buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.Structured.New(Stride.Graphics.GraphicsDevice,Stride.Graphics.DataPointer,System.Int32,System.Boolean)">
            <summary>
            Creates a new Structured buffer <see cref="F:Stride.Graphics.GraphicsResourceUsage.Default" /> uasge.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Structured buffer.</param>
            <param name="elementSize">Size of the element.</param>
            <param name="isUnorderedAccess">if set to <c>true</c> this buffer supports unordered access (RW in HLSL).</param>
            <returns>A Structured buffer</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Stride.Graphics.Buffer.StructuredAppend" -->
        <member name="M:Stride.Graphics.Buffer.StructuredAppend.New(Stride.Graphics.GraphicsDevice,System.Int32,System.Int32)">
            <summary>
            Creates a new StructuredAppend buffer accessible as a <see cref="!:ShaderResourceView" /> and as a <see cref="!:UnorderedAccessView" />.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="count">The number of element in this buffer.</param>
            <param name="elementSize">Size of the struct.</param>
            <returns>A StructuredAppend buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.StructuredAppend.New``1(Stride.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Creates a new StructuredAppend buffer accessible as a <see cref="!:ShaderResourceView" /> and optionaly as a <see cref="!:UnorderedAccessView" />.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <typeparam name="T">Type of the element in the structured buffer</typeparam>
            <param name="count">The number of element in this buffer.</param>
            <returns>A Structured buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.StructuredAppend.New``1(Stride.Graphics.GraphicsDevice,``0[])">
            <summary>
            Creates a new StructuredAppend buffer <see cref="F:Stride.Graphics.GraphicsResourceUsage.Default" /> uasge.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <typeparam name="T">Type of the StructuredAppend buffer to get the sizeof from</typeparam>
            <param name="value">The value to initialize the StructuredAppend buffer.</param>
            <returns>A StructuredAppend buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.StructuredAppend.New(Stride.Graphics.GraphicsDevice,Stride.Graphics.DataPointer,System.Int32)">
            <summary>
            Creates a new StructuredAppend buffer <see cref="F:Stride.Graphics.GraphicsResourceUsage.Default" /> uasge.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the StructuredAppend buffer.</param>
            <param name="elementSize">Size of the element.</param>
            <returns>A StructuredAppend buffer</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Stride.Graphics.Buffer.StructuredCounter" -->
        <member name="M:Stride.Graphics.Buffer.StructuredCounter.New(Stride.Graphics.GraphicsDevice,System.Int32,System.Int32)">
            <summary>
            Creates a new StructuredCounter buffer accessible as a <see cref="!:ShaderResourceView" /> and as a <see cref="!:UnorderedAccessView" />.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="count">The number of element in this buffer.</param>
            <param name="elementSize">Size of the struct.</param>
            <returns>A StructuredCounter buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.StructuredCounter.New``1(Stride.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Creates a new StructuredCounter buffer accessible as a <see cref="!:ShaderResourceView" /> and optionaly as a <see cref="!:UnorderedAccessView" />.
            </summary>
            <typeparam name="T">Type of the element in the structured buffer</typeparam>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="count">The number of element in this buffer.</param>
            <returns>A Structured buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.StructuredCounter.New``1(Stride.Graphics.GraphicsDevice,``0[])">
            <summary>
            Creates a new StructuredCounter buffer <see cref="F:Stride.Graphics.GraphicsResourceUsage.Default" /> uasge.
            </summary>
            <typeparam name="T">Type of the StructuredCounter buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the StructuredCounter buffer.</param>
            <returns>A StructuredCounter buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.StructuredCounter.New(Stride.Graphics.GraphicsDevice,Stride.Graphics.DataPointer,System.Int32)">
            <summary>
            Creates a new StructuredCounter buffer <see cref="F:Stride.Graphics.GraphicsResourceUsage.Default" /> uasge.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the StructuredCounter buffer.</param>
            <param name="elementSize">Size of the element.</param>
            <returns>A StructuredCounter buffer</returns>
        </member>
        <member name="T:Stride.Graphics.Buffer.Typed">
            <summary>
            Typed buffer helper methods.
            </summary>
            <remarks>
            Example in HLSL: Buffer&lt;float4&gt;.
            </remarks>
        </member>
        <member name="M:Stride.Graphics.Buffer.Typed.New(Stride.Graphics.GraphicsDevice,System.Int32,Stride.Graphics.PixelFormat,System.Boolean,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Typed buffer <see cref="F:Stride.Graphics.GraphicsResourceUsage.Default" /> uasge.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="count">The number of data with the following viewFormat.</param>
            <param name="viewFormat">The view format of the buffer.</param>
            <param name="isUnorderedAccess">if set to <c>true</c> this buffer supports unordered access (RW in HLSL).</param>
            <param name="usage">The usage.</param>
            <returns>A Typed buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.Typed.New``1(Stride.Graphics.GraphicsDevice,``0[],Stride.Graphics.PixelFormat,System.Boolean,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Typed buffer <see cref="F:Stride.Graphics.GraphicsResourceUsage.Default" /> uasge.
            </summary>
            <typeparam name="T">Type of the Typed buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Typed buffer.</param>
            <param name="viewFormat">The view format of the buffer.</param>
            <param name="isUnorderedAccess">if set to <c>true</c> this buffer supports unordered access (RW in HLSL).</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A Typed buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.Typed.New(Stride.Graphics.GraphicsDevice,Stride.Graphics.DataPointer,Stride.Graphics.PixelFormat,System.Boolean,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Typed buffer <see cref="F:Stride.Graphics.GraphicsResourceUsage.Default" /> uasge.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Typed buffer.</param>
            <param name="viewFormat">The view format of the buffer.</param>
            <param name="isUnorderedAccess">if set to <c>true</c> this buffer supports unordered access (RW in HLSL).</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A Typed buffer</returns>
        </member>
        <member name="T:Stride.Graphics.Buffer.Vertex">
            <summary>
            Vertex buffer helper methods.
            </summary>
        </member>
        <member name="M:Stride.Graphics.Buffer.Vertex.New(Stride.Graphics.GraphicsDevice,System.Int32,Stride.Graphics.GraphicsResourceUsage,Stride.Graphics.BufferFlags)">
            <summary>
            Creates a new Vertex buffer with <see cref="F:Stride.Graphics.GraphicsResourceUsage.Default"/> uasge by default.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="size">The size in bytes.</param>
            <param name="usage">The usage.</param>
            <param name="bindFlags">The bind flags, can be combined with <see cref="F:Stride.Graphics.BufferFlags.StreamOutput"/> to use the buffer as a stream output target.</param>
            <returns>
            A Vertex buffer
            </returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.Vertex.New``1(Stride.Graphics.GraphicsDevice,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Vertex buffer with <see cref="F:Stride.Graphics.GraphicsResourceUsage.Default"/> uasge by default.
            </summary>
            <typeparam name="T">Type of the Vertex buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="usage">The usage.</param>
            <returns>A Vertex buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.Vertex.New``1(Stride.Graphics.GraphicsDevice,``0@,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Vertex buffer with <see cref="F:Stride.Graphics.GraphicsResourceUsage.Immutable"/> uasge by default.
            </summary>
            <typeparam name="T">Type of the Vertex buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Vertex buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A Vertex buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.Vertex.New``1(Stride.Graphics.GraphicsDevice,``0[],Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Vertex buffer with <see cref="F:Stride.Graphics.GraphicsResourceUsage.Immutable"/> uasge by default.
            </summary>
            <typeparam name="T">Type of the Vertex buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Vertex buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A Vertex buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.Vertex.New``1(Stride.Graphics.GraphicsDevice,System.Int32,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Vertex buffer with <see cref="F:Stride.Graphics.GraphicsResourceUsage.Default"/> usage by default.
            </summary>
            <typeparam name="T">Type of the Vertex buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="vertexBufferCount">Number of vertex in this buffer with the sizeof(T).</param>
            <param name="usage">The usage.</param>
            <returns>A Vertex buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.Vertex.New(Stride.Graphics.GraphicsDevice,Stride.Graphics.DataPointer,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Vertex buffer with <see cref="F:Stride.Graphics.GraphicsResourceUsage.Immutable"/> uasge by default.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Vertex buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A Vertex buffer</returns>
        </member>
        <member name="M:Stride.Graphics.Buffer.InitializeFromImpl(Stride.Graphics.BufferDescription,Stride.Graphics.BufferFlags,Stride.Graphics.PixelFormat,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.Buffer" /> class.
            </summary>
            <param name="description">The description.</param>
            <param name="viewFlags">Type of the buffer.</param>
            <param name="viewFormat">The view format.</param>
            <param name="dataPointer">The data pointer.</param>
        </member>
        <member name="M:Stride.Graphics.Buffer.OnDestroyed">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Graphics.Buffer.OnRecreate">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Graphics.Buffer.Recreate(System.IntPtr)">
            <summary>
            Explicitly recreate buffer with given data. Usually called after a <see cref="T:Stride.Graphics.GraphicsDevice"/> reset.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataPointer"></param>
        </member>
        <member name="M:Stride.Graphics.Buffer.GetShaderResourceView(Stride.Graphics.PixelFormat)">
            <summary>
            Gets a <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/> for a particular <see cref="T:Stride.Graphics.PixelFormat"/>.
            </summary>
            <param name="viewFormat">The view format.</param>
            <returns>A <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/> for the particular view format.</returns>
            <remarks>
            The buffer must have been declared with <see cref="F:Stride.Graphics.BufferFlags.ShaderResource"/>. 
            The ShaderResourceView instance is kept by this buffer and will be disposed when this buffer is disposed.
            </remarks>
        </member>
        <member name="M:Stride.Graphics.Buffer.GetRenderTargetView(Stride.Graphics.PixelFormat,System.Int32)">
            <summary>
            Gets a <see cref="T:SharpDX.Direct3D11.RenderTargetView" /> for a particular <see cref="T:Stride.Graphics.PixelFormat" />.
            </summary>
            <param name="pixelFormat">The view format.</param>
            <param name="width">The width in pixels of the render target.</param>
            <returns>A <see cref="T:SharpDX.Direct3D11.RenderTargetView" /> for the particular view format.</returns>
            <remarks>The buffer must have been declared with <see cref="F:Stride.Graphics.BufferFlags.RenderTarget" />.
            The RenderTargetView instance is kept by this buffer and will be disposed when this buffer is disposed.</remarks>
        </member>
        <member name="M:Stride.Graphics.Buffer.InitializeViews">
            <summary>
            Initializes the views.
            </summary>
        </member>
        <member name="T:Stride.Graphics.Buffer`1">
            <summary>
            A buffer with typed information.
            </summary>
            <typeparam name="T">Type of an element of this buffer.</typeparam>
        </member>
        <member name="F:Stride.Graphics.Buffer`1.ElementSize">
            <summary>
            Gets the size of element T.
            </summary>
        </member>
        <member name="M:Stride.Graphics.Buffer`1.GetData(Stride.Graphics.CommandList)">
            <summary>
            Gets the content of this texture to an array of data.
            </summary>
            <returns>An array of data.</returns>
            <remarks>This method is only working when called from the main thread that is accessing the main <see cref="T:Stride.Graphics.GraphicsDevice" />.
            This method creates internally a stagging resource if this texture is not already a stagging resouce, copies to it and map it to memory. Use method with explicit staging resource
            for optimal performances.</remarks>
        </member>
        <member name="M:Stride.Graphics.Buffer`1.SetData(Stride.Graphics.CommandList,`0@,System.Int32)">
            <summary>
            Copies the content of a single structure data from CPU memory to this buffer into GPU memory.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="fromData">The data to copy from.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:Stride.Graphics.GraphicsDevice"/>. See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
        </member>
        <member name="M:Stride.Graphics.Buffer`1.SetData(Stride.Graphics.CommandList,`0[],System.Int32)">
            <summary>
            Copies the content an array of data from CPU memory to this buffer into GPU memory.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="fromData">The data to copy from.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:Stride.Graphics.GraphicsDevice"/>. See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
        </member>
        <member name="T:Stride.Graphics.BufferDescription">
            <summary>
            Describes a buffer.
            </summary>
        </member>
        <member name="M:Stride.Graphics.BufferDescription.#ctor(System.Int32,Stride.Graphics.BufferFlags,Stride.Graphics.GraphicsResourceUsage,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Stride.Graphics.BufferDescription"/> struct.
            </summary>
            <param name="sizeInBytes">Size of the buffer in bytes.</param>
            <param name="bufferFlags">Buffer flags describing the type of buffer.</param>
            <param name="usage">Usage of this buffer.</param>
            <param name="structureByteStride">The size of the structure (in bytes) when it represents a structured/typed buffer. Default = 0.</param>
        </member>
        <member name="F:Stride.Graphics.BufferDescription.SizeInBytes">
            <summary>
            Size of the buffer in bytes.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BufferDescription.BufferFlags">
            <summary>
            Buffer flags describing the type of buffer.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BufferDescription.Usage">
            <summary>
            Usage of this buffer.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BufferDescription.StructureByteStride">
            <summary>
            The size of the structure (in bytes) when it represents a structured/typed buffer.
            </summary>
        </member>
        <member name="M:Stride.Graphics.BufferDescription.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Graphics.BufferDescription.op_Equality(Stride.Graphics.BufferDescription,Stride.Graphics.BufferDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Stride.Graphics.BufferDescription.op_Inequality(Stride.Graphics.BufferDescription,Stride.Graphics.BufferDescription)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="F:Stride.Graphics.BufferFlags.None">
            <summary>
            Creates a none buffer.
            </summary>
            <remarks>
            This is equivalent to <see cref="!:BindFlags.None"/>.
            </remarks>
        </member>
        <member name="F:Stride.Graphics.BufferFlags.ConstantBuffer">
            <summary>
            Creates a constant buffer.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BufferFlags.IndexBuffer">
            <summary>
            Creates an index buffer.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BufferFlags.VertexBuffer">
            <summary>
            Creates a vertex buffer.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BufferFlags.RenderTarget">
            <summary>
            Creates a render target buffer.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BufferFlags.ShaderResource">
            <summary>
            Creates a buffer usable as a ShaderResourceView.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BufferFlags.UnorderedAccess">
            <summary>
            Creates an unordered access buffer.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BufferFlags.StructuredBuffer">
            <summary>
            Creates a structured buffer.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BufferFlags.StructuredAppendBuffer">
            <summary>
            Creates a structured buffer that supports unordered acccess and append.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BufferFlags.StructuredCounterBuffer">
            <summary>
            Creates a structured buffer that supports unordered acccess and counter.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BufferFlags.RawBuffer">
            <summary>
            Creates a raw buffer.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BufferFlags.ArgumentBuffer">
            <summary>
            Creates an indirect arguments buffer.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BufferFlags.StreamOutput">
            <summary>
            Creates a buffer for the geometry shader stream-output stage.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BufferPoolAllocationType.UsedOnce">
            <summary>
            Notify the allocator that this buffer won't be reused for much more than 1 (or few) draw calls.
            In practice, on older D3D11 (not 11.1) and OpenGL ES 2.0 hardware, we won't use a dedicated cbuffer.
            This has no effect on new API where we can bind cbuffer offsets.
            </summary>
        </member>
        <member name="F:Stride.Graphics.BufferPoolAllocationType.UsedMultipleTime">
            <summary>
            Notify the allocator that this buffer will be reused for many draw calls.
            In practice, on older D3D11 (not 11.1) and OpenGL ES 2.0 hardware, we will use a dedicated cbuffer.
            This has no effect on new API where we can bind cbuffer offsets.
            </summary>
        </member>
        <member name="T:Stride.Graphics.ColorWriteChannels">
            <summary>
            Identify which components of each pixel of a render target are writable during blending.
            </summary>
            <remarks>
            These flags can be combined with a bitwise OR and is used in <see cref="!:BlendState"/>.
            </remarks>
        </member>
        <member name="F:Stride.Graphics.ColorWriteChannels.None">
            <summary>
            None of the data are stored.
            </summary>
        </member>
        <member name="F:Stride.Graphics.ColorWriteChannels.Red">
            <summary>
            Allow data to be stored in the red component. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.ColorWriteChannels.Green">
            <summary>
            Allow data to be stored in the green component. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.ColorWriteChannels.Blue">
            <summary>
            Allow data to be stored in the blue component. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.ColorWriteChannels.Alpha">
            <summary>
            Allow data to be stored in the alpha component. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.ColorWriteChannels.All">
            <summary>
            Allow data to be stored in all components. 
            </summary>
        </member>
        <member name="T:Stride.Graphics.CommandList">
            <summary>
            Performs resource bindings and primitive-based rendering. See the <see cref="T:Stride.Graphics.GraphicsDevice"/> class to learn more about the class.
            </summary>
        </member>
        <member name="P:Stride.Graphics.CommandList.Viewport">
            <summary>
                Gets the first viewport.
            </summary>
            <value>The first viewport.</value>
        </member>
        <member name="P:Stride.Graphics.CommandList.Scissor">
            <summary>
                Gets the first scissor.
            </summary>
            <value>The first scissor.</value>
        </member>
        <member name="P:Stride.Graphics.CommandList.DepthStencilBuffer">
            <summary>
                Gets the depth stencil buffer currently sets on this instance.
            </summary>
            <value>
                The depth stencil buffer currently sets on this instance.
            </value>
        </member>
        <member name="P:Stride.Graphics.CommandList.RenderTarget">
            <summary>
                Gets the render target buffer currently sets on this instance.
            </summary>
            <value>
                The render target buffer currently sets on this instance.
            </value>
        </member>
        <member name="M:Stride.Graphics.CommandList.ClearState">
            <summary>
            Clears the state and restore the state of the device.
            </summary>
        </member>
        <member name="M:Stride.Graphics.CommandList.ResetTargets">
            <summary>
            Unbinds all depth-stencil buffer and render targets from the output-merger stage.
            </summary>
        </member>
        <member name="M:Stride.Graphics.CommandList.SetViewport(Stride.Graphics.Viewport)">
            <summary>
            Sets a viewport.
            </summary>
            <value>The viewport.</value>
        </member>
        <member name="M:Stride.Graphics.CommandList.SetViewports(Stride.Graphics.Viewport[])">
            <summary>
            Sets the viewports.
            </summary>
            <value>The viewport.</value>
        </member>
        <member name="M:Stride.Graphics.CommandList.SetViewports(System.Int32,Stride.Graphics.Viewport[])">
            <summary>
            Sets the viewports.
            </summary>
            <value>The viewport.</value>
        </member>
        <member name="M:Stride.Graphics.CommandList.SetScissorRectangle(Stride.Core.Mathematics.Rectangle)">
            <summary>
            Binds a single scissor rectangle to the rasterizer stage. See <see cref="!:Render+states"/> to learn how to use it.
            </summary>
            <param name="rectangle">The scissor rectangle.</param>
        </member>
        <member name="M:Stride.Graphics.CommandList.SetScissorRectangles(Stride.Core.Mathematics.Rectangle[])">
            <summary>
            Binds a set of scissor rectangles to the rasterizer stage. See <see cref="!:Render+states"/> to learn how to use it.
            </summary>
            <param name="scissorRectangles">The set of scissor rectangles to bind.</param>
        </member>
        <member name="M:Stride.Graphics.CommandList.SetScissorRectangles(System.Int32,Stride.Core.Mathematics.Rectangle[])">
            <summary>
            Binds a set of scissor rectangles to the rasterizer stage. See <see cref="!:Render+states"/> to learn how to use it.
            </summary>
            <param name="scissorCount">The number of scissor rectangles to bind.</param>
            <param name="scissorRectangles">The set of scissor rectangles to bind.</param>
        </member>
        <member name="M:Stride.Graphics.CommandList.SetRenderTargetAndViewport(Stride.Graphics.Texture,Stride.Graphics.Texture)">
            <summary>
            Binds a depth-stencil buffer and a single render target to the output-merger stage. See <see cref="!:Textures+and+render+targets"/> to learn how to use it.
            </summary>
            <param name="depthStencilView">A view of the depth-stencil buffer to bind.</param>
            <param name="renderTargetView">A view of the render target to bind.</param>
        </member>
        <member name="M:Stride.Graphics.CommandList.SetRenderTargetsAndViewport(Stride.Graphics.Texture[])">
            <summary>
                <p>Bind one or more render targets atomically and the depth-stencil buffer to the output-merger stage. See <see cref="!:Textures+and+render+targets"/> to learn how to use it.</p>
            </summary>
            <param name="renderTargetViews">A set of render target views to bind.</param>
        </member>
        <member name="M:Stride.Graphics.CommandList.SetRenderTargetsAndViewport(Stride.Graphics.Texture,System.Int32,Stride.Graphics.Texture[])">
            <summary>
            Binds a depth-stencil buffer and a set of render targets to the output-merger stage. See <see cref="!:Textures+and+render+targets"/> to learn how to use it.
            </summary>
            <param name="depthStencilView">A view of the depth-stencil buffer to bind.</param>
            <param name="renderTargetViewCount">The number of render target in <paramref name="renderTargetViews"/>.</param>
            <param name="renderTargetViews">A set of render target views to bind.</param>
            <exception cref="T:System.ArgumentNullException">renderTargetViews</exception>
        </member>
        <member name="M:Stride.Graphics.CommandList.SetRenderTargetsAndViewport(Stride.Graphics.Texture,Stride.Graphics.Texture[])">
            <summary>
            Binds a depth-stencil buffer and a set of render targets to the output-merger stage. See <see cref="!:Textures+and+render+targets"/> to learn how to use it.
            </summary>
            <param name="depthStencilView">A view of the depth-stencil buffer to bind.</param>
            <param name="renderTargetViews">A set of render target views to bind.</param>
            <exception cref="T:System.ArgumentNullException">renderTargetViews</exception>
        </member>
        <member name="M:Stride.Graphics.CommandList.SetRenderTarget(Stride.Graphics.Texture,Stride.Graphics.Texture)">
            <summary>
            Binds a depth-stencil buffer and a single render target to the output-merger stage. See <see cref="!:Textures+and+render+targets"/> to learn how to use it.
            </summary>
            <param name="depthStencilView">A view of the depth-stencil buffer to bind.</param>
            <param name="renderTargetView">A view of the render target to bind.</param>
        </member>
        <member name="M:Stride.Graphics.CommandList.SetRenderTargets(Stride.Graphics.Texture[])">
            <summary>
                <p>Bind one or more render targets atomically and the depth-stencil buffer to the output-merger stage. See <see cref="!:Textures+and+render+targets"/> to learn how to use it.</p>
            </summary>
            <param name="renderTargetViews">A set of render target views to bind.</param>
        </member>
        <member name="M:Stride.Graphics.CommandList.SetRenderTargets(Stride.Graphics.Texture,System.Int32,Stride.Graphics.Texture[])">
            <summary>
            Binds a depth-stencil buffer and a set of render targets to the output-merger stage. See <see cref="!:Textures+and+render+targets"/> to learn how to use it.
            </summary>
            <param name="depthStencilView">A view of the depth-stencil buffer to bind.</param>
            <param name="renderTargetViewCount">The number of render target in <paramref name="renderTargetViews"/>.</param>
            <param name="renderTargetViews">A set of render target views to bind.</param>
            <exception cref="T:System.ArgumentNullException">renderTargetViews</exception>
        </member>
        <member name="M:Stride.Graphics.CommandList.SetRenderTargets(Stride.Graphics.Texture,Stride.Graphics.Texture[])">
            <summary>
            Binds a depth-stencil buffer and a set of render targets to the output-merger stage. See <see cref="!:Textures+and+render+targets"/> to learn how to use it.
            </summary>
            <param name="depthStencilView">A view of the depth-stencil buffer to bind.</param>
            <param name="renderTargetViews">A set of render target views to bind.</param>
            <exception cref="T:System.ArgumentNullException">renderTargetViews</exception>
        </member>
        <member name="P:Stride.Graphics.CommandList.NativeDeviceContext">
            <summary>
            Gets the native device context.
            </summary>
            <value>The native device context.</value>
        </member>
        <member name="M:Stride.Graphics.CommandList.OnDestroyed">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Graphics.CommandList.ResetTargetsImpl">
            <summary>
            Unbinds all depth-stencil buffer and render targets from the output-merger stage.
            </summary>
        </member>
        <member name="M:Stride.Graphics.CommandList.SetRenderTargetsImpl(Stride.Graphics.Texture,System.Int32,Stride.Graphics.Texture[])">
            <summary>
            Binds a depth-stencil buffer and a set of render targets to the output-merger stage. See <see cref="!:Textures+and+render+targets"/> to learn how to use it.
            </summary>
            <param name="depthStencilBuffer">The depth stencil buffer.</param>
            <param name="renderTargetCount">The number of render targets.</param>
            <param name="renderTargets">The render targets.</param>
            <exception cref="T:System.ArgumentNullException">renderTargetViews</exception>
        </member>
        <member name="M:Stride.Graphics.CommandList.SetStreamTargets(Stride.Graphics.Buffer[])">
            <summary>
            Sets the stream targets.
            </summary>
            <param name="buffers">The buffers.</param>
        </member>
        <member name="M:Stride.Graphics.CommandList.SetViewportImpl">
            <summary>
                Gets or sets the 1st viewport. See <see cref="!:Render+states"/> to learn how to use it.
            </summary>
            <value>The viewport.</value>
        </member>
        <member name="M:Stride.Graphics.CommandList.UnsetRenderTargets">
            <summary>
            Unsets the render targets.
            </summary>
        </member>
        <member name="M:Stride.Graphics.CommandList.SetConstantBuffer(Stride.Shaders.ShaderStage,System.Int32,Stride.Graphics.Buffer)">
            <summary>
                Sets a constant buffer to the shader pipeline.
            </summary>
            <param name="stage">The shader stage.</param>
            <param name="slot">The binding slot.</param>
            <param name="buffer">The constant buffer to set.</param>
        </member>
        <member name="M:Stride.Graphics.CommandList.SetConstantBuffer(Stride.Shaders.ShaderStage,System.Int32,System.Int32,Stride.Graphics.Buffer)">
            <summary>
                Sets a constant buffer to the shader pipeline.
            </summary>
            <param name="stage">The shader stage.</param>
            <param name="slot">The binding slot.</param>
            <param name="buffer">The constant buffer to set.</param>
        </member>
        <member name="M:Stride.Graphics.CommandList.SetSamplerState(Stride.Shaders.ShaderStage,System.Int32,Stride.Graphics.SamplerState)">
            <summary>
                Sets a sampler state to the shader pipeline.
            </summary>
            <param name="stage">The shader stage.</param>
            <param name="slot">The binding slot.</param>
            <param name="samplerState">The sampler state to set.</param>
        </member>
        <member name="M:Stride.Graphics.CommandList.SetShaderResourceView(Stride.Shaders.ShaderStage,System.Int32,Stride.Graphics.GraphicsResource)">
            <summary>
                Sets a shader resource view to the shader pipeline.
            </summary>
            <param name="stage">The shader stage.</param>
            <param name="slot">The binding slot.</param>
            <param name="shaderResourceView">The shader resource view.</param>
        </member>
        <member name="M:Stride.Graphics.CommandList.OMSetSingleUnorderedAccessView(System.Int32,SharpDX.Direct3D11.UnorderedAccessView,System.Int32)">
            <summary>
                Sets an unordered access view to the shader pipeline, without affecting ones that are already set.
            </summary>
            <param name="slot">The binding slot.</param>
            <param name="shaderResourceView">The shader resource view.</param>
            <param name="view">The native unordered access view.</param>
            <param name="uavInitialOffset">The Append/Consume buffer offset. See SetUnorderedAccessView for more details.</param>
        </member>
        <member name="M:Stride.Graphics.CommandList.SetUnorderedAccessView(Stride.Shaders.ShaderStage,System.Int32,Stride.Graphics.GraphicsResource,System.Int32)">
            <summary>
            Sets an unordered access view to the shader pipeline.
            </summary>
            <param name="stage">The stage.</param>
            <param name="slot">The slot.</param>
            <param name="unorderedAccessView">The unordered access view.</param>
            <param name="uavInitialOffset">The Append/Consume buffer offset. A value of -1 indicates the current offset
                should be kept. Any other values set the hidden counter for that Appendable/Consumable
                UAV. uavInitialCount is only relevant for UAVs which have the 'Append' or 'Counter' buffer
                flag, otherwise the argument is ignored.</param>
            <exception cref="T:System.ArgumentException">Invalid stage.;stage</exception>
        </member>
        <member name="M:Stride.Graphics.CommandList.UnsetUnorderedAccessView(Stride.Graphics.GraphicsResource)">
            <summary>
            Unsets an unordered access view from the shader pipeline.
            </summary>
            <param name="unorderedAccessView">The unordered access view.</param>
        </member>
        <member name="M:Stride.Graphics.CommandList.PrepareDraw">
            <summary>
                Prepares a draw call. This method is called before each Draw() method to setup the correct Primitive, InputLayout and VertexBuffers.
            </summary>
            <exception cref="T:System.InvalidOperationException">Cannot GraphicsDevice.Draw*() without an effect being previously applied with Effect.Apply() method</exception>
        </member>
        <member name="M:Stride.Graphics.CommandList.Dispatch(System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Graphics.CommandList.Dispatch(Stride.Graphics.Buffer,System.Int32)">
            <summary>
            Dispatches the specified indirect buffer.
            </summary>
            <param name="indirectBuffer">The indirect buffer.</param>
            <param name="offsetInBytes">The offset information bytes.</param>
        </member>
        <member name="M:Stride.Graphics.CommandList.Draw(System.Int32,System.Int32)">
            <summary>
            Draw non-indexed, non-instanced primitives.
            </summary>
            <param name="vertexCount">Number of vertices to draw.</param>
            <param name="startVertexLocation">Index of the first vertex, which is usually an offset in a vertex buffer; it could also be used as the first vertex id generated for a shader parameter marked with the <strong>SV_TargetId</strong> system-value semantic.</param>
        </member>
        <member name="M:Stride.Graphics.CommandList.DrawAuto">
            <summary>
            Draw geometry of an unknown size.
            </summary>
        </member>
        <member name="M:Stride.Graphics.CommandList.DrawIndexed(System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw indexed, non-instanced primitives.
            </summary>
            <param name="indexCount">Number of indices to draw.</param>
            <param name="startIndexLocation">The location of the first index read by the GPU from the index buffer.</param>
            <param name="baseVertexLocation">A value added to each index before reading a vertex from the vertex buffer.</param>
        </member>
        <member name="M:Stride.Graphics.CommandList.DrawIndexedInstanced(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw indexed, instanced primitives.
            </summary>
            <param name="indexCountPerInstance">Number of indices read from the index buffer for each instance.</param>
            <param name="instanceCount">Number of instances to draw.</param>
            <param name="startIndexLocation">The location of the first index read by the GPU from the index buffer.</param>
            <param name="baseVertexLocation">A value added to each index before reading a vertex from the vertex buffer.</param>
            <param name="startInstanceLocation">A value added to each index before reading per-instance data from a vertex buffer.</param>
        </member>
        <member name="M:Stride.Graphics.CommandList.DrawIndexedInstanced(Stride.Graphics.Buffer,System.Int32)">
            <summary>
            Draw indexed, instanced, GPU-generated primitives.
            </summary>
            <param name="argumentsBuffer">A buffer containing the GPU generated primitives.</param>
            <param name="alignedByteOffsetForArgs">Offset in <em>pBufferForArgs</em> to the start of the GPU generated primitives.</param>
        </member>
        <member name="M:Stride.Graphics.CommandList.DrawInstanced(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw non-indexed, instanced primitives.
            </summary>
            <param name="vertexCountPerInstance">Number of vertices to draw.</param>
            <param name="instanceCount">Number of instances to draw.</param>
            <param name="startVertexLocation">Index of the first vertex.</param>
            <param name="startInstanceLocation">A value added to each index before reading per-instance data from a vertex buffer.</param>
        </member>
        <member name="M:Stride.Graphics.CommandList.DrawInstanced(Stride.Graphics.Buffer,System.Int32)">
            <summary>
            Draw instanced, GPU-generated primitives.
            </summary>
            <param name="argumentsBuffer">An arguments buffer</param>
            <param name="alignedByteOffsetForArgs">Offset in <em>pBufferForArgs</em> to the start of the GPU generated primitives.</param>
        </member>
        <member name="M:Stride.Graphics.CommandList.WriteTimestamp(Stride.Graphics.QueryPool,System.Int32)">
            <summary>
            Submits a GPU timestamp query.
            </summary>
            <param name="queryPool">The <see cref="T:Stride.Graphics.QueryPool"/> owning the query.</param>
            <param name="index">The query index.</param>
        </member>
        <member name="M:Stride.Graphics.CommandList.BeginProfile(Stride.Core.Mathematics.Color4,System.String)">
            <summary>
            Begins debug event.
            </summary>
            <param name="profileColor">Color of the profile.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Stride.Graphics.CommandList.EndProfile">
            <summary>
            Ends debug event.
            </summary>
        </member>
        <member name="M:Stride.Graphics.CommandList.Clear(Stride.Graphics.Texture,Stride.Graphics.DepthStencilClearOptions,System.Single,System.Byte)">
            <summary>
            Clears the specified depth stencil buffer. See <see cref="!:Textures+and+render+targets"/> to learn how to use it.
            </summary>
            <param name="depthStencilBuffer">The depth stencil buffer.</param>
            <param name="options">The options.</param>
            <param name="depth">The depth.</param>
            <param name="stencil">The stencil.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Stride.Graphics.CommandList.Clear(Stride.Graphics.Texture,Stride.Core.Mathematics.Color4)">
            <summary>
            Clears the specified render target. See <see cref="!:Textures+and+render+targets"/> to learn how to use it.
            </summary>
            <param name="renderTarget">The render target.</param>
            <param name="color">The color.</param>
            <exception cref="T:System.ArgumentNullException">renderTarget</exception>
        </member>
        <member name="M:Stride.Graphics.CommandList.ClearReadWrite(Stride.Graphics.Buffer,Stride.Core.Mathematics.Vector4)">
            <summary>
            Clears a read-write Buffer. This buffer must have been created with read-write/unordered access.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
            <exception cref="T:System.ArgumentException">Expecting buffer supporting UAV;buffer</exception>
        </member>
        <member name="M:Stride.Graphics.CommandList.ClearReadWrite(Stride.Graphics.Buffer,Stride.Core.Mathematics.Int4)">
            <summary>
            Clears a read-write Buffer. This buffer must have been created with read-write/unordered access.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
            <exception cref="T:System.ArgumentException">Expecting buffer supporting UAV;buffer</exception>
        </member>
        <member name="M:Stride.Graphics.CommandList.ClearReadWrite(Stride.Graphics.Buffer,Stride.Core.Mathematics.UInt4)">
            <summary>
            Clears a read-write Buffer. This buffer must have been created with read-write/unordered access.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
            <exception cref="T:System.ArgumentException">Expecting buffer supporting UAV;buffer</exception>
        </member>
        <member name="M:Stride.Graphics.CommandList.ClearReadWrite(Stride.Graphics.Texture,Stride.Core.Mathematics.Vector4)">
            <summary>
            Clears a read-write Texture. This texture must have been created with read-write/unordered access.
            </summary>
            <param name="texture">The texture.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">texture</exception>
            <exception cref="T:System.ArgumentException">Expecting texture supporting UAV;texture</exception>
        </member>
        <member name="M:Stride.Graphics.CommandList.ClearReadWrite(Stride.Graphics.Texture,Stride.Core.Mathematics.Int4)">
            <summary>
            Clears a read-write Texture. This texture must have been created with read-write/unordered access.
            </summary>
            <param name="texture">The texture.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">texture</exception>
            <exception cref="T:System.ArgumentException">Expecting texture supporting UAV;texture</exception>
        </member>
        <member name="M:Stride.Graphics.CommandList.ClearReadWrite(Stride.Graphics.Texture,Stride.Core.Mathematics.UInt4)">
            <summary>
            Clears a read-write Texture. This texture must have been created with read-write/unordered access.
            </summary>
            <param name="texture">The texture.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">texture</exception>
            <exception cref="T:System.ArgumentException">Expecting texture supporting UAV;texture</exception>
        </member>
        <member name="M:Stride.Graphics.CommandList.Copy(Stride.Graphics.GraphicsResource,Stride.Graphics.GraphicsResource)">
            <summary>
            Copy a texture. View is ignored and full underlying texture is copied.
            </summary>
            <param name="source">The source texture.</param>
            <param name="destination">The destination texture.</param>
        </member>
        <member name="M:Stride.Graphics.CommandList.CopyCount(Stride.Graphics.Buffer,Stride.Graphics.Buffer,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Graphics.CommandList.MapSubresource(Stride.Graphics.GraphicsResource,System.Int32,Stride.Graphics.MapMode,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Maps a subresource.
            </summary>
            <param name="resource">The resource.</param>
            <param name="subResourceIndex">Index of the sub resource.</param>
            <param name="mapMode">The map mode.</param>
            <param name="doNotWait">if set to <c>true</c> this method will return immediately if the resource is still being used by the GPU for writing. Default is false</param>
            <param name="offsetInBytes">The offset information in bytes.</param>
            <param name="lengthInBytes">The length information in bytes.</param>
            <returns>Pointer to the sub resource to map.</returns>
        </member>
        <member name="T:Stride.Graphics.CompiledCommandList">
            <summary>
            A token for one-time execution of a <see cref="T:Stride.Graphics.CommandList"/> by the <see cref="T:Stride.Graphics.GraphicsDevice"/>
            </summary>
        </member>
        <member name="T:Stride.Graphics.CubeMapFace">
            <summary>
            Defines the faces of a cube map for <see cref="!:TextureCube"/>.
            </summary>
        </member>
        <member name="F:Stride.Graphics.CubeMapFace.PositiveX">
            <summary>
            Positive x-face of the cube map.
            </summary>
        </member>
        <member name="F:Stride.Graphics.CubeMapFace.NegativeX">
            <summary>
            Negative x-face of the cube map.
            </summary>
        </member>
        <member name="F:Stride.Graphics.CubeMapFace.PositiveY">
            <summary>
            Positive y-face of the cube map.
            </summary>
        </member>
        <member name="F:Stride.Graphics.CubeMapFace.NegativeY">
            <summary>
            Negative y-face of the cube map.
            </summary>
        </member>
        <member name="F:Stride.Graphics.CubeMapFace.PositiveZ">
            <summary>
            Positive z-face of the cube map.
            </summary>
        </member>
        <member name="F:Stride.Graphics.CubeMapFace.NegativeZ">
            <summary>
            Negative z-face of the cube map.
            </summary>
        </member>
        <member name="T:Stride.Graphics.CullMode">
            <summary>
            Indicates triangles facing a particular direction are not drawn.
            </summary>
            <remarks>
            This enumeration is part of a rasterizer-state object description (see <see cref="!:RasterizerState"/>). 
            </remarks>
        </member>
        <member name="F:Stride.Graphics.CullMode.None">
            <summary>
            Always draw all triangles. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.CullMode.Front">
            <summary>
            Do not draw triangles that are front-facing. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.CullMode.Back">
            <summary>
            Do not draw triangles that are back-facing. 
            </summary>
        </member>
        <member name="T:Stride.Graphics.Data.BufferData">
            <summary>
            Content of a GPU buffer (vertex buffer, index buffer, etc...).
            </summary>
        </member>
        <member name="P:Stride.Graphics.Data.BufferData.Content">
            <summary>
            Gets or sets the buffer content.
            </summary>
            <value>
            The buffer content.
            </value>
        </member>
        <member name="P:Stride.Graphics.Data.BufferData.BufferFlags">
            <summary>
            Buffer flags describing the type of buffer.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Data.BufferData.Usage">
            <summary>
            Usage of this buffer.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Data.BufferData.StructureByteStride">
            <summary>
            The size of the structure (in bytes) when it represents a structured/typed buffer.
            </summary>
        </member>
        <member name="M:Stride.Graphics.Data.BufferData.New``1(Stride.Graphics.BufferFlags,``0[])">
            <summary>
            Creates a new instance of <see cref="T:Stride.Graphics.Data.BufferData"/> from a typed buffer.
            </summary>
            <typeparam name="T">Type of the element to store in the buffer data.</typeparam>
            <param name="bufferFlags">The flags indicating the type of buffer</param>
            <param name="content">An array of data</param>
            <returns>A buffer data.</returns>
        </member>
        <member name="T:Stride.Graphics.Data.BufferSerializer">
            <summary>
            Serializer for <see cref="T:Stride.Graphics.Buffer"/>.
            </summary>
        </member>
        <member name="T:Stride.Graphics.Data.GraphicsSerializerExtensions">
            <summary>
            Various extension method for serialization of GPU types having separate CPU serialized data format.
            </summary>
        </member>
        <member name="M:Stride.Graphics.Data.GraphicsSerializerExtensions.ToSerializableVersion(Stride.Graphics.Data.BufferData)">
            <summary>
            Creates a fake <see cref="T:Stride.Graphics.Buffer" /> that will have the given serialized data version.
            </summary>
            <param name="bufferData">The buffer data.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Graphics.Data.GraphicsSerializerExtensions.GetSerializationData(Stride.Graphics.Buffer)">
            <summary>
            Gets the serialized data version of this <see cref="T:Stride.Graphics.Buffer"/>.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Graphics.Data.GraphicsSerializerExtensions.SetSerializationData(Stride.Graphics.Buffer,Stride.Graphics.Data.BufferData)">
            <summary>
            Sets the serialized data version of this <see cref="T:Stride.Graphics.Buffer" />.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="bufferData">The buffer data.</param>
        </member>
        <member name="M:Stride.Graphics.Data.GraphicsSerializerExtensions.ToSerializableVersion(Stride.Graphics.Image)">
            <summary>
            Creates a fake <see cref="T:Stride.Graphics.Texture"/> that will have the given serialized data version.
            </summary>
            <param name="image">The image.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Graphics.Data.GraphicsSerializerExtensions.ToSerializableVersion(Stride.Graphics.Data.TextureSerializationData)">
            <summary>
            Creates a fake <see cref="T:Stride.Graphics.Texture"/> that will have the given serialized data version.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Graphics.Data.GraphicsSerializerExtensions.GetSerializationData(Stride.Graphics.Texture)">
            <summary>
            Gets the serialized data version of this <see cref="T:Stride.Graphics.Texture"/>.
            </summary>
            <param name="texture">The texture.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Graphics.Data.GraphicsSerializerExtensions.SetSerializationData(Stride.Graphics.Texture,Stride.Graphics.Image)">
            <summary>
            Sets the serialized data version of this <see cref="T:Stride.Graphics.Texture" />.
            </summary>
            <param name="texture">The texture.</param>
            <param name="image">The image.</param>
        </member>
        <member name="M:Stride.Graphics.Data.GraphicsSerializerExtensions.SetSerializationData(Stride.Graphics.Texture,Stride.Graphics.Data.TextureSerializationData)">
            <summary>
            Sets the serialized data version of this <see cref="T:Stride.Graphics.Texture" />.
            </summary>
            <param name="texture">The texture.</param>
            <param name="data">The data.</param>
        </member>
        <member name="P:Stride.Graphics.Data.ImageTextureSerializer.SerializationType">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Graphics.Data.ITexturesStreamingProvider">
            <summary>
            Used internally to find the currently active textures streaming service
            </summary>
        </member>
        <member name="M:Stride.Graphics.Data.ITexturesStreamingProvider.FullyLoadTexture(Stride.Graphics.Texture,Stride.Graphics.ImageDescription@,Stride.Core.Streaming.ContentStorageHeader@)">
            <summary>
            Loads the texture in a streaming service.
            </summary>
            <param name="obj">The texture object.</param>
            <param name="imageDescription">The image description.</param>
            <param name="storageHeader">The storage header.</param>
        </member>
        <member name="M:Stride.Graphics.Data.ITexturesStreamingProvider.RegisterTexture(Stride.Graphics.Texture,Stride.Graphics.ImageDescription@,Stride.Core.Streaming.ContentStorageHeader@)">
            <summary>
            Registers the texture in a streaming service.
            </summary>
            <param name="obj">The texture object.</param>
            <param name="imageDescription">The image description.</param>
            <param name="storageHeader">The storage header.</param>
        </member>
        <member name="M:Stride.Graphics.Data.ITexturesStreamingProvider.UnregisterTexture(Stride.Graphics.Texture)">
            <summary>
            Unregisters the texture.
            </summary>
            <param name="obj">The texture object.</param>
        </member>
        <member name="M:Stride.Graphics.Data.TextureContentSerializer.Serialize(Stride.Core.Serialization.Contents.ContentSerializerContext,Stride.Core.Serialization.SerializationStream,Stride.Graphics.Texture)">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Graphics.Data.TextureImageSerializer.SerializationType">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Graphics.Data.TextureImageSerializer.Serialize(Stride.Core.Serialization.Contents.ContentSerializerContext,Stride.Core.Serialization.SerializationStream,Stride.Graphics.Texture)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Graphics.Data.TextureSerializationData">
            <summary>
            Texture serialization data
            </summary>
        </member>
        <member name="F:Stride.Graphics.Data.TextureSerializationData.InitialNonStreamedMipCount">
            <summary>
            Texture with a mip map count equal or less than this won't use streaming.
            Also, those levels will be load during initial load, only lower levels will be streamed.
            </summary>
        </member>
        <member name="F:Stride.Graphics.Data.TextureSerializationData.Image">
            <summary>
            The texture image.
            </summary>
        </member>
        <member name="F:Stride.Graphics.Data.TextureSerializationData.EnableStreaming">
            <summary>
            Enables/disables texture streaming.
            </summary>
        </member>
        <member name="F:Stride.Graphics.Data.TextureSerializationData.StorageHeader">
            <summary>
            The raw bytes with a content storage header description.
            </summary>
        </member>
        <member name="M:Stride.Graphics.Data.TextureSerializationData.#ctor(Stride.Graphics.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.Data.TextureSerializationData"/> class.
            </summary>
            <param name="image">The image.</param>
        </member>
        <member name="M:Stride.Graphics.Data.TextureSerializationData.#ctor(Stride.Graphics.Image,System.Boolean,Stride.Core.Streaming.ContentStorageHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.Data.TextureSerializationData"/> class.
            </summary>
            <param name="image">The image.</param>
            <param name="enableStreaming">Enables/disables texture streaming</param>
            <param name="storageHeader">Streaming storage data</param>
        </member>
        <member name="M:Stride.Graphics.Data.TextureSerializationData.Write(Stride.Core.Serialization.SerializationStream)">
            <summary>
            Saves this instance to a stream.
            </summary>
            <param name="stream">The destination stream.</param>
        </member>
        <member name="T:Stride.Graphics.Data.TextureSerializer">
            <summary>
            Serializer for <see cref="T:Stride.Graphics.Texture"/>.
            </summary>
        </member>
        <member name="M:Stride.Graphics.Data.TextureSerializer.PreSerialize(Stride.Graphics.Texture@,Stride.Core.Serialization.ArchiveMode,Stride.Core.Serialization.SerializationStream)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Graphics.Data.TextureSerializer.Serialize(Stride.Graphics.Texture@,Stride.Core.Serialization.ArchiveMode,Stride.Core.Serialization.SerializationStream)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Graphics.DefaultCommandListLock">
            <summary>
            Used to prevent concurrent uses of CommandList against the main one.
            </summary>
        </member>
        <member name="T:Stride.Graphics.DepthStencilClearOptions">
            <summary>
            Specifies the buffer to use when calling Clear.
            </summary>
        </member>
        <member name="F:Stride.Graphics.DepthStencilClearOptions.DepthBuffer">
            <summary>
            A depth buffer.
            </summary>
        </member>
        <member name="F:Stride.Graphics.DepthStencilClearOptions.Stencil">
            <summary>
            A stencil buffer.
            </summary>
        </member>
        <member name="T:Stride.Graphics.DepthStencilStateDescription">
            <summary>
            Describes a depth stencil state.
            </summary>
        </member>
        <member name="M:Stride.Graphics.DepthStencilStateDescription.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.DepthStencilStateDescription"/> class.
            </summary>
        </member>
        <member name="F:Stride.Graphics.DepthStencilStateDescription.DepthBufferEnable">
            <summary>
            Enables or disables depth buffering. The default is true.
            </summary>
        </member>
        <member name="F:Stride.Graphics.DepthStencilStateDescription.DepthBufferFunction">
            <summary>
            Gets or sets the comparison function for the depth-buffer test. The default is CompareFunction.LessEqual
            </summary>
        </member>
        <member name="F:Stride.Graphics.DepthStencilStateDescription.DepthBufferWriteEnable">
            <summary>
            Enables or disables writing to the depth buffer. The default is true.
            </summary>
        </member>
        <member name="F:Stride.Graphics.DepthStencilStateDescription.StencilEnable">
            <summary>
            Gets or sets stencil enabling. The default is false.
            </summary>
        </member>
        <member name="F:Stride.Graphics.DepthStencilStateDescription.StencilMask">
            <summary>
            Gets or sets the mask applied to the reference value and each stencil buffer entry to determine the significant bits for the stencil test. The default mask is byte.MaxValue.
            </summary>
        </member>
        <member name="F:Stride.Graphics.DepthStencilStateDescription.StencilWriteMask">
            <summary>
            Gets or sets the write mask applied to values written into the stencil buffer. The default mask is byte.MaxValue.
            </summary>
        </member>
        <member name="F:Stride.Graphics.DepthStencilStateDescription.FrontFace">
            <summary>
            Identify how to use the results of the depth test and the stencil test for pixels whose surface normal is facing towards the camera.
            </summary>
        </member>
        <member name="F:Stride.Graphics.DepthStencilStateDescription.BackFace">
            <summary>
            Identify how to use the results of the depth test and the stencil test for pixels whose surface normal is facing away the camera.
            </summary>
        </member>
        <member name="M:Stride.Graphics.DepthStencilStateDescription.SetDefault">
            <summary>
            Sets default values for this instance.
            </summary>
        </member>
        <member name="P:Stride.Graphics.DepthStencilStateDescription.Default">
            <summary>
            Gets default values for this instance.
            </summary>
        </member>
        <member name="T:Stride.Graphics.DepthStencilStates">
            <summary>
            Known values for <see cref="T:Stride.Graphics.DepthStencilStateDescription"/>.
            </summary>
        </member>
        <member name="F:Stride.Graphics.DepthStencilStates.Default">
            <summary>
            A built-in state object with default settings for using a depth stencil buffer.
            </summary>
        </member>
        <member name="F:Stride.Graphics.DepthStencilStates.DefaultInverse">
            <summary>
            A built-in state object with default settings using greater comparison for Z.
            </summary>
        </member>
        <member name="F:Stride.Graphics.DepthStencilStates.DepthRead">
            <summary>
            A built-in state object with settings for enabling a read-only depth stencil buffer.
            </summary>
        </member>
        <member name="F:Stride.Graphics.DepthStencilStates.None">
            <summary>
            A built-in state object with settings for not using a depth stencil buffer.
            </summary>
        </member>
        <member name="P:Stride.Graphics.DepthStencilStencilOpDescription.StencilFail">
            <summary>
            Gets or sets the stencil operation to perform if the stencil test fails. The default is StencilOperation.Keep.
            </summary>
        </member>
        <member name="P:Stride.Graphics.DepthStencilStencilOpDescription.StencilDepthBufferFail">
            <summary>
            Gets or sets the stencil operation to perform if the stencil test passes and the depth-test fails. The default is StencilOperation.Keep.
            </summary>
        </member>
        <member name="P:Stride.Graphics.DepthStencilStencilOpDescription.StencilPass">
            <summary>
            Gets or sets the stencil operation to perform if the stencil test passes. The default is StencilOperation.Keep.
            </summary>
        </member>
        <member name="P:Stride.Graphics.DepthStencilStencilOpDescription.StencilFunction">
            <summary>
            Gets or sets the comparison function for the stencil test. The default is CompareFunction.Always.
            </summary>
        </member>
        <member name="T:Stride.Graphics.DescriptorPool">
            <summary>
            Storage area for <see cref="T:Stride.Graphics.DescriptorSet"/>.
            </summary>
        </member>
        <member name="T:Stride.Graphics.DescriptorSet">
            <summary>
            Contains a list descriptors (such as textures) that can be bound together to the graphics pipeline.
            </summary>
        </member>
        <member name="M:Stride.Graphics.DescriptorSet.SetValue(System.Int32,System.Object)">
            <summary>
            Sets a descriptor.
            </summary>
            <param name="slot">The slot.</param>
            <param name="value">The descriptor.</param>
        </member>
        <member name="M:Stride.Graphics.DescriptorSet.SetShaderResourceView(System.Int32,Stride.Graphics.GraphicsResource)">
            <summary>
            Sets a shader resource view descriptor.
            </summary>
            <param name="slot">The slot.</param>
            <param name="shaderResourceView">The shader resource view.</param>
        </member>
        <member name="M:Stride.Graphics.DescriptorSet.SetSamplerState(System.Int32,Stride.Graphics.SamplerState)">
            <summary>
            Sets a sampler state descriptor.
            </summary>
            <param name="slot">The slot.</param>
            <param name="samplerState">The sampler state.</param>
        </member>
        <member name="M:Stride.Graphics.DescriptorSet.SetConstantBuffer(System.Int32,Stride.Graphics.Buffer,System.Int32,System.Int32)">
            <summary>
            Sets a constant buffer view descriptor.
            </summary>
            <param name="slot">The slot.</param>
            <param name="buffer">The constant buffer.</param>
            <param name="offset">The constant buffer view start offset.</param>
            <param name="size">The constant buffer view size.</param>
        </member>
        <member name="M:Stride.Graphics.DescriptorSet.SetUnorderedAccessView(System.Int32,Stride.Graphics.GraphicsResource)">
            <summary>
            Sets an unordered access view descriptor.
            </summary>
            <param name="slot">The slot.</param>
            <param name="unorderedAccessView">The unordered access view.</param>
        </member>
        <member name="T:Stride.Graphics.DescriptorSetEntry">
            <summary>
            Used internally to store descriptor entries.
            </summary>
        </member>
        <member name="F:Stride.Graphics.DescriptorSetEntry.Offset">
            <summary>
            The offset, shared parameter for either cbuffer or unordered access view.
            Describes the cbuffer offset or the initial counter offset value for UAVs of compute shaders.
            </summary>
        </member>
        <member name="T:Stride.Graphics.DescriptorSetLayout">
            <summary>
            Defines a list of descriptor layout. This is used to allocate a <see cref="T:Stride.Graphics.DescriptorSet"/>.
            </summary>
        </member>
        <member name="T:Stride.Graphics.DescriptorSetLayoutBuilder">
            <summary>
            Helper class to build a <see cref="T:Stride.Graphics.DescriptorSetLayout"/>.
            </summary>
        </member>
        <member name="P:Stride.Graphics.DescriptorSetLayoutBuilder.Hash">
            <summary>
            Returns hash describing current state of DescriptorSet (to know if they can be shared)
            </summary>
        </member>
        <member name="M:Stride.Graphics.DescriptorSetLayoutBuilder.AddBinding(Stride.Rendering.ParameterKey,System.String,Stride.Shaders.EffectParameterClass,Stride.Shaders.EffectParameterType,Stride.Shaders.EffectParameterType,System.Int32,Stride.Graphics.SamplerState)">
            <summary>
            Gets (or creates) an entry to the DescriptorSetLayout and gets its index.
            </summary>
            <returns>The future entry index.</returns>
        </member>
        <member name="T:Stride.Graphics.DescriptorSetLayoutEntry">
            <summary>
            Used internally to store descriptor layout entries.
            </summary>
        </member>
        <member name="T:Stride.Graphics.DescriptorTypeCount">
            <summary>
            Describes how many descriptor of a specific type will need to be allocated in a <see cref="T:Stride.Graphics.DescriptorPool"/>.
            </summary>
        </member>
        <member name="T:Stride.Graphics.DeviceCreationFlags">
            <summary>
            <p>Describes parameters that are used to create a device.</p>
            </summary>
        </member>
        <member name="F:Stride.Graphics.DeviceCreationFlags.Debug">
            <summary>
            Creates a device that supports the debug layer.
            </summary>
        </member>
        <member name="F:Stride.Graphics.DeviceCreationFlags.BgraSupport">
            <summary>
            Required for Direct2D interoperability with Direct3D resource.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Stride.Graphics.DeviceCreationFlags.VideoSupport" -->
        <member name="F:Stride.Graphics.DeviceCreationFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="T:Stride.Graphics.DisplayMode">
            <summary>
            Describes the display mode.
            </summary>
        </member>
        <member name="M:Stride.Graphics.DisplayMode.#ctor(Stride.Graphics.PixelFormat,System.Int32,System.Int32,Stride.Graphics.Rational)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.DisplayMode"/> class.
            </summary>
            <param name="format">The format.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="refreshRate">The refresh rate.</param>
        </member>
        <member name="P:Stride.Graphics.DisplayMode.AspectRatio">
            <summary>
            Gets the aspect ratio used by the graphics device.
            </summary>
        </member>
        <member name="F:Stride.Graphics.DisplayMode.Format">
            <summary>
            Gets a value indicating the surface format of the display mode.
            </summary>
        </member>
        <member name="F:Stride.Graphics.DisplayMode.Width">
            <summary>
            Gets a value indicating the screen width, in pixels.
            </summary>
        </member>
        <member name="F:Stride.Graphics.DisplayMode.Height">
            <summary>
            Gets a value indicating the screen height, in pixels.
            </summary>
        </member>
        <member name="F:Stride.Graphics.DisplayMode.RefreshRate">
            <summary>
            Gets a value indicating the refresh rate
            </summary>
        </member>
        <member name="M:Stride.Graphics.DisplayMode.ToString">
            <summary>
            Retrieves a string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Stride.Graphics.GraphicsAdapter">
            <summary>
            Provides methods to retrieve and manipulate graphics adapters. This is the equivalent to <see cref="T:SharpDX.DXGI.Adapter1"/>.
            </summary>
            <msdn-id>ff471329</msdn-id>
            <unmanaged>IDXGIAdapter1</unmanaged>
            <unmanaged-short>IDXGIAdapter1</unmanaged-short>
            <summary>
            This class represents a graphics adapter.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GraphicsAdapter.#ctor(SharpDX.DXGI.Factory1,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.GraphicsAdapter" /> class.
            </summary>
            <param name="defaultFactory">The default factory.</param>
            <param name="adapterOrdinal">The adapter ordinal.</param>
        </member>
        <member name="P:Stride.Graphics.GraphicsAdapter.Description">
            <summary>
            Gets the description of this adapter.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Stride.Graphics.GraphicsAdapter.VendorId">
            <summary>
            Gets or sets the vendor identifier.
            </summary>
            <value>
            The vendor identifier.
            </value>
        </member>
        <member name="P:Stride.Graphics.GraphicsAdapter.IsDefaultAdapter">
            <summary>
            Determines if this instance of GraphicsAdapter is the default adapter.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GraphicsAdapter.IsProfileSupported(Stride.Graphics.GraphicsProfile)">
            <summary>
            Tests to see if the adapter supports the requested profile.
            </summary>
            <param name="graphicsProfile">The graphics profile.</param>
            <returns>true if the profile is supported</returns>
        </member>
        <member name="P:Stride.Graphics.GraphicsAdapter.Outputs">
            <summary>
            Gets the <see cref="T:Stride.Graphics.GraphicsOutput"/> attached to this adapter
            </summary>
            <returns>The <see cref="T:Stride.Graphics.GraphicsOutput"/> attached to this adapter.</returns>
        </member>
        <member name="M:Stride.Graphics.GraphicsAdapter.ToString">
            <summary>
            Return the description of this adapter
            </summary>
            <returns></returns>
        </member>
        <member name="P:Stride.Graphics.GraphicsAdapter.AdapterUid">
            <summary>
            The unique id in the form of string of this device
            </summary>
        </member>
        <member name="T:Stride.Graphics.GraphicsAdapterFactory">
            <summary>
            Factory for <see cref="T:Stride.Graphics.GraphicsAdapter"/>.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GraphicsAdapterFactory.InitializeInternal">
            <summary>
            Initializes all adapters with the specified factory.
            </summary>
        </member>
        <member name="P:Stride.Graphics.GraphicsAdapterFactory.Factory">
            <summary>
            Gets the <see cref="T:SharpDX.DXGI.Factory1"/> used by all GraphicsAdapter.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GraphicsAdapterFactory.Initialize">
            <summary>
            Initializes the GraphicsAdapter. On Desktop and WinRT, this is done statically.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GraphicsAdapterFactory.Reset">
            <summary>
            Perform a <see cref="M:Stride.Graphics.GraphicsAdapterFactory.Dispose"/> and <see cref="M:Stride.Graphics.GraphicsAdapterFactory.Initialize"/> to re-initialize all adapters informations.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GraphicsAdapterFactory.Dispose">
            <summary>
            Dispose all statically cached value by this instance.
            </summary>
        </member>
        <member name="P:Stride.Graphics.GraphicsAdapterFactory.Adapters">
            <summary>
            Collection of available adapters on the system.
            </summary>
        </member>
        <member name="P:Stride.Graphics.GraphicsAdapterFactory.Default">
            <summary>
            Gets the default adapter. This property can be <c>null</c>.
            </summary>
        </member>
        <member name="T:Stride.Graphics.GraphicsDevice">
            <summary>
            Used for GPU resources creation (buffers, textures, states, shaders), and <see cref="T:Stride.Graphics.CommandList"/> manipulations.
            </summary>
        </member>
        <member name="P:Stride.Graphics.GraphicsDevice.TimestampFrequency">
            <summary>
            The tick frquency of timestamp queries in Hertz.
            </summary>
        </member>
        <member name="P:Stride.Graphics.GraphicsDevice.GraphicsDeviceStatus">
            <summary>
                Gets the status of this device.
            </summary>
            <value>The graphics device status.</value>
        </member>
        <member name="P:Stride.Graphics.GraphicsDevice.NativeDevice">
            <summary>
                Gets the native device.
            </summary>
            <value>The native device.</value>
        </member>
        <member name="P:Stride.Graphics.GraphicsDevice.NativeDeviceContext">
            <summary>
            Gets the native device context.
            </summary>
            <value>The native device context.</value>
        </member>
        <member name="M:Stride.Graphics.GraphicsDevice.Begin">
            <summary>
                Marks context as active on the current thread.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GraphicsDevice.EnableProfile(System.Boolean)">
            <summary>
            Enables profiling.
            </summary>
            <param name="enabledFlag">if set to <c>true</c> [enabled flag].</param>
        </member>
        <member name="M:Stride.Graphics.GraphicsDevice.End">
            <summary>
                Unmarks context as active on the current thread.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GraphicsDevice.ExecuteCommandList(Stride.Graphics.CompiledCommandList)">
            <summary>
            Executes a deferred command list.
            </summary>
            <param name="commandList">The deferred command list.</param>
        </member>
        <member name="M:Stride.Graphics.GraphicsDevice.ExecuteCommandLists(System.Int32,Stride.Graphics.CompiledCommandList[])">
            <summary>
            Executes multiple deferred command lists.
            </summary>
            <param name="commandLists">The deferred command lists.</param>
        </member>
        <member name="M:Stride.Graphics.GraphicsDevice.InitializePlatformDevice(Stride.Graphics.GraphicsProfile[],Stride.Graphics.DeviceCreationFlags,System.Object)">
            <summary>
                Initializes the specified device.
            </summary>
            <param name="graphicsProfiles">The graphics profiles.</param>
            <param name="deviceCreationFlags">The device creation flags.</param>
            <param name="windowHandle">The window handle.</param>
        </member>
        <member name="F:Stride.Graphics.GraphicsDevice.Features">
            <summary>
                Gets the features supported by this graphics device.
            </summary>
        </member>
        <member name="P:Stride.Graphics.GraphicsDevice.BuffersMemory">
            <summary>
            Gets the GPU memory currently allocated to buffers in bytes.
            </summary>
        </member>
        <member name="P:Stride.Graphics.GraphicsDevice.TextureMemory">
            <summary>
            Gets the GPU memory currently allocated to texture in bytes.
            </summary>
        </member>
        <member name="P:Stride.Graphics.GraphicsDevice.Platform">
            <summary>
            Gets the type of the platform that graphics device is using.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GraphicsDevice.#ctor(Stride.Graphics.GraphicsAdapter,Stride.Graphics.GraphicsProfile[],Stride.Graphics.DeviceCreationFlags,Stride.Graphics.WindowHandle)">
            <summary>
                Initializes a new instance of the <see cref="T:Stride.Graphics.GraphicsDevice" /> class.
            </summary>
            <param name="adapter">The graphics adapter.</param>
            <param name="profile">The graphics profile.</param>
            <param name="deviceCreationFlags">The device creation flags.</param>
            <param name="windowHandle">The window handle.</param>
        </member>
        <member name="E:Stride.Graphics.GraphicsDevice.Disposing">
            <summary>
            Occurs while this component is disposing and before it is disposed.
            </summary>
        </member>
        <member name="T:Stride.Graphics.GraphicsDevice.CreateSharedData`1">
            <summary>
                A delegate called to create shareable data. See remarks.
            </summary>
            <typeparam name="T">Type of the data to create.</typeparam>
            <returns>A new instance of the data to share.</returns>
            <remarks>
                Because this method is being called from a lock region, this method should not be time consuming.
            </remarks>
        </member>
        <member name="P:Stride.Graphics.GraphicsDevice.Adapter">
            <summary>
                Gets the adapter this instance is attached to.
            </summary>
        </member>
        <member name="P:Stride.Graphics.GraphicsDevice.IsDebugMode">
            <summary>
                Gets a value indicating whether this instance is in debug mode.
            </summary>
            <value>
                <c>true</c> if this instance is debug; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Stride.Graphics.GraphicsDevice.IsDeferred">
            <summary>
                Indicates wether this device allows for concurrent building and deferred submission of CommandLists
            </summary>
            <value>
                <c>true</c> if this instance is deferred; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Stride.Graphics.GraphicsDevice.IsProfilingSupported">
            <summary>
                Gets a value indicating whether this instance supports GPU markers and profiling.
            </summary>
        </member>
        <member name="P:Stride.Graphics.GraphicsDevice.ColorSpace">
            <summary>
            Gets the default color space.
            </summary>
            <value>The default color space.</value>
        </member>
        <member name="P:Stride.Graphics.GraphicsDevice.Presenter">
            <summary>
                Gets or sets the current presenter used to display the frame.
            </summary>
            <value>The current presenter.</value>
        </member>
        <member name="P:Stride.Graphics.GraphicsDevice.SamplerStates">
            <summary>
                Gets the <see cref="T:Stride.Graphics.SamplerStateFactory" /> factory.
            </summary>
            <value>
                The <see cref="T:Stride.Graphics.SamplerStateFactory" /> factory.
            </value>
        </member>
        <member name="P:Stride.Graphics.GraphicsDevice.ThreadIndex">
            <summary>
            Gets the index of the thread.
            </summary>
            <value>The index of the thread.</value>
        </member>
        <member name="P:Stride.Graphics.GraphicsDevice.ShaderProfile">
            <summary>
            Gets the shader profile.
            </summary>
            <value>The shader profile.</value>
        </member>
        <member name="M:Stride.Graphics.GraphicsDevice.New(Stride.Graphics.DeviceCreationFlags,Stride.Graphics.GraphicsProfile[])">
            <summary>
                Initializes a new instance of the <see cref="T:Stride.Graphics.GraphicsDevice" /> class.
            </summary>
            <param name="creationFlags">The creation flags.</param>
            <param name="graphicsProfiles">The graphics profiles.</param>
            <returns>
                An instance of <see cref="T:Stride.Graphics.GraphicsDevice" />
            </returns>
        </member>
        <member name="M:Stride.Graphics.GraphicsDevice.New(Stride.Graphics.GraphicsAdapter,Stride.Graphics.DeviceCreationFlags,Stride.Graphics.GraphicsProfile[])">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.GraphicsDevice" /> class.
            </summary>
            <param name="adapter">The adapter.</param>
            <param name="creationFlags">The creation flags.</param>
            <param name="graphicsProfiles">The graphics profiles.</param>
            <returns>An instance of <see cref="T:Stride.Graphics.GraphicsDevice" /></returns>
        </member>
        <member name="M:Stride.Graphics.GraphicsDevice.New(Stride.Graphics.GraphicsAdapter,Stride.Graphics.DeviceCreationFlags,Stride.Graphics.WindowHandle,Stride.Graphics.GraphicsProfile[])">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.GraphicsDevice" /> class.
            </summary>
            <param name="adapter">The adapter.</param>
            <param name="creationFlags">The creation flags.</param>
            <param name="windowHandle">The window handle.</param>
            <param name="graphicsProfiles">The graphics profiles.</param>
            <returns>An instance of <see cref="T:Stride.Graphics.GraphicsDevice" /></returns>
        </member>
        <member name="M:Stride.Graphics.GraphicsDevice.GetOrCreateSharedData``1(System.Object,Stride.Graphics.GraphicsDevice.CreateSharedData{``0})">
            <summary>
                Gets a shared data for this device context with a delegate to create the shared data if it is not present.
            </summary>
            <typeparam name="T">Type of the shared data to get/create.</typeparam>
            <param name="type">Type of the data to share.</param>
            <param name="key">The key of the shared data.</param>
            <param name="sharedDataCreator">The shared data creator.</param>
            <returns>
                An instance of the shared data. The shared data will be disposed by this <see cref="T:Stride.Graphics.GraphicsDevice" /> instance.
            </returns>
        </member>
        <member name="T:Stride.Graphics.GraphicsDeviceFeatures">
            <summary>
            Features supported by a <see cref="T:Stride.Graphics.GraphicsDevice"/>.
            </summary>
            <remarks>
            This class gives also features for a particular format, using the operator this[dxgiFormat] on this structure.
            </remarks>
            <summary>
            Features supported by a <see cref="T:Stride.Graphics.GraphicsDevice"/>.
            </summary>
            <remarks>
            This class gives also features for a particular format, using the operator this[dxgiFormat] on this structure.
            </remarks>
        </member>
        <member name="M:Stride.Graphics.GraphicsDeviceFeatures.GetMaximumMultisampleCount(SharpDX.Direct3D11.Device,SharpDX.DXGI.Format)">
            <summary>
            Gets the maximum multisample count for a particular <see cref="T:Stride.Graphics.PixelFormat" />.
            </summary>
            <param name="device">The device.</param>
            <param name="pixelFormat">The pixelFormat.</param>
            <returns>The maximum multisample count for this pixel pixelFormat</returns>
        </member>
        <member name="F:Stride.Graphics.GraphicsDeviceFeatures.RequestedProfile">
            <summary>
            Features level of the current device.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsDeviceFeatures.CurrentProfile">
            <summary>
            Features level of the current device.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsDeviceFeatures.HasComputeShaders">
            <summary>
            Boolean indicating if this device supports compute shaders, unordered access on structured buffers and raw structured buffers.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsDeviceFeatures.HasDoublePrecision">
            <summary>
            Boolean indicating if this device supports shaders double precision calculations.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsDeviceFeatures.HasMultiThreadingConcurrentResources">
            <summary>
            Boolean indicating if this device supports concurrent resources in multithreading scenarios.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsDeviceFeatures.HasDriverCommandLists">
            <summary>
            Boolean indicating if this device supports command lists in multithreading scenarios.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsDeviceFeatures.HasSRgb">
            <summary>
            Boolean indicating if this device supports SRGB texture and render targets.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsDeviceFeatures.HasDepthAsSRV">
            <summary>
            Boolean indicating if the Depth buffer can also be used as ShaderResourceView for some passes.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsDeviceFeatures.HasDepthAsReadOnlyRT">
            <summary>
            Boolean indicating if the Depth buffer can directly be used as a read only RenderTarget
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsDeviceFeatures.HasMultisampleDepthAsSRV">
            <summary>
            Boolean indicating if the multi-sampled Depth buffer can directly be used as a ShaderResourceView
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsDeviceFeatures.HasResourceRenaming">
            <summary>
            Boolean indicating if the graphics API supports resource renaming (with either <see cref="F:Stride.Graphics.MapMode.WriteDiscard"/> or <see cref="M:Stride.Graphics.CommandList.UpdateSubresource(Stride.Graphics.GraphicsResource,System.Int32,Stride.Graphics.DataBox)"/> with full size).
            </summary>
        </member>
        <member name="P:Stride.Graphics.GraphicsDeviceFeatures.Item(Stride.Graphics.PixelFormat)">
            <summary>
            Gets the <see cref="T:Stride.Graphics.GraphicsDeviceFeatures.FeaturesPerFormat" /> for the specified <see cref="T:SharpDX.DXGI.Format" />.
            </summary>
            <param name="dxgiFormat">The dxgi format.</param>
            <returns>Features for the specific format.</returns>
        </member>
        <member name="T:Stride.Graphics.GraphicsDeviceFeatures.FeaturesPerFormat">
            <summary>
            The features exposed for a particular format.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsDeviceFeatures.FeaturesPerFormat.Format">
            <summary>
            The <see cref="T:SharpDX.DXGI.Format"/>.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsDeviceFeatures.FeaturesPerFormat.MultisampleCountMax">
            <summary>
            Gets the maximum multisample count for a particular <see cref="T:Stride.Graphics.PixelFormat"/>.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsDeviceFeatures.FeaturesPerFormat.FormatSupport">
            <summary>
            Support of a given format on the installed video device.
            </summary>
        </member>
        <member name="T:Stride.Graphics.GraphicsOutput">
            <summary>
            Provides methods to retrieve and manipulate an graphics output (a monitor), it is equivalent to <see cref="T:SharpDX.DXGI.Output"/>.
            </summary>
            <msdn-id>bb174546</msdn-id>
            <unmanaged>IDXGIOutput</unmanaged>
            <unmanaged-short>IDXGIOutput</unmanaged-short>
        </member>
        <member name="M:Stride.Graphics.GraphicsOutput.#ctor(Stride.Graphics.GraphicsAdapter,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Stride.Graphics.GraphicsOutput" />.
            </summary>
            <param name="adapter">The adapter.</param>
            <param name="outputIndex">Index of the output.</param>
            <exception cref="T:System.ArgumentNullException">output</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">output</exception>
        </member>
        <member name="M:Stride.Graphics.GraphicsOutput.FindClosestMatchingDisplayMode(Stride.Graphics.GraphicsProfile[],Stride.Graphics.DisplayMode)">
            <summary>
            Find the display mode that most closely matches the requested display mode.
            </summary>
            <param name="targetProfiles">The target profile, as available formats are different depending on the feature level..</param>
            <param name="mode">The mode.</param>
            <returns>Returns the closes display mode.</returns>
            <unmanaged>HRESULT IDXGIOutput::FindClosestMatchingMode([In] const DXGI_MODE_DESC* pModeToMatch,[Out] DXGI_MODE_DESC* pClosestMatch,[In, Optional] IUnknown* pConcernedDevice)</unmanaged>
            <remarks>Direct3D devices require UNORM formats. This method finds the closest matching available display mode to the mode specified in pModeToMatch. Similarly ranked fields (i.e. all specified, or all unspecified, etc) are resolved in the following order.  ScanlineOrdering Scaling Format Resolution RefreshRate  When determining the closest value for a particular field, previously matched fields are used to filter the display mode list choices, and  other fields are ignored. For example, when matching Resolution, the display mode list will have already been filtered by a certain ScanlineOrdering,  Scaling, and Format, while RefreshRate is ignored. This ordering doesn't define the absolute ordering for every usage scenario of FindClosestMatchingMode, because  the application can choose some values initially, effectively changing the order that fields are chosen. Fields of the display mode are matched one at a time, generally in a specified order. If a field is unspecified, FindClosestMatchingMode gravitates toward the values for the desktop related to this output.  If this output is not part of the desktop, then the default desktop output is used to find values. If an application uses a fully unspecified  display mode, FindClosestMatchingMode will typically return a display mode that matches the desktop settings for this output.   Unspecified fields are lower priority than specified fields and will be resolved later than specified fields.</remarks>
        </member>
        <member name="P:Stride.Graphics.GraphicsOutput.MonitorHandle">
            <summary>
            Retrieves the handle of the monitor associated with this <see cref="T:Stride.Graphics.GraphicsOutput"/>.
            </summary>
            <msdn-id>bb173068</msdn-id>
            <unmanaged>HMONITOR Monitor</unmanaged>
            <unmanaged-short>HMONITOR Monitor</unmanaged-short>
        </member>
        <member name="P:Stride.Graphics.GraphicsOutput.NativeOutput">
            <summary>
            Gets the native output.
            </summary>
            <value>The native output.</value>
        </member>
        <member name="M:Stride.Graphics.GraphicsOutput.InitializeSupportedDisplayModes">
            <summary>
            Enumerates all available display modes for this output and stores them in <see cref="P:Stride.Graphics.GraphicsOutput.SupportedDisplayModes"/>.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GraphicsOutput.InitializeCurrentDisplayMode">
            <summary>
            Initializes <see cref="P:Stride.Graphics.GraphicsOutput.CurrentDisplayMode"/> with the most appropiate mode from <see cref="P:Stride.Graphics.GraphicsOutput.SupportedDisplayModes"/>.
            </summary>
            <remarks>It checks first for a mode with <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm"/>,
            if it is not found - it checks for <see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/>.</remarks>
        </member>
        <member name="M:Stride.Graphics.GraphicsOutput.TryFindMatchingDisplayMode(SharpDX.DXGI.Format)">
            <summary>
            Tries to find a display mode that has the same size as the current <see cref="T:SharpDX.DXGI.OutputDescription"/> associated with this instance
            of the specified format.
            </summary>
            <param name="format">The format to match with.</param>
            <returns>A matched <see cref="T:Stride.Graphics.DisplayMode"/> or null if nothing is found.</returns>
        </member>
        <member name="M:Stride.Graphics.GraphicsOutput.#ctor">
            <summary>
            Default constructor to initialize fields that are not explicitly set to avoid warnings at compile time.
            </summary>
        </member>
        <member name="P:Stride.Graphics.GraphicsOutput.CurrentDisplayMode">
            <summary>
            Gets the current display mode.
            </summary>
            <value>The current display mode.</value>
        </member>
        <member name="P:Stride.Graphics.GraphicsOutput.SupportedDisplayModes">
            <summary>
            Returns a collection of supported display modes for this <see cref="T:Stride.Graphics.GraphicsOutput"/>.
            </summary>
        </member>
        <member name="P:Stride.Graphics.GraphicsOutput.DesktopBounds">
            <summary>
            Gets the desktop bounds of the current output.
            </summary>
        </member>
        <member name="P:Stride.Graphics.GraphicsOutput.Adapter">
            <summary>
            Gets the adapter this output is attached.
            </summary>
            <value>The adapter.</value>
        </member>
        <member name="M:Stride.Graphics.GraphicsProfileHelper.ToFeatureLevel(Stride.Graphics.GraphicsProfile[])">
            <summary>
            Returns a GraphicsProfile from a FeatureLevel.
            </summary>
            <returns>associated GraphicsProfile</returns>
        </member>
        <member name="M:Stride.Graphics.GraphicsProfileHelper.ToFeatureLevel(Stride.Graphics.GraphicsProfile)">
            <summary>
            Returns a GraphicsProfile from a FeatureLevel.
            </summary>
            <returns>associated GraphicsProfile</returns>
        </member>
        <member name="M:Stride.Graphics.GraphicsProfileHelper.FromFeatureLevel(SharpDX.Direct3D.FeatureLevel)">
            <summary>
            Returns a GraphicsProfile from a FeatureLevel.
            </summary>
            <param name="level">The level.</param>
            <returns>associated GraphicsProfile</returns>
        </member>
        <member name="T:Stride.Graphics.GraphicsResource">
            <summary>
            GraphicsResource class
            </summary>
            <summary>
            GraphicsResource abstract class
            </summary>
        </member>
        <member name="P:Stride.Graphics.GraphicsResource.NativeShaderResourceView">
            <summary>
            Gets or sets the ShaderResourceView attached to this GraphicsResource.
            Note that only Texture, Texture3D, RenderTarget2D, RenderTarget3D, DepthStencil are using this ShaderResourceView
            </summary>
            <value>The device child.</value>
        </member>
        <member name="P:Stride.Graphics.GraphicsResource.NativeUnorderedAccessView">
            <summary>
            Gets or sets the UnorderedAccessView attached to this GraphicsResource.
            </summary>
            <value>The device child.</value>
        </member>
        <member name="T:Stride.Graphics.GraphicsResourceBase">
            <summary>
            GraphicsResource class
            </summary>
        </member>
        <member name="P:Stride.Graphics.GraphicsResourceBase.NativeDeviceChild">
            <summary>
            Gets or sets the device child.
            </summary>
            <value>The device child.</value>
        </member>
        <member name="M:Stride.Graphics.GraphicsResourceBase.SetDebugName(Stride.Graphics.GraphicsDevice,SharpDX.Direct3D11.DeviceChild,System.String)">
            <summary>
            Associates the private data to the device child, useful to get the name in PIX debugger.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GraphicsResourceBase.OnDestroyed">
            <summary>
            Called when graphics device has been detected to be internally destroyed.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GraphicsResourceBase.OnRecreate">
            <summary>
            Called when graphics device has been recreated.
            </summary>
            <returns>True if item transitioned to a <see cref="F:Stride.Graphics.GraphicsResourceLifetimeState.Active"/> state.</returns>
        </member>
        <member name="M:Stride.Graphics.GraphicsResourceBase.GetCpuAccessFlagsFromUsage(Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Gets the cpu access flags from resource usage.
            </summary>
            <param name="usage">The usage.</param>
            <returns></returns>
        </member>
        <member name="P:Stride.Graphics.GraphicsResourceBase.GraphicsDevice">
            <summary>
            Gets the graphics device attached to this instance.
            </summary>
            <value>The graphics device.</value>
        </member>
        <member name="E:Stride.Graphics.GraphicsResourceBase.Destroyed">
            <summary>
            Raised when the internal graphics resource gets destroyed. 
            This event is useful when user allocated handles associated with the internal resource need to be released.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GraphicsResourceBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.GraphicsResourceBase"/> class.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GraphicsResourceBase.#ctor(Stride.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.GraphicsResourceBase"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Stride.Graphics.GraphicsResourceBase.#ctor(Stride.Graphics.GraphicsDevice,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.GraphicsResourceBase"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Stride.Graphics.GraphicsResourceBase.OnPause">
            <summary>
            Called when graphics device is inactive (put in the background and rendering is paused).
            It should voluntarily release objects that can be easily recreated, such as FBO and dynamic buffers.
            </summary>
            <returns>True if item transitioned to a <see cref="F:Stride.Graphics.GraphicsResourceLifetimeState.Paused"/> state.</returns>
        </member>
        <member name="M:Stride.Graphics.GraphicsResourceBase.OnResume">
            <summary>
            Called when graphics device is resumed from either paused or destroyed state.
            If possible, resource should be recreated.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GraphicsResourceBase.Destroy">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Graphics.QueryPool">
            <summary>
            A pool holding queries with a specific <see cref="P:Stride.Graphics.QueryPool.QueryType"/>.
            </summary>
        </member>
        <member name="M:Stride.Graphics.QueryPool.OnDestroyed">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Graphics.QueryPool.QueryType">
            <summary>
            <see cref="P:Stride.Graphics.QueryPool.QueryType"/> for this pool.
            </summary>
        </member>
        <member name="P:Stride.Graphics.QueryPool.QueryCount">
            <summary>
            Capacity of this pool.
            </summary>
        </member>
        <member name="M:Stride.Graphics.QueryPool.New(Stride.Graphics.GraphicsDevice,Stride.Graphics.QueryType,System.Int32)">
            <summary>
            Creates a new <see cref="T:Stride.Graphics.QueryPool" /> instance.
            </summary>
            <param name="graphicsDevice">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="queryType">The <see cref="P:Stride.Graphics.QueryPool.QueryType"/> of the pool.</param>
            <param name="queryCount">The capacity of the pool.</param>
            <returns>An instance of a new <see cref="T:Stride.Graphics.QueryPool" /></returns>
        </member>
        <member name="M:Stride.Graphics.QueryPool.OnRecreate">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Graphics.Rational">
            <summary>
            <p>Represents a rational number.</p>
            </summary>
            <remarks>
            <p>The <strong><see cref="T:SharpDX.DXGI.Rational"/></strong> structure operates under the following rules:</p><ul> <li>0/0 is legal and will be interpreted as 0/1.</li> <li>0/anything is interpreted as zero.</li> <li>If you are representing a whole number, the denominator should be 1.</li> </ul>
            </remarks>
        </member>
        <member name="M:Stride.Graphics.Rational.FromSharpDX(SharpDX.DXGI.Rational)">
            <summary>
            Converts from SharpDX representation.
            </summary>
            <param name="rational">The rational.</param>
            <returns>Rational.</returns>
        </member>
        <member name="M:Stride.Graphics.Rational.ToSharpDX">
            <summary>
            Converts to SharpDX representation.
            </summary>
            <returns>SharpDX.DXGI.Rational.</returns>
        </member>
        <member name="F:Stride.Graphics.Rational.Numerator">
            <summary>
            <dd> <p>An unsigned integer value representing the top of the rational number.</p> </dd>
            </summary>
        </member>
        <member name="F:Stride.Graphics.Rational.Denominator">
            <summary>
            <dd> <p>An unsigned integer value representing the bottom of the rational number.</p> </dd>
            </summary>
        </member>
        <member name="T:Stride.Graphics.SamplerState">
            <summary>
            Describes a sampler state used for texture sampling.
            </summary>
        </member>
        <member name="M:Stride.Graphics.SamplerState.#ctor(Stride.Graphics.GraphicsDevice,Stride.Graphics.SamplerStateDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.SamplerState"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="name">The name.</param>
            <param name="samplerStateDescription">The sampler state description.</param>
        </member>
        <member name="M:Stride.Graphics.SamplerState.OnRecreate">
            <inheritdoc/>
        </member>
        <member name="F:Stride.Graphics.SamplerState.Description">
            <summary>
            Gets the sampler state description.
            </summary>
        </member>
        <member name="M:Stride.Graphics.SamplerState.NewFake(Stride.Graphics.SamplerStateDescription)">
            <summary>
            Create a new fake sampler state for serialization.
            </summary>
            <param name="description">The description of the sampler state</param>
            <returns>The fake sampler state</returns>
        </member>
        <member name="M:Stride.Graphics.SharpDXInterop.GetNativeDevice(Stride.Graphics.GraphicsDevice)">
            <summary>
            Gets the native device (DX11/DX12)
            </summary>
            <param name="device">The Stride GraphicsDevice</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Graphics.SharpDXInterop.GetNativeDeviceContext(Stride.Graphics.GraphicsDevice)">
            <summary>
            Gets the native device context (DX11)
            </summary>
            <param name="device">The Stride GraphicsDevice</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Graphics.SharpDXInterop.GetNativeCommandQueue(Stride.Graphics.GraphicsDevice)">
            <summary>
            Gets the native command queue (DX12 only)
            </summary>
            <param name="device">The Stride GraphicsDevice</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Graphics.SharpDXInterop.GetNativeResource(Stride.Graphics.GraphicsResource)">
            <summary>
            Gets the DX11 native resource handle
            </summary>
            <param name="resource">The Stride GraphicsResourceBase</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Graphics.SharpDXInterop.CreateTextureFromNative(Stride.Graphics.GraphicsDevice,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Creates a Texture from a DirectX11 native texture
            This method internally will call AddReference on the dxTexture2D texture.
            </summary>
            <param name="device">The GraphicsDevice in use</param>
            <param name="dxTexture2D">The DX11 texture</param>
            <param name="takeOwnership">If false AddRef will be called on the texture, if true will not, effectively taking ownership</param>
            <param name="isSRgb">Set the format to SRgb</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Graphics.SharpDXInterop.GetNativeDeviceImpl(Stride.Graphics.GraphicsDevice)">
            <summary>
            Gets the DX11 native device
            </summary>
            <param name="device">The Stride GraphicsDevice</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Graphics.SharpDXInterop.GetNativeResourceImpl(Stride.Graphics.GraphicsResource)">
            <summary>
            Gets the DX11 native resource handle
            </summary>
            <param name="resource">The Stride GraphicsResourceBase</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Graphics.SharpDXInterop.CreateTextureFromNativeImpl(Stride.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture2D,System.Boolean,System.Boolean)">
            <summary>
            Creates a Texture from a DirectX11 native texture
            This method internally will call AddReference on the dxTexture2D texture.
            </summary>
            <param name="device">The GraphicsDevice in use</param>
            <param name="dxTexture2D">The DX11 texture</param>
            <param name="takeOwnership">If false AddRef will be called on the texture, if true will not, effectively taking ownership</param>
            <param name="isSRgb">Set the format to SRgb</param>
            <returns></returns>
        </member>
        <member name="T:Stride.Graphics.SwapChainGraphicsPresenter">
            <summary>
            Graphics presenter for SwapChain.
            </summary>
        </member>
        <member name="M:Stride.Graphics.SwapChainGraphicsPresenter.DestroyChildrenTextures(Stride.Graphics.Texture)">
            <summary>
            Calls <see cref="M:Stride.Graphics.Texture.OnDestroyed"/> for all children of the specified texture
            </summary>
            <param name="parentTexture">Specified parent texture</param>
            <returns>A list of the children textures which were destroyed</returns>
        </member>
        <member name="M:Stride.Graphics.SwapChainGraphicsPresenter.CreateSwapChainForWindows">
            <summary>
            Create the SwapChain on Windows.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Stride.Graphics.Texture">
            <summary>
            Class used for all Textures (1D, 2D, 3D, DepthStencil, RenderTargets...etc.)
            </summary>
        </member>
        <member name="P:Stride.Graphics.Texture.NativeRenderTargetView">
            <summary>
            Gets the RenderTargetView attached to this GraphicsResource.
            Note that only Texture, Texture3D, RenderTarget2D, RenderTarget3D, DepthStencil are using this ShaderResourceView
            </summary>
            <value>The device child.</value>
        </member>
        <member name="M:Stride.Graphics.Texture.InitializeFromImpl(SharpDX.Direct3D11.Texture2D,System.Boolean)">
            <summary>
            Initializes from a native SharpDX.Texture
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:Stride.Graphics.Texture.GetShaderResourceView(Stride.Graphics.ViewType,System.Int32,System.Int32)">
            <summary>
            Gets a specific <see cref="T:SharpDX.Direct3D11.ShaderResourceView" /> from this texture.
            </summary>
            <param name="viewType">Type of the view slice.</param>
            <param name="arrayOrDepthSlice">The texture array slice index.</param>
            <param name="mipIndex">The mip map slice index.</param>
            <returns>An <see cref="T:SharpDX.Direct3D11.ShaderResourceView" /></returns>
        </member>
        <member name="M:Stride.Graphics.Texture.GetRenderTargetView(Stride.Graphics.ViewType,System.Int32,System.Int32)">
            <summary>
            Gets a specific <see cref="T:SharpDX.Direct3D11.RenderTargetView" /> from this texture.
            </summary>
            <param name="viewType">Type of the view slice.</param>
            <param name="arrayOrDepthSlice">The texture array slice index.</param>
            <param name="mipIndex">Index of the mip.</param>
            <returns>An <see cref="T:SharpDX.Direct3D11.RenderTargetView" /></returns>
            <exception cref="T:System.NotSupportedException">ViewSlice.MipBand is not supported for render targets</exception>
        </member>
        <member name="M:Stride.Graphics.Texture.GetUnorderedAccessView(Stride.Graphics.ViewType,System.Int32,System.Int32)">
            <summary>
            Gets a specific <see cref="T:SharpDX.Direct3D11.UnorderedAccessView" /> from this texture.
            </summary>
            <param name="viewType">The desired view type on the unordered resource</param>
            <param name="arrayOrDepthSlice">The texture array slice index.</param>
            <param name="mipIndex">Index of the mip.</param>
            <returns>An <see cref="T:SharpDX.Direct3D11.UnorderedAccessView" /></returns>
        </member>
        <member name="M:Stride.Graphics.Texture.CheckMipLevels(Stride.Graphics.GraphicsDevice,Stride.Graphics.TextureDescription@)">
            <summary>
            Check and modify if necessary the mipmap levels of the image (Troubles with DXT images whose resolution in less than 4x4 in DX9.x).
            </summary>
            <param name="device">The graphics device.</param>
            <param name="description">The texture description.</param>
            <returns>The updated texture description.</returns>
        </member>
        <member name="M:Stride.Graphics.Texture.CalculateMipCountFromSize(System.Int32,System.Int32)">
            <summary>
            Calculates the mip level from a specified size.
            </summary>
            <param name="size">The size.</param>
            <param name="minimumSizeLastMip">The minimum size of the last mip.</param>
            <returns>The mip level.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Value must be > 0;size</exception>
        </member>
        <member name="M:Stride.Graphics.Texture.CalculateMipCount(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the mip level from a specified width,height,depth.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="minimumSizeLastMip">The minimum size of the last mip.</param>
            <returns>The mip level.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Value must be &gt; 0;size</exception>
        </member>
        <member name="P:Stride.Graphics.Texture.Description">
            <summary>
            Common description for the original texture. See remarks.
            </summary>
            <remarks>
            This field and the properties in TextureDessciption must be considered as readonly when accessing from this instance.
            </remarks>
        </member>
        <member name="P:Stride.Graphics.Texture.ViewDescription">
            <summary>
            Gets the view description.
            </summary>
            <value>The view description.</value>
        </member>
        <member name="P:Stride.Graphics.Texture.Dimension">
            <summary>
            The dimension of a texture.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Texture.ViewWidth">
            <summary>
            The width of this texture view.
            </summary>
            <value>The width of the view.</value>
        </member>
        <member name="P:Stride.Graphics.Texture.ViewHeight">
            <summary>
            The height of this texture view.
            </summary>
            <value>The height of the view.</value>
        </member>
        <member name="P:Stride.Graphics.Texture.ViewDepth">
            <summary>
            The depth of this texture view.
            </summary>
            <value>The view depth.</value>
        </member>
        <member name="P:Stride.Graphics.Texture.ViewFormat">
            <summary>
            The format of this texture view.
            </summary>
            <value>The view format.</value>
        </member>
        <member name="P:Stride.Graphics.Texture.ViewFlags">
            <summary>
            The format of this texture view.
            </summary>
            <value>The type of the view.</value>
        </member>
        <member name="P:Stride.Graphics.Texture.ViewType">
            <summary>
            The format of this texture view.
            </summary>
            <value>The type of the view.</value>
        </member>
        <member name="P:Stride.Graphics.Texture.ViewDimension">
            <summary>
            The dimension of the texture view.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Texture.MipLevel">
            <summary>
            The miplevel index of this texture view.
            </summary>
            <value>The mip level.</value>
        </member>
        <member name="P:Stride.Graphics.Texture.ArraySlice">
            <summary>
            The array index of this texture view.
            </summary>
            <value>The array slice.</value>
        </member>
        <member name="P:Stride.Graphics.Texture.Width">
            <summary>
            The width of the texture.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Stride.Graphics.Texture.Height">
            <summary>
            The height of the texture.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Stride.Graphics.Texture.Depth">
            <summary>
            The depth of the texture.
            </summary>
            <value>The depth.</value>
        </member>
        <member name="P:Stride.Graphics.Texture.ArraySize">
            <summary>
            Number of textures in the array.
            </summary>
            <value>The size of the array.</value>
            <remarks>This field is only valid for 1D, 2D and Cube <see cref="T:Stride.Graphics.Texture" />.</remarks>
        </member>
        <member name="P:Stride.Graphics.Texture.MipLevels">
            <summary>
            The maximum number of mipmap levels in the texture.
            </summary>
            <value>The mip levels.</value>
        </member>
        <member name="P:Stride.Graphics.Texture.Format">
            <summary>
            Texture format (see <see cref="T:Stride.Graphics.PixelFormat" />)
            </summary>
            <value>The format.</value>
        </member>
        <member name="P:Stride.Graphics.Texture.MultisampleCount">
            <summary>
            Structure that specifies multisampling parameters for the texture.
            </summary>
            <value>The multi sample level.</value>
            <remarks>This field is only valid for a 2D <see cref="T:Stride.Graphics.Texture" />.</remarks>
        </member>
        <member name="P:Stride.Graphics.Texture.Usage">
            <summary>
            Value that identifies how the texture is to be read from and written to.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Texture.Flags">
            <summary>
            Texture flags.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Texture.Options">
            <summary>
            Resource options for DirectX 11 textures.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Texture.SharedHandle">
            <summary>
            The shared handle if created with TextureOption.Shared or TextureOption.SharedNthandle, IntPtr.Zero otherwise.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Texture.SharedNtHandleName">
            <summary>
            Gets the name of the shared Nt handle when created with TextureOption.SharedNthandle.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Texture.IsRenderTarget">
            <summary>
            Gets a value indicating whether this instance is a render target.
            </summary>
            <value><c>true</c> if this instance is render target; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Graphics.Texture.IsDepthStencil">
            <summary>
            Gets a value indicating whether this instance is a depth stencil.
            </summary>
            <value><c>true</c> if this instance is a depth stencil; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Graphics.Texture.IsDepthStencilReadOnly">
            <summary>
            Gets a value indicating whether this instance is a depth stencil readonly.
            </summary>
            <value><c>true</c> if this instance is a depth stencil readonly; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Graphics.Texture.IsShaderResource">
            <summary>
            Gets a value indicating whether this instance is a shader resource.
            </summary>
            <value><c>true</c> if this instance is a shader resource; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Graphics.Texture.IsUnorderedAccess">
            <summary>
            Gets a value indicating whether this instance is a shader resource.
            </summary>
            <value><c>true</c> if this instance is a shader resource; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Graphics.Texture.IsMultisample">
            <summary>
            Gets a value indicating whether this instance is a multi sample texture.
            </summary>
            <value><c>true</c> if this instance is multi sample texture; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Graphics.Texture.IsBlockCompressed">
            <summary>
            Gets a boolean indicating whether this <see cref="T:Stride.Graphics.Texture"/> is a using a block compress format (BC1, BC2, BC3, BC4, BC5, BC6H, BC7).
            </summary>
        </member>
        <member name="P:Stride.Graphics.Texture.Size">
            <summary>
            Gets the size of this texture.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Stride.Graphics.Texture.FullQualitySize">
            <summary>
            When texture streaming is activated, the size of the texture when loaded at full quality.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Texture.RowStride">
            <summary> 
            The width stride in bytes (number of bytes per row).
            </summary>
        </member>
        <member name="P:Stride.Graphics.Texture.ParentTexture">
            <summary>
            The underlying parent texture (if this is a view).
            </summary>
        </member>
        <member name="P:Stride.Graphics.Texture.SizeInBytes">
            <summary>
            Returns the total memory allocated by the texture in bytes.
            </summary>
        </member>
        <member name="M:Stride.Graphics.Texture.#ctor(Stride.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.Texture"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Stride.Graphics.Texture.ReleaseData">
            <summary>
            Releases the texture data.
            </summary>
        </member>
        <member name="M:Stride.Graphics.Texture.ToTextureView(Stride.Graphics.TextureViewDescription)">
            <summary>
            Gets a view on this texture for a particular <see cref="P:Stride.Graphics.Texture.ViewType" />, array index (or zIndex for Texture3D), and mipmap index.
            </summary>
            <param name="viewDescription">The view description.</param>
            <returns>A new texture object that is bouded to the requested view.</returns>
        </member>
        <member name="M:Stride.Graphics.Texture.GetMipMapDescription(System.Int32)">
            <summary>
            Gets the mipmap description of this instance for the specified mipmap level.
            </summary>
            <param name="mipmap">The mipmap.</param>
            <returns>A description of a particular mipmap for this texture.</returns>
        </member>
        <member name="M:Stride.Graphics.Texture.CalculateMipSize(System.Int32,System.Int32)">
            <summary>
            Calculates the size of a particular mip.
            </summary>
            <param name="size">The size.</param>
            <param name="mipLevel">The mip level.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Stride.Graphics.Texture.CalculateMipLevels(System.Int32,Stride.Graphics.MipMapCount)">
            <summary>
            Calculates the number of miplevels for a Texture 1D.
            </summary>
            <param name="width">The width of the texture.</param>
            <param name="mipLevels">A <see cref="T:Stride.Graphics.MipMapCount"/>, set to true to calculates all mipmaps, to false to calculate only 1 miplevel, or > 1 to calculate a specific amount of levels.</param>
            <returns>The number of miplevels.</returns>
        </member>
        <member name="M:Stride.Graphics.Texture.CalculateMipLevels(System.Int32,System.Int32,Stride.Graphics.MipMapCount)">
            <summary>
            Calculates the number of miplevels for a Texture 2D.
            </summary>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="mipLevels">A <see cref="T:Stride.Graphics.MipMapCount"/>, set to true to calculates all mipmaps, to false to calculate only 1 miplevel, or > 1 to calculate a specific amount of levels.</param>
            <returns>The number of miplevels.</returns>
        </member>
        <member name="M:Stride.Graphics.Texture.CalculateMipLevels(System.Int32,System.Int32,System.Int32,Stride.Graphics.MipMapCount)">
            <summary>
            Calculates the number of miplevels for a Texture 2D.
            </summary>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <param name="mipLevels">A <see cref="T:Stride.Graphics.MipMapCount"/>, set to true to calculates all mipmaps, to false to calculate only 1 miplevel, or > 1 to calculate a specific amount of levels.</param>
            <returns>The number of miplevels.</returns>
        </member>
        <member name="M:Stride.Graphics.Texture.GetSubResourceIndex(System.Int32,System.Int32)">
            <summary>
            Gets the absolute sub-resource index from the array and mip slice.
            </summary>
            <param name="arraySlice">The array slice index.</param>
            <param name="mipSlice">The mip slice index.</param>
            <returns>A value equals to arraySlice * Description.MipLevels + mipSlice.</returns>
        </member>
        <member name="M:Stride.Graphics.Texture.CalculateWidth``1(System.Int32)">
            <summary>
            Calculates the expected width of a texture using a specified type.
            </summary>
            <typeparam name="TData">The type of the T pixel data.</typeparam>
            <returns>The expected width</returns>
            <exception cref="T:System.ArgumentException">If the size is invalid</exception>
        </member>
        <member name="M:Stride.Graphics.Texture.CalculatePixelDataCount``1(System.Int32)">
            <summary>
            Calculates the number of pixel data this texture is requiring for a particular mip level.
            </summary>
            <typeparam name="TData">The type of the T pixel data.</typeparam>
            <param name="mipLevel">The mip level.</param>
            <returns>The number of pixel data.</returns>
            <remarks>This method is used to allocated a texture data buffer to hold pixel datas: var textureData = new T[ texture.CalculatePixelCount&lt;T&gt;() ] ;.</remarks>
        </member>
        <member name="M:Stride.Graphics.Texture.GetData``1(Stride.Graphics.CommandList,System.Int32,System.Int32)">
            <summary>
            Gets the content of this texture to an array of data.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="commandList">The command list.</param>
            <param name="arraySlice">The array slice index. This value must be set to 0 for Texture 3D.</param>
            <param name="mipSlice">The mip slice index.</param>
            <returns>The texture data.</returns>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:Stride.Graphics.GraphicsDevice"/>.
            This method creates internally a stagging resource, copies to it and map it to memory. Use method with explicit staging resource
            for optimal performances.</remarks>
        </member>
        <member name="M:Stride.Graphics.Texture.GetData``1(Stride.Graphics.CommandList,``0[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Copies the content of this texture to an array of data.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="commandList">The command list.</param>
            <param name="toData">The destination buffer to receive a copy of the texture datas.</param>
            <param name="arraySlice">The array slice index. This value must be set to 0 for Texture 3D.</param>
            <param name="mipSlice">The mip slice index.</param>
            <param name="doNotWait">if set to <c>true</c> this method will return immediately if the resource is still being used by the GPU for writing. Default is false</param>
            <returns><c>true</c> if data was correctly retrieved, <c>false</c> if <see cref="!:doNotWait"/> flag was true and the resource is still being used by the GPU for writing.</returns>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:Stride.Graphics.GraphicsDevice"/>.
            This method creates internally a stagging resource if this texture is not already a stagging resouce, copies to it and map it to memory. Use method with explicit staging resource
            for optimal performances.</remarks>
        </member>
        <member name="M:Stride.Graphics.Texture.GetData``1(Stride.Graphics.CommandList,Stride.Graphics.Texture,``0[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Copies the content of this texture from GPU memory to an array of data on CPU memory using a specific staging resource.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="commandList">The command list.</param>
            <param name="stagingTexture">The staging texture used to transfer the texture to.</param>
            <param name="toData">To data.</param>
            <param name="arraySlice">The array slice index. This value must be set to 0 for Texture 3D.</param>
            <param name="mipSlice">The mip slice index.</param>
            <param name="doNotWait">if set to <c>true</c> this method will return immediately if the resource is still being used by the GPU for writing. Default is false</param>
            <returns><c>true</c> if data was correctly retrieved, <c>false</c> if <see cref="!:doNotWait"/> flag was true and the resource is still being used by the GPU for writing.</returns>
            <exception cref="T:System.ArgumentException">When strides is different from optimal strides, and TData is not the same size as the pixel format, or Width * Height != toData.Length</exception>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:Stride.Graphics.GraphicsDevice"/>.
            </remarks>
        </member>
        <member name="M:Stride.Graphics.Texture.SetData``1(Stride.Graphics.CommandList,``0[],System.Int32,System.Int32,System.Nullable{Stride.Graphics.ResourceRegion})">
            <summary>
            Copies the content an array of data on CPU memory to this texture into GPU memory using the specified <see cref="T:Stride.Graphics.GraphicsDevice"/> (The graphics device could be deffered).
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="commandList">The command list.</param>
            <param name="fromData">The data to copy from.</param>
            <param name="arraySlice">The array slice index. This value must be set to 0 for Texture 3D.</param>
            <param name="mipSlice">The mip slice index.</param>
            <param name="region">Destination region</param>
            <exception cref="T:System.ArgumentException">When strides is different from optimal strides, and TData is not the same size as the pixel format, or Width * Height != toData.Length</exception>
            <remarks>
            See unmanaged documentation for usage and restrictions.
            </remarks>
        </member>
        <member name="M:Stride.Graphics.Texture.GetData(Stride.Graphics.CommandList,Stride.Graphics.Texture,Stride.Graphics.DataPointer,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Copies the content of this texture from GPU memory to a pointer on CPU memory using a specific staging resource.
            </summary>
            <param name="commandList">The command list.</param>
            <param name="stagingTexture">The staging texture used to transfer the texture to.</param>
            <param name="toData">The pointer to data in CPU memory.</param>
            <param name="arraySlice">The array slice index. This value must be set to 0 for Texture 3D.</param>
            <param name="mipSlice">The mip slice index.</param>
            <param name="doNotWait">if set to <c>true</c> this method will return immediately if the resource is still being used by the GPU for writing. Default is false</param>
            <returns><c>true</c> if data was correctly retrieved, <c>false</c> if <see cref="!:doNotWait"/> flag was true and the resource is still being used by the GPU for writing.</returns>
            <exception cref="T:System.ArgumentException">When strides is different from optimal strides, and TData is not the same size as the pixel format, or Width * Height != toData.Length</exception>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:Stride.Graphics.GraphicsDevice"/>.
            </remarks>
        </member>
        <member name="M:Stride.Graphics.Texture.SetData(Stride.Graphics.CommandList,Stride.Graphics.DataPointer,System.Int32,System.Int32,System.Nullable{Stride.Graphics.ResourceRegion})">
            <summary>
            Copies the content an data on CPU memory to this texture into GPU memory.
            </summary>
            <param name="commandList">The <see cref="T:Stride.Graphics.CommandList"/>.</param>
            <param name="fromData">The data to copy from.</param>
            <param name="arraySlice">The array slice index. This value must be set to 0 for Texture 3D.</param>
            <param name="mipSlice">The mip slice index.</param>
            <param name="region">Destination region</param>
            <exception cref="T:System.ArgumentException">When strides is different from optimal strides, and TData is not the same size as the pixel format, or Width * Height != toData.Length</exception>
            <remarks>
            See unmanaged documentation for usage and restrictions.
            </remarks>
        </member>
        <member name="M:Stride.Graphics.Texture.Clone">
            <summary>
            Makes a copy of this texture.
            </summary>
            <remarks>
            This method doesn't copy the content of the texture.
            </remarks>
            <returns>
            A copy of this texture.
            </returns>
        </member>
        <member name="M:Stride.Graphics.Texture.ToStaging">
            <summary>
            Return an equivalent staging texture CPU read-writable from this instance.
            </summary>
            <returns>The equivalent staging texture.</returns>
        </member>
        <member name="M:Stride.Graphics.Texture.Load(Stride.Graphics.GraphicsDevice,System.IO.Stream,Stride.Graphics.TextureFlags,Stride.Graphics.GraphicsResourceUsage,System.Boolean)">
            <summary>
            Loads a texture from a stream.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="stream">The stream to load the texture from.</param>
            <param name="textureFlags">True to load the texture with unordered access enabled. Default is false.</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:Stride.Graphics.GraphicsResourceUsage.Immutable"/> </param>
            <param name="loadAsSRGB">Indicate if the texture should be loaded as an sRGB texture. If false, the texture is load in its default format.</param>
            <returns>A texture</returns>
        </member>
        <member name="M:Stride.Graphics.Texture.New(Stride.Graphics.GraphicsDevice,Stride.Graphics.Image,Stride.Graphics.TextureFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Loads a texture from a stream.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice" />.</param>
            <param name="image">The image.</param>
            <param name="textureFlags">True to load the texture with unordered access enabled. Default is false.</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:Stride.Graphics.GraphicsResourceUsage.Immutable" /></param>
            <returns>A texture</returns>
            <exception cref="T:System.InvalidOperationException">Dimension not supported</exception>
        </member>
        <member name="M:Stride.Graphics.Texture.New(Stride.Graphics.GraphicsDevice,Stride.Graphics.TextureDescription,Stride.Graphics.DataBox[])">
            <summary>
            Creates a new texture with the specified generic texture description.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="description">The description.</param>
            <param name="boxes">The data boxes.</param>
            <returns>A Texture instance, either a RenderTarget or DepthStencilBuffer or Texture, depending on Binding flags.</returns>
            <exception cref="T:System.ArgumentNullException">graphicsDevice</exception>
        </member>
        <member name="M:Stride.Graphics.Texture.New(Stride.Graphics.GraphicsDevice,Stride.Graphics.TextureDescription,Stride.Graphics.TextureViewDescription,Stride.Graphics.DataBox[])">
            <summary>
            Creates a new texture with the specified generic texture description.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="description">The description.</param>
            <param name="viewDescription">The view description.</param>
            <param name="boxes">The data boxes.</param>
            <returns>A Texture instance, either a RenderTarget or DepthStencilBuffer or Texture, depending on Binding flags.</returns>
            <exception cref="T:System.ArgumentNullException">graphicsDevice</exception>
        </member>
        <member name="M:Stride.Graphics.Texture.Save(Stride.Graphics.CommandList,System.IO.Stream,Stride.Graphics.ImageFileType)">
            <summary>
            Saves this texture to a stream with a specified format.
            </summary>
            <param name="commandList">The command list.</param>
            <param name="stream">The stream.</param>
            <param name="fileType">Type of the image file.</param>
        </member>
        <member name="M:Stride.Graphics.Texture.GetDataAsImage(Stride.Graphics.CommandList)">
            <summary>
            Gets the GPU content of this texture as an <see cref="T:Stride.Graphics.Image"/> on the CPU.
            </summary>
        </member>
        <member name="M:Stride.Graphics.Texture.GetDataAsImage(Stride.Graphics.CommandList,Stride.Graphics.Texture)">
            <summary>
            Gets the GPU content of this texture to an <see cref="T:Stride.Graphics.Image"/> on the CPU.
            </summary>
            <param name="commandList">The command list.</param>
            <param name="stagingTexture">The staging texture used to temporary transfer the image from the GPU to CPU.</param>
            <exception cref="T:System.ArgumentException">If stagingTexture is not a staging texture.</exception>
        </member>
        <member name="M:Stride.Graphics.Texture.Save(Stride.Graphics.CommandList,System.IO.Stream,Stride.Graphics.Texture,Stride.Graphics.ImageFileType)">
            <summary>
            Saves this texture to a stream with a specified format.
            </summary>
            <param name="commandList">The command list.</param>
            <param name="stream">The stream.</param>
            <param name="stagingTexture">The staging texture used to temporary transfer the image from the GPU to CPU.</param>
            <param name="fileType">Type of the image file.</param>
            <exception cref="T:System.ArgumentException">If stagingTexture is not a staging texture.</exception>
        </member>
        <member name="M:Stride.Graphics.Texture.CalculateMipMapCount(Stride.Graphics.MipMapCount,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the mip map count from a requested level.
            </summary>
            <param name="requestedLevel">The requested level.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <returns>The resulting mipmap count (clamp to [1, maxMipMapCount] for this texture)</returns>
        </member>
        <member name="M:Stride.Graphics.Texture.Swap(Stride.Graphics.Texture)">
            <summary>
            Swaps the texture internal data with the other texture.
            </summary>
            <param name="other">The other texture.</param>
        </member>
        <member name="M:Stride.Graphics.Texture.New1D(Stride.Graphics.GraphicsDevice,System.Int32,Stride.Graphics.PixelFormat,Stride.Graphics.TextureFlags,System.Int32,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new 1D <see cref="T:Stride.Graphics.Texture"/> with a single mipmap.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <param name="usage">The usage.</param>
            <returns>
            A new instance of 1D <see cref="T:Stride.Graphics.Texture"/> class.
            </returns>
        </member>
        <member name="M:Stride.Graphics.Texture.New1D(Stride.Graphics.GraphicsDevice,System.Int32,Stride.Graphics.MipMapCount,Stride.Graphics.PixelFormat,Stride.Graphics.TextureFlags,System.Int32,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new 1D <see cref="T:Stride.Graphics.Texture"/>.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int >=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <param name="usage">The usage.</param>
            <returns>
            A new instance of 1D <see cref="T:Stride.Graphics.Texture"/> class.
            </returns>
        </member>
        <member name="M:Stride.Graphics.Texture.New1D``1(Stride.Graphics.GraphicsDevice,System.Int32,Stride.Graphics.PixelFormat,``0[],Stride.Graphics.TextureFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new 1D <see cref="T:Stride.Graphics.Texture" /> with a single level of mipmap.
            </summary>
            <typeparam name="T">Type of the initial data to upload to the texture</typeparam>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureData">Texture data. Size of must be equal to sizeof(Format) * width </param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.Texture" /> class.</returns>
            <remarks>
            The first dimension of mipMapTextures describes the number of array (Texture Array), second dimension is the mipmap, the third is the texture data for a particular mipmap.
            </remarks>
        </member>
        <member name="M:Stride.Graphics.Texture.New1D(Stride.Graphics.GraphicsDevice,System.Int32,Stride.Graphics.PixelFormat,System.IntPtr,Stride.Graphics.TextureFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new 1D <see cref="T:Stride.Graphics.Texture" /> with a single level of mipmap.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice" />.</param>
            <param name="width">The width.</param>
            <param name="format">Describes the format to use.</param>
            <param name="dataPtr">Data ptr</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of 1D <see cref="T:Stride.Graphics.Texture" /> class.</returns>
            <remarks>The first dimension of mipMapTextures describes the number of array (Texture Array), second dimension is the mipmap, the third is the texture data for a particular mipmap.</remarks>
        </member>
        <member name="M:Stride.Graphics.Texture.New2D(Stride.Graphics.GraphicsDevice,System.Int32,System.Int32,Stride.Graphics.PixelFormat,Stride.Graphics.TextureFlags,System.Int32,Stride.Graphics.GraphicsResourceUsage,Stride.Graphics.TextureOptions)">
            <summary>
            Creates a new 2D <see cref="T:Stride.Graphics.Texture" /> with a single mipmap.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of 2D <see cref="T:Stride.Graphics.Texture" /> class.</returns>
        </member>
        <member name="M:Stride.Graphics.Texture.New2D(Stride.Graphics.GraphicsDevice,System.Int32,System.Int32,Stride.Graphics.MipMapCount,Stride.Graphics.PixelFormat,Stride.Graphics.TextureFlags,System.Int32,Stride.Graphics.GraphicsResourceUsage,Stride.Graphics.TextureOptions)">
            <summary>
            Creates a new 2D <see cref="T:Stride.Graphics.Texture" />.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int >=1 for a particular mipmap count.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of 2D <see cref="T:Stride.Graphics.Texture" /> class.</returns>
        </member>
        <member name="M:Stride.Graphics.Texture.New2D``1(Stride.Graphics.GraphicsDevice,System.Int32,System.Int32,Stride.Graphics.PixelFormat,``0[],Stride.Graphics.TextureFlags,Stride.Graphics.GraphicsResourceUsage,Stride.Graphics.TextureOptions)">
            <summary>
            Creates a new 2D <see cref="T:Stride.Graphics.Texture" /> with a single level of mipmap.
            </summary>
            <typeparam name="T">Type of the pixel data to upload to the texture.</typeparam>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureData">The texture data for a single mipmap and a single array slice. See remarks</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of 2D <see cref="T:Stride.Graphics.Texture" /> class.</returns>
            <remarks>
            Each value in textureData is a pixel in the destination texture.
            </remarks>
        </member>
        <member name="M:Stride.Graphics.Texture.New2D(Stride.Graphics.GraphicsDevice,System.Int32,System.Int32,Stride.Graphics.MipMapCount,Stride.Graphics.PixelFormat,Stride.Graphics.DataBox[],Stride.Graphics.TextureFlags,System.Int32,Stride.Graphics.GraphicsResourceUsage,Stride.Graphics.MultisampleCount,Stride.Graphics.TextureOptions)">
            <summary>
            Creates a new 2D <see cref="T:Stride.Graphics.Texture" />.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice" />.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int &gt;=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureData">Texture datas through an array of <see cref="T:Stride.Graphics.DataBox" /></param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <param name="usage">The usage.</param>
            <param name="multisampleCount">The multisample count.</param>
            <param name="options">The options, e.g. sharing</param>
            <returns>
            A new instance of 2D <see cref="T:Stride.Graphics.Texture" /> class.
            </returns>
        </member>
        <member name="M:Stride.Graphics.Texture.New3D(Stride.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,Stride.Graphics.PixelFormat,Stride.Graphics.TextureFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new 3D <see cref="T:Stride.Graphics.Texture"/> with a single mipmap.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <returns>
            A new instance of 3D <see cref="T:Stride.Graphics.Texture"/> class.
            </returns>
        </member>
        <member name="M:Stride.Graphics.Texture.New3D(Stride.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,Stride.Graphics.MipMapCount,Stride.Graphics.PixelFormat,Stride.Graphics.TextureFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new 3D <see cref="T:Stride.Graphics.Texture"/>.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int >=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <returns>
            A new instance of 3D <see cref="T:Stride.Graphics.Texture"/> class.
            </returns>
        </member>
        <member name="M:Stride.Graphics.Texture.New3D``1(Stride.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,Stride.Graphics.PixelFormat,``0[],Stride.Graphics.TextureFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new 3D <see cref="T:Stride.Graphics.Texture" /> with texture data for the firs map.
            </summary>
            <typeparam name="T">Type of the data to upload to the texture</typeparam>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="textureData">The texture data, width * height * depth datas </param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <returns>A new instance of 3D <see cref="T:Stride.Graphics.Texture" /> class.</returns>
            <remarks>
            The first dimension of mipMapTextures describes the number of is an array ot Texture3D Array
            </remarks>
        </member>
        <member name="M:Stride.Graphics.Texture.New3D(Stride.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,Stride.Graphics.MipMapCount,Stride.Graphics.PixelFormat,Stride.Graphics.DataBox[],Stride.Graphics.TextureFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new 3D <see cref="T:Stride.Graphics.Texture"/>.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int >=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <returns>
            A new instance of 3D <see cref="T:Stride.Graphics.Texture"/> class.
            </returns>
        </member>
        <member name="M:Stride.Graphics.Texture.NewCube(Stride.Graphics.GraphicsDevice,System.Int32,Stride.Graphics.PixelFormat,Stride.Graphics.TextureFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Cube <see cref="T:Stride.Graphics.Texture" />.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice" />.</param>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">The texture flags.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of 2D <see cref="T:Stride.Graphics.Texture" /> class.</returns>
        </member>
        <member name="M:Stride.Graphics.Texture.NewCube(Stride.Graphics.GraphicsDevice,System.Int32,Stride.Graphics.MipMapCount,Stride.Graphics.PixelFormat,Stride.Graphics.TextureFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Cube <see cref="T:Stride.Graphics.Texture" />.
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice" />.</param>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int &gt;=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">The texture flags.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of 2D <see cref="T:Stride.Graphics.Texture" /> class.</returns>
        </member>
        <member name="M:Stride.Graphics.Texture.NewCube``1(Stride.Graphics.GraphicsDevice,System.Int32,Stride.Graphics.PixelFormat,``0[][],Stride.Graphics.TextureFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Cube <see cref="T:Stride.Graphics.Texture" /> from a initial data..
            </summary>
            <typeparam name="T">Type of a pixel data</typeparam>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice" />.</param>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureData">an array of 6 textures. See remarks</param>
            <param name="textureFlags">The texture flags.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of Cube <see cref="T:Stride.Graphics.Texture" /> class.</returns>
            <exception cref="T:System.ArgumentException">Invalid texture datas. First dimension must be equal to 6;textureData</exception>
            <remarks>The first dimension of mipMapTextures describes the number of array (TextureCube Array), the second is the texture data for a particular cube face.</remarks>
        </member>
        <member name="M:Stride.Graphics.Texture.NewCube(Stride.Graphics.GraphicsDevice,System.Int32,Stride.Graphics.PixelFormat,Stride.Graphics.DataBox[],Stride.Graphics.TextureFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Cube <see cref="T:Stride.Graphics.Texture" /> from a initial data..
            </summary>
            <param name="device">The <see cref="T:Stride.Graphics.GraphicsDevice" />.</param>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureData">an array of 6 textures. See remarks</param>
            <param name="textureFlags">The texture flags.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of Cube <see cref="T:Stride.Graphics.Texture" /> class.</returns>
            <exception cref="T:System.ArgumentException">Invalid texture datas. First dimension must be equal to 6;textureData</exception>
            <remarks>The first dimension of mipMapTextures describes the number of array (TextureCube Array), the second is the texture data for a particular cube face.</remarks>
        </member>
        <member name="M:Stride.Graphics.Effect.#ctor(Stride.Graphics.GraphicsDevice,Stride.Shaders.EffectBytecode)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.Effect"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="bytecode">The bytecode.</param>
            <param name="usedParameters">The parameters used to create this shader (from a sdfx).</param>
            <exception cref="T:System.ArgumentNullException">
            device
            or
            bytecode
            </exception>
        </member>
        <member name="P:Stride.Graphics.Effect.Bytecode">
            <summary>
            Gets the bytecode.
            </summary>
            <value>The bytecode.</value>
        </member>
        <member name="T:Stride.Graphics.FastTextRenderer">
            <summary>
            Renders text with a fixed size font.
            </summary>
        </member>
        <member name="M:Stride.Graphics.FastTextRenderer.Initialize(Stride.Graphics.GraphicsContext,System.Int32)">
            <summary>
            Initializes a FastTextRendering instance (create and build required ressources, ...).
            </summary>
            <param name="graphicsContext">The current GraphicsContext.</param>
        </member>
        <member name="M:Stride.Graphics.FastTextRenderer.Begin(Stride.Graphics.GraphicsContext)">
            <summary>
            Begins text rendering (swaps and maps the vertex buffer to write to).
            </summary>
            <param name="graphicsContext">The current GraphicsContext.</param>
        </member>
        <member name="M:Stride.Graphics.FastTextRenderer.DrawString(Stride.Graphics.GraphicsContext,System.String,System.Int32,System.Int32)">
            <summary>
            Adds a string to be drawn once End() is called.
            </summary>
            <param name="graphicsContext">The current GraphicsContext.</param>
            <param name="text">The text to draw. Should not be modified until call to End.</param>
            <param name="x">Position of the text on the X axis (in viewport space).</param>
            <param name="y">Position of the text on the Y axis (in viewport space).</param>
        </member>
        <member name="M:Stride.Graphics.FastTextRenderer.End(Stride.Graphics.GraphicsContext)">
            <summary>
            Begins text rendering (swaps and maps the vertex buffer to write to).
            </summary>
            <param name="graphicsContext">The current GraphicsContext.</param>
        </member>
        <member name="P:Stride.Graphics.FastTextRenderer.TextColor">
            <summary>
            Sets or gets the color to use when drawing the text.
            </summary>
        </member>
        <member name="P:Stride.Graphics.FastTextRenderer.DebugSpriteFont">
            <summary>
            Sets or gets the sprite font texture to use when drawing the text.
            The sprite font must have fixed size of <see cref="P:Stride.Graphics.FastTextRenderer.DebugSpriteWidth"/> and <see cref="P:Stride.Graphics.FastTextRenderer.DebugSpriteHeight"/>
            and each glyph should have uniform size of <see cref="P:Stride.Graphics.FastTextRenderer.GlyphWidth"/> and <see cref="P:Stride.Graphics.FastTextRenderer.GlyphHeight"/>
            </summary>
        </member>
        <member name="P:Stride.Graphics.FastTextRenderer.GlyphWidth">
            <summary>
            Width of a single glyph of font <see cref="P:Stride.Graphics.FastTextRenderer.DebugSpriteFont"/>.
            </summary>
        </member>
        <member name="P:Stride.Graphics.FastTextRenderer.GlyphHeight">
            <summary>
            Height of a single glyph of font <see cref="P:Stride.Graphics.FastTextRenderer.DebugSpriteFont"/>.
            </summary>
        </member>
        <member name="P:Stride.Graphics.FastTextRenderer.DebugSpriteWidth">
            <summary>
            Width of font Texture <see cref="P:Stride.Graphics.FastTextRenderer.DebugSpriteFont"/>.
            </summary>
        </member>
        <member name="P:Stride.Graphics.FastTextRenderer.DebugSpriteHeight">
            <summary>
            Height of font Texture <see cref="P:Stride.Graphics.FastTextRenderer.DebugSpriteFont"/>.
            </summary>
        </member>
        <member name="P:Stride.Graphics.FastTextRenderer.MatrixTransform">
            <summary>
            A general matrix transformation for the text. Should include view and projection if needed.
            </summary>
        </member>
        <member name="T:Stride.Graphics.FillMode">
            <summary>
            <p>Determines the fill mode to use when rendering triangles.</p>
            </summary>
            <remarks>
            <p>This enumeration is part of a rasterizer-state object description (see <strong><see cref="T:Stride.Graphics.RasterizerStateDescription"/></strong>).</p>
            </remarks>
        </member>
        <member name="F:Stride.Graphics.FillMode.Wireframe">
            <summary>
            <dd> <p>Draw lines connecting the vertices. Adjacent vertices are not drawn.</p> </dd>
            </summary>
        </member>
        <member name="F:Stride.Graphics.FillMode.Solid">
            <summary>
            <dd> <p>Fill the triangles formed by the vertices. Adjacent vertices are not drawn.</p> </dd>
            </summary>
        </member>
        <member name="T:Stride.Graphics.Font.CharacterBitmap">
            <summary>
            A bitmap representing a given character
            </summary>
        </member>
        <member name="M:Stride.Graphics.Font.CharacterBitmap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.Font.CharacterBitmap"/> representing a null bitmap.
            </summary>
        </member>
        <member name="M:Stride.Graphics.Font.CharacterBitmap.#ctor(System.IntPtr,Stride.Core.Mathematics.Int2@,System.Int32,System.Int32,System.Int32,System.Int32,SharpFont.PixelMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.Font.CharacterBitmap"/> class from a data array.
            </summary>
            <param name="pixelMode">The data format of the bitmap data</param>
            <param name="data">The bitmap data</param>
            <param name="borderSize">The size of the border around the image</param>
            <param name="width">The width of the bitmap </param>
            <param name="rows">The height of the bitmap</param>
            <param name="pitch">The pitch of the bitmap</param>
            <param name="grayLevels">The number of gray levels of the bitmap</param>
        </member>
        <member name="P:Stride.Graphics.Font.CharacterBitmap.IsDisposed">
            <summary>
            Gets a value indicating whether the <see cref="T:Stride.Graphics.Font.CharacterBitmap"/> has been disposed.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Font.CharacterBitmap.Rows">
            <summary>
            Gets the number of bitmap rows.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Font.CharacterBitmap.Width">
            <summary>
            Gets the number of pixels in bitmap row.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Font.CharacterBitmap.Pitch">
            <summary><para>
            Gets the pitch's absolute value is the number of bytes taken by one bitmap row, including padding. However,
            the pitch is positive when the bitmap has a ‘down’ flow, and negative when it has an ‘up’ flow. In all
            cases, the pitch is an offset to add to a bitmap pointer in order to go down one row.
            </para><para>
            Note that ‘padding’ means the alignment of a bitmap to a byte border, and FreeType functions normally align
            to the smallest possible integer value.
            </para><para>
            For the B/W rasterizer, ‘pitch’ is always an even number.
            </para></summary>
        </member>
        <member name="P:Stride.Graphics.Font.CharacterBitmap.Buffer">
            <summary>
            Gets a typeless pointer to the bitmap buffer. This value should be aligned on 32-bit boundaries in most
            cases.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Font.CharacterBitmap.GrayLevels">
            <summary>
            Gets the number of gray levels used in the bitmap. This field is only used with
            <see cref="F:SharpFont.PixelMode.Gray"/>.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Font.CharacterBitmap.PixelMode">
            <summary>
            Gets the pixel mode, i.e., how pixel bits are stored.
            </summary>
        </member>
        <member name="T:Stride.Graphics.Font.CharacterSpecification">
            <summary>
            A character of a specific font with a specific size.
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.CharacterSpecification.FontName">
            <summary>
            Name of a system (TrueType) font.
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.CharacterSpecification.Size">
            <summary>
             Size of the TrueType fonts in pixels
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.CharacterSpecification.Style">
            <summary>
            Style for the font. 'regular', 'bold', 'italic', 'underline', 'strikeout'. Default is 'regular
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.CharacterSpecification.AntiAlias">
            <summary>
            The alias mode of the font
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.CharacterSpecification.Bitmap">
            <summary>
            The bitmap of the character
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.CharacterSpecification.Glyph">
            <summary>
            The glyph of the character
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.CharacterSpecification.IsBitmapUploaded">
            <summary>
            Indicate if the current <see cref="F:Stride.Graphics.Font.Glyph.Subrect"/> and <see cref="F:Stride.Graphics.Font.Glyph.BitmapIndex"/> data has been uploaded to the GPU or not.
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.CharacterSpecification.ListNode">
            <summary>
            The node of the least recently used (LRU) list.
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.CharacterSpecification.LastUsedFrame">
            <summary>
            The index of the frame where the character has been used for the last time.
            </summary>
        </member>
        <member name="T:Stride.Graphics.Font.FontAntiAliasMode">
            <summary>
            Available antialias mode.
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.FontAntiAliasMode.Default">
            <summary>
            The default grayscale anti-aliasing
            </summary>
            <userdoc>Equivalent to 'Grayscale'.</userdoc>
        </member>
        <member name="F:Stride.Graphics.Font.FontAntiAliasMode.Grayscale">
            <summary>
            Use grayscale antialiasing
            </summary>
            <userdoc>Uses several levels of gray smooth the character edges. 
            'ClearType' .</userdoc>
        </member>
        <member name="F:Stride.Graphics.Font.FontAntiAliasMode.ClearType">
            <summary>
            Use cleartype antialiasing.
            </summary>
            <userdoc>Uses the display red/green/blue sub-pixels to smooth character edges</userdoc>
        </member>
        <member name="F:Stride.Graphics.Font.FontAntiAliasMode.Aliased">
            <summary>
            Don't use any antialiasing
            </summary>
            <userdoc>Does not perform any anti-aliasing</userdoc>
        </member>
        <member name="T:Stride.Graphics.Font.FontCacheManager">
            <summary>
            Represent a GPU cache of font characters
            </summary>
        </member>
        <member name="P:Stride.Graphics.Font.FontCacheManager.Textures">
            <summary>
            The textures containing the cached characters on the GPU.
            </summary>
        </member>
        <member name="M:Stride.Graphics.Font.FontCacheManager.ClearCache">
            <summary>
            Remove all the currently cached characters from the cache.
            </summary>
        </member>
        <member name="M:Stride.Graphics.Font.FontCacheManager.UploadCharacterBitmap(Stride.Graphics.CommandList,Stride.Graphics.Font.CharacterSpecification)">
            <summary>
            Upload a character's bitmap into the current cache.
            </summary>
            <param name="character">The character specifications corresponding to the bitmap</param>
        </member>
        <member name="M:Stride.Graphics.Font.FontCacheManager.RemoveLessUsedCharacters(System.Int32)">
            <summary>
            Remove all the character that haven't been used for the given amount of frames
            </summary>
        </member>
        <member name="T:Stride.Graphics.Font.FontDataFactory">
            <summary>
            A font factory initializing only the data members of font. 
            Used when creating a font in the only purpose use serializing on disk.
            </summary>
        </member>
        <member name="M:Stride.Graphics.Font.FontHelper.GetFontPath(System.String,Stride.Graphics.Font.FontStyle)">
            <summary>
            Build the path of a font in the database given the name of the font family and the font style.
            </summary>
            <param name="fontName">Family name of the font</param>
            <param name="style">The style of the font</param>
            <remarks>This function does not indicate it the font exists or not in the database.</remarks>
            <returns>The absolute path of the font in the database</returns>
        </member>
        <member name="T:Stride.Graphics.Font.FontManager">
            <summary>
            A font manager is in charge of loading in memory the ttf files, looking for font informations, rendering and then caching the <see cref="T:Stride.Graphics.Font.CharacterBitmap"/>s on the CPU . 
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.FontManager.dataStructuresLock">
            <summary>
            Lock both <see cref="F:Stride.Graphics.Font.FontManager.generatedBitmaps"/> and <see cref="F:Stride.Graphics.Font.FontManager.bitmapsToGenerate"/>.
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.FontManager.cachedFontFaces">
            <summary>
            The font data that are currently cached in the registry
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.FontManager.generatedBitmaps">
            <summary>
            The list of the bitmaps that have already been generated.
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.FontManager.bitmapsToGenerate">
            <summary>
            The list of the bitmaps that are in generation or to generate
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.FontManager.bitmapBuildSignal">
            <summary>
            The <see cref="T:System.Threading.AutoResetEvent"/> used to signal the bitmap build thread that a build operation is requested.
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.FontManager.bitmapBuilderThread">
            <summary>
            The thread in charge of building the characters bitmaps
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.FontManager.bitmapShouldEndThread">
            <summary>
            Boolean specifying if we need to quit the bitmap building thread.
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.FontManager.freetypeLibrary">
            <summary>
            A reference pointer to the freetype library.
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.FontManager.contentManager">
            <summary>
            The asset manager used to load the ttf fonts.
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.FontManager.borderSize">
            <summary>
            The size of the transparent border to add around the character bitmap.
            <remarks>
            If we don't do so artifacts appears around the character when scaling fonts
            Note that we cannot just increase space taken in the bin packer because artifacts with old/previous characters may happen.
            </remarks>
            </summary>
        </member>
        <member name="M:Stride.Graphics.Font.FontManager.#ctor(Stride.Core.IO.IDatabaseFileProviderService)">
            <summary>
            Create an empty register.
            </summary>
        </member>
        <member name="M:Stride.Graphics.Font.FontManager.GenerateBitmap(Stride.Graphics.Font.CharacterSpecification,System.Boolean)">
            <summary>
            Start the generation of the specified character's bitmap. 
            </summary>
            <remarks>Does nothing if the bitmap already exist or if the generation is currently running.</remarks>
            <param name="characterSpecification">The character we want the bitmap of</param>
            <param name="synchronously">Indicate if the generation of the bitmap must by done synchronously or asynchronously</param>
        </member>
        <member name="M:Stride.Graphics.Font.FontManager.GetFontInfo(System.String,Stride.Graphics.Font.FontStyle,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Get various information about a font of a given family, type, and size.
            </summary>
            <param name="fontFamily">The name of the family of the font</param>
            <param name="fontStyle">The style of the font</param>
            <param name="lineSpacing">The space between two lines for a font size of 1 pixel</param>
            <param name="baseLine">The default base line for a font size of 1 pixel</param>
            <param name="maxWidth">The width of the largest character for a font size of 1 pixel</param>
            <param name="maxHeight">The height of the largest character for a font size of 1 pixel</param>
        </member>
        <member name="M:Stride.Graphics.Font.FontManager.DoesFontContains(System.String,Stride.Graphics.Font.FontStyle,System.Char)">
            <summary>
            Returns a boolean indicating if the specified font contains the provided character.
            </summary>
            <param name="fontStyle">The style in the font family</param>
            <param name="character">The character to look for</param>
            <param name="fontFamily">The family of the font</param>
            <returns>boolean indicating if the font contains the character</returns>
        </member>
        <member name="M:Stride.Graphics.Font.FontManager.BuildBitmapThread">
            <summary>
            Thread function in charge of building the bitmap
            </summary>
        </member>
        <member name="T:Stride.Graphics.Font.FontStyle">
            <summary>
            Type of a font.
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.FontStyle.Regular">
            <summary>
            A regular font.
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.FontStyle.Bold">
            <summary>
            A bold font.
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.FontStyle.Italic">
            <summary>
            An italic font.
            </summary>
        </member>
        <member name="T:Stride.Graphics.Font.FontStyleExtensions">
            <summary>
            Extension methods for type <see cref="T:Stride.Graphics.Font.FontStyle"/>.
            </summary>
        </member>
        <member name="M:Stride.Graphics.Font.FontStyleExtensions.IsBold(Stride.Graphics.Font.FontStyle)">
            <summary>
            Indicate if the style is bold (partially bold).
            </summary>
            <param name="style">the style</param>
            <returns><value>true</value> if bold, false otherwise</returns>
        </member>
        <member name="M:Stride.Graphics.Font.FontStyleExtensions.IsItalic(Stride.Graphics.Font.FontStyle)">
            <summary>
            Indicate if the style is italic (partially italic).
            </summary>
            <param name="style">the style</param>
            <returns><value>true</value> if italic, false otherwise</returns>
        </member>
        <member name="T:Stride.Graphics.Font.FontSystem">
            <summary>
            The system managing the fonts.
            </summary>
        </member>
        <member name="M:Stride.Graphics.Font.FontSystem.#ctor">
            <summary>
            Create a new instance of <see cref="T:Stride.Graphics.Font.FontSystem" /> base on the provided <see cref="P:Stride.Graphics.Font.FontSystem.GraphicsDevice" />.
            </summary>
        </member>
        <member name="M:Stride.Graphics.Font.FontSystem.Load(Stride.Graphics.GraphicsDevice,Stride.Core.IO.IDatabaseFileProviderService)">
            <summary>
            Load this system.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <exception cref="T:System.ArgumentNullException">graphicsDevice</exception>
        </member>
        <member name="T:Stride.Graphics.Font.IFontFactory">
            <summary>
            The interface to create and manage fonts.
            </summary>
        </member>
        <member name="M:Stride.Graphics.Font.IFontFactory.NewStatic(System.Single,System.Collections.Generic.IList{Stride.Graphics.Font.Glyph},System.Collections.Generic.IList{Stride.Graphics.Texture},System.Single,System.Single,System.Collections.Generic.IList{Stride.Graphics.Font.Kerning},System.Single,System.Single,System.Char)">
            <summary>
            Create a new instance of a static font.
            </summary>
            <param name="size">The size of the font in pixels.</param>
            <param name="glyphs">The list of the font glyphs</param>
            <param name="textures">The list of textures containing the font character data</param>
            <param name="baseOffset">The number of pixels from the absolute top of the line to the base of the characters.</param>
            <param name="defaultLineSpacing">The default line spacing of the font.</param>
            <param name="kernings">The list of the kerning information of the font</param>
            <param name="extraSpacing">The character extra spacing in pixels. Zero is default spacing, negative closer together, positive further apart.</param>
            <param name="extraLineSpacing">This is the extra distance in pixels to add between each line of text. Zero is default spacing, negative closer together, positive further apart.</param>
            <param name="defaultCharacter">The default character fall-back.</param>
            <remarks>The font does not copy the provided textures, glyphs information. 
            Provided data should not be modified after the creation of the font.
            The textures should be disposed manually (if useless) after that the sprite font is not used anymore.</remarks>
            <returns>The newly created static font</returns>
        </member>
        <member name="M:Stride.Graphics.Font.IFontFactory.NewStatic(System.Single,System.Collections.Generic.IList{Stride.Graphics.Font.Glyph},System.Collections.Generic.IList{Stride.Graphics.Image},System.Single,System.Single,System.Collections.Generic.IList{Stride.Graphics.Font.Kerning},System.Single,System.Single,System.Char)">
            <summary>
            Create a new instance of a static font.
            </summary>
            <param name="size">The size of the font in pixels.</param>
            <param name="glyphs">The list of the font glyphs</param>
            <param name="images">The list of images containing the font character data</param>
            <param name="baseOffset">The number of pixels from the absolute top of the line to the base of the characters.</param>
            <param name="defaultLineSpacing">The default line spacing of the font.</param>
            <param name="kernings">The list of the kerning information of the font</param>
            <param name="extraSpacing">The character extra spacing in pixels. Zero is default spacing, negative closer together, positive further apart.</param>
            <param name="extraLineSpacing">This is the extra distance in pixels to add between each line of text. Zero is default spacing, negative closer together, positive further apart.</param>
            <param name="defaultCharacter">The default character fall-back.</param>
            <remarks>The font does not copy the provided glyphs information. Provided glyphs should not be modified after the creation of the font.</remarks>
            <returns>The newly created static font</returns>
        </member>
        <member name="M:Stride.Graphics.Font.IFontFactory.NewDynamic(System.Single,System.String,Stride.Graphics.Font.FontStyle,Stride.Graphics.Font.FontAntiAliasMode,System.Boolean,System.Single,System.Single,System.Char)">
            <summary>
            Create a new instance of a dynamic font.
            </summary>
            <param name="defaultSize">The default size of the font in pixels.</param>
            <param name="fontName">The family name of the (TrueType) font.</param>
            <param name="antiAliasMode">The anti-aliasing mode to use when rendering the font. By default, font textures are rendered in levels of grey.</param>
            <param name="style">The style for the font. A combinaison of 'regular', 'bold' or 'italic'.</param>
            <param name="useKerning">Specifies whether to use kerning information when rendering the font. Default value is false (NOT SUPPORTED YET)</param>
            <param name="extraSpacing">The character extra spacing in pixels. Zero is default spacing, negative closer together, positive further apart.</param>
            <param name="extraLineSpacing">This is the extra distance in pixels to add between each line of text. Zero is default spacing, negative closer together, positive further apart.</param>
            <param name="defaultCharacter">The default character fall-back.</param>
            <returns>The newly created dynamic font</returns>
        </member>
        <member name="M:Stride.Graphics.Font.IFontFactory.NewScalable(System.Single,System.Collections.Generic.IList{Stride.Graphics.Font.Glyph},System.Collections.Generic.IList{Stride.Graphics.Texture},System.Single,System.Single,System.Collections.Generic.IList{Stride.Graphics.Font.Kerning},System.Single,System.Single,System.Char)">
            <summary>
            Create a new instance of a scalable font.
            </summary>
            <param name="size">The size of the font in pixels.</param>
            <param name="glyphs">The list of the font glyphs</param>
            <param name="textures">The list of textures containing the font character data</param>
            <param name="baseOffset">The number of pixels from the absolute top of the line to the base of the characters.</param>
            <param name="defaultLineSpacing">The default line spacing of the font.</param>
            <param name="kernings">The list of the kerning information of the font</param>
            <param name="extraSpacing">The character extra spacing in pixels. Zero is default spacing, negative closer together, positive further apart.</param>
            <param name="extraLineSpacing">This is the extra distance in pixels to add between each line of text. Zero is default spacing, negative closer together, positive further apart.</param>
            <param name="defaultCharacter">The default character fall-back.</param>
            <remarks>The font does not copy the provided textures, glyphs information. 
            Provided data should not be modified after the creation of the font.
            The textures should be disposed manually (if useless) after that the sprite font is not used anymore.</remarks>
            <returns>The newly created static font</returns>
        </member>
        <member name="M:Stride.Graphics.Font.IFontFactory.NewScalable(System.Single,System.Collections.Generic.IList{Stride.Graphics.Font.Glyph},System.Collections.Generic.IList{Stride.Graphics.Image},System.Single,System.Single,System.Collections.Generic.IList{Stride.Graphics.Font.Kerning},System.Single,System.Single,System.Char)">
            <summary>
            Create a new instance of a scalable font.
            </summary>
            <param name="size">The size of the font in pixels.</param>
            <param name="glyphs">The list of the font glyphs</param>
            <param name="images">The list of images containing the font character data</param>
            <param name="baseOffset">The number of pixels from the absolute top of the line to the base of the characters.</param>
            <param name="defaultLineSpacing">The default line spacing of the font.</param>
            <param name="kernings">The list of the kerning information of the font</param>
            <param name="extraSpacing">The character extra spacing in pixels. Zero is default spacing, negative closer together, positive further apart.</param>
            <param name="extraLineSpacing">This is the extra distance in pixels to add between each line of text. Zero is default spacing, negative closer together, positive further apart.</param>
            <param name="defaultCharacter">The default character fall-back.</param>
            <remarks>The font does not copy the provided glyphs information. Provided glyphs should not be modified after the creation of the font.</remarks>
            <returns>The newly created static font</returns>
        </member>
        <member name="T:Stride.Graphics.Font.OfflineRasterizedSpriteFontSerializer">
            <summary>
            Serializer for <see cref="T:Stride.Graphics.Font.RuntimeRasterizedSpriteFont"/>.
            </summary>
        </member>
        <member name="T:Stride.Graphics.Font.RuntimeRasterizedSpriteFont">
            <summary>
            A dynamic font. That is a font that generate its character bitmaps at execution.
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.RuntimeRasterizedSpriteFont.FontName">
            <summary>
            Input the family name of the (TrueType) font.
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.RuntimeRasterizedSpriteFont.Style">
            <summary>
            Style for the font. 'regular', 'bold' or 'italic'. Default is 'regular
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.RuntimeRasterizedSpriteFont.UseKerning">
            <summary>
            Specifies whether to use kerning information when rendering the font. Default value is false (NOT SUPPORTED YET).
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.RuntimeRasterizedSpriteFont.AntiAlias">
            <summary>
            The alias mode of the font
            </summary>
        </member>
        <member name="F:Stride.Graphics.Font.RuntimeRasterizedSpriteFont.sizedCharacterToCharacterData">
            <summary>
            The character specifications cached to avoid re-allocations
            </summary>
        </member>
        <member name="T:Stride.Graphics.Font.RuntimeRasterizedSpriteFontSerializer">
            <summary>
            Serializer for <see cref="T:Stride.Graphics.Font.RuntimeRasterizedSpriteFont"/>.
            </summary>
        </member>
        <member name="T:Stride.Graphics.Font.SignedDistanceFieldSpriteFontSerializer">
            <summary>
            Serializer for <see cref="T:Stride.Graphics.Font.SignedDistanceFieldSpriteFont"/>.
            </summary>
        </member>
        <member name="T:Stride.Graphics.FormatSupport">
            <summary>
            <p>Which resources are supported for a given format and given device (see <strong><see cref="M:SharpDX.Direct3D11.Device.CheckFormatSupport(SharpDX.DXGI.Format)"/></strong> and <strong><see cref="M:SharpDX.Direct3D11.Device.CheckFeatureSupport(SharpDX.Direct3D11.Feature)"/></strong>).</p>
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.Buffer">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.InputAssemblyVertexBuffer">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.InputAssemblyIndexBuffer">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.StreamOutputBuffer">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.Texture1D">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.Texture2D">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.Texture3D">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.TextureCube">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.ShaderLoad">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.ShaderSample">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.ShaderSampleComparison">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.ShaderSampleMonoText">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.Mip">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.MipAutogen">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.RenderTarget">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.Blendable">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.DepthStencil">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.CpuLockable">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.MultisampleResolve">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.Display">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.CastWithinBitLayout">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.MultisampleRendertarget">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.MultisampleLoad">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.ShaderGather">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.BackBufferCast">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.TypedUnorderedAccessView">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.ShaderGatherComparison">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.FormatSupport.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="T:Stride.Graphics.FrameworkResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Stride.Graphics.FrameworkResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Stride.Graphics.FrameworkResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Stride.Graphics.FrameworkResources.CannotCreateDefaultRenderTarget">
            <summary>
              Looks up a localized string similar to DefaultRenderTarget is already created.
            </summary>
        </member>
        <member name="P:Stride.Graphics.FrameworkResources.CurrentDisplayModeNotFound">
            <summary>
              Looks up a localized string similar to Unable to determine current display mode.
            </summary>
        </member>
        <member name="P:Stride.Graphics.FrameworkResources.GraphicsResourceAlreadySet">
            <summary>
              Looks up a localized string similar to [{0}] GraphicsResource is already set.
            </summary>
        </member>
        <member name="P:Stride.Graphics.FrameworkResources.GraphicsResourceStateBound">
            <summary>
              Looks up a localized string similar to Cannot set a property on an already bound [{0}] GraphicsResource.
            </summary>
        </member>
        <member name="P:Stride.Graphics.FrameworkResources.NoDefaultRenterTarget">
            <summary>
              Looks up a localized string similar to No default render target is available. Use GraphicsDevice.InitDefaultRenderTarget()..
            </summary>
        </member>
        <member name="P:Stride.Graphics.FrameworkResources.NoDepthStencilBufferBound">
            <summary>
              Looks up a localized string similar to No Depth/Stencil buffer is currently setup on this GraphicsDevice..
            </summary>
        </member>
        <member name="P:Stride.Graphics.FrameworkResources.NoGraphicsDeviceAvailable">
            <summary>
              Looks up a localized string similar to No GraphicsDevice are currently available. Check GraphicsDevice.Current should not be null.
            </summary>
        </member>
        <member name="P:Stride.Graphics.FrameworkResources.NoStencilBufferForDepthFormat">
            <summary>
              Looks up a localized string similar to Cannot clear a stencil buffer without a Stencil Buffer format [{0}].
            </summary>
        </member>
        <member name="T:Stride.Graphics.GeometricMeshData`1">
            <summary>
            A geometric data.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Stride.Graphics.GeometricMeshData`1.Vertices">
            <summary>
            Gets or sets the vertices.
            </summary>
            <value>The vertices.</value>
        </member>
        <member name="P:Stride.Graphics.GeometricMeshData`1.Indices">
            <summary>
            Gets or sets the indices.
            </summary>
            <value>The indices.</value>
        </member>
        <member name="P:Stride.Graphics.GeometricMeshData`1.IsLeftHanded">
            <summary>
            Gets or sets a value indicating whether this instance is left handed.
            </summary>
            <value><c>true</c> if this instance is left handed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Stride.Graphics.GeometricPrimitives.GeometricPrimitive">
            <summary>
            A geometric primitive. Use <see cref="T:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Cube"/>, <see cref="T:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Cylinder"/>, <see cref="T:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.GeoSphere"/>, <see cref="T:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Plane"/>, <see cref="T:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Sphere"/>, <see cref="T:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Teapot"/>, <see cref="T:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Torus"/>. See <see cref="!:Draw+vertices"/> to learn how to use it.
            </summary>
        </member>
        <member name="T:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Capsule">
            <summary>
            A sphere primitive.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Capsule.New(Stride.Graphics.GraphicsDevice,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a sphere primitive.
            </summary>
            <param name="device">The device.</param>
            <param name="length">The length. That is the distance between the two sphere centers.</param>
            <param name="radius">The radius of the capsule.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="uScale">Scale U coordinates between 0 and the values of this parameter.</param>
            <param name="vScale">Scale V coordinates 0 and the values of this parameter.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A sphere primitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;Must be &gt;= 3</exception>
        </member>
        <member name="M:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Capsule.New(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a sphere primitive.
            </summary>
            <param name="length">The length of the capsule. That is the distance between the two sphere centers.</param>
            <param name="radius">The radius of the capsule.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="uScale">Scale U coordinates between 0 and the values of this parameter.</param>
            <param name="vScale">Scale V coordinates 0 and the values of this parameter.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A sphere primitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;Must be &gt;= 3</exception>
        </member>
        <member name="T:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Cone">
            <summary>
            A cone with a circular base and rolled face.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Cone.New(Stride.Graphics.GraphicsDevice,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a cone a circular base and a rolled face.
            </summary>
            <param name="device">The device.</param>
            <param name="radius">The radius or the base</param>
            <param name="height">The height of the cone</param>
            <param name="tessellation">The number of segments composing the base</param>
            <param name="uScale">Scale U coordinates between 0 and the values of this parameter.</param>
            <param name="vScale">Scale V coordinates 0 and the values of this parameter.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A cone.</returns>
        </member>
        <member name="M:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Cone.New(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a cone a circular base and a rolled face.
            </summary>
            <param name="radius">The radius or the base</param>
            <param name="height">The height of the cone</param>
            <param name="tessellation">The number of segments composing the base</param>
            <param name="uScale">Scale U coordinates between 0 and the values of this parameter.</param>
            <param name="vScale">Scale V coordinates 0 and the values of this parameter.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A cone.</returns>
        </member>
        <member name="T:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Cube">
            <summary>
            A cube has six faces, each one pointing in a different direction.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Cube.New(Stride.Graphics.GraphicsDevice,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a cube with six faces each one pointing in a different direction.
            </summary>
            <param name="device">The device.</param>
            <param name="size">The size.</param>
            <param name="uScale">Scale U coordinates between 0 and the values of this parameter.</param>
            <param name="vScale">Scale V coordinates 0 and the values of this parameter.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A cube.</returns>
        </member>
        <member name="M:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Cube.New(Stride.Graphics.GraphicsDevice,Stride.Core.Mathematics.Vector3,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a cube with six faces each one pointing in a different direction.
            </summary>
            <param name="device">The device.</param>
            <param name="size">The size.</param>
            <param name="uScale">Scale U coordinates between 0 and the values of this parameter.</param>
            <param name="vScale">Scale V coordinates 0 and the values of this parameter.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A cube.</returns>
        </member>
        <member name="M:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Cube.New(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a cube with six faces each one pointing in a different direction.
            </summary>
            <param name="size">The size.</param>
            <param name="uScale">Scale U coordinates between 0 and the values of this parameter.</param>
            <param name="vScale">Scale V coordinates 0 and the values of this parameter.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A cube.</returns>
        </member>
        <member name="M:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Cube.New(Stride.Core.Mathematics.Vector3,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a cube with six faces each one pointing in a different direction.
            </summary>
            <param name="size">The size.</param>
            <param name="uScale">Scale U coordinates between 0 and the values of this parameter.</param>
            <param name="vScale">Scale V coordinates 0 and the values of this parameter.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A cube.</returns>
        </member>
        <member name="T:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Cylinder">
            <summary>
            A Cylinder primitive.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Cylinder.New(Stride.Graphics.GraphicsDevice,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a cylinder primitive.
            </summary>
            <param name="device">The device.</param>
            <param name="height">The height.</param>
            <param name="radius">The radius.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="uScale">Scale U coordinates between 0 and the values of this parameter.</param>
            <param name="vScale">Scale V coordinates 0 and the values of this parameter.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A cylinder primitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;tessellation must be &gt;= 3</exception>
        </member>
        <member name="M:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Cylinder.New(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a cylinder primitive.
            </summary>
            <param name="height">The height.</param>
            <param name="radius">The radius.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="uScale">Scale U coordinates between 0 and the values of this parameter.</param>
            <param name="vScale">Scale V coordinates 0 and the values of this parameter.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A cylinder primitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;tessellation must be &gt;= 3</exception>
        </member>
        <member name="T:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.GeoSphere">
            <summary>
            A Geodesic sphere.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.GeoSphere.New(Stride.Graphics.GraphicsDevice,System.Single,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a Geodesic sphere.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="radius">The radius.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="vScale"></param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <param name="uScale"></param>
            <returns>A Geodesic sphere.</returns>
        </member>
        <member name="M:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.GeoSphere.New(System.Single,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a Geodesic sphere.
            </summary>
            <param name="radius">The radius.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="vScale"></param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <param name="uScale"></param>
            <returns>A Geodesic sphere.</returns>
        </member>
        <member name="M:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.GeoSphere.GeoSphereData.Create(System.Single,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a Geodesic sphere.
            </summary>
            <param name="radius">The radius.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="vScale"></param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <param name="uScale"></param>
            <returns>A Geodesic sphere.</returns>
        </member>
        <member name="T:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Plane">
            <summary>
            A plane primitive.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Plane.New(Stride.Graphics.GraphicsDevice,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Boolean,System.Boolean,Stride.Graphics.GeometricPrimitives.NormalDirection)">
            <summary>
            Creates a Plane primitive on the X/Y plane with a normal equal to -<see cref="F:Stride.Core.Mathematics.Vector3.UnitZ"/>.
            </summary>
            <param name="device">The device.</param>
            <param name="sizeX">The size X.</param>
            <param name="sizeY">The size Y.</param>
            <param name="tessellationX">The tessellation, as the number of quads per X axis.</param>
            <param name="tessellationY">The tessellation, as the number of quads per Y axis.</param>
            <param name="uFactor">Scale U coordinates between 0 and the values of this parameter.</param>
            <param name="vFactor">Scale V coordinates 0 and the values of this parameter.</param>
            <param name="generateBackFace">Add a back face to the plane</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <param name="normalDirection">The direction of the plane normal</param>
            <returns>A Plane primitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;tessellation must be > 0</exception>
        </member>
        <member name="M:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Plane.New(System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Boolean,System.Boolean,Stride.Graphics.GeometricPrimitives.NormalDirection)">
            <summary>
            Creates a Plane primitive on the X/Y plane with a normal equal to -<see cref="F:Stride.Core.Mathematics.Vector3.UnitZ"/>.
            </summary>
            <param name="sizeX">The size X.</param>
            <param name="sizeY">The size Y.</param>
            <param name="tessellationX">The tessellation, as the number of quads per X axis.</param>
            <param name="tessellationY">The tessellation, as the number of quads per Y axis.</param>
            <param name="uFactor">Scale U coordinates between 0 and the values of this parameter.</param>
            <param name="vFactor">Scale V coordinates 0 and the values of this parameter.</param>
            <param name="generateBackFace">Add a back face to the plane</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <param name="normalDirection">The direction of the plane normal</param>
            <returns>A Plane primitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;tessellation must be > 0</exception>
        </member>
        <member name="T:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Sphere">
            <summary>
            A sphere primitive.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Sphere.New(Stride.Graphics.GraphicsDevice,System.Single,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a sphere primitive.
            </summary>
            <param name="device">The device.</param>
            <param name="radius">The radius.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="uScale">The u scale.</param>
            <param name="vScale">The v scale.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A sphere primitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;Must be &gt;= 3</exception>
        </member>
        <member name="M:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Sphere.New(System.Single,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a sphere primitive.
            </summary>
            <param name="radius">The radius.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="uScale">The u scale.</param>
            <param name="vScale">The v scale.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A sphere primitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;Must be &gt;= 3</exception>
        </member>
        <member name="T:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Teapot">
            <summary>
            A Teapot primitive.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Teapot.New(Stride.Graphics.GraphicsDevice,System.Single,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a teapot primitive.
            </summary>
            <param name="device">The device.</param>
            <param name="size">The size.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="uScale">Scale U coordinates between 0 and the values of this parameter.</param>
            <param name="vScale">Scale V coordinates 0 and the values of this parameter.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>GeometricPrimitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;tessellation must be > 0</exception>
        </member>
        <member name="M:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Teapot.New(System.Single,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a teapot primitive.
            </summary>
            <param name="size">The size.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="uScale">Scale U coordinates between 0 and the values of this parameter.</param>
            <param name="vScale">Scale V coordinates 0 and the values of this parameter.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>GeometricPrimitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;tessellation must be > 0</exception>
        </member>
        <member name="T:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Torus">
            <summary>
            A Torus primitive.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Torus.New(Stride.Graphics.GraphicsDevice,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a torus primitive.
            </summary>
            <param name="device">The device.</param>
            <param name="majorRadius">The majorRadius.</param>
            <param name="minorRadius">The minorRadius.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="uScale">Scale U coordinates between 0 and the values of this parameter.</param>
            <param name="vScale">Scale V coordinates 0 and the values of this parameter.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A Torus primitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;tessellation parameter out of range</exception>
        </member>
        <member name="M:Stride.Graphics.GeometricPrimitives.GeometricPrimitive.Torus.New(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a torus primitive.
            </summary>
            <param name="majorRadius">The major radius of the torus.</param>
            <param name="minorRadius">The minor radius of the torus.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="uScale">Scale U coordinates between 0 and the values of this parameter.</param>
            <param name="vScale">Scale V coordinates 0 and the values of this parameter.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A Torus primitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;tessellation parameter out of range</exception>
        </member>
        <member name="T:Stride.Graphics.GeometricPrimitives.GeometricPrimitive`1">
            <summary>
            A geometric primitive used to draw a simple model built from a set of vertices and indices.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GeometricPrimitives.GeometricPrimitive`1.PipelineState">
            <summary>
            The pipeline state.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GeometricPrimitives.GeometricPrimitive`1.IndexBuffer">
            <summary>
            The index buffer used by this geometric primitive.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GeometricPrimitives.GeometricPrimitive`1.VertexBuffer">
            <summary>
            The vertex buffer used by this geometric primitive.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GeometricPrimitives.GeometricPrimitive`1.GraphicsDevice">
            <summary>
            The default graphics device.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GeometricPrimitives.GeometricPrimitive`1.VertexBufferBinding">
            <summary>
            The input layout used by this geometric primitive (shared for all geometric primitive).
            </summary>
        </member>
        <member name="F:Stride.Graphics.GeometricPrimitives.GeometricPrimitive`1.IsIndex32Bits">
            <summary>
            True if the index buffer is a 32 bit index buffer.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Stride.Graphics.GeometricPrimitives.GeometricPrimitive`1.#ctor(Stride.Graphics.GraphicsDevice,Stride.Graphics.GeometricMeshData{`0})" -->
        <member name="M:Stride.Graphics.GeometricPrimitives.GeometricPrimitive`1.Draw(Stride.Graphics.GraphicsContext,Stride.Rendering.EffectInstance)">
            <summary>
            Draws this <see cref="T:Stride.Graphics.GeometricPrimitives.GeometricPrimitive" />.
            </summary>
            <param name="commandList">The command list.</param>
        </member>
        <member name="M:Stride.Graphics.GeometricPrimitives.GeometricPrimitive`1.ReverseWinding``1(`0[],``0[])">
            <summary>
            Helper for flipping winding of geometric primitives for LH vs. RH coordinates
            </summary>
            <typeparam name="TIndex">The type of the T index.</typeparam>
            <param name="vertices">The vertices.</param>
            <param name="indices">The indices.</param>
        </member>
        <member name="T:Stride.Graphics.GeometricPrimitives.NormalDirection">
            <summary>
            Enumerates the different possible direction of a plane normal.
            </summary>
        </member>
        <member name="T:Stride.Graphics.GraphicsContext">
            <summary>
            A graphics command context. You should usually stick to one per rendering thread.
            </summary>
        </member>
        <member name="P:Stride.Graphics.GraphicsContext.CommandList">
            <summary>
            Gets the current command list.
            </summary>
        </member>
        <member name="P:Stride.Graphics.GraphicsContext.ResourceGroupAllocator">
            <summary>
            Gets the current resource group allocator.
            </summary>
        </member>
        <member name="T:Stride.Graphics.GraphicsDeviceExtensions">
            <summary>
            Extensions for the <see cref="T:Stride.Graphics.GraphicsDevice"/>
            </summary>
        </member>
        <member name="M:Stride.Graphics.GraphicsDeviceExtensions.DrawQuad(Stride.Graphics.GraphicsContext,Stride.Rendering.EffectInstance)">
            <summary>
            Draws a fullscreen quad with the specified effect and parameters.
            </summary>
            <param name="device">The device.</param>
            <param name="effectInstance">The effect instance.</param>
            <exception cref="T:System.ArgumentNullException">effect</exception>
        </member>
        <member name="M:Stride.Graphics.GraphicsDeviceExtensions.DrawQuad(Stride.Graphics.CommandList)">
            <summary>
            Draws a full screen quad. An <see cref="T:Stride.Graphics.Effect"/> must be applied before calling this method.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GraphicsDeviceExtensions.DrawTexture(Stride.Graphics.GraphicsContext,Stride.Graphics.Texture,System.Nullable{Stride.Graphics.BlendStateDescription})">
            <summary>
            Draws a fullscreen texture using a <see cref="F:Stride.Graphics.SamplerStateFactory.LinearClamp"/> sampler. See <see cref="!:Draw+a+texture"/> to learn how to use it.
            </summary>
            <param name="texture">The texture. Expecting an instance of <see cref="T:Stride.Graphics.Texture"/>.</param>
            <param name="applyEffectStates">The flag to apply effect states.</param>
        </member>
        <member name="M:Stride.Graphics.GraphicsDeviceExtensions.DrawTexture(Stride.Graphics.GraphicsContext,Stride.Graphics.Texture,Stride.Graphics.SamplerState,System.Nullable{Stride.Graphics.BlendStateDescription})">
            <summary>
            Draws a fullscreen texture using the specified sampler. See <see cref="!:Draw+a+texture"/> to learn how to use it.
            </summary>
            <param name="texture">The texture. Expecting an instance of <see cref="T:Stride.Graphics.Texture"/>.</param>
            <param name="sampler">The sampler.</param>
            <param name="applyEffectStates">The flag to apply effect states.</param>
        </member>
        <member name="M:Stride.Graphics.GraphicsDeviceExtensions.DrawTexture(Stride.Graphics.GraphicsContext,Stride.Graphics.Texture,Stride.Core.Mathematics.Color4,System.Nullable{Stride.Graphics.BlendStateDescription})">
            <summary>
            Draws a fullscreen texture using a <see cref="F:Stride.Graphics.SamplerStateFactory.LinearClamp"/> sampler
            and the texture color multiplied by a custom color. See <see cref="!:Draw+a+texture"/> to learn how to use it.
            </summary>
            <param name="texture">The texture. Expecting an instance of <see cref="T:Stride.Graphics.Texture"/>.</param>
            <param name="color">The color.</param>
            <param name="applyEffectStates">The flag to apply effect states.</param>
        </member>
        <member name="M:Stride.Graphics.GraphicsDeviceExtensions.DrawTexture(Stride.Graphics.GraphicsContext,Stride.Graphics.Texture,Stride.Graphics.SamplerState,Stride.Core.Mathematics.Color4,System.Nullable{Stride.Graphics.BlendStateDescription})">
            <summary>
            Draws a fullscreen texture using the specified sampler
            and the texture color multiplied by a custom color. See <see cref="!:Draw+a+texture"/> to learn how to use it.
            </summary>
            <param name="texture">The texture. Expecting an instance of <see cref="T:Stride.Graphics.Texture"/>.</param>
            <param name="sampler">The sampler.</param>
            <param name="color">The color.</param>
            <param name="applyEffectStates">The flag to apply effect states.</param>
        </member>
        <member name="T:Stride.Graphics.GraphicsDeviceServiceLocal">
            <summary>
            A default implementation of <see cref="T:Stride.Graphics.IGraphicsDeviceService"/>
            </summary>
        </member>
        <member name="M:Stride.Graphics.GraphicsDeviceServiceLocal.#ctor(Stride.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.GraphicsDeviceServiceLocal"/> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
        </member>
        <member name="M:Stride.Graphics.GraphicsDeviceServiceLocal.#ctor(Stride.Core.IServiceRegistry,Stride.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.GraphicsDeviceServiceLocal"/> class.
            </summary>
            <param name="registry">The registry.</param>
            <param name="graphicsDevice">The graphics device.</param>
        </member>
        <member name="T:Stride.Graphics.GraphicsDeviceStatus">
            <summary>
            Describes the current status of a <see cref="T:Stride.Graphics.GraphicsDevice"/>.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsDeviceStatus.Normal">
            <summary>
            The device is running fine.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsDeviceStatus.Removed">
            <summary>
            The video card has been physically removed from the system, or a driver upgrade for the video card has occurred. The application should destroy and recreate the device.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsDeviceStatus.Hung">
            <summary>
            The application's device failed due to badly formed commands sent by the application. This is an design-time issue that should be investigated and fixed.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsDeviceStatus.Reset">
            <summary>
            The device failed due to a badly formed command. This is a run-time issue; The application should destroy and recreate the device.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsDeviceStatus.InternalError">
            <summary>
            The driver encountered a problem and was put into the device removed state.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsDeviceStatus.InvalidCall">
            <summary>
            The application provided invalid parameter data; this must be debugged and fixed before the application is released.
            </summary>
        </member>
        <member name="T:Stride.Graphics.GraphicsFactory">
            <summary>
            Root factory for all Graphics components.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsFactory.GraphicsApi">
            <summary>
            GraphicsApi key.
            TODO not the best place to store this identifier. Move it to GraphicsFactory?
            </summary>
        </member>
        <member name="T:Stride.Graphics.GraphicsPresenter">
            <summary>
            This class is a frontend to <see cref="!:SwapChain" /> and <see cref="!:SwapChain1" />.
            </summary>
            <remarks>
            In order to create a new <see cref="T:Stride.Graphics.GraphicsPresenter"/>, a <see cref="P:Stride.Graphics.GraphicsPresenter.GraphicsDevice"/> should have been initialized first.
            </remarks>
        </member>
        <member name="F:Stride.Graphics.GraphicsPresenter.ForcedPresentInterval">
            <summary>
            If not null the given interval will be used during a <see cref="M:Stride.Graphics.GraphicsPresenter.Present"/> operation. 
            </summary>
            <remarks>
            This is currently only supported by the Direct3D graphics implementation.
            </remarks>
        </member>
        <member name="M:Stride.Graphics.GraphicsPresenter.#ctor(Stride.Graphics.GraphicsDevice,Stride.Graphics.PresentationParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.GraphicsPresenter" /> class.
            </summary>
            <param name="device">The device.</param>
            <param name="presentationParameters"> </param>
        </member>
        <member name="P:Stride.Graphics.GraphicsPresenter.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
            <value>The graphics device.</value>
        </member>
        <member name="P:Stride.Graphics.GraphicsPresenter.Description">
            <summary>
            Gets the description of this presenter.
            </summary>
        </member>
        <member name="P:Stride.Graphics.GraphicsPresenter.BackBuffer">
            <summary>
            Gets the default back buffer for this presenter.
            </summary>
        </member>
        <member name="P:Stride.Graphics.GraphicsPresenter.DepthStencilBuffer">
            <summary>
            Gets the default depth stencil buffer for this presenter.
            </summary>
        </member>
        <member name="P:Stride.Graphics.GraphicsPresenter.NativePresenter">
            <summary>
            Gets the underlying native presenter (can be a <see cref="T:SharpDX.DXGI.SwapChain"/> or <see cref="T:SharpDX.DXGI.SwapChain1"/> or null, depending on the platform).
            </summary>
            <value>The native presenter.</value>
        </member>
        <member name="P:Stride.Graphics.GraphicsPresenter.IsFullScreen">
            <summary>
            Gets or sets fullscreen mode for this presenter.
            </summary>
            <value><c>true</c> if this instance is full screen; otherwise, <c>false</c>.</value>
            <remarks>This method is only valid on Windows Desktop and has no effect on Windows Metro.</remarks>
        </member>
        <member name="P:Stride.Graphics.GraphicsPresenter.PresentInterval">
            <summary>
            Gets or sets the <see cref="P:Stride.Graphics.GraphicsPresenter.PresentInterval"/>. Default is to wait for one vertical blanking.
            </summary>
            <value>The present interval.</value>
        </member>
        <member name="M:Stride.Graphics.GraphicsPresenter.Present">
            <summary>
            Presents the Backbuffer to the screen.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GraphicsPresenter.Resize(System.Int32,System.Int32,Stride.Graphics.PixelFormat)">
            <summary>
            Resizes the current presenter, by resizing the back buffer and the depth stencil buffer.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="format"></param>
        </member>
        <member name="M:Stride.Graphics.GraphicsPresenter.OnDestroyed">
            <summary>
            Called when [destroyed].
            </summary>
        </member>
        <member name="M:Stride.Graphics.GraphicsPresenter.OnRecreated">
            <summary>
            Called when [recreated].
            </summary>
        </member>
        <member name="M:Stride.Graphics.GraphicsPresenter.CreateDepthStencilBuffer">
            <summary>
            Creates the depth stencil buffer.
            </summary>
        </member>
        <member name="T:Stride.Graphics.GraphicsResourceAllocator">
            <summary>
            A <see cref="T:Stride.Graphics.GraphicsResource"/> allocator tracking usage reference and allowing to recycle unused resources based on a recycle policy. 
            </summary>
            <remarks>
            This class is threadsafe. Accessing a member will lock globally this instance.
            </remarks>
        </member>
        <member name="M:Stride.Graphics.GraphicsResourceAllocator.#ctor(Stride.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.GraphicsResourceAllocator" /> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
        </member>
        <member name="P:Stride.Graphics.GraphicsResourceAllocator.GraphicsDevice">
            <summary>
            Gets or sets the graphics device.
            </summary>
            <value>The graphics device.</value>
        </member>
        <member name="P:Stride.Graphics.GraphicsResourceAllocator.Services">
            <summary>
            Gets the services registry.
            </summary>
            <value>The services registry.</value>
        </member>
        <member name="P:Stride.Graphics.GraphicsResourceAllocator.RecyclePolicy">
            <summary>
            Gets or sets the default recycle policy. Default is always recycle no matter the state of the resources.
            </summary>
            <value>The default recycle policy.</value>
        </member>
        <member name="M:Stride.Graphics.GraphicsResourceAllocator.Recycle">
            <summary>
            Recycles unused resources (with a  <see cref="P:Stride.Graphics.GraphicsResourceLink.ReferenceCount"/> == 0 ) with the <see cref="P:Stride.Graphics.GraphicsResourceAllocator.RecyclePolicy"/>. By Default, no recycle policy installed.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GraphicsResourceAllocator.Recycle(Stride.Graphics.GraphicsResourceRecyclePolicyDelegate)">
            <summary>
            Recycles unused resource with the specified recycle policy. 
            </summary>
            <param name="recyclePolicy">The recycle policy.</param>
            <exception cref="T:System.ArgumentNullException">recyclePolicy</exception>
        </member>
        <member name="M:Stride.Graphics.GraphicsResourceAllocator.GetTemporaryTexture(Stride.Graphics.TextureDescription)">
            <summary>
            Gets a texture for the specified description.
            </summary>
            <param name="description">The description.</param>
            <returns>A texture</returns>
        </member>
        <member name="M:Stride.Graphics.GraphicsResourceAllocator.GetTemporaryBuffer(Stride.Graphics.BufferDescription,Stride.Graphics.PixelFormat)">
            <summary>
            Gets a texture for the specified description.
            </summary>
            <param name="description">The description.</param>
            <param name="viewFormat">The pixel format seen by the shader</param>
            <returns>A texture</returns>
        </member>
        <member name="M:Stride.Graphics.GraphicsResourceAllocator.AddReference(Stride.Graphics.GraphicsResource)">
            <summary>
            Increments the reference to a temporary resource.
            </summary>
            <param name="resource"></param>
        </member>
        <member name="M:Stride.Graphics.GraphicsResourceAllocator.ReleaseReference(Stride.Graphics.GraphicsResourceBase)">
            <summary>
            Decrements the reference to a temporary resource.
            </summary>
            <param name="resource"></param>
        </member>
        <member name="M:Stride.Graphics.GraphicsResourceAllocator.CreateTexture(Stride.Graphics.TextureDescription,Stride.Graphics.PixelFormat)">
            <summary>
            Creates a texture for output.
            </summary>
            <param name="description">The description.</param>
            <param name="viewFormat">The pixel format seen by the shader</param>
            <returns>Texture.</returns>
        </member>
        <member name="M:Stride.Graphics.GraphicsResourceAllocator.CreateBuffer(Stride.Graphics.BufferDescription,Stride.Graphics.PixelFormat)">
            <summary>
            Creates a temporary buffer.
            </summary>
            <param name="description">The description.</param>
            <param name="viewFormat">The shader view format on the buffer</param>
            <returns>Buffer.</returns>
        </member>
        <member name="M:Stride.Graphics.GraphicsResourceAllocator.Recycle``1(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.List{Stride.Graphics.GraphicsResourceLink}},Stride.Graphics.GraphicsResourceRecyclePolicyDelegate)">
            <summary>
            Recycles the specified cache.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <param name="cache">The cache.</param>
            <param name="recyclePolicy">The recycle policy.</param>
        </member>
        <member name="M:Stride.Graphics.GraphicsResourceAllocator.DefaultRecyclePolicy(Stride.Graphics.GraphicsResourceLink)">
            <summary>
            The default recycle policy is always going to remove all allocated textures.
            </summary>
            <param name="resourceLink">The resource link.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Stride.Graphics.GraphicsResourceAllocatorExtensions">
            <summary>
            Extensions for the <see cref="T:Stride.Graphics.GraphicsResourceAllocator"/>.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GraphicsResourceAllocatorExtensions.GetTemporaryTexture2D(Stride.Graphics.GraphicsResourceAllocator,Stride.Graphics.TextureDescription)">
            <summary>
            Gets a <see cref="T:Stride.Graphics.Texture" /> output for the specified description.
            </summary>
            <param name="allocator">The allocator.</param>
            <param name="description">The description.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.Texture" /> class.</returns>
        </member>
        <member name="M:Stride.Graphics.GraphicsResourceAllocatorExtensions.GetTemporaryTexture2D(Stride.Graphics.GraphicsResourceAllocator,System.Int32,System.Int32,Stride.Graphics.PixelFormat,Stride.Graphics.TextureFlags,System.Int32)">
            <summary>
            Gets a <see cref="T:Stride.Graphics.Texture" /> output for the specified description with a single mipmap.
            </summary>
            <param name="allocator">The allocator.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.Texture" /> class.</returns>
            <msdn-id>ff476521</msdn-id>
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="M:Stride.Graphics.GraphicsResourceAllocatorExtensions.GetTemporaryTexture2D(Stride.Graphics.GraphicsResourceAllocator,System.Int32,System.Int32,Stride.Graphics.PixelFormat,Stride.Graphics.MipMapCount,Stride.Graphics.TextureFlags,System.Int32)">
            <summary>
            Gets a <see cref="T:Stride.Graphics.Texture" /> output for the specified description.
            </summary>
            <param name="allocator">The allocator.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int &gt;=1 for a particular mipmap count.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.Texture" /> class.</returns>
            <msdn-id>ff476521</msdn-id>
            <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
            <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="T:Stride.Graphics.GraphicsResourceFactoryBase">
            <summary>
            Base factory for all Graphics resources.
            </summary>
        </member>
        <member name="T:Stride.Graphics.GraphicsResourceLink">
            <summary>
            A resource allocated by <see cref="T:Stride.Graphics.GraphicsResourceAllocator"/> providing allocation informations.
            </summary>
        </member>
        <member name="M:Stride.Graphics.GraphicsResourceLink.#ctor(Stride.Graphics.GraphicsResourceBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.GraphicsResourceLink"/> class.
            </summary>
            <param name="resource">The graphics resource.</param>
            <exception cref="T:System.ArgumentNullException">resource</exception>
        </member>
        <member name="P:Stride.Graphics.GraphicsResourceLink.Resource">
            <summary>
            The graphics resource.
            </summary>
        </member>
        <member name="P:Stride.Graphics.GraphicsResourceLink.LastAccessTime">
            <summary>
            Gets the last time this resource was accessed.
            </summary>
            <value>The last access time.</value>
        </member>
        <member name="P:Stride.Graphics.GraphicsResourceLink.AccessTotalCount">
            <summary>
            Gets the total count of access to this resource (include Increment and Decrement)
            </summary>
            <value>The access total count.</value>
        </member>
        <member name="P:Stride.Graphics.GraphicsResourceLink.AccessCountSinceLastRecycle">
            <summary>
            Gets the access count since last recycle policy was run.
            </summary>
            <value>The access count since last recycle.</value>
        </member>
        <member name="P:Stride.Graphics.GraphicsResourceLink.ReferenceCount">
            <summary>
            The number of active reference to this resource.
            </summary>
        </member>
        <member name="T:Stride.Graphics.GraphicsResourceMap">
            <summary>
            Structured returned by <see cref="!:GraphicsDeviceContext.Map"/>.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsResourceMap.DataPointer">
            <summary>
            Pointer to the data of the <see cref="T:Stride.Graphics.GraphicsResource"/> being mapped into the CPU memory.
            </summary>
            <remarks>
            If <see cref="T:Stride.Graphics.GraphicsProfile"/> is set to low, data are aligned to 4 bytes else alignment is 16 bytes.
            </remarks>
        </member>
        <member name="F:Stride.Graphics.GraphicsResourceMap.RowPitch">
            <summary>
            The row pitch, or width, or physical size (in bytes) of the data.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsResourceMap.DepthPitch">
            <summary>
            The depth pitch, or width, or physical size (in bytes)of the data.
            </summary>
        </member>
        <member name="T:Stride.Graphics.GraphicsResourceRecyclePolicyDelegate">
            <summary>
            A recycle policy to check whether the specified resource must be disposed from a <see cref="T:Stride.Graphics.GraphicsResourceAllocator"/>.
            </summary>
            <param name="resourceLink">The resource link.</param>
            <returns><c>true</c> if the specified resource must be disposed and remove from the , <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Stride.Graphics.GraphicsResourceLifetimeState">
            <summary>
            Describes the lifetime state of a graphics resource.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsResourceLifetimeState.Active">
            <summary>
            Resource is active and available for use.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsResourceLifetimeState.Paused">
            <summary>
            Resource is in a reduced state (partially or completely destroyed) because application is in the background.
            Context should still be alive.
            This is useful for freeing dynamic resources such as FBO, that could be easily restored when application is resumed.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsResourceLifetimeState.Destroyed">
            <summary>
            Resource has been destroyed due to graphics device being destroyed.
            It will need to be recreated or reloaded when rendering resume.
            </summary>
        </member>
        <member name="T:Stride.Graphics.GraphicsResourceUsage">
            <summary>
            Identifies expected resource use during rendering. The usage directly reflects whether a resource is accessible by the CPU and/or the GPU.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsResourceUsage.Default">
            <summary>
            A resource that requires read and write access by the GPU. This is likely to be the most common usage choice.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsResourceUsage.Immutable">
            <summary>
            A resource that can only be read by the GPU. It cannot be written by the GPU, and cannot be accessed at all by the CPU. This type of resource must be initialized when it is created, since it cannot be changed after creation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsResourceUsage.Dynamic">
            <summary>
            A resource that is accessible by both the GPU (read only) and the CPU (write only). A dynamic resource is a good choice for a resource that will be updated by the CPU at least once per frame. To update a dynamic resource, use a <strong>Map</strong> method.
            </summary>
        </member>
        <member name="F:Stride.Graphics.GraphicsResourceUsage.Staging">
            <summary>
            A resource that supports data transfer (copy) from the GPU to the CPU.
            </summary>
        </member>
        <member name="T:Stride.Graphics.IGraphicsDeviceService">
            <summary>
            Service providing method to access GraphicsDevice life-cycle.
            </summary>
        </member>
        <member name="E:Stride.Graphics.IGraphicsDeviceService.DeviceCreated">
            <summary>
            Occurs when a device is created.
            </summary>
        </member>
        <member name="E:Stride.Graphics.IGraphicsDeviceService.DeviceDisposing">
            <summary>
            Occurs when a device is disposing.
            </summary>
        </member>
        <member name="E:Stride.Graphics.IGraphicsDeviceService.DeviceReset">
            <summary>
            Occurs when a device is reseted.
            </summary>
        </member>
        <member name="E:Stride.Graphics.IGraphicsDeviceService.DeviceResetting">
            <summary>
            Occurs when a device is resetting.
            </summary>
        </member>
        <member name="P:Stride.Graphics.IGraphicsDeviceService.GraphicsDevice">
            <summary>
            Gets the current graphcs device.
            </summary>
            <value>The graphics device.</value>
        </member>
        <member name="T:Stride.Graphics.ImageOrientation">
            <summary>
            Defines the possible rotations to apply on image regions.
            </summary>
        </member>
        <member name="F:Stride.Graphics.ImageOrientation.AsIs">
            <summary>
            The image region is taken as is.
            </summary>
        </member>
        <member name="F:Stride.Graphics.ImageOrientation.Rotated90">
            <summary>
            The image is rotated of the 90 degrees (clockwise) in the source texture.
            </summary>
        </member>
        <member name="T:Stride.Graphics.IndexElementSize">
            <summary>
            Size of an index
            </summary>
        </member>
        <member name="T:Stride.Graphics.IVertex">
            <summary>
            The base interface for all the vertex data structure.
            </summary>
        </member>
        <member name="M:Stride.Graphics.IVertex.GetLayout">
            <summary>
            Gets the layout of the vertex.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stride.Graphics.IVertex.FlipWinding">
            <summary>
            Flip the vertex winding.
            </summary>
        </member>
        <member name="T:Stride.Graphics.MapMode">
            <summary>
            Describes how the cpu is accessing a <see cref="T:Stride.Graphics.GraphicsResource"/> with the <see cref="!:GraphicsDeviceContext.Map"/> method.
            </summary>
        </member>
        <member name="F:Stride.Graphics.MapMode.Read">
            <summary>
            Resource is mapped for reading. 
            </summary>
            <remarks>
            The resource must have been created with usage <see cref="F:Stride.Graphics.GraphicsResourceUsage.Staging"/>.
            </remarks>
        </member>
        <member name="F:Stride.Graphics.MapMode.Write">
            <summary>
            Resource is mapped for writing. 
            </summary>
            <remarks>
            The resource must have been created with usage <see cref="F:Stride.Graphics.GraphicsResourceUsage.Dynamic"/> or <see cref="F:Stride.Graphics.GraphicsResourceUsage.Staging"/>.
            </remarks>
        </member>
        <member name="F:Stride.Graphics.MapMode.ReadWrite">
            <summary>
            Resource is mapped for read-write.
            </summary>
            <remarks>
            The resource must have been created with usage <see cref="F:Stride.Graphics.GraphicsResourceUsage.Staging"/>.
            </remarks>
        </member>
        <member name="F:Stride.Graphics.MapMode.WriteDiscard">
            <summary>
            Resource is mapped for writing; the previous contents of the resource will be undefined.
            </summary>
            <remarks>
            The resource must have been created with usage <see cref="F:Stride.Graphics.GraphicsResourceUsage.Dynamic"/>.
            </remarks>
        </member>
        <member name="F:Stride.Graphics.MapMode.WriteNoOverwrite">
            <summary>
            Resource is mapped for writing; the existing contents of the resource cannot be overwritten.
            </summary>
            <remarks>
            This flag is only valid on vertex and index buffers.
            </remarks>
        </member>
        <member name="T:Stride.Graphics.MappedResource">
            <summary>
            A GPU resource mapped for CPU access. This is returned by using <see cref="!:GraphicsDevice.MapSubresource"/>
            </summary>
        </member>
        <member name="M:Stride.Graphics.MappedResource.#ctor(Stride.Graphics.GraphicsResource,System.Int32,Stride.Graphics.DataBox)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.MappedResource"/> struct.
            </summary>
            <param name="resource">The resource.</param>
            <param name="subResourceIndex">Index of the sub resource.</param>
            <param name="dataBox">The data box.</param>
        </member>
        <member name="M:Stride.Graphics.MappedResource.#ctor(Stride.Graphics.GraphicsResource,System.Int32,Stride.Graphics.DataBox,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.MappedResource"/> struct.
            </summary>
            <param name="resource">The resource.</param>
            <param name="subResourceIndex">Index of the sub resource.</param>
            <param name="dataBox">The data box.</param>
            <param name="offsetInBytes">Offset since the beginning of the buffer.</param>
            <param name="sizeInBytes">Size of the mapped resource.</param>
        </member>
        <member name="F:Stride.Graphics.MappedResource.Resource">
            <summary>
            The resource mapped.
            </summary>
        </member>
        <member name="F:Stride.Graphics.MappedResource.SubResourceIndex">
            <summary>
            The subresource index.
            </summary>
        </member>
        <member name="F:Stride.Graphics.MappedResource.DataBox">
            <summary>
            The data box
            </summary>
        </member>
        <member name="F:Stride.Graphics.MappedResource.OffsetInBytes">
            <summary>
            the offset of the mapped resource since the beginning of the buffer
            </summary>
        </member>
        <member name="F:Stride.Graphics.MappedResource.SizeInBytes">
            <summary>
            the size of the mapped resource
            </summary>
        </member>
        <member name="T:Stride.Graphics.MultisampleCount">
            <summary>
            Multisample count level.
            </summary>
        </member>
        <member name="F:Stride.Graphics.MultisampleCount.None">
            <summary>
            No multisample.
            </summary>
        </member>
        <member name="F:Stride.Graphics.MultisampleCount.X2">
            <summary>
            Multisample count of 2 pixels.
            </summary>
        </member>
        <member name="F:Stride.Graphics.MultisampleCount.X4">
            <summary>
            Multisample count of 4 pixels.
            </summary>
        </member>
        <member name="F:Stride.Graphics.MultisampleCount.X8">
            <summary>
            Multisample count of 8 pixels.
            </summary>
        </member>
        <member name="F:Stride.Graphics.MutablePipelineState.CurrentState">
            <summary>
            Current compiled state.
            </summary>
        </member>
        <member name="M:Stride.Graphics.MutablePipelineState.Update">
            <summary>
            Determine and updates <see cref="F:Stride.Graphics.MutablePipelineState.CurrentState"/> from <see cref="F:Stride.Graphics.MutablePipelineState.State"/>.
            </summary>
        </member>
        <member name="T:Stride.Graphics.NamespaceDoc">
            <summary>
            The <see cref="N:Stride.Graphics"/> namespace contains types that provides a unified Graphics API for Direct3D, OpenGL and OpenGLES.
            </summary>
        </member>
        <member name="T:Stride.Graphics.PresentationParameters">
            <summary>
              Describess how data will be displayed to the screen.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PresentationParameters.BackBufferFormat">
            <summary>
              A <strong><see cref="T:SharpDX.DXGI.Format" /></strong> structure describing the display format.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PresentationParameters.BackBufferHeight">
            <summary>
              A value that describes the resolution height.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PresentationParameters.BackBufferWidth">
            <summary>
              A value that describes the resolution width.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PresentationParameters.DepthStencilFormat">
            <summary>
            Gets or sets the depth stencil format
            </summary>
        </member>
        <member name="F:Stride.Graphics.PresentationParameters.DeviceWindowHandle">
            <summary>
              A Window object. See remarks.
            </summary>
            <remarks>
              A window object is platform dependent:
              <ul>
                <li>On Windows Desktop: This could a low level window/control handle (IntPtr), or directly a Winform Control object.</li>
                <li>On Windows Metro: This could be SwapChainBackgroundPanel or SwapChainPanel object.</li>
              </ul>
            </remarks>
        </member>
        <member name="F:Stride.Graphics.PresentationParameters.IsFullScreen">
            <summary>
              Gets or sets a value indicating whether the application is in full screen mode.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PresentationParameters.MultisampleCount">
            <summary>
              Gets or sets a value indicating the number of sample locations during multisampling.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PresentationParameters.PresentationInterval">
            <summary>
              Gets or sets the maximum rate at which the swap chain's back buffers can be presented to the front buffer.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PresentationParameters.RefreshRate">
            <summary>
              A structure describing the refresh rate in hertz
            </summary>
        </member>
        <member name="F:Stride.Graphics.PresentationParameters.PreferredFullScreenOutputIndex">
            <summary>
            The output (monitor) index to use when switching to fullscreen mode. Doesn't have any effect when windowed mode is used.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PresentationParameters.ColorSpace">
            <summary>
            The colorspace used.
            </summary>
        </member>
        <member name="M:Stride.Graphics.PresentationParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.PresentationParameters" /> class with default values.
            </summary>
        </member>
        <member name="M:Stride.Graphics.PresentationParameters.#ctor(System.Int32,System.Int32,Stride.Graphics.WindowHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.PresentationParameters" /> class with <see cref="F:Stride.Graphics.PixelFormat.R8G8B8A8_UNorm"/>.
            </summary>
            <param name="backBufferWidth">Width of the back buffer.</param>
            <param name="backBufferHeight">Height of the back buffer.</param>
            <param name="deviceWindowHandle">The device window handle.</param>
        </member>
        <member name="M:Stride.Graphics.PresentationParameters.#ctor(System.Int32,System.Int32,Stride.Graphics.WindowHandle,Stride.Graphics.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.PresentationParameters" /> class.
            </summary>
            <param name="backBufferWidth">Width of the back buffer.</param>
            <param name="backBufferHeight">Height of the back buffer.</param>
            <param name="deviceWindowHandle">The device window handle.</param>
            <param name="backBufferFormat">The back buffer format.</param>
        </member>
        <member name="T:Stride.Graphics.PresentInterval">
            <summary>
            Defines flags that describe the relationship between the adapter refresh rate and the rate at which Present operations are completed.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PresentInterval.Immediate">
            <summary>
            The runtime updates the window client area immediately, and might do so more than once during the adapter refresh period. Present operations might be affected immediately. This option is always available for both windowed and full-screen swap chains.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PresentInterval.Default">
            <summary>
            Equivalent to setting One.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PresentInterval.One">
            <summary>
            The driver waits for the vertical retrace period (the runtime will beam trace to prevent tearing). Present operations are not affected more frequently than the screen refresh rate; the runtime completes one Present operation per adapter refresh period, at most. This option is always available for both windowed and full-screen swap chains.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PresentInterval.Two">
            <summary>
            The driver waits for the vertical retrace period. Present operations are not affected more frequently than every second screen refresh.
            </summary>
        </member>
        <member name="T:Stride.Graphics.PrimitiveQuad">
            <summary>
            Primitive quad use to draw an effect on a quad (fullscreen by default). This is directly accessible from the <see cref="!:GraphicsDevice.DrawQuad"/> method.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PrimitiveQuad.pipelineState">
            <summary>
            The pipeline state.
            </summary>
        </member>
        <member name="M:Stride.Graphics.PrimitiveQuad.#ctor(Stride.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.PrimitiveQuad" /> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="effect">The effect.</param>
        </member>
        <member name="P:Stride.Graphics.PrimitiveQuad.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
            <value>The graphics device.</value>
        </member>
        <member name="P:Stride.Graphics.PrimitiveQuad.Parameters">
            <summary>
            Gets the parameters used.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="M:Stride.Graphics.PrimitiveQuad.Draw(Stride.Graphics.CommandList)">
            <summary>
            Draws a quad. The effect must have been applied before calling this method with pixel shader having the signature float2:TEXCOORD.
            </summary>
            <param name="texture"></param>
        </member>
        <member name="M:Stride.Graphics.PrimitiveQuad.Draw(Stride.Graphics.GraphicsContext,Stride.Rendering.EffectInstance)">
            <summary>
            Draws a quad. The effect must have been applied before calling this method with pixel shader having the signature float2:TEXCOORD.
            </summary>
            <param name="texture"></param>
        </member>
        <member name="M:Stride.Graphics.PrimitiveQuad.Draw(Stride.Graphics.GraphicsContext,Stride.Graphics.Texture,System.Nullable{Stride.Graphics.BlendStateDescription})">
            <summary>
            Draws a quad with a texture. This Draw method is using the current effect bound to this instance.
            </summary>
            <param name="texture">The texture.</param>
            <param name="applyEffectStates">The flag to apply effect states.</param>
        </member>
        <member name="M:Stride.Graphics.PrimitiveQuad.Draw(Stride.Graphics.GraphicsContext,Stride.Graphics.Texture,Stride.Graphics.SamplerState,Stride.Core.Mathematics.Color4,System.Nullable{Stride.Graphics.BlendStateDescription})">
            <summary>
            Draws a quad with a texture. This Draw method is using a simple pixel shader that is sampling the texture.
            </summary>
            <param name="texture">The texture to draw.</param>
            <param name="samplerState">State of the sampler. If null, default sampler is <see cref="F:Stride.Graphics.SamplerStateFactory.LinearClamp" />.</param>
            <param name="color">The color.</param>
            <param name="applyEffectStates">The flag to apply effect states.</param>
            <exception cref="T:System.ArgumentException">Expecting a Texture;texture</exception>
        </member>
        <member name="T:Stride.Graphics.PrimitiveQuad.SharedData">
            <summary>
            Internal structure used to store VertexBuffer and VertexInputLayout.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PrimitiveQuad.SharedData.VertexBuffer">
            <summary>
            The vertex buffer
            </summary>
        </member>
        <member name="T:Stride.Graphics.PrimitiveType">
            <summary>
            Defines how vertex data is ordered.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PrimitiveType.Undefined">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PrimitiveType.PointList">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PrimitiveType.LineList">
            <summary>
            The data is ordered as a sequence of line segments; each line segment is described by two new vertices. The count may be any positive integer.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PrimitiveType.LineStrip">
            <summary>
            The data is ordered as a sequence of line segments; each line segment is described by one new vertex and the last vertex from the previous line seqment. The count may be any positive integer.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PrimitiveType.TriangleList">
            <summary>
            The data is ordered as a sequence of triangles; each triangle is described by three new vertices. Back-face culling is affected by the current winding-order render state.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PrimitiveType.TriangleStrip">
            <summary>
            The data is ordered as a sequence of triangles; each triangle is described by two new vertices and one vertex from the previous triangle. The back-face culling flag is flipped automatically on even-numbered
            </summary>
        </member>
        <member name="F:Stride.Graphics.PrimitiveType.LineListWithAdjacency">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PrimitiveType.LineStripWithAdjacency">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PrimitiveType.TriangleListWithAdjacency">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PrimitiveType.TriangleStripWithAdjacency">
            <summary>
            No documentation.
            </summary>
        </member>
        <member name="M:Stride.Graphics.PrimitiveTypeExtensions.ControlPointCount(Stride.Graphics.PrimitiveType,System.Int32)">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
            <param name="controlPoints">Number of control points. Value must be in the range 1 to 32.</param>
        </member>
        <member name="T:Stride.Graphics.RasterizerStateDescription">
            <summary>
            Describes a rasterizer state.
            </summary>
        </member>
        <member name="M:Stride.Graphics.RasterizerStateDescription.#ctor(Stride.Graphics.CullMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.RasterizerStateDescription"/> class.
            </summary>
            <param name="cullMode">The cull mode.</param>
        </member>
        <member name="F:Stride.Graphics.RasterizerStateDescription.FillMode">
            <summary>
            Determines the fill mode to use when rendering (see <see cref="F:Stride.Graphics.RasterizerStateDescription.FillMode"/>).
            </summary>
        </member>
        <member name="F:Stride.Graphics.RasterizerStateDescription.CullMode">
            <summary>
            Indicates triangles facing the specified direction are not drawn (see <see cref="F:Stride.Graphics.RasterizerStateDescription.CullMode"/>).
            </summary>
        </member>
        <member name="F:Stride.Graphics.RasterizerStateDescription.FrontFaceCounterClockwise">
            <summary>
            Determines if a triangle is front- or back-facing. If this parameter is true, then a triangle will be considered front-facing if its vertices are counter-clockwise on the render target and considered back-facing if they are clockwise. If this parameter is false then the opposite is true.
            </summary>
        </member>
        <member name="F:Stride.Graphics.RasterizerStateDescription.DepthBias">
            <summary>
            Depth value added to a given pixel. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.RasterizerStateDescription.DepthBiasClamp">
            <summary>
            Gets or sets the depth bias for polygons, which is the amount of bias to apply to the depth of a primitive to alleviate depth testing problems for primitives of similar depth. The default value is 0.
            </summary>
        </member>
        <member name="F:Stride.Graphics.RasterizerStateDescription.SlopeScaleDepthBias">
            <summary>
            Scalar on a given pixel's slope. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.RasterizerStateDescription.DepthClipEnable">
            <summary>
            Enable clipping based on distance. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.RasterizerStateDescription.ScissorTestEnable">
            <summary>
            Enable scissor-rectangle culling. All pixels ouside an active scissor rectangle are culled.
            </summary>
        </member>
        <member name="F:Stride.Graphics.RasterizerStateDescription.MultisampleCount">
            <summary>
            Multisample level.
            </summary>
        </member>
        <member name="F:Stride.Graphics.RasterizerStateDescription.MultisampleAntiAliasLine">
            <summary>
            Enable line antialiasing; only applies if doing line drawing and MultisampleEnable is false.
            </summary>
        </member>
        <member name="M:Stride.Graphics.RasterizerStateDescription.SetDefault">
            <summary>
            Sets default values for this instance.
            </summary>
        </member>
        <member name="P:Stride.Graphics.RasterizerStateDescription.Default">
            <summary>
            Gets default values for this instance.
            </summary>
        </member>
        <member name="T:Stride.Graphics.RasterizerStates">
            <summary>
            Known values for <see cref="T:Stride.Graphics.RasterizerStateDescription"/>.
            </summary>
        </member>
        <member name="F:Stride.Graphics.RasterizerStates.CullFront">
            <summary>
            Built-in rasterizer state object with settings for culling primitives with clockwise winding order.
            </summary>
        </member>
        <member name="F:Stride.Graphics.RasterizerStates.CullBack">
            <summary>
            Built-in rasterizer state object with settings for culling primitives with counter-clockwise winding order.
            </summary>
        </member>
        <member name="F:Stride.Graphics.RasterizerStates.CullNone">
            <summary>
            Built-in rasterizer state object with settings for not culling any primitives.
            </summary>
        </member>
        <member name="F:Stride.Graphics.RasterizerStates.WireframeCullFront">
            <summary>
            Built-in rasterizer state object for wireframe rendering with settings for culling primitives with clockwise winding order.
            </summary>
        </member>
        <member name="F:Stride.Graphics.RasterizerStates.WireframeCullBack">
            <summary>
            Built-in rasterizer state object for wireframe with settings for culling primitives with counter-clockwise winding order.
            </summary>
        </member>
        <member name="F:Stride.Graphics.RasterizerStates.Wireframe">
            <summary>
            Built-in rasterizer state object for wireframe with settings for not culling any primitives.
            </summary>
        </member>
        <member name="F:Stride.Graphics.RequiredDisplayOrientation.Default">
            <summary>
            The default value for the orientation.
            </summary>
        </member>
        <member name="F:Stride.Graphics.RequiredDisplayOrientation.LandscapeLeft">
            <summary>
            Displays in landscape mode to the left.
            </summary>
        </member>
        <member name="F:Stride.Graphics.RequiredDisplayOrientation.LandscapeRight">
            <summary>
            Displays in landscape mode to the right.
            </summary>
        </member>
        <member name="F:Stride.Graphics.RequiredDisplayOrientation.Portrait">
            <summary>
            Displays in portrait mode.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PreferredGraphicsPlatform.Direct3D11">
            <summary>
            Direct3D11.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PreferredGraphicsPlatform.Direct3D12">
            <summary>
            Direct3D12.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PreferredGraphicsPlatform.OpenGL">
            <summary>
            OpenGL.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PreferredGraphicsPlatform.OpenGLES">
            <summary>
            OpenGL ES.
            </summary>
        </member>
        <member name="F:Stride.Graphics.PreferredGraphicsPlatform.Vulkan">
            <summary>
            Vulkan
            </summary>
        </member>
        <member name="F:Stride.Graphics.RenderingSettings.DefaultBackBufferWidth">
            <summary>
            Gets or sets the width of the back buffer.
            </summary>
            <userdoc>
            The desired back buffer width.
            Might be overriden depending on actual device resolution and/or ratio.
            On Windows, it will be the window size. On Android/iOS, it will be the off-screen target resolution.
            </userdoc>
        </member>
        <member name="F:Stride.Graphics.RenderingSettings.DefaultBackBufferHeight">
            <summary>
            Gets or sets the height of the back buffer.
            </summary>
            <userdoc>
            The desired back buffer height.
            Might be overriden depending on actual device resolution and/or ratio.
            On Windows, it will be the window size. On Android/iOS, it will be the off-screen target resolution.
            </userdoc>
        </member>
        <member name="F:Stride.Graphics.RenderingSettings.AdaptBackBufferToScreen">
            <summary>
            Gets or sets a value that if true will make sure that the aspect ratio of screen is kept.
            </summary>
            <userdoc>
            If true, adapt the ratio of the back buffer so that it fits the screen ratio.
            </userdoc>
        </member>
        <member name="F:Stride.Graphics.RenderingSettings.DefaultGraphicsProfile">
            <summary>
            Gets or sets the default graphics profile.
            </summary>
            <userdoc>The graphics feature level this game require.</userdoc>
        </member>
        <member name="F:Stride.Graphics.RenderingSettings.ColorSpace">
            <summary>
            Gets or sets the colorspace.
            </summary>
            <value>The colorspace.</value>
            <userdoc>The colorspace (Gamma or Linear) used for rendering. This value affects both the runtime and editor.</userdoc>
        </member>
        <member name="F:Stride.Graphics.RenderingSettings.DisplayOrientation">
            <summary>
            Gets or sets the display orientation.
            </summary>
            <userdoc>The display orientations this game support.</userdoc>
        </member>
        <member name="T:Stride.Graphics.RenderOutputDescription">
            <summary>
            Describes render targets and depth stencil output formats.
            </summary>
        </member>
        <member name="F:Stride.Graphics.RenderOutputDescription.ScissorTestEnable">
            <summary>
            Enable scissor-rectangle culling. All pixels ouside an active scissor rectangle are culled.
            </summary>
        </member>
        <member name="T:Stride.Graphics.RenderTargetGraphicsPresenter">
            <summary>
            Graphics presenter for SwapChain.
            </summary>
        </member>
        <member name="M:Stride.Graphics.RenderTargetGraphicsPresenter.SetBackBuffer(Stride.Graphics.Texture)">
            <summary>
            Sets the back buffer.
            </summary>
            <param name="backBuffer">The back buffer.</param>
        </member>
        <member name="T:Stride.Graphics.ResourceGroup">
            <summary>
            Contains resources and a constant buffer, that usually change at a given frequency.
            </summary>
        </member>
        <member name="F:Stride.Graphics.ResourceGroup.DescriptorSet">
            <summary>
            Resources.
            </summary>
        </member>
        <member name="F:Stride.Graphics.ResourceGroup.ConstantBuffer">
            <summary>
            Constant buffer.
            </summary>
        </member>
        <member name="T:Stride.Graphics.ResourceGroupAllocator">
            <summary>
            Allocator for resource groups.
            </summary>
            <note>Non thread-safe. You should have one such allocator per thread.</note>
        </member>
        <member name="T:Stride.Graphics.ResourceGroupBufferUploader">
            <summary>
            Describes how DescriptorSet maps to real resource binding.
            This might become a core part of <see cref="T:Stride.Graphics.Effect"/> at some point.
            </summary>
        </member>
        <member name="T:Stride.Graphics.ResourceRegion">
            <summary>
            <p>Defines a 3D box.</p>
            </summary>
            <remarks>
            <p>The following diagram shows a 3D box, where the origin is the left, front, top corner.</p><p></p><p>The values for <strong>right</strong>, <strong>bottom</strong>, and <strong>back</strong> are each one pixel past the end of the pixels that are included in the box region.  That is, the values for <strong>left</strong>, <strong>top</strong>, and <strong>front</strong> are included in the box region while the values for right, bottom, and back are excluded from the box region. For example, for a box that is one pixel wide, (right - left) == 1; the box region includes the left pixel but not the right pixel.</p>
            </remarks>
        </member>
        <member name="F:Stride.Graphics.ResourceRegion.Left">
            <summary>
            <dd> <p>The x position of the left hand side of the box.</p> </dd>
            </summary>
        </member>
        <member name="F:Stride.Graphics.ResourceRegion.Top">
            <summary>
            <dd> <p>The y position of the top of the box.</p> </dd>
            </summary>
        </member>
        <member name="F:Stride.Graphics.ResourceRegion.Front">
            <summary>
            <dd> <p>The z position of the front of the box.</p> </dd>
            </summary>
        </member>
        <member name="F:Stride.Graphics.ResourceRegion.Right">
            <summary>
            <dd> <p>The x position of the right hand side of the box.</p> </dd>
            </summary>
        </member>
        <member name="F:Stride.Graphics.ResourceRegion.Bottom">
            <summary>
            <dd> <p>The y position of the bottom of the box.</p> </dd>
            </summary>
        </member>
        <member name="F:Stride.Graphics.ResourceRegion.Back">
            <summary>
            <dd> <p>The z position of the back of the box.</p> </dd>
            </summary>
        </member>
        <member name="T:Stride.Graphics.RootSignature">
            <summary>
            Describes how <see cref="T:Stride.Graphics.DescriptorSet"/> will be bound together.
            </summary>
        </member>
        <member name="T:Stride.Graphics.SamplerStateFactory">
            <summary>
            Base factory for <see cref="T:Stride.Graphics.SamplerState"/>.
            </summary>
        </member>
        <member name="M:Stride.Graphics.SamplerStateFactory.#ctor(Stride.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.SamplerStateFactory"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="F:Stride.Graphics.SamplerStateFactory.PointWrap">
            <summary>
            Default state for point filtering with texture coordinate wrapping.
            </summary>
        </member>
        <member name="F:Stride.Graphics.SamplerStateFactory.PointClamp">
            <summary>
            Default state for point filtering with texture coordinate clamping.
            </summary>
        </member>
        <member name="F:Stride.Graphics.SamplerStateFactory.LinearWrap">
            <summary>
            Default state for linear filtering with texture coordinate wrapping.
            </summary>
        </member>
        <member name="F:Stride.Graphics.SamplerStateFactory.LinearClamp">
            <summary>
            Default state for linear filtering with texture coordinate clamping.
            </summary>
        </member>
        <member name="F:Stride.Graphics.SamplerStateFactory.AnisotropicWrap">
            <summary>
            Default state for anisotropic filtering with texture coordinate wrapping.
            </summary>
        </member>
        <member name="F:Stride.Graphics.SamplerStateFactory.AnisotropicClamp">
            <summary>
            Default state for anisotropic filtering with texture coordinate clamping.
            </summary>
        </member>
        <member name="T:Stride.Graphics.SamplerStateSerializer">
            <summary>
            Serializer for <see cref="T:Stride.Graphics.SamplerState"/>.
            </summary>
        </member>
        <member name="M:Stride.Graphics.SDL.Application.#cctor">
            <summary>
            Initialize Application for handling events and available windows.
            </summary>
        </member>
        <member name="M:Stride.Graphics.SDL.Application.RegisterWindow(Stride.Graphics.SDL.Window)">
            <summary>
            Register <paramref name="c"/> to the list of available windows.
            </summary>
            <param name="c">Window to register</param>
        </member>
        <member name="M:Stride.Graphics.SDL.Application.UnregisterWindow(Stride.Graphics.SDL.Window)">
            <summary>
            Unregister <paramref name="c"/> from the list of available windows.
            </summary>
            <param name="c">Window to unregister</param> 
        </member>
        <member name="P:Stride.Graphics.SDL.Application.WindowWithFocus">
            <summary>
            Window that currently has the focus.
            </summary>
        </member>
        <member name="P:Stride.Graphics.SDL.Application.MousePosition">
            <summary>
            Screen coordinate of the mouse.
            </summary>
        </member>
        <member name="P:Stride.Graphics.SDL.Application.Windows">
            <summary>
            List of windows managed by the application.
            </summary>
        </member>
        <member name="M:Stride.Graphics.SDL.Application.ProcessEvents">
            <summary>
            Process all available events.
            </summary>
        </member>
        <member name="M:Stride.Graphics.SDL.Application.ProcessEvent(SDL2.SDL.SDL_Event)">
            <summary>
            Process a single event and dispatch it to the right window.
            </summary>
        </member>
        <member name="M:Stride.Graphics.SDL.Application.WindowFromSdlHandle(System.IntPtr)">
            <summary>
            Given a SDL Handle of a SDL window, retrieve the corresponding managed object. If object
            was already garbage collected, we will also clean up <see cref="F:Stride.Graphics.SDL.Application.InternalWindows"/>.
            </summary>
            <param name="w">SDL Handle of the window we are looking for</param>
            <returns></returns>
        </member>
        <member name="F:Stride.Graphics.SDL.Application.InternalWindows">
            <summary>
            Backup storage for windows of current application.
            </summary>
        </member>
        <member name="T:Stride.Graphics.SDL.Cursor">
            <summary>
            Basic operations to show, hide and load a cursor.
            </summary>
        </member>
        <member name="M:Stride.Graphics.SDL.Cursor.#ctor(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Initialize a cursor with <paramref name="data"/> and <paramref name="mask"/>. For more details, see 
            https://wiki.libsdl.org/SDL_CreateCursor.
            </summary>
            <param name="data">Actual cursor image</param>
            <param name="mask">Mask for <paramref name="data"/></param>
            <param name="w">Width of cursor</param>
            <param name="h">Height of cursor</param>
            <param name="hot_x">Hotspot X coordinate of cursor</param>
            <param name="hot_y">Hotspot Y coordinate of cursor</param>
        </member>
        <member name="P:Stride.Graphics.SDL.Cursor.Handle">
            <summary>
            Access to low level pointer to the SDL_Cursor struct.
            </summary>
        </member>
        <member name="P:Stride.Graphics.SDL.Cursor.Position">
            <summary>
            Position of cursor on screen.
            </summary>
        </member>
        <member name="M:Stride.Graphics.SDL.Cursor.Hide">
            <summary>
            Hide cursor.
            </summary>
        </member>
        <member name="M:Stride.Graphics.SDL.Cursor.Show">
            <summary>
            Show cursor.
            </summary>
        </member>
        <member name="M:Stride.Graphics.SDL.Cursor.SetCursor(Stride.Graphics.SDL.Cursor)">
            <summary>
            Set cursor with <paramref name="cur"/>.
            </summary>
            <param name="cur">New cursor to show.</param>
        </member>
        <member name="T:Stride.Graphics.SDL.FormBorderStyle">
            <summary>
            Set of border style to mimic the Windows forms one. We actually only show <see cref="F:Stride.Graphics.SDL.FormBorderStyle.FixedSingle"/> and <see cref="F:Stride.Graphics.SDL.FormBorderStyle.Sizable"/> as the
            other values don't make sense in a purely SDL context.
            </summary>
        </member>
        <member name="F:Stride.Graphics.SDL.FormBorderStyle.None">
            <summary>
            Borderless
            </summary>
        </member>
        <member name="F:Stride.Graphics.SDL.FormBorderStyle.FixedSingle">
            <summary>
            Borders but not resizeable
            </summary>
        </member>
        <member name="F:Stride.Graphics.SDL.FormBorderStyle.Sizable">
            <summary>
            Borders and resizeable
            </summary>
        </member>
        <member name="T:Stride.Graphics.SDL.FormWindowState">
            <summary>
            Set of window states to mimic the Windows forms one.
            </summary>
        </member>
        <member name="M:Stride.Graphics.SDL.Window.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Stride.Graphics.SDL.Window"/> class.
            </summary>
        </member>
        <member name="M:Stride.Graphics.SDL.Window.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.SDL.Window"/> class with <paramref name="title"/> as the title of the Window.
            </summary>
            <param name="title">Title of the window, see Text property.</param>
        </member>
        <member name="M:Stride.Graphics.SDL.Window.SendToBack">
            <summary>
            Move window to back.
            </summary>
        </member>
        <member name="M:Stride.Graphics.SDL.Window.BringToFront">
            <summary>
            Move window to front.
            </summary>
        </member>
        <member name="P:Stride.Graphics.SDL.Window.MousePosition">
            <summary>
            Get the mouse position on screen.
            </summary>
        </member>
        <member name="P:Stride.Graphics.SDL.Window.RelativeCursorPosition">
            <summary>
            Get the coordinate of the mouse in Window coordinates
            </summary>
        </member>
        <member name="P:Stride.Graphics.SDL.Window.TopMost">
            <summary>
            Make the window topmost
            </summary>
        </member>
        <member name="P:Stride.Graphics.SDL.Window.MinimizeOnFocusLoss">
            <summary>
            Minimize the window when focus is lost in fullscreen, default is false.
            </summary>
        </member>
        <member name="M:Stride.Graphics.SDL.Window.Show">
            <summary>
            Show window. The first time a window is shown we execute any actions from <see cref="!:HandleCreated"/>.
            </summary>
        </member>
        <member name="P:Stride.Graphics.SDL.Window.FullscreenIsBorderlessWindow">
            <summary>
            Gets or sets a value indicating whether fullscreen mode should be a borderless window matching the desktop size.
            Decides whether to set the SDL_WINDOW_FULLSCREEN_DESKTOP (fake fullscreen) or SDL_WINDOW_FULLSCREEN (real fullscreen) flag.
            </summary>
        </member>
        <member name="P:Stride.Graphics.SDL.Window.IsFullScreen">
            <summary>
            Are we showing the window in full screen mode?
            </summary>
        </member>
        <member name="P:Stride.Graphics.SDL.Window.Visible">
            <summary>
            Is current window visible?
            </summary>
        </member>
        <member name="P:Stride.Graphics.SDL.Window.WindowState">
            <summary>
            State of the window which can be either of Normal, Maximized or Minimized.
            </summary>
        </member>
        <member name="P:Stride.Graphics.SDL.Window.Focused">
            <summary>
            Is current window focused?
            </summary>
        </member>
        <member name="P:Stride.Graphics.SDL.Window.MaximizeBox">
            <summary>
            Does current window offer a maximize button?
            </summary>
            <remarks>Setter is not implemented on SDL, since we do have callers, for the time being, the code does nothing instead of throwing an exception.</remarks>
        </member>
        <member name="P:Stride.Graphics.SDL.Window.Size">
            <summary>
            Size of window.
            </summary>
        </member>
        <member name="P:Stride.Graphics.SDL.Window.ClientSize">
            <summary>
            Size of the client area of a window.
            </summary>
        </member>
        <member name="P:Stride.Graphics.SDL.Window.ClientRectangle">
            <summary>
            Size of client area expressed as a rectangle.
            </summary>
        </member>
        <member name="P:Stride.Graphics.SDL.Window.Location">
            <summary>
            Coordinates of the top-left corner of the window in screen coordinate.
            </summary>
        </member>
        <member name="P:Stride.Graphics.SDL.Window.Text">
            <summary>
            Text of the title of the Window.
            </summary>
        </member>
        <member name="P:Stride.Graphics.SDL.Window.FormBorderStyle">
            <summary>
            Style of border. Currently can only be Sizable or FixedSingle.
            </summary>
        </member>
        <member name="M:Stride.Graphics.SDL.Window.ProcessEvent(SDL2.SDL.SDL_Event)">
            <summary>
            Process events for the current window
            </summary>
        </member>
        <member name="P:Stride.Graphics.SDL.Window.Handle">
            <summary>
            Platform specific handle for Window:
            - On Windows: the HWND of the window
            - On Unix: the Window ID (XID). Note that on Unix, the value is 32-bit (See X11/X.h for the typedef of XID).
            </summary>
        </member>
        <member name="P:Stride.Graphics.SDL.Window.SdlHandle">
            <summary>
            The SDL window handle.
            </summary>
        </member>
        <member name="P:Stride.Graphics.SDL.Window.Exists">
            <summary>
            Is the Window still alive?
            </summary>
        </member>
        <member name="P:Stride.Graphics.SDL.Window.IsDisposed">
            <summary>
            Have we already disposed of the current object?
            </summary>
        </member>
        <member name="E:Stride.Graphics.SDL.Window.Disposed">
            <summary>
            Actions to be called when we dispose of current.
            </summary>
        </member>
        <member name="M:Stride.Graphics.SDL.Window.Dispose(System.Boolean)">
            <summary>
            Dispose of current Window.
            </summary>
            <param name="disposing">If <c>false</c> we are being called from the Finalizer.</param>
        </member>
        <member name="T:Stride.Graphics.SpriteBatch">
            <summary>
            Renders a group of sprites.
            </summary>
        </member>
        <member name="P:Stride.Graphics.SpriteBatch.DefaultDepth">
            <summary>
            Gets or sets the default depth value used by the <see cref="T:Stride.Graphics.SpriteBatch"/> when the <see cref="P:Stride.Graphics.SpriteBatch.VirtualResolution"/> is not set. 
            </summary>
            <remarks>More precisely, this value represents the length "farPlane-nearPlane" used by the default projection matrix.</remarks>
        </member>
        <member name="P:Stride.Graphics.SpriteBatch.VirtualResolution">
            <summary>
            Gets or sets the virtual resolution used for this <see cref="T:Stride.Graphics.SpriteBatch"/>
            </summary>
        </member>
        <member name="M:Stride.Graphics.SpriteBatch.#ctor(Stride.Graphics.GraphicsDevice,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.SpriteBatch" /> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="bufferElementCount">The maximum number element that can be batched in one time.</param>
            <param name="batchCapacity">The batch capacity default to 64.</param>
        </member>
        <member name="M:Stride.Graphics.SpriteBatch.CalculateDefaultProjection(Stride.Core.Mathematics.Vector3)">
            <summary>
            Calculate the default projection matrix for the provided virtual resolution.
            </summary>
            <returns>The default projection matrix for the provided virtual resolution</returns>
            <remarks>The sprite batch default projection is an orthogonal matrix such as (0,0) is the Top/Left corner of the screen and 
            (VirtualResolution.X, VirtualResolution.Y) is the Bottom/Right corner of the screen.</remarks>
        </member>
        <member name="M:Stride.Graphics.SpriteBatch.CalculateDefaultProjection(Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Matrix@)">
            <summary>
            Calculate the default projection matrix for the provided virtual resolution.
            </summary>
        </member>
        <member name="M:Stride.Graphics.SpriteBatch.Begin(Stride.Graphics.GraphicsContext,Stride.Graphics.SpriteSortMode,Stride.Rendering.EffectInstance)">
            <summary>
            Begins a sprite batch operation using deferred sort and default state objects (BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.Default, RasterizerState.CullCounterClockwise).
            </summary>
            <param name="graphicsContext">The graphics context to use.</param>
            <param name="sortMode">The sprite drawing order to use for the batch session</param>
            <param name="effect">The effect to use for the batch session</param>
        </member>
        <member name="M:Stride.Graphics.SpriteBatch.Begin(Stride.Graphics.GraphicsContext,Stride.Graphics.SpriteSortMode,System.Nullable{Stride.Graphics.BlendStateDescription},Stride.Graphics.SamplerState,System.Nullable{Stride.Graphics.DepthStencilStateDescription},System.Nullable{Stride.Graphics.RasterizerStateDescription},Stride.Rendering.EffectInstance,System.Int32)">
            <summary>
            Begins a sprite batch rendering using the specified sorting mode and blend state, sampler, depth stencil and rasterizer state objects, plus a custom effect. Passing null for any of the state objects selects the default default state objects (BlendState.AlphaBlend, DepthStencilState.Default, RasterizerState.CullCounterClockwise, SamplerState.LinearClamp). Passing a null effect selects the default SpriteBatch Class shader.
            </summary>
            <param name="graphicsContext">The graphics context to use.</param>
            <param name="sortMode">The sprite drawing order to use for the batch session</param>
            <param name="blendState">The blending state to use for the batch session</param>
            <param name="samplerState">The sampling state to use for the batch session</param>
            <param name="depthStencilState">The depth stencil state to use for the batch session</param>
            <param name="rasterizerState">The rasterizer state to use for the batch session</param>
            <param name="effect">The effect to use for the batch session</param>
            <param name="stencilValue">The value of the stencil buffer to take as reference for the batch session</param>
        </member>
        <member name="M:Stride.Graphics.SpriteBatch.Begin(Stride.Graphics.GraphicsContext,Stride.Core.Mathematics.Matrix,Stride.Graphics.SpriteSortMode,System.Nullable{Stride.Graphics.BlendStateDescription},Stride.Graphics.SamplerState,System.Nullable{Stride.Graphics.DepthStencilStateDescription},System.Nullable{Stride.Graphics.RasterizerStateDescription},Stride.Rendering.EffectInstance,System.Int32)">
            <summary>
            Begins a sprite batch rendering using the specified sorting mode and blend state, sampler, depth stencil, rasterizer state objects, plus a custom effect and a 2D transformation matrix. Passing null for any of the state objects selects the default default state objects (BlendState.AlphaBlend, DepthStencilState.Default, RasterizerState.CullCounterClockwise, SamplerState.LinearClamp). Passing a null effect selects the default SpriteBatch Class shader.
            </summary>
            <param name="graphicsContext">The graphics context to use.</param>
            <param name="viewMatrix">The view matrix to use for the batch session</param>
            <param name="sortMode">The sprite drawing order to use for the batch session</param>
            <param name="blendState">The blending state to use for the batch session</param>
            <param name="samplerState">The sampling state to use for the batch session</param>
            <param name="depthStencilState">The depth stencil state to use for the batch session</param>
            <param name="rasterizerState">The rasterizer state to use for the batch session</param>
            <param name="effect">The effect to use for the batch session</param>
            <param name="stencilValue">The value of the stencil buffer to take as reference for the batch session</param>
        </member>
        <member name="M:Stride.Graphics.SpriteBatch.Begin(Stride.Graphics.GraphicsContext,Stride.Core.Mathematics.Matrix,Stride.Core.Mathematics.Matrix,Stride.Graphics.SpriteSortMode,System.Nullable{Stride.Graphics.BlendStateDescription},Stride.Graphics.SamplerState,System.Nullable{Stride.Graphics.DepthStencilStateDescription},System.Nullable{Stride.Graphics.RasterizerStateDescription},Stride.Rendering.EffectInstance,System.Int32)">
            <summary>
            Begins a sprite batch rendering using the specified sorting mode and blend state, sampler, depth stencil, rasterizer state objects, plus a custom effect and a 2D transformation matrix. Passing null for any of the state objects selects the default default state objects (BlendState.AlphaBlend, DepthStencilState.Default, RasterizerState.CullCounterClockwise, SamplerState.LinearClamp). Passing a null effect selects the default SpriteBatch Class shader.
            </summary>
            <param name="graphicsContext">The graphics context to use.</param>
            <param name="viewMatrix">The view matrix to use for the batch session</param>
            <param name="projectionMatrix">The projection matrix to use for the batch session</param>
            <param name="sortMode">The sprite drawing order to use for the batch session</param>
            <param name="blendState">The blending state to use for the batch session</param>
            <param name="samplerState">The sampling state to use for the batch session</param>
            <param name="depthStencilState">The depth stencil state to use for the batch session</param>
            <param name="rasterizerState">The rasterizer state to use for the batch session</param>
            <param name="effect">The effect to use for the batch session</param>
            <param name="stencilValue">The value of the stencil buffer to take as reference for the batch session</param>
        </member>
        <member name="M:Stride.Graphics.SpriteBatch.Draw(Stride.Graphics.Texture,Stride.Core.Mathematics.RectangleF,Stride.Core.Mathematics.Color4,Stride.Core.Mathematics.Color4)">
            <summary>
            Adds a sprite to a batch of sprites for rendering using the specified texture, destination rectangle, and color. 
            </summary>
            <param name="texture">A texture.</param>
            <param name="destinationRectangle">A rectangle that specifies (in screen coordinates) the destination for drawing the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <remarks>
            Before making any calls to Draw, you must call Begin. Once all calls to Draw are complete, call End. 
            </remarks>
        </member>
        <member name="M:Stride.Graphics.SpriteBatch.Draw(Stride.Graphics.Texture,Stride.Core.Mathematics.Vector2)">
            <summary>
            Adds a sprite to a batch of sprites for rendering using the specified texture, position and color. 
            </summary>
            <param name="texture">A texture.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
        </member>
        <member name="M:Stride.Graphics.SpriteBatch.Draw(Stride.Graphics.Texture,Stride.Core.Mathematics.Vector2,Stride.Core.Mathematics.Color,Stride.Core.Mathematics.Color4)">
            <summary>
            Adds a sprite to a batch of sprites for rendering using the specified texture, position and color. 
            </summary>
            <param name="texture">A texture.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
        </member>
        <member name="M:Stride.Graphics.SpriteBatch.Draw(Stride.Graphics.Texture,Stride.Core.Mathematics.RectangleF,System.Nullable{Stride.Core.Mathematics.RectangleF},Stride.Core.Mathematics.Color4,System.Single,Stride.Core.Mathematics.Vector2,Stride.Graphics.SpriteEffects,Stride.Graphics.ImageOrientation,System.Single,Stride.Core.Mathematics.Color4,Stride.Graphics.SwizzleMode)">
            <summary>
            Adds a sprite to a batch of sprites for rendering using the specified texture, destination rectangle, source rectangle, color, rotation, origin, effects and layer. 
            </summary>
            <param name="texture">A texture.</param>
            <param name="destinationRectangle">A rectangle that specifies (in screen coordinates) the destination for drawing the sprite. If this rectangle is not the same size as the source rectangle, the sprite will be scaled to fit.</param>
            <param name="sourceRectangle">A rectangle that specifies (in texels) the source texels from a texture. Use null to draw the entire texture. </param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
            <param name="origin">The sprite origin in the texture in pixels (dependent of image orientation). Default value is (0,0) which represents the upper-left corner.</param>
            <param name="effects">Effects to apply.</param>
            <param name="orientation">The source image orientation</param>
            <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
        </member>
        <member name="M:Stride.Graphics.SpriteBatch.Draw(Stride.Graphics.Texture,Stride.Core.Mathematics.Vector2,Stride.Core.Mathematics.Color4,System.Single,Stride.Core.Mathematics.Vector2,System.Single,Stride.Graphics.SpriteEffects,Stride.Graphics.ImageOrientation,System.Single)">
            <summary>
            Adds a sprite to a batch of sprites for rendering using the specified texture, position, source rectangle, color, rotation, origin, scale, effects, and layer. 
            </summary>
            <param name="texture">A texture.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
            <param name="origin">The sprite origin in the texture in pixels (dependent of image orientation). Default value is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effects">Effects to apply.</param>
            <param name="orientation">The source image orientation</param>
            <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
        </member>
        <member name="M:Stride.Graphics.SpriteBatch.Draw(Stride.Graphics.Texture,Stride.Core.Mathematics.Vector2,Stride.Core.Mathematics.Color4,System.Single,Stride.Core.Mathematics.Vector2,Stride.Core.Mathematics.Vector2,Stride.Graphics.SpriteEffects,Stride.Graphics.ImageOrientation,System.Single)">
            <summary>
            Adds a sprite to a batch of sprites for rendering using the specified texture, position, source rectangle, color, rotation, origin, scale, effects, and layer. 
            </summary>
            <param name="texture">A texture.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
            <param name="origin">The sprite origin in the texture in pixels (dependent of image orientation). Default value is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effects">Effects to apply.</param>
            <param name="orientation">The source image orientation</param>
            <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
        </member>
        <member name="M:Stride.Graphics.SpriteBatch.Draw(Stride.Graphics.Texture,Stride.Core.Mathematics.Vector2,System.Nullable{Stride.Core.Mathematics.RectangleF},Stride.Core.Mathematics.Color4,Stride.Core.Mathematics.Color4)">
            <summary>
            Adds a sprite to a batch of sprites for rendering using the specified texture, position, source rectangle, and color. 
            </summary>
            <param name="texture">A texture.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="sourceRectangle">A rectangle that specifies (in texels) the source texels from a texture. Use null to draw the entire texture. </param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
        </member>
        <member name="M:Stride.Graphics.SpriteBatch.Draw(Stride.Graphics.Texture,Stride.Core.Mathematics.Vector2,System.Nullable{Stride.Core.Mathematics.RectangleF},Stride.Core.Mathematics.Color4,System.Single,Stride.Core.Mathematics.Vector2,System.Single,Stride.Graphics.SpriteEffects,Stride.Graphics.ImageOrientation,System.Single,Stride.Core.Mathematics.Color4,Stride.Graphics.SwizzleMode)">
            <summary>
            Adds a sprite to a batch of sprites for rendering using the specified texture, position, source rectangle, color, rotation, origin, scale, effects, and layer. 
            </summary>
            <param name="texture">A texture.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="sourceRectangle">A rectangle that specifies (in texels) the source texels from a texture. Use null to draw the entire texture. </param>
            <param name="color">The color to tint a sprite. Use Color4.White for full color with no tinting.</param>
            <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
            <param name="origin">The sprite origin in the texture in pixels (dependent of image orientation). Default value is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effects">Effects to apply.</param>
            <param name="orientation">The source image orientation</param>
            <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
        </member>
        <member name="M:Stride.Graphics.SpriteBatch.Draw(Stride.Graphics.Texture,Stride.Core.Mathematics.Vector2,System.Nullable{Stride.Core.Mathematics.RectangleF},Stride.Core.Mathematics.Color4,System.Single,Stride.Core.Mathematics.Vector2,Stride.Core.Mathematics.Vector2,Stride.Graphics.SpriteEffects,Stride.Graphics.ImageOrientation,System.Single,Stride.Core.Mathematics.Color4)">
            <summary>
            Adds a sprite to a batch of sprites for rendering using the specified texture, position, source rectangle, color, rotation, origin, scale, effects, and layer. 
            </summary>
            <param name="texture">A texture.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="sourceRectangle">A rectangle that specifies (in texels) the source texels from a texture. Use null to draw the entire texture. </param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
            <param name="origin">The sprite origin in the texture in pixels (dependent of image orientation). Default value is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effects">Effects to apply.</param>
            <param name="orientation">The source image orientation</param>
            <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
        </member>
        <member name="M:Stride.Graphics.SpriteBatch.MeasureString(Stride.Graphics.SpriteFont,System.String,System.Nullable{Stride.Core.Mathematics.Vector2})">
            <summary>
            Measure the size of the given text in virtual pixels depending on the target size.
            </summary>
            <param name="spriteFont">The font used to draw the text.</param>
            <param name="text">The text to measure.</param>
            <param name="targetSize">The size of the target to render in. If null, the size of the window back buffer is used.</param>
            <returns>The size of the text in virtual pixels.</returns>
            <exception cref="T:System.ArgumentNullException">The provided sprite font is null.</exception>
        </member>
        <member name="M:Stride.Graphics.SpriteBatch.MeasureString(Stride.Graphics.SpriteFont,System.String,System.Single,System.Nullable{Stride.Core.Mathematics.Vector2})">
            <summary>
            Measure the size of the given text in virtual pixels depending on the target size.
            </summary>
            <param name="spriteFont">The font used to draw the text.</param>
            <param name="text">The text to measure.</param>
            <param name="fontSize">The font size (in pixels) used to draw the text.</param>
            <param name="targetSize">The size of the target to render in. If null, the size of the window back buffer is used.</param>
            <returns>The size of the text in virtual pixels.</returns>
            <exception cref="T:System.ArgumentNullException">The provided sprite font is null.</exception>
        </member>
        <member name="M:Stride.Graphics.SpriteBatch.DrawString(Stride.Graphics.SpriteFont,System.String,Stride.Core.Mathematics.Vector2,Stride.Core.Mathematics.Color4,Stride.Graphics.TextAlignment)">
            <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, and color.</summary>
            <param name="spriteFont">A font for displaying text.</param>
            <param name="text">A text string.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="alignment">Describes how to align the text to draw</param>
        </member>
        <member name="M:Stride.Graphics.SpriteBatch.DrawString(Stride.Graphics.SpriteFont,System.Text.StringBuilder,Stride.Core.Mathematics.Vector2,Stride.Core.Mathematics.Color4,Stride.Graphics.TextAlignment)">
            <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, and color.</summary>
            <param name="spriteFont">A font for displaying text.</param>
            <param name="text">Text string.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="alignment">Describes how to align the text to draw</param>
        </member>
        <member name="M:Stride.Graphics.SpriteBatch.DrawString(Stride.Graphics.SpriteFont,System.String,System.Single,Stride.Core.Mathematics.Vector2,Stride.Core.Mathematics.Color4,Stride.Graphics.TextAlignment)">
            <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, and color.</summary>
            <param name="spriteFont">A font for displaying text.</param>
            <param name="text">A text string.</param>
            <param name="fontSize">The font size in pixels (ignored in the case of static fonts)</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="alignment">Describes how to align the text to draw</param>
        </member>
        <member name="M:Stride.Graphics.SpriteBatch.DrawString(Stride.Graphics.SpriteFont,System.Text.StringBuilder,System.Single,Stride.Core.Mathematics.Vector2,Stride.Core.Mathematics.Color4,Stride.Graphics.TextAlignment)">
            <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, and color.</summary>
            <param name="spriteFont">A font for displaying text.</param>
            <param name="text">Text string.</param>
            <param name="fontSize">The font size in pixels (ignored in the case of static fonts)</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="alignment">Describes how to align the text to draw</param>
        </member>
        <member name="M:Stride.Graphics.SpriteBatch.DrawString(Stride.Graphics.SpriteFont,System.String,Stride.Core.Mathematics.Vector2,Stride.Core.Mathematics.Color4,System.Single,Stride.Core.Mathematics.Vector2,Stride.Core.Mathematics.Vector2,Stride.Graphics.SpriteEffects,System.Single,Stride.Graphics.TextAlignment)">
            <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, color, rotation, origin, scale, effects and layer.</summary>
            <param name="spriteFont">A font for displaying text.</param>
            <param name="text">A text string.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
            <param name="origin">The sprite origin in virtual pixels; the default is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effects">Effects to apply.</param>
            <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
            <param name="alignment">Describes how to align the text to draw</param>
        </member>
        <member name="M:Stride.Graphics.SpriteBatch.DrawString(Stride.Graphics.SpriteFont,System.Text.StringBuilder,Stride.Core.Mathematics.Vector2,Stride.Core.Mathematics.Color4,System.Single,Stride.Core.Mathematics.Vector2,Stride.Core.Mathematics.Vector2,Stride.Graphics.SpriteEffects,System.Single,Stride.Graphics.TextAlignment)">
            <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, color, rotation, origin, scale, effects and layer.</summary>
            <param name="spriteFont">A font for displaying text.</param>
            <param name="text">Text string.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
            <param name="origin">The sprite origin in virtual pixels; the default is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effects">Effects to apply.</param>
            <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
            <param name="alignment">Describes how to align the text to draw</param>
        </member>
        <member name="M:Stride.Graphics.SpriteBatch.DrawString(Stride.Graphics.SpriteFont,System.String,System.Single,Stride.Core.Mathematics.Vector2,Stride.Core.Mathematics.Color4,System.Single,Stride.Core.Mathematics.Vector2,Stride.Core.Mathematics.Vector2,Stride.Graphics.SpriteEffects,System.Single,Stride.Graphics.TextAlignment)">
            <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, color, rotation, origin, scale, effects and layer.</summary>
            <param name="spriteFont">A font for displaying text.</param>
            <param name="text">A text string.</param>
            <param name="fontSize">The font size in pixels (ignored in the case of static fonts)</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
            <param name="origin">The sprite origin in virtual pixels; the default is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effects">Effects to apply.</param>
            <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
            <param name="alignment">Describes how to align the text to draw</param>
        </member>
        <member name="M:Stride.Graphics.SpriteBatch.DrawString(Stride.Graphics.SpriteFont,System.Text.StringBuilder,System.Single,Stride.Core.Mathematics.Vector2,Stride.Core.Mathematics.Color4,System.Single,Stride.Core.Mathematics.Vector2,Stride.Core.Mathematics.Vector2,Stride.Graphics.SpriteEffects,System.Single,Stride.Graphics.TextAlignment)">
            <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, color, rotation, origin, scale, effects and layer.</summary>
            <param name="spriteFont">A font for displaying text.</param>
            <param name="text">Text string.</param>
            <param name="fontSize">The font size in pixels (ignored in the case of static fonts)</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
            <param name="origin">The sprite origin in virtual pixels; the default is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effects">Effects to apply.</param>
            <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
            <param name="alignment">Describes how to align the text to draw</param>
        </member>
        <member name="T:Stride.Graphics.Sprite">
            <summary>
            A sprite.
            </summary>
        </member>
        <member name="M:Stride.Graphics.Sprite.#ctor">
            <summary>
            Create an instance of <see cref="T:Stride.Graphics.Sprite"/> with a unique random name.
            </summary>
        </member>
        <member name="M:Stride.Graphics.Sprite.#ctor(System.String)">
            <summary>
            Creates an empty <see cref="T:Stride.Graphics.Sprite"/> having the provided name.
            </summary>
            <param name="fragmentName">Name of the fragment</param>
        </member>
        <member name="M:Stride.Graphics.Sprite.#ctor(Stride.Graphics.Texture)">
            <summary>
            Create an instance of <see cref="T:Stride.Graphics.Sprite"/> from the provided <see cref="P:Stride.Graphics.Sprite.Texture"/>.
            A unique Id is set as name and the <see cref="P:Stride.Graphics.Sprite.Region"/> is initialized to the size of the whole texture.
            </summary>
            <param name="texture">The texture to use as texture</param>
        </member>
        <member name="M:Stride.Graphics.Sprite.#ctor(System.String,Stride.Graphics.Texture)">
            <summary>
            Creates a <see cref="T:Stride.Graphics.Sprite"/> having the provided texture and name.
            The region size is initialized with the whole size of the texture.
            </summary>
            <param name="fragmentName">The name of the sprite</param>
            <param name="texture">The texture to use as texture</param>
        </member>
        <member name="P:Stride.Graphics.Sprite.Name">
            <summary>
            Gets or sets the name of the image fragment.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Sprite.Texture">
            <summary>
            The texture in which the image is contained
            </summary>
        </member>
        <member name="P:Stride.Graphics.Sprite.Center">
            <summary>
            The position of the center of the image in pixels.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Sprite.Region">
            <summary>
            The rectangle specifying the region of the texture to use as fragment.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Sprite.IsTransparent">
            <summary>
            Gets or sets the value indicating if the fragment contains transparent regions.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Sprite.Orientation">
            <summary>
            Gets or sets the rotation to apply to the texture region when rendering the <see cref="T:Stride.Graphics.Sprite"/>
            </summary>
        </member>
        <member name="P:Stride.Graphics.Sprite.Borders">
            <summary>
            Gets or sets size of the unstretchable borders of source sprite in pixels.
            </summary>
            <remarks>Borders size are ordered as follows X->Left, Y->Top, Z->Right, W->Bottom.</remarks>
        </member>
        <member name="P:Stride.Graphics.Sprite.HasBorders">
            <summary>
            Gets the value indicating if the image has unstretchable borders.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Sprite.Size">
            <summary>
            Gets the size of the sprite in scene units.
            Note that the orientation of the image is taken into account in this calculation.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Sprite.SizeInPixels">
            <summary>
            Gets the size of the sprite in pixels. 
            Note that the orientation of the image is taken into account in this calculation.
            </summary>
        </member>
        <member name="P:Stride.Graphics.Sprite.PixelsPerUnit">
            <summary>
            Gets or sets the pixels per scene unit of the sprite.
            </summary>
            <remarks>The value is clamped to a strictly positive value.</remarks>
        </member>
        <member name="M:Stride.Graphics.Sprite.Clone">
            <summary>
            Clone the current sprite.
            </summary>
            <returns>A new instance of the current sprite.</returns>
        </member>
        <member name="T:Stride.Graphics.Sprite3DBatch">
            <summary>
            A batcher for sprite in the 3D world.
            </summary>
        </member>
        <member name="M:Stride.Graphics.Sprite3DBatch.#ctor(Stride.Graphics.GraphicsDevice,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Stride.Graphics.Sprite3DBatch"/>.
            </summary>
            <param name="device"></param>
            <param name="bufferElementCount">The maximum number element that can be batched in one time.</param>
            <param name="batchCapacity">The batch capacity default to 64.</param>
        </member>
        <member name="M:Stride.Graphics.Sprite3DBatch.Begin(Stride.Graphics.GraphicsContext,Stride.Core.Mathematics.Matrix,Stride.Graphics.SpriteSortMode,System.Nullable{Stride.Graphics.BlendStateDescription},Stride.Graphics.SamplerState,System.Nullable{Stride.Graphics.DepthStencilStateDescription},System.Nullable{Stride.Graphics.RasterizerStateDescription},Stride.Rendering.EffectInstance,System.Int32)">
            <summary>
            Begins a 3D sprite batch rendering using the specified sorting mode and blend state, sampler, depth stencil, rasterizer state objects, plus a custom effect and a view-projection matrix.
            Passing null for any of the state objects selects the default default state objects (BlendState.AlphaBlend, DepthStencilState.Default, RasterizerState.CullCounterClockwise, SamplerState.LinearClamp).
            Passing a null effect selects the default SpriteBatch Class shader.
            </summary>
            <param name="graphicsContext">The graphics context to use.</param>
            <param name="sortMode">The sprite drawing order to use for the batch session</param>
            <param name="effect">The effect to use for the batch session</param>
            <param name="blendState">The blending state to use for the batch session</param>
            <param name="samplerState">The sampling state to use for the batch session</param>
            <param name="depthStencilState">The depth stencil state to use for the batch session</param>
            <param name="rasterizerState">The rasterizer state to use for the batch session</param>
            <param name="stencilValue">The value of the stencil buffer to take as reference for the batch session</param>
            <param name="viewProjection">The view-projection matrix to use for the batch session</param>
        </member>
        <member name="M:Stride.Graphics.Sprite3DBatch.Draw(Stride.Graphics.Texture,Stride.Core.Mathematics.Matrix@,Stride.Core.Mathematics.RectangleF@,Stride.Core.Mathematics.Vector2@,Stride.Core.Mathematics.Color4@,Stride.Graphics.ImageOrientation,Stride.Graphics.SwizzleMode,System.Nullable{System.Single})">
            <summary>
            Draw a 3D sprite (or add it to the draw list depending on the sortMode).
            </summary>
            <param name="texture">The texture to use during the draw</param>
            <param name="worldMatrix">The world matrix of the element</param>
            <param name="sourceRectangle">The rectangle indicating the source region of the texture to use</param>
            <param name="elementSize">The size of the sprite in the object space</param>
            <param name="color">The color to apply to the texture image.</param>
            <param name="imageOrientation">The rotation to apply on the image uv</param>
            <param name="swizzle">Swizzle mode indicating the swizzle use when sampling the texture in the shader</param>
            <param name="depth">The depth of the element. If null, it is calculated using world and view-projection matrix.</param>
        </member>
        <member name="T:Stride.Graphics.SpriteEffects">
            <summary>
            Defines sprite mirroring options.
            </summary>
            <remarks>
            Description is taken from original XNA <a href='http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.spriteeffects.aspx'>SpriteEffects</a> class.
            </remarks>
        </member>
        <member name="F:Stride.Graphics.SpriteEffects.None">
            <summary>
            No rotations specified.
            </summary>
        </member>
        <member name="F:Stride.Graphics.SpriteEffects.FlipHorizontally">
            <summary>
            Rotate 180 degrees around the Y axis before rendering.
            </summary>
        </member>
        <member name="F:Stride.Graphics.SpriteEffects.FlipVertically">
            <summary>
            Rotate 180 degrees around the X axis before rendering.
            </summary>
        </member>
        <member name="F:Stride.Graphics.SpriteEffects.FlipBoth">
            <summary>
            Rotate 180 degrees around both the X and Y axis before rendering.
            </summary>
        </member>
        <member name="T:Stride.Graphics.SpriteExtensions">
            <summary>
            A sprite represents a series frames in an atlas forming an animation. 
            </summary>
        </member>
        <member name="M:Stride.Graphics.SpriteExtensions.Draw(Stride.Graphics.Sprite,Stride.Graphics.SpriteBatch,Stride.Core.Mathematics.Vector2,System.Single,System.Single,Stride.Graphics.SpriteEffects)">
            <summary>
            Draw a sprite using a sprite batch and with white color and scale of 1.
            </summary>
            <param name="sprite">The sprite</param>
            <param name="spriteBatch">The sprite batch used to draw the sprite.</param>
            <param name="position">The position to which draw the sprite</param>
            <param name="rotation">The rotation to apply on the sprite</param>
            <param name="depthLayer">The depth layer to which draw the sprite</param>
            <param name="spriteEffects">The sprite effect to apply on the sprite</param>
            <remarks>This function must be called between the <see cref="!:SpriteBatch.Begin(Stride.Graphics.SpriteSortMode,Stride.Graphics.Effect)"/> 
            and <see cref="!:SpriteBatch.End()"/> calls of the provided <paramref name="spriteBatch"/></remarks>
            <exception cref="T:System.ArgumentException">The provided frame index is not valid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The provided spriteBatch is null</exception>
        </member>
        <member name="M:Stride.Graphics.SpriteExtensions.Draw(Stride.Graphics.Sprite,Stride.Graphics.SpriteBatch,Stride.Core.Mathematics.Vector2,Stride.Core.Mathematics.Color,Stride.Core.Mathematics.Vector2,System.Single,System.Single,Stride.Graphics.SpriteEffects)">
            <summary>
            Draw a sprite using a sprite batch.
            </summary>
            <param name="sprite">The sprite</param>
            <param name="spriteBatch">The sprite batch used to draw the sprite.</param>
            <param name="position">The position to which draw the sprite</param>
            <param name="color">The color to use to draw the sprite</param>
            <param name="rotation">The rotation to apply on the sprite</param>
            <param name="scales">The scale factors to apply on the sprite</param>
            <param name="depthLayer">The depth layer to which draw the sprite</param>
            <param name="spriteEffects">The sprite effect to apply on the sprite</param>
            <remarks>This function must be called between the <see cref="!:SpriteBatch.Begin(Stride.Graphics.SpriteSortMode,Stride.Graphics.Effect)"/> 
            and <see cref="!:SpriteBatch.End()"/> calls of the provided <paramref name="spriteBatch"/></remarks>
            <exception cref="T:System.ArgumentException">The provided frame index is not valid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The provided spriteBatch is null</exception>
        </member>
        <member name="M:Stride.Graphics.SpriteExtensions.Draw3D(Stride.Graphics.Sprite,Stride.Graphics.Sprite3DBatch,Stride.Core.Mathematics.Matrix@,Stride.Core.Mathematics.Color4@)">
            <summary>
            Draw a sprite in the 3D world using the provided 3D sprite batch, world matrix and color.
            </summary>
            <param name="sprite">The sprite</param>
            <param name="spriteBatch">The sprite batch used to draw the sprite.</param>
            <param name="worldMatrix">The world matrix of the sprite</param>
            <param name="color">The color to apply on the sprite</param>
            <remarks>This function must be called between the <see cref="!:SpriteBatch.Begin(Stride.Graphics.SpriteSortMode,Stride.Graphics.Effect)"/> 
            and <see cref="!:SpriteBatch.End()"/> calls of the provided <paramref name="spriteBatch"/></remarks>
            <exception cref="T:System.ArgumentException">The provided frame index is not valid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The provided spriteBatch is null</exception>
        </member>
        <member name="T:Stride.Graphics.SpriteFont">
            <summary>
            SpriteFont to use with <see cref="T:Stride.Graphics.SpriteBatch"/>. See <see cref="T:Stride.Graphics.SpriteFont"/> to learn how to use it.
            </summary>
        </member>
        <member name="F:Stride.Graphics.SpriteFont.swizzle">
            <summary>
            The swizzle mode to use when drawing the sprite font.
            </summary>
        </member>
        <member name="P:Stride.Graphics.SpriteFont.Textures">
            <summary>
            Gets the textures containing the font character data.
            </summary>
        </member>
        <member name="P:Stride.Graphics.SpriteFont.Size">
            <summary>
            Gets the font size (resp. the default font size) for static fonts (resp. for dynamic fonts) in pixels.
            </summary>
        </member>
        <member name="P:Stride.Graphics.SpriteFont.DefaultCharacter">
            <summary>
            Gets or sets the default character for the font.
            </summary>
        </member>
        <member name="P:Stride.Graphics.SpriteFont.IgnoreUnkownCharacters">
            <summary>
            Completely skips characters that are not in the map.
            </summary>
        </member>
        <member name="P:Stride.Graphics.SpriteFont.ExtraSpacing">
            <summary>
            Gets or sets extra spacing (in pixels) between the characters for the current font <see cref="P:Stride.Graphics.SpriteFont.Size"/>. 
            This value is scaled during the draw in the case of dynamic fonts. 
            Use <see cref="M:Stride.Graphics.SpriteFont.GetExtraSpacing(System.Single)"/> to get the value of the extra spacing for a given font size.
            </summary>
        </member>
        <member name="P:Stride.Graphics.SpriteFont.ExtraLineSpacing">
            <summary>
            Gets or sets the extra line spacing (in pixels) to add to the default font line spacing for the current font <see cref="P:Stride.Graphics.SpriteFont.Size"/>.
            This value will be scaled during the draw in the case of dynamic fonts.
            Use <see cref="M:Stride.Graphics.SpriteFont.GetExtraLineSpacing(System.Single)"/> to get the value of the extra spacing for a given font size.
            </summary>
            <remarks>Line spacing is the distance between the base lines of two consecutive lines of text (blank space as well as characters' height are thus included).</remarks>
        </member>
        <member name="P:Stride.Graphics.SpriteFont.FontType">
            <summary>
            Gets the type indicating if the current font is static, dynamic or SDF.
            </summary>
        </member>
        <member name="P:Stride.Graphics.SpriteFont.FontSystem">
            <summary>
            The <see cref="T:Stride.Graphics.Font.FontSystem"/> that is managing this sprite font.
            </summary>
        </member>
        <member name="M:Stride.Graphics.SpriteFont.GetExtraSpacing(System.Single)">
            <summary>
            Get the value of the extra line spacing for the given font size.
            </summary>
            <param name="fontSize">The font size in pixels</param>
            <returns>The value of the character spacing</returns>
        </member>
        <member name="M:Stride.Graphics.SpriteFont.GetExtraLineSpacing(System.Single)">
            <summary>
            Get the value of the extra character spacing for the given font size.
            </summary>
            <param name="fontSize">The font size in pixels</param>
            <returns>The value of the character spacing</returns>
        </member>
        <member name="M:Stride.Graphics.SpriteFont.GetFontDefaultLineSpacing(System.Single)">
            <summary>
            Get the value of the font default line spacing for the given font size.
            </summary>
            <param name="fontSize">The font size in pixels</param>
            <returns>The value of the default line spacing</returns>
        </member>
        <member name="M:Stride.Graphics.SpriteFont.GetBaseOffsetY(System.Single)">
            <summary>
            Get the value of the base offset for the given font size.
            </summary>
            <param name="fontSize">The font size in pixels</param>
            <returns>The value of the base offset</returns>
        </member>
        <member name="M:Stride.Graphics.SpriteFont.GetTotalLineSpacing(System.Single)">
            <summary>
            Gets the value of the total line spacing (font default + user defined) in pixels for a given font size. 
            </summary>
            <remarks>Line spacing is the distance between the base lines of two consecutive lines of text (blank space as well as characters' height are thus included).</remarks>
        </member>
        <member name="M:Stride.Graphics.SpriteFont.PreGenerateGlyphs(System.String,Stride.Core.Mathematics.Vector2)">
            <summary>
            Pre-generate synchronously the glyphs of the character needed to render the provided text at the provided size.
            </summary>
            <param name="text">The text containing the characters to pre-generate</param>
            <param name="size">The size of the font</param>
        </member>
        <member name="M:Stride.Graphics.SpriteFont.MeasureString(System.String)">
            <summary>
            Returns the width and height of the provided text for the current font size <see cref="P:Stride.Graphics.SpriteFont.Size"/>
            </summary>
            <param name="text">The string to measure.</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:Stride.Graphics.SpriteFont.MeasureString(System.Text.StringBuilder)">
            <summary>
            Returns the width and height of the provided text for the current font size <see cref="P:Stride.Graphics.SpriteFont.Size"/>
            </summary>
            <param name="text">The string to measure.</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:Stride.Graphics.SpriteFont.MeasureString(System.String,System.Single)">
            <summary>
            Returns the width and height of the provided text for a given font size
            </summary>
            <param name="text">The string to measure.</param>
            <param name="fontSize">The size of the font (ignored in the case of static fonts)</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:Stride.Graphics.SpriteFont.MeasureString(System.Text.StringBuilder,System.Single)">
            <summary>
            Returns the width and height of the provided text for a given font size
            </summary>
            <param name="text">The string to measure.</param>
            <param name="fontSize">The size of the font (ignored in the case of static fonts)</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:Stride.Graphics.SpriteFont.MeasureString(System.String,Stride.Core.Mathematics.Vector2)">
            <summary>
            Returns the width and height of the provided text for a given font size
            </summary>
            <param name="text">The string to measure.</param>
            <param name="fontSize">The size of the font (ignored in the case of static fonts)</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:Stride.Graphics.SpriteFont.MeasureString(System.Text.StringBuilder,Stride.Core.Mathematics.Vector2)">
            <summary>
            Returns the width and height of the provided text for a given font size
            </summary>
            <param name="text">The string to measure.</param>
            <param name="fontSize">The size of the font (ignored in the case of static fonts)</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:Stride.Graphics.SpriteFont.MeasureString(System.String,Stride.Core.Mathematics.Vector2@)">
            <summary>
            Returns the width and height of the provided text for a given font size
            </summary>
            <param name="text">The string to measure.</param>
            <param name="fontSize">The size of the font (ignored in the case of static fonts)</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:Stride.Graphics.SpriteFont.MeasureString(System.Text.StringBuilder,Stride.Core.Mathematics.Vector2@)">
            <summary>
            Returns the width and height of the provided text for a given font size
            </summary>
            <param name="text">The string to measure.</param>
            <param name="fontSize">The size of the font (ignored in the case of static fonts)</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:Stride.Graphics.SpriteFont.MeasureString(System.String,Stride.Core.Mathematics.Vector2,System.Int32)">
            <summary>
            Returns the width and height of the provided text for a given font size
            </summary>
            <param name="text">The string to measure.</param>
            <param name="fontSize">The size of the font (ignored in the case of static fonts)</param>
            <param name="length">The length of the string to measure</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:Stride.Graphics.SpriteFont.MeasureString(System.Text.StringBuilder,Stride.Core.Mathematics.Vector2,System.Int32)">
            <summary>
            Returns the width and height of the provided text for a given font size
            </summary>
            <param name="text">The string to measure.</param>
            <param name="fontSize">The size of the font (ignored in the case of static fonts)</param>
            <param name="length">The length of the string to measure</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:Stride.Graphics.SpriteFont.MeasureString(System.String,Stride.Core.Mathematics.Vector2@,System.Int32)">
            <summary>
            Returns the width and height of the provided text for a given font size
            </summary>
            <param name="text">The string to measure.</param>
            <param name="fontSize">The size of the font (ignored in the case of static fonts)</param>
            <param name="length">The length of the string to measure</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:Stride.Graphics.SpriteFont.MeasureString(System.Text.StringBuilder,Stride.Core.Mathematics.Vector2@,System.Int32)">
            <summary>
            Returns the width and height of the provided text for a given font size
            </summary>
            <param name="text">The string to measure.</param>
            <param name="fontSize">The size of the font (ignored in the case of static fonts)</param>
            <param name="length">The length of the string to measure</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:Stride.Graphics.SpriteFont.IsCharPresent(System.Char)">
            <summary>
            Checks whether the provided character is present in the character map of the current <see cref="T:Stride.Graphics.SpriteFont"/>.
            </summary>
            <param name="c">The character to check.</param>
            <returns>true if the <paramref name="c"/> is present in the character map, false - otherwise.</returns>
        </member>
        <member name="M:Stride.Graphics.SpriteFont.GetGlyph(Stride.Graphics.CommandList,System.Char,Stride.Core.Mathematics.Vector2@,System.Boolean,Stride.Core.Mathematics.Vector2@)">
            <summary>
            Return the glyph associated to provided character at the given size.
            </summary>
            <param name="commandList">The command list in case we upload gpu resources</param>
            <param name="character">The character we want the glyph of</param>
            <param name="fontSize">The font size in pixel</param>
            <param name="uploadGpuResources">Indicate if the GPU resource should be uploaded or not.</param>
            <param name="auxiliaryScaling">If the requested font size isn't available, the closest one is chosen and an auxiliary scaling is returned</param>
            <returns>The glyph corresponding to the request or null if not existing</returns>
        </member>
        <member name="T:Stride.Graphics.SpriteFont.InternalDrawCommand">
            <summary>
            Structure InternalDrawCommand used to pass parameters to InternalDrawGlyph
            </summary>
        </member>
        <member name="T:Stride.Graphics.SpriteFont.InternalUIDrawCommand">
            <summary>
            Structure InternalDrawCommand used to pass parameters to InternalDrawGlyph
            </summary>
        </member>
        <member name="F:Stride.Graphics.SpriteFont.InternalUIDrawCommand.RequestedFontSize">
            <summary>
            Font size to be used for the draw command, as requested when the command was issued
            </summary>
        </member>
        <member name="F:Stride.Graphics.SpriteFont.InternalUIDrawCommand.RealVirtualResolutionRatio">
            <summary>
            The ratio between the real and virtual resolution (=real/virtual), inherited from the layouting context
            </summary>
        </member>
        <member name="F:Stride.Graphics.SpriteFont.InternalUIDrawCommand.TextBoxSize">
            <summary>
            The size of the rectangle containing the text
            </summary>
        </member>
        <member name="F:Stride.Graphics.SpriteFontType.Static">
            <summary>
            Static font which has fixed font size and is pre-compiled
            </summary>
            <userdoc>
            Offline rasterized sprite font which has a fixed size in-game
            </userdoc>
        </member>
        <member name="F:Stride.Graphics.SpriteFontType.Dynamic">
            <summary>
            Font which can change its font size dynamically and is compiled at runtime
            </summary>
            <userdoc>
            Runtime (in-game) rasterized sprite font which is also resizable
            </userdoc>
        </member>
        <member name="F:Stride.Graphics.SpriteFontType.SDF">
            <summary>
            Signed Distance Field font which is pre-compiled but can still be scaled at runtime
            </summary>
            <userdoc>
            Offline rasterized sprite font which is resizable in-game
            </userdoc>
        </member>
        <member name="T:Stride.Graphics.SpriteFrame">
            <summary>
            A sprite frame represents a single frame a sprite animation.
            It contains the region of the texture representing the frame and the time it is supposed to be displayed.
            </summary>
        </member>
        <member name="F:Stride.Graphics.SpriteFrame.TextureRegion">
            <summary>
            The rectangle specifying the region of the texture to use for that frame.
            </summary>
        </member>
        <member name="F:Stride.Graphics.SpriteFrame.CenterBias">
            <summary>
            The bias to the frame center in pixels.
            </summary>
        </member>
        <member name="M:Stride.Graphics.SpriteFrame.Clone">
            <summary>
            Clone the current sprite frame instance.
            </summary>
            <returns>A new instance of the current sprite frame.</returns>
        </member>
        <member name="T:Stride.Graphics.SpriteSheet">
            <summary>
            A sheet (group) of sprites.
            </summary>
        </member>
        <member name="P:Stride.Graphics.SpriteSheet.Sprites">
            <summary>
            The list of sprites.
            </summary>
        </member>
        <member name="M:Stride.Graphics.SpriteSheet.FindImageIndex(System.String)">
            <summary>
            Find the index of a sprite in the group using its name.
            </summary>
            <param name="spriteName">The name of the sprite</param>
            <returns>The index value</returns>
            <remarks>If two sprites have the provided name then the first sprite found is returned</remarks>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No sprite in the group have the given name</exception>
        </member>
        <member name="P:Stride.Graphics.SpriteSheet.Item(System.Int32)">
            <summary>
            Gets or sets the image of the group at <paramref name="index"/>.
            </summary>
            <param name="index">The image index</param>
            <returns>The image</returns>
        </member>
        <member name="P:Stride.Graphics.SpriteSheet.Item(System.String)">
            <summary>
            Gets or sets the image of the group having the provided <paramref name="name"/>.
            </summary>
            <param name="name">The name of the image</param>
            <returns>The image</returns>
        </member>
        <member name="T:Stride.Graphics.SpriteSortMode">
            <summary>
            Defines sprite sort-rendering options. 
            </summary>
            <remarks>
            Description is taken from original XNA <a href='http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.spritesortmode.aspx'>SpriteBatch</a> class.
            </remarks>
        </member>
        <member name="F:Stride.Graphics.SpriteSortMode.Deferred">
            <summary>
            Sprites are not drawn until End is called. 
            End will apply graphics device settings and draw all the sprites in one batch, in the same order calls to Draw were received. 
            This mode allows Draw calls to two or more instances of SpriteBatch without introducing conflicting graphics device settings. SpriteBatch defaults to Deferred mode.
            </summary>
        </member>
        <member name="F:Stride.Graphics.SpriteSortMode.Immediate">
            <summary>
            Begin will apply new graphics device settings, and sprites will be drawn within each Draw call. In Immediate mode there can only be one active SpriteBatch instance without introducing conflicting device settings. 
            </summary>
        </member>
        <member name="F:Stride.Graphics.SpriteSortMode.Texture">
            <summary>
            Same as Deferred mode, except sprites are sorted by texture prior to drawing. This can improve performance when drawing non-overlapping sprites of uniform depth.
            </summary>
        </member>
        <member name="F:Stride.Graphics.SpriteSortMode.BackToFront">
            <summary>
            Same as Deferred mode, except sprites are sorted by depth in back-to-front order prior to drawing. This procedure is recommended when drawing transparent sprites of varying depths.
            </summary>
        </member>
        <member name="F:Stride.Graphics.SpriteSortMode.FrontToBack">
            <summary>
            Same as Deferred mode, except sprites are sorted by depth in front-to-back order prior to drawing. This procedure is recommended when drawing opaque sprites of varying depths.
            </summary>
        </member>
        <member name="T:Stride.Graphics.StencilOperation">
            <summary>
            TODO Comments
            </summary>
        </member>
        <member name="F:Stride.Graphics.StencilOperation.Keep">
            <summary>
            
            </summary>
        </member>
        <member name="F:Stride.Graphics.StencilOperation.Zero">
            <summary>
            
            </summary>
        </member>
        <member name="F:Stride.Graphics.StencilOperation.Replace">
            <summary>
            
            </summary>
        </member>
        <member name="F:Stride.Graphics.StencilOperation.IncrementSaturation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Stride.Graphics.StencilOperation.DecrementSaturation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Stride.Graphics.StencilOperation.Invert">
            <summary>
            
            </summary>
        </member>
        <member name="F:Stride.Graphics.StencilOperation.Increment">
            <summary>
            
            </summary>
        </member>
        <member name="F:Stride.Graphics.StencilOperation.Decrement">
            <summary>
            
            </summary>
        </member>
        <member name="T:Stride.Graphics.SwizzleMode">
            <summary>
            Specify how to swizzle a vector.
            </summary>
        </member>
        <member name="F:Stride.Graphics.SwizzleMode.None">
            <summary>
            Take the vector as is.
            </summary>
        </member>
        <member name="F:Stride.Graphics.SwizzleMode.RRRR">
            <summary>
            Take the only the red component of the vector.
            </summary>
        </member>
        <member name="F:Stride.Graphics.SwizzleMode.NormalMap">
            <summary>
            Reconstructs the Z(B) component from R and G.
            </summary>
        </member>
        <member name="F:Stride.Graphics.SwizzleMode.RRR1">
            <summary>
            Take the only the red component of the vector, but keeps the object opaque
            </summary>
        </member>
        <member name="F:Stride.Graphics.SwizzleMode.XXXX">
            <summary>
            Take the only the x component of the vector.
            </summary>
        </member>
        <member name="T:Stride.Graphics.TextAlignment">
            <summary>
            Specify the available text alignment when rendering text.
            </summary>
        </member>
        <member name="F:Stride.Graphics.TextAlignment.Left">
            <summary>
            The text will aligned on the left border.
            </summary>
        </member>
        <member name="F:Stride.Graphics.TextAlignment.Center">
            <summary>
            The text will be centered.
            </summary>
        </member>
        <member name="F:Stride.Graphics.TextAlignment.Right">
            <summary>
            The text will be aligned on the right border.
            </summary>
        </member>
        <member name="M:Stride.Graphics.TextureExtensions.ToDepthStencilReadOnlyTexture(Stride.Graphics.Texture)">
            <summary>
            Gets a view on this depth stencil texture as a readonly depth stencil texture.
            </summary>
            <returns>A new texture object that is bouded to the requested view.</returns>
        </member>
        <member name="M:Stride.Graphics.TextureExtensions.CreateDepthTextureCompatible(Stride.Graphics.Texture)">
            <summary>
            Creates a new texture that can be used as a ShaderResource from an existing depth texture.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stride.Graphics.TextureExtensions.FromFileData(Stride.Graphics.GraphicsDevice,System.Byte[])">
            <summary>
            Creates a texture from an image file data (png, dds, ...).
            </summary>
            <param name="graphicsDevice">The graphics device in which to create the texture</param>
            <param name="data">The image file data</param>
            <returns>The texture</returns>
        </member>
        <member name="T:Stride.Graphics.TextureDescription">
            <summary>
            A Common description for all textures.
            </summary>
        </member>
        <member name="F:Stride.Graphics.TextureDescription.Dimension">
            <summary>
            The dimension of a texture.
            </summary>
        </member>
        <member name="F:Stride.Graphics.TextureDescription.Width">
            <summary>
            <dd> <p>Texture width (in texels). The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture1DSize"/> (16384). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>
            </summary>
            <remarks>
            This field is valid for all textures: <see cref="!:Texture1D"/>, <see cref="!:Texture2D"/>, <see cref="!:Texture3D"/> and <see cref="!:TextureCube"/>.
            </remarks>
        </member>
        <member name="F:Stride.Graphics.TextureDescription.Height">
            <summary>
            <dd> <p>Texture height (in texels). The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture3DSize"/> (2048). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>
            </summary>
            <remarks>
            This field is only valid for <see cref="!:Texture2D"/>, <see cref="!:Texture3D"/> and <see cref="!:TextureCube"/>.
            </remarks>
        </member>
        <member name="F:Stride.Graphics.TextureDescription.Depth">
            <summary>
            <dd> <p>Texture depth (in texels). The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture3DSize"/> (2048). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>
            </summary>
            <remarks>
            This field is only valid for <see cref="!:Texture3D"/>.
            </remarks>
        </member>
        <member name="F:Stride.Graphics.TextureDescription.ArraySize">
            <summary>
            <dd> <p>Number of textures in the array. The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture1DArraySize"/> (2048). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>
            </summary>
            <remarks>
            This field is only valid for <see cref="!:Texture1D"/>, <see cref="!:Texture2D"/> and <see cref="!:TextureCube"/>
            </remarks>
            <remarks>
            This field is only valid for textures: <see cref="!:Texture1D"/>, <see cref="!:Texture2D"/> and <see cref="!:TextureCube"/>.
            </remarks>
        </member>
        <member name="F:Stride.Graphics.TextureDescription.MipLevels">
            <summary>
            <dd> <p>The maximum number of mipmap levels in the texture. See the remarks in <strong><see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/></strong>. Use 1 for a multisampled texture; or 0 to generate a full set of subtextures.</p> </dd>
            </summary>
        </member>
        <member name="F:Stride.Graphics.TextureDescription.Format">
            <summary>
            <dd> <p>Texture format (see <strong><see cref="T:SharpDX.DXGI.Format"/></strong>).</p> </dd>
            </summary>
        </member>
        <member name="F:Stride.Graphics.TextureDescription.MultisampleCount">
            <summary>
            <dd> <p>Structure that specifies multisampling parameters for the texture. See <strong><see cref="T:SharpDX.DXGI.SampleDescription"/></strong>.</p> </dd>
            </summary>
            <remarks>
            This field is only valid for <see cref="!:Texture2D"/>.
            </remarks>
        </member>
        <member name="F:Stride.Graphics.TextureDescription.Usage">
            <summary>
            <dd> <p>Value that identifies how the texture is to be read from and written to. The most common value is <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/>; see <strong><see cref="T:SharpDX.Direct3D11.ResourceUsage"/></strong> for all possible values.</p> </dd>
            </summary>
        </member>
        <member name="F:Stride.Graphics.TextureDescription.Flags">
            <summary>
            <dd> <p>Flags (see <strong><see cref="T:SharpDX.Direct3D11.BindFlags"/></strong>) for binding to pipeline stages. The flags can be combined by a logical OR. For a 1D texture, the allowable values are: <see cref="F:SharpDX.Direct3D11.BindFlags.ShaderResource"/>, <see cref="F:SharpDX.Direct3D11.BindFlags.RenderTarget"/> and <see cref="F:SharpDX.Direct3D11.BindFlags.DepthStencil"/>.</p> </dd>
            </summary>
        </member>
        <member name="F:Stride.Graphics.TextureDescription.Options">
            <summary>
            Resource options for DirectX 11 textures.
            </summary>
        </member>
        <member name="P:Stride.Graphics.TextureDescription.IsRenderTarget">
            <summary>
            Gets a value indicating whether this instance is a render target.
            </summary>
            <value><c>true</c> if this instance is render target; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Graphics.TextureDescription.IsDepthStencil">
            <summary>
            Gets a value indicating whether this instance is a depth stencil.
            </summary>
            <value><c>true</c> if this instance is a depth stencil; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Graphics.TextureDescription.IsShaderResource">
            <summary>
            Gets a value indicating whether this instance is a shader resource.
            </summary>
            <value><c>true</c> if this instance is a shader resource; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Graphics.TextureDescription.IsUnorderedAccess">
            <summary>
            Gets a value indicating whether this instance is a shader resource.
            </summary>
            <value><c>true</c> if this instance is a shader resource; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Graphics.TextureDescription.IsMultisample">
            <summary>
            Gets a value indicating whether this instance is a multi sample texture.
            </summary>
            <value><c>true</c> if this instance is multi sample texture; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Stride.Graphics.TextureDescription.ToStagingDescription">
            <summary>
            Gets the staging description for this instance..
            </summary>
            <returns>A Staging description</returns>
        </member>
        <member name="M:Stride.Graphics.TextureDescription.ToCloneableDescription">
            <summary>
            Gets a clone description of this instance (if texture is immutable, it is switched to default).
            </summary>
            <returns>A clone of this instance.</returns>
        </member>
        <member name="M:Stride.Graphics.TextureDescription.FromDescription(Stride.Graphics.TextureDescription,Stride.Graphics.TextureFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new description from another description but overrides <see cref="F:Stride.Graphics.TextureDescription.Flags"/> and <see cref="F:Stride.Graphics.TextureDescription.Usage"/>.
            </summary>
            <param name="desc">The desc.</param>
            <param name="textureFlags">The texture flags.</param>
            <param name="usage">The usage.</param>
            <returns>TextureDescription.</returns>
        </member>
        <member name="M:Stride.Graphics.TextureDescription.op_Implicit(Stride.Graphics.ImageDescription)~Stride.Graphics.TextureDescription">
            <summary>
            Performs an explicit conversion from <see cref="T:Stride.Graphics.ImageDescription"/> to <see cref="T:Stride.Graphics.TextureDescription"/>.
            </summary>
            <param name="description">The image description.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Stride.Graphics.TextureDescription.op_Implicit(Stride.Graphics.TextureDescription)~Stride.Graphics.ImageDescription">
            <summary>
            Performs an explicit conversion from <see cref="T:Stride.Graphics.ImageDescription"/> to <see cref="T:Stride.Graphics.TextureDescription"/>.
            </summary>
            <param name="description">The image description.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Stride.Graphics.TextureDescription.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Graphics.TextureDescription.op_Equality(Stride.Graphics.TextureDescription,Stride.Graphics.TextureDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Stride.Graphics.TextureDescription.op_Inequality(Stride.Graphics.TextureDescription,Stride.Graphics.TextureDescription)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Stride.Graphics.TextureDescription.New1D(System.Int32,Stride.Graphics.PixelFormat,Stride.Graphics.TextureFlags,System.Int32,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new 1D <see cref="T:Stride.Graphics.TextureDescription" /> with a single mipmap.
            </summary>
            <param name="width">The width.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of 1D <see cref="T:Stride.Graphics.TextureDescription" /> class.</returns>
        </member>
        <member name="M:Stride.Graphics.TextureDescription.New1D(System.Int32,Stride.Graphics.MipMapCount,Stride.Graphics.PixelFormat,Stride.Graphics.TextureFlags,System.Int32,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new 1D <see cref="T:Stride.Graphics.TextureDescription" />.
            </summary>
            <param name="width">The width.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int &gt;=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of 1D <see cref="T:Stride.Graphics.TextureDescription" /> class.</returns>
        </member>
        <member name="M:Stride.Graphics.TextureDescription.New1D(System.Int32,Stride.Graphics.PixelFormat,Stride.Graphics.TextureFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new 1D <see cref="T:Stride.Graphics.TextureDescription" /> with a single level of mipmap.
            </summary>
            <param name="width">The width.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of 1D <see cref="T:Stride.Graphics.TextureDescription" /> class.</returns>
            <remarks>The first dimension of mipMapTextures describes the number of array (Texture1D Array), second dimension is the mipmap, the third is the texture data for a particular mipmap.</remarks>
        </member>
        <member name="M:Stride.Graphics.TextureDescription.New2D(System.Int32,System.Int32,Stride.Graphics.PixelFormat,Stride.Graphics.TextureFlags,System.Int32,Stride.Graphics.GraphicsResourceUsage,Stride.Graphics.TextureOptions)">
            <summary>
            Creates a new <see cref="T:Stride.Graphics.TextureDescription" /> with a single mipmap.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.TextureDescription" /> class.</returns>
        </member>
        <member name="M:Stride.Graphics.TextureDescription.New2D(System.Int32,System.Int32,Stride.Graphics.MipMapCount,Stride.Graphics.PixelFormat,Stride.Graphics.TextureFlags,System.Int32,Stride.Graphics.GraphicsResourceUsage,Stride.Graphics.MultisampleCount,Stride.Graphics.TextureOptions)">
            <summary>
            Creates a new <see cref="T:Stride.Graphics.TextureDescription" />.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int &gt;=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <param name="usage">The usage.</param>
            <param name="multisampleCount">The multisample count.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.TextureDescription" /> class.</returns>
        </member>
        <member name="M:Stride.Graphics.TextureDescription.New3D(System.Int32,System.Int32,System.Int32,Stride.Graphics.PixelFormat,Stride.Graphics.TextureFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:Stride.Graphics.TextureDescription" /> with a single mipmap.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.TextureDescription" /> class.</returns>
        </member>
        <member name="M:Stride.Graphics.TextureDescription.New3D(System.Int32,System.Int32,System.Int32,Stride.Graphics.MipMapCount,Stride.Graphics.PixelFormat,Stride.Graphics.TextureFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:Stride.Graphics.TextureDescription" />.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int &gt;=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.TextureDescription" /> class.</returns>
        </member>
        <member name="M:Stride.Graphics.TextureDescription.NewCube(System.Int32,Stride.Graphics.PixelFormat,Stride.Graphics.TextureFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Cube <see cref="T:Stride.Graphics.TextureDescription" />.
            </summary>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">The texture flags.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.TextureDescription" /> class.</returns>
        </member>
        <member name="M:Stride.Graphics.TextureDescription.NewCube(System.Int32,Stride.Graphics.MipMapCount,Stride.Graphics.PixelFormat,Stride.Graphics.TextureFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Cube <see cref="T:Stride.Graphics.TextureDescription"/>.
            </summary>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int &gt;=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">The texture flags.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.TextureDescription"/> class.</returns>
        </member>
        <member name="F:Stride.Graphics.TextureFlags.None">
            <summary>
            No option.
            </summary>
        </member>
        <member name="F:Stride.Graphics.TextureFlags.ShaderResource">
            <summary>
            A texture usable as a ShaderResourceView.
            </summary>
        </member>
        <member name="F:Stride.Graphics.TextureFlags.RenderTarget">
            <summary>
            A texture usable as render target.
            </summary>
        </member>
        <member name="F:Stride.Graphics.TextureFlags.UnorderedAccess">
            <summary>
            A texture usable as an unordered access buffer.
            </summary>
        </member>
        <member name="F:Stride.Graphics.TextureFlags.DepthStencil">
            <summary>
            A texture usable as a depth stencil buffer.
            </summary>
        </member>
        <member name="F:Stride.Graphics.TextureFlags.DepthStencilReadOnly">
            <summary>
            A texture usable as a readonly depth stencil buffer.
            </summary>
        </member>
        <member name="T:Stride.Graphics.TextureOptions">
            <summary>
            Resource options for textures.
            </summary>
            <remarks>
            This enumeration is used in TextureDescription.The TextureOptions
                must be 'None' when creating textures with CPU access flags.   
            </remarks>
        </member>
        <member name="F:Stride.Graphics.TextureOptions.None">
            <summary>
            None. The default.
            </summary>
        </member>
        <member name="F:Stride.Graphics.TextureOptions.Shared">
            <summary>
            Enables resource data sharing between two or more Direct3D devices.    
            </summary>
            <remarks>
            The only resources that can be shared are 2D non-mipmapped textures. SharpDX.Direct3D11.ResourceOptionFlags.Shared
                and SharpDX.Direct3D11.ResourceOptionFlags.SharedKeyedmutex are mutually exclusive.
                WARP and REF devices do not support shared resources. If you try to create a
                resource with this flag on either a WARP or REF device, the create method will
                return an E_OUTOFMEMORY error code. Note?? Starting with Windows?8, WARP devices
                fully support shared resources. ? Note?? Starting with Windows?8, we recommend
                that you enable resource data sharing between two or more Direct3D devices by
                using a combination of the SharpDX.Direct3D11.ResourceOptionFlags.SharedNthandle
                and SharpDX.Direct3D11.ResourceOptionFlags.SharedKeyedmutex flags instead.
            </remarks>
        </member>
        <member name="F:Stride.Graphics.TextureOptions.SharedKeyedmutex">
            <summary>
                Enables the resource to be synchronized by using the SharpDX.DXGI.KeyedMutex.Acquire(System.Int64,System.Int32)
                and SharpDX.DXGI.KeyedMutex.Release(System.Int64) APIs.         
            </summary>
            <remarks>
            The following Direct3D 11 resource creation APIs, that take SharpDX.Direct3D11.ResourceOptionFlags parameters,
                have been extended to support the new flag. SharpDX.Direct3D11.Device.CreateTexture1D(SharpDX.Direct3D11.Texture1DDescription@,SharpDX.DataBox[],SharpDX.Direct3D11.Texture1D)
                SharpDX.Direct3D11.Device.CreateTexture2D(SharpDX.Direct3D11.Texture2DDescription@,SharpDX.DataBox[],SharpDX.Direct3D11.Texture2D)
                SharpDX.Direct3D11.Device.CreateTexture3D(SharpDX.Direct3D11.Texture3DDescription@,SharpDX.DataBox[],SharpDX.Direct3D11.Texture3D)
                SharpDX.Direct3D11.Device.CreateBuffer(SharpDX.Direct3D11.BufferDescription@,System.Nullable{SharpDX.DataBox},SharpDX.Direct3D11.Buffer)
                If you call any of these methods with the SharpDX.Direct3D11.ResourceOptionFlags.SharedKeyedmutex
                flag set, the interface returned will support the SharpDX.DXGI.KeyedMutex interface.
                You can retrieve a reference to the SharpDX.DXGI.KeyedMutex interface from the
                resource by using IUnknown::QueryInterface. The SharpDX.DXGI.KeyedMutex interface
                implements the SharpDX.DXGI.KeyedMutex.Acquire(System.Int64,System.Int32) and
                SharpDX.DXGI.KeyedMutex.Release(System.Int64) APIs to synchronize access to the
                surface. The device that creates the surface, and any other device that opens
                the surface by using OpenSharedResource, must call SharpDX.DXGI.KeyedMutex.Acquire(System.Int64,System.Int32)
                before they issue any rendering commands to the surface. When those devices finish
                rendering, they must call SharpDX.DXGI.KeyedMutex.Release(System.Int64). SharpDX.Direct3D11.ResourceOptionFlags.Shared
                and SharpDX.Direct3D11.ResourceOptionFlags.SharedKeyedmutex are mutually exclusive.
                WARP and REF devices do not support shared resources. If you try to create a
                resource with this flag on either a WARP or REF device, the create method will
                return an E_OUTOFMEMORY error code. Note?? Starting with Windows?8, WARP devices
                fully support shared resources.
            </remarks>
        </member>
        <member name="F:Stride.Graphics.TextureOptions.SharedNthandle">
            <summary>
             Set this flag to enable the use of NT HANDLE values when you create a shared
                resource. 
            </summary>
            <remarks>
            By enabling this flag, you deprecate the use of existing HANDLE values.
                When you use this flag, you must combine it with the SharpDX.Direct3D11.ResourceOptionFlags.SharedKeyedmutex
                flag by using a bitwise OR operation. The resulting value specifies a new shared
                resource type that directs the runtime to use NT HANDLE values for the shared
                resource. The runtime then must confirm that the shared resource works on all
                hardware at the specified feature level. Without this flag set, the runtime does
                not strictly validate shared resource parameters (that is, formats, flags, usage,
                and so on). When the runtime does not validate shared resource parameters, behavior
                of much of the Direct3D API might be undefined and might vary from driver to
                driver. Direct3D 11 and earlier: This value is not supported until Direct3D 11.1.
            </remarks>
        </member>
        <member name="T:Stride.Graphics.TextureViewDescription">
            <summary>
            View description of a <see cref="T:Stride.Graphics.Texture"/>.
            </summary>
        </member>
        <member name="F:Stride.Graphics.TextureViewDescription.Flags">
            <summary>
            The flags used for the view. If <see cref="F:Stride.Graphics.TextureFlags.None"/> then the view is using the flags from the texture.
            </summary>
        </member>
        <member name="F:Stride.Graphics.TextureViewDescription.Format">
            <summary>
            The format of the view (used for the ShaderResource or Unordered access).
            </summary>
        </member>
        <member name="F:Stride.Graphics.TextureViewDescription.Type">
            <summary>
            The <see cref="T:Stride.Graphics.ViewType"/> (single mip, band, or full)
            </summary>
        </member>
        <member name="F:Stride.Graphics.TextureViewDescription.ArraySlice">
            <summary>
            The array slice index.
            </summary>
        </member>
        <member name="F:Stride.Graphics.TextureViewDescription.MipLevel">
            <summary>
            The mip level index.
            </summary>
        </member>
        <member name="M:Stride.Graphics.TextureViewDescription.ToStagingDescription">
            <summary>
            Gets a staging compatible description of this instance.
            </summary>
            <returns>TextureViewDescription.</returns>
        </member>
        <member name="T:Stride.Graphics.UIBatch">
            <summary>
            A utility class to batch and draw UI images.
            </summary>
        </member>
        <member name="F:Stride.Graphics.UIBatch.viewProjectionMatrix">
            <summary>
            The view projection matrix that will be used for the current begin/end draw calls.
            </summary>
        </member>
        <member name="M:Stride.Graphics.UIBatch.#ctor(Stride.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.UIBatch"/> class.
            </summary>
            <param name="device">A valid instance of <see cref="T:Stride.Graphics.GraphicsDevice"/>.</param>
        </member>
        <member name="M:Stride.Graphics.UIBatch.Begin(Stride.Graphics.GraphicsContext,Stride.Core.Mathematics.Matrix@,System.Nullable{Stride.Graphics.BlendStateDescription},System.Nullable{Stride.Graphics.DepthStencilStateDescription},System.Int32)">
            <summary>
            Begins a image batch rendering using the specified blend state, depth stencil and a view-projection transformation matrix.
            Passing null for any of the state objects selects the default default state objects (BlendState.AlphaBlend, DepthStencilState.None).
            </summary>
            <param name="graphicsContext">The graphics context to use.</param>
            <param name="viewProjection">The view projection matrix used for this series of draw calls</param>
            <param name="blendState">Blending options.</param>
            <param name="depthStencilState">Depth and stencil options.</param>
            <param name="stencilValue">The value of the stencil buffer to take as reference</param>
        </member>
        <member name="M:Stride.Graphics.UIBatch.Begin(Stride.Graphics.GraphicsContext,Stride.Core.Mathematics.Matrix@,System.Nullable{Stride.Graphics.BlendStateDescription},Stride.Graphics.SamplerState,System.Nullable{Stride.Graphics.RasterizerStateDescription},System.Nullable{Stride.Graphics.DepthStencilStateDescription},System.Int32)">
            <summary>
            Begins a image batch rendering using the specified blend state, sampler, depth stencil, rasterizer state objects, and the view-projection transformation matrix.
            Passing null for any of the state objects selects the default default state objects (BlendState.AlphaBlend, DepthStencilState.None, RasterizerState.CullCounterClockwise, SamplerState.LinearClamp).
            </summary>
            <param name="graphicsContext">The graphics context to use.</param>
            <param name="viewProjection">The view projection matrix used for this series of draw calls</param>
            <param name="blendState">Blending options.</param>
            <param name="samplerState">Texture sampling options.</param>
            <param name="rasterizerState">Rasterization options.</param>
            <param name="depthStencilState">Depth and stencil options.</param>
            <param name="stencilValue">The value of the stencil buffer to take as reference</param>
        </member>
        <member name="M:Stride.Graphics.UIBatch.DrawRectangle(Stride.Core.Mathematics.Matrix@,Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Color@,System.Int32)">
            <summary>
            Draw a rectangle of the provided size at the position specified by the world matrix having the provided color.
            </summary>
            <param name="worldMatrix">The world matrix specifying the position of the rectangle in the world</param>
            <param name="elementSize">The size of the rectangle</param>
            <param name="color">The color of the rectangle</param>
            <param name="depthBias">The depth bias to use when drawing the element</param>
        </member>
        <member name="M:Stride.Graphics.UIBatch.DrawCube(Stride.Core.Mathematics.Matrix@,Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Color@,System.Int32)">
            <summary>
            Draw a cube of the provided size at the position specified by the world matrix having the provided color.
            </summary>
            <param name="worldMatrix">The world matrix specifying the position of the cube in the world</param>
            <param name="elementSize">The size of the cube</param>
            <param name="color">The color of the cube</param>
            <param name="depthBias">The depth bias to use when drawing the element</param>
        </member>
        <member name="M:Stride.Graphics.UIBatch.DrawBackground(Stride.Core.Mathematics.Matrix@,Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Color@,System.Int32)">
            <summary>
            Draw a colored background having provided size at the position specified by the world matrix.
            </summary>
            <param name="worldMatrix">The world matrix specifying the position of the element in the world</param>
            <param name="elementSize">The size of the element</param>
            <param name="color">The color of the element</param>
            <param name="depthBias">The depth bias to use when drawing the element</param>
        </member>
        <member name="M:Stride.Graphics.UIBatch.DrawImage(Stride.Graphics.Texture,Stride.Core.Mathematics.Matrix@,Stride.Core.Mathematics.RectangleF@,Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Vector4@,Stride.Core.Mathematics.Color@,System.Int32,Stride.Graphics.ImageOrientation,Stride.Graphics.SwizzleMode,System.Boolean)">
            <summary>
            Batch a new border image draw to the draw list.
            </summary>
            <param name="texture">The texture to use during the draw</param>
            <param name="worldMatrix">The world matrix of the element</param>
            <param name="sourceRectangle">The rectangle indicating the source region of the texture to use</param>
            <param name="elementSize">The size of the ui element</param>
            <param name="borderSize">The size of the borders in the texture in pixels (left/top/right/bottom)</param>
            <param name="color">The color to apply to the texture image.</param>
            <param name="depthBias">The depth bias of the ui element</param>
            <param name="imageOrientation">The rotation to apply on the image uv</param>
            <param name="swizzle">Swizzle mode indicating the swizzle use when sampling the texture in the shader</param>
            <param name="snapImage">Indicate if the image needs to be snapped or not</param>
        </member>
        <member name="T:Stride.Graphics.UIBatch.PrimitiveType">
            <summary>
            The primitive type to draw for an element.
            </summary>
        </member>
        <member name="F:Stride.Graphics.UIBatch.PrimitiveType.Rectangle">
            <summary>
            A simple rectangle composed of 2 triangles
            </summary>
        </member>
        <member name="F:Stride.Graphics.UIBatch.PrimitiveType.BorderRectangle">
            <summary>
            A rectangle with borders tessellated as 3x3 rectangles
            </summary>
        </member>
        <member name="F:Stride.Graphics.UIBatch.PrimitiveType.Cube">
            <summary>
            A simple cube (not necessary square faces)
            </summary>
        </member>
        <member name="F:Stride.Graphics.UIBatch.PrimitiveType.ReverseCube">
            <summary>
            A cube with back and front faces inversed.
            </summary>
        </member>
        <member name="F:Stride.Graphics.UIBatch.UIImageDrawInfo.BorderSize">
            <summary>
            X = Left, Y = Top, Z = Right, W = Bottom
            </summary>
        </member>
        <member name="F:Stride.Graphics.UIBatch.UIImageDrawInfo.VertexShift">
            <summary>
            X = Left, Y = Top, Z = Right, W = Bottom
            </summary>
        </member>
        <member name="T:Stride.Graphics.VertexBufferBinding">
            <summary>
            Binding structure that specifies a vertex buffer and other per-vertex parameters (such as offset and instancing) for a graphics device.
            </summary>
        </member>
        <member name="M:Stride.Graphics.VertexBufferBinding.#ctor(Stride.Graphics.Buffer,Stride.Graphics.VertexDeclaration,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.VertexBufferBinding"/> struct.
            </summary>
            <param name="vertexStride">Jump size to the next element. if -1, it gets auto-discovered from the vertexDeclaration</param>
            <param name="vertexOffset">Offset (in Vertex ElementCount) from the beginning of the buffer to the first vertex to use.</param>
        </member>
        <member name="P:Stride.Graphics.VertexBufferBinding.Buffer">
            <summary>
            Gets a vertex buffer.
            </summary>
        </member>
        <member name="P:Stride.Graphics.VertexBufferBinding.Offset">
            <summary>
            Gets the offset (vertex index) between the beginning of the buffer and the vertex data to use.
            </summary>
        </member>
        <member name="P:Stride.Graphics.VertexBufferBinding.Stride">
            <summary>
            Gets the vertex stride.
            </summary>
        </member>
        <member name="P:Stride.Graphics.VertexBufferBinding.Count">
            <summary>
            Gets the number of vertex.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Stride.Graphics.VertexBufferBinding.Declaration">
            <summary>
            Gets the layout of the vertex buffer.
            </summary>
            <value>The declaration.</value>
        </member>
        <member name="T:Stride.Graphics.VertexDeclaration">
            <summary>
            The layout of a vertex buffer with a set of <see cref="T:Stride.Graphics.VertexElement" />.
            </summary>
        </member>
        <member name="M:Stride.Graphics.VertexDeclaration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.VertexDeclaration"/> class.
            </summary>
        </member>
        <member name="M:Stride.Graphics.VertexDeclaration.#ctor(Stride.Graphics.VertexElement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.VertexDeclaration"/> class.
            </summary>
            <param name="elements">The elements.</param>
        </member>
        <member name="M:Stride.Graphics.VertexDeclaration.#ctor(Stride.Graphics.VertexElement[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.VertexDeclaration"/> class.
            </summary>
            <param name="elements">The elements.</param>
            <param name="instanceCount">The instance count.</param>
            <param name="vertexStride">The vertex stride.</param>
            <exception cref="T:System.ArgumentNullException">elements</exception>
        </member>
        <member name="P:Stride.Graphics.VertexDeclaration.VertexElements">
            <summary>
            Gets the vertex elements.
            </summary>
            <value>The vertex elements.</value>
        </member>
        <member name="P:Stride.Graphics.VertexDeclaration.InstanceCount">
            <summary>
            Gets the instance count.
            </summary>
            <value>The instance count.</value>
        </member>
        <member name="P:Stride.Graphics.VertexDeclaration.VertexStride">
            <summary>
            Gets the vertex stride.
            </summary>
            <value>The vertex stride.</value>
        </member>
        <member name="M:Stride.Graphics.VertexDeclaration.EnumerateWithOffsets">
            <summary>
            Enumerates <see cref="T:Stride.Graphics.VertexElement"/> with declared offsets.
            </summary>
            <returns>A set of <see cref="T:Stride.Graphics.VertexElement"/> with offsets.</returns>
        </member>
        <member name="M:Stride.Graphics.VertexDeclaration.CalculateSize">
            <summary>
            Calculate the size of the vertex declaration.
            </summary>
            <returns>The size in bytes of the vertex declaration</returns>
        </member>
        <member name="M:Stride.Graphics.VertexDeclaration.op_Implicit(Stride.Graphics.VertexElement)~Stride.Graphics.VertexDeclaration">
            <summary>
            Performs an implicit conversion from <see cref="T:Stride.Graphics.VertexElement"/> to <see cref="T:Stride.Graphics.VertexDeclaration"/>.
            </summary>
            <param name="element">The element.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Stride.Graphics.VertexDeclaration.op_Implicit(Stride.Graphics.VertexElement[])~Stride.Graphics.VertexDeclaration">
            <summary>
            Performs an implicit conversion from <see cref="!:VertexElement[][]"/> to <see cref="T:Stride.Graphics.VertexDeclaration"/>.
            </summary>
            <param name="elements">The elements.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Stride.Graphics.VertexElement">
            <summary>
            A description of a single element for the input-assembler stage. This structure is related to <see cref="!:Direct3D11.InputElement"/>.
            </summary>
            <remarks>
            Because <see cref="!:Direct3D11.InputElement"/> requires to have the same <see cref="!:VertexBufferLayout.SlotIndex"/>, <see cref="!:VertexBufferLayout.VertexClassification"/> and <see cref="!:VertexBufferLayout.instanceDataStepRate"/>,
            the <see cref="!:VertexBufferLayout"/> structure encapsulates a set of <see cref="T:Stride.Graphics.VertexElement"/> for a particular slot, classification and instance data step rate.
            Unlike the default <see cref="!:Direct3D11.InputElement"/>, this structure accepts a semantic name with a postfix number that will be automatically extracted to the semantic index.
            </remarks>
            <seealso cref="!:VertexBufferLayout"/>
        </member>
        <member name="F:Stride.Graphics.VertexElement.AppendAligned">
            <summary>
              Returns a value that can be used for the offset parameter of an InputElement to indicate that the element
              should be aligned directly after the previous element, including any packing if neccessary.
            </summary>
            <returns>A value used to align input elements.</returns>
        </member>
        <member name="M:Stride.Graphics.VertexElement.#ctor(System.String,Stride.Graphics.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.VertexElement" /> struct.
            </summary>
            <param name="semanticName">Name of the semantic.</param>
            <param name="format">The format.</param>
            <remarks>
            If the semantic name contains a postfix number, this number will be used as a semantic index.
            </remarks>
        </member>
        <member name="M:Stride.Graphics.VertexElement.#ctor(System.String,System.Int32,Stride.Graphics.PixelFormat,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.VertexElement" /> struct.
            </summary>
            <param name="semanticName">Name of the semantic.</param>
            <param name="semanticIndex">Index of the semantic.</param>
            <param name="format">The format.</param>
            <param name="alignedByteOffset">The aligned byte offset.</param>
        </member>
        <member name="P:Stride.Graphics.VertexElement.SemanticName">
            <summary>
            <dd> <p>The HLSL semantic associated with this element in a shader input-signature.</p> </dd>
            </summary>
        </member>
        <member name="P:Stride.Graphics.VertexElement.SemanticAsText">
            <summary>
            <dd> <p>The HLSL semantic associated with this element in a shader input-signature.</p> </dd>
            </summary>
        </member>
        <member name="P:Stride.Graphics.VertexElement.SemanticIndex">
            <summary>
            <dd> <p>The semantic index for the element. A semantic index modifies a semantic, with an integer index number. A semantic index is only needed in a  case where there is more than one element with the same semantic. For example, a 4x4 matrix would have four components each with the semantic  name </p>  <pre><code>matrix</code></pre>  <p>, however each of the four component would have different semantic indices (0, 1, 2, and 3).</p> </dd>
            </summary>
        </member>
        <member name="P:Stride.Graphics.VertexElement.Format">
            <summary>
            <dd> <p>The data type of the element data. See <strong><see cref="T:SharpDX.DXGI.Format"/></strong>.</p> </dd>
            </summary>
        </member>
        <member name="P:Stride.Graphics.VertexElement.AlignedByteOffset">
            <summary>
            <dd> <p>Optional. Offset (in bytes) between each element. Use D3D11_APPEND_ALIGNED_ELEMENT for convenience to define the current element directly  after the previous one, including any packing if necessary.</p> </dd>
            </summary>
        </member>
        <member name="M:Stride.Graphics.VertexElement.Color``1(System.Int32,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "COLOR".
            </summary>
            <typeparam name="T">Type of the Color semantic.</typeparam>
            <param name="semanticIndex">The semantic index.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:Stride.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.VertexElement" /> that represents this semantic.</returns>
        </member>
        <member name="M:Stride.Graphics.VertexElement.Color(Stride.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "COLOR".
            </summary>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:Stride.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.VertexElement" /> that represents this semantic.</returns>
        </member>
        <member name="M:Stride.Graphics.VertexElement.Color(System.Int32,Stride.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "COLOR".
            </summary>
            <param name="semanticIndex">The semantic index.</param>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:Stride.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.VertexElement" /> that represents this semantic.</returns>
        </member>
        <member name="M:Stride.Graphics.VertexElement.Normal``1(System.Int32,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "NORMAL".
            </summary>
            <typeparam name="T">Type of the Normal semantic.</typeparam>
            <param name="semanticIndex">The semantic index.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:Stride.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.VertexElement" /> that represents this semantic.</returns>
        </member>
        <member name="M:Stride.Graphics.VertexElement.Normal(Stride.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "NORMAL".
            </summary>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:Stride.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.VertexElement" /> that represents this semantic.</returns>
        </member>
        <member name="M:Stride.Graphics.VertexElement.Normal(System.Int32,Stride.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "NORMAL".
            </summary>
            <param name="semanticIndex">The semantic index.</param>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:Stride.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.VertexElement" /> that represents this semantic.</returns>
        </member>
        <member name="M:Stride.Graphics.VertexElement.Position``1(System.Int32,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "POSITION".
            </summary>
            <typeparam name="T">Type of the Position semantic.</typeparam>
            <param name="semanticIndex">The semantic index.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:Stride.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.VertexElement" /> that represents this semantic.</returns>
        </member>
        <member name="M:Stride.Graphics.VertexElement.Position(Stride.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "POSITION".
            </summary>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:Stride.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.VertexElement" /> that represents this semantic.</returns>
        </member>
        <member name="M:Stride.Graphics.VertexElement.Position(System.Int32,Stride.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "POSITION".
            </summary>
            <param name="semanticIndex">The semantic index.</param>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:Stride.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.VertexElement" /> that represents this semantic.</returns>
        </member>
        <member name="M:Stride.Graphics.VertexElement.PositionTransformed``1(System.Int32,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "SV_POSITION".
            </summary>
            <typeparam name="T">Type of the PositionTransformed semantic.</typeparam>
            <param name="semanticIndex">The semantic index.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:Stride.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.VertexElement" /> that represents this semantic.</returns>
        </member>
        <member name="M:Stride.Graphics.VertexElement.PositionTransformed(Stride.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "SV_POSITION".
            </summary>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:Stride.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.VertexElement" /> that represents this semantic.</returns>
        </member>
        <member name="M:Stride.Graphics.VertexElement.PositionTransformed(System.Int32,Stride.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "SV_POSITION".
            </summary>
            <param name="semanticIndex">The semantic index.</param>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:Stride.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.VertexElement" /> that represents this semantic.</returns>
        </member>
        <member name="M:Stride.Graphics.VertexElement.TextureCoordinate``1(System.Int32,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "TEXCOORD".
            </summary>
            <typeparam name="T">Type of the TextureCoordinate semantic.</typeparam>
            <param name="semanticIndex">The semantic index.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:Stride.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.VertexElement" /> that represents this semantic.</returns>
        </member>
        <member name="M:Stride.Graphics.VertexElement.TextureCoordinate(Stride.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "TEXCOORD".
            </summary>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:Stride.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.VertexElement" /> that represents this semantic.</returns>
        </member>
        <member name="M:Stride.Graphics.VertexElement.TextureCoordinate(System.Int32,Stride.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "TEXCOORD".
            </summary>
            <param name="semanticIndex">The semantic index.</param>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:Stride.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.VertexElement" /> that represents this semantic.</returns>
        </member>
        <member name="M:Stride.Graphics.VertexElement.Tangent``1(System.Int32,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "TANGENT".
            </summary>
            <typeparam name="T">Type of the Tangent semantic.</typeparam>
            <param name="semanticIndex">The semantic index.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:Stride.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.VertexElement" /> that represents this semantic.</returns>
        </member>
        <member name="M:Stride.Graphics.VertexElement.Tangent(Stride.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "TANGENT".
            </summary>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:Stride.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.VertexElement" /> that represents this semantic.</returns>
        </member>
        <member name="M:Stride.Graphics.VertexElement.Tangent(System.Int32,Stride.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "TANGENT".
            </summary>
            <param name="semanticIndex">The semantic index.</param>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:Stride.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.VertexElement" /> that represents this semantic.</returns>
        </member>
        <member name="M:Stride.Graphics.VertexElement.BiTangent``1(System.Int32,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "BITANGENT".
            </summary>
            <typeparam name="T">Type of the BiTangent semantic.</typeparam>
            <param name="semanticIndex">The semantic index.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:Stride.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.VertexElement" /> that represents this semantic.</returns>
        </member>
        <member name="M:Stride.Graphics.VertexElement.BiTangent(Stride.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "BITANGENT".
            </summary>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:Stride.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.VertexElement" /> that represents this semantic.</returns>
        </member>
        <member name="M:Stride.Graphics.VertexElement.BiTangent(System.Int32,Stride.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "BITANGENT".
            </summary>
            <param name="semanticIndex">The semantic index.</param>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:Stride.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:Stride.Graphics.VertexElement" /> that represents this semantic.</returns>
        </member>
        <member name="M:Stride.Graphics.VertexElement.ConvertTypeToFormat(System.Type)">
            <summary>
            Converts a type to a <see cref="T:SharpDX.DXGI.Format"/>.
            </summary>
            <param name="typeT">The type T.</param>
            <returns>The equivalent Format.</returns>
            <exception cref="T:System.NotSupportedException">If the convertion for this type is not supported.</exception>
        </member>
        <member name="F:Stride.Graphics.VertexElementUsage.Color">
            <summary>
            Vertex data contains diffuse or specular color.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexElementUsage.Normal">
            <summary>
            Vertex normal data.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexElementUsage.Position">
            <summary>
            Position data.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexElementUsage.PositionTransformed">
            <summary>
            Position transformed data.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexElementUsage.Tangent">
            <summary>
            Vertex tangent data.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexElementUsage.BiTangent">
            <summary>
            Vertex Bitangent data.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexElementUsage.TextureCoordinate">
            <summary>
            Texture coordinate data.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexElementUsage.BlendIndices">
            <summary>
            Bone blend indices data.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexElementUsage.BlendWeight">
            <summary>
            Bone blend weight data.
            </summary>
        </member>
        <member name="T:Stride.Graphics.VertexHelper">
            <summary>
            An helper class for manipulating vertex buffers on CPU (Generate new vertex attributes...etc.)
            </summary>
        </member>
        <member name="M:Stride.Graphics.VertexHelper.GenerateMultiTextureCoordinates``1(Stride.Graphics.VertexDeclaration,``0[],System.Int32)">
            <summary>
            Generates multi texture coordinates for an existing vertex buffer. See remarks.
            </summary>
            <param name="vertexDeclaration">The vertex declaration.</param>
            <param name="vertexBufferData">The vertex buffer data.</param>
            <param name="maxTexcoord">The maximum texcoord.</param>
            <returns>A new vertex buffer with additional texture coordinates.</returns>
            <exception cref="T:System.ArgumentNullException">
            vertexDeclaration
            or
            vertexBufferData
            </exception>
            <remarks>The original vertex buffer must contain at least a TEXCOORD[0-9] attribute in order for this method to work.
            This method will copy the value of the first existing TEXCOORD found in the vertex buffer to the newly created TEXCOORDS.</remarks>
        </member>
        <member name="M:Stride.Graphics.VertexHelper.GenerateMultiTextureCoordinates(Stride.Graphics.VertexDeclaration,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Generates multi texture coordinates for an existing vertex buffer. See remarks.
            </summary>
            <param name="vertexDeclaration">The vertex declaration.</param>
            <param name="vertexBufferData">The vertex buffer data.</param>
            <param name="vertexStride">The vertex stride.</param>
            <param name="maxTexcoord">The maximum texcoord.</param>
            <returns>A new vertex buffer with additional texture coordinates.</returns>
            <exception cref="T:System.ArgumentNullException">
            vertexDeclaration
            or
            vertexBufferData
            </exception>
            <remarks>The original vertex buffer must contain at least a TEXCOORD[0-9] attribute in order for this method to work.
            This method will copy the value of the first existing TEXCOORD found in the vertex buffer to the newly created TEXCOORDS.</remarks>
        </member>
        <member name="M:Stride.Graphics.VertexHelper.GenerateMultiTextureCoordinates(Stride.Graphics.VertexHelper.VertexTransformResult,System.Int32,System.Int32)">
            <summary>
            Generates multi texture coordinates for an existing vertex buffer. See remarks.
            </summary>
            <param name="transform">The result of a previous transform.</param>
            <param name="vertexStride">The vertex stride.</param>
            <param name="maxTexcoord">The maximum texcoord.</param>
            <returns>A new vertex buffer with additional texture coordinates.</returns>
            <remarks>The original vertex buffer must contain at least a TEXCOORD[0-9] attribute in order for this method to work.
            This method will copy the value of the first existing TEXCOORD found in the vertex buffer to the newly created TEXCOORDS.</remarks>
        </member>
        <member name="M:Stride.Graphics.VertexHelper.GenerateMultiTextureCoordinates(Stride.Graphics.VertexDeclaration,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates multi texture coordinates for an existing vertex buffer. See remarks.
            </summary>
            <param name="vertexDeclaration">The vertex declaration.</param>
            <param name="vertexBufferData">The vertex buffer data.</param>
            <param name="vertexCount">The vertex count.</param>
            <param name="vertexOffset">The vertex offset.</param>
            <param name="vertexStride">The vertex stride.</param>
            <param name="maxTexcoord">The maximum texcoord.</param>
            <returns>A new vertex buffer with additional texture coordinates.</returns>
            <exception cref="T:System.ArgumentNullException">
            vertexDeclaration
            or
            vertexBufferData
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            vertexCount;vertexCount must be > 0
            or
            vertexStride;vertexStride must be >= 0
            or
            maxTexcoord;maxTexcoord must be >= 0
            </exception>
            <exception cref="T:System.InvalidOperationException">The vertex buffer must contain at least the TEXCOORD</exception>
            <remarks>
            The original vertex buffer must contain at least a TEXCOORD[0-9] attribute in order for this method to work. 
            This method will copy the value of the first existing TEXCOORD found in the vertex buffer to the newly created TEXCOORDS.
            </remarks>
        </member>
        <member name="M:Stride.Graphics.VertexHelper.GenerateTangentBinormal``1(Stride.Graphics.VertexDeclaration,``0[],System.Int32[])">
            <summary>
            Generates the tangent binormal for an existing vertex buffer.
            </summary>
            <param name="vertexDeclaration">The vertex declaration.</param>
            <param name="vertexBufferData">The vertex buffer data.</param>
            <param name="indexBuffer">The index buffer.</param>
            <returns>A new vertex buffer with its new layout.</returns>
        </member>
        <member name="M:Stride.Graphics.VertexHelper.GenerateTangentBinormal(Stride.Graphics.VertexDeclaration,System.IntPtr,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Boolean,System.Int32)">
            <summary>
            Generate Tangent BiNormal from an existing vertex/index buffer.
            </summary>
            <param name="vertexDeclaration">The vertex declaration of the vertex buffer passed by parameters.</param>
            <param name="vertexBufferData">The vertex buffer.</param>
            <param name="vertexCount">The vertex count.</param>
            <param name="vertexOffset">The vertex offset.</param>
            <param name="vertexStride">The vertex stride. If 0, It takes the stride from the vertex declaration</param>
            <param name="indexData">The index data.</param>
            <param name="is32BitIndex">if set to <c>true</c> [is32 bit index].</param>
            <param name="indexCountArg">The index count argument.</param>
            <returns>A new vertex buffer with its new layout.</returns>
        </member>
        <member name="T:Stride.Graphics.VertexHelper.VertexTransformResult">
            <summary>
            Result of a vertex buffer transform.
            </summary>
        </member>
        <member name="M:Stride.Graphics.VertexHelper.VertexTransformResult.#ctor(Stride.Graphics.VertexDeclaration,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.VertexHelper.VertexTransformResult"/> struct.
            </summary>
            <param name="layout">The layout.</param>
            <param name="vertexBuffer">The vertex buffer.</param>
        </member>
        <member name="F:Stride.Graphics.VertexHelper.VertexTransformResult.Layout">
            <summary>
            The new layout of the vertex buffer.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexHelper.VertexTransformResult.VertexBuffer">
            <summary>
            The vertex buffer.
            </summary>
        </member>
        <member name="T:Stride.Graphics.VertexPosition2">
            <summary>
            Describes a custom vertex format structure that contains position as a Vector2. 
            </summary>
        </member>
        <member name="M:Stride.Graphics.VertexPosition2.#ctor(Stride.Core.Mathematics.Vector2)">
            <summary>
            Initializes a new <see cref="T:Stride.Graphics.VertexPositionTexture"/> instance.
            </summary>
            <param name="position">The position of this vertex.</param>
        </member>
        <member name="F:Stride.Graphics.VertexPosition2.Position">
            <summary>
            XY position.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexPosition2.Size">
            <summary>
            Defines structure byte size.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexPosition2.Layout">
            <summary>
            The vertex layout of this struct.
            </summary>
        </member>
        <member name="T:Stride.Graphics.VertexPositionColorTexture">
            <summary>
            Describes a custom vertex format structure that contains position and color information. 
            </summary>
        </member>
        <member name="M:Stride.Graphics.VertexPositionColorTexture.#ctor(Stride.Core.Mathematics.Vector3,Stride.Core.Mathematics.Color,Stride.Core.Mathematics.Vector2)">
            <summary>
            Initializes a new <see cref="T:Stride.Graphics.VertexPositionColorTexture"/> instance.
            </summary>
            <param name="position">The position of this vertex.</param>
            <param name="color">The color of this vertex.</param>
            <param name="textureCoordinate">UV texture coordinates.</param>
        </member>
        <member name="F:Stride.Graphics.VertexPositionColorTexture.Position">
            <summary>
            XYZ position.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexPositionColorTexture.Color">
            <summary>
            The vertex color.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexPositionColorTexture.TextureCoordinate">
            <summary>
            UV texture coordinates.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexPositionColorTexture.Size">
            <summary>
            Defines structure byte size.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexPositionColorTexture.Layout">
            <summary>
            The vertex layout of this struct.
            </summary>
        </member>
        <member name="T:Stride.Graphics.VertexPositionColorTextureSwizzle">
            <summary>
            Describes a custom vertex format structure that contains position, color, texture and swizzle information. 
            </summary>
        </member>
        <member name="M:Stride.Graphics.VertexPositionColorTextureSwizzle.#ctor(Stride.Core.Mathematics.Vector4,Stride.Core.Mathematics.Color,Stride.Core.Mathematics.Color,Stride.Core.Mathematics.Vector2,Stride.Graphics.SwizzleMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.VertexPositionColorTextureSwizzle"/> struct.
            </summary>
            <param name="position">The position of this vertex.</param>
            <param name="color">The color of this vertex.</param>
            <param name="textureCoordinate">UV texture coordinates.</param>
            <param name="swizzle">The swizzle mode</param>
        </member>
        <member name="F:Stride.Graphics.VertexPositionColorTextureSwizzle.Position">
            <summary>
            XYZ position.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexPositionColorTextureSwizzle.ColorScale">
            <summary>
            The vertex color.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexPositionColorTextureSwizzle.ColorAdd">
            <summary>
            The vertex color.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexPositionColorTextureSwizzle.TextureCoordinate">
            <summary>
            UV texture coordinates.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexPositionColorTextureSwizzle.Swizzle">
            <summary>
            The Swizzle mode
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexPositionColorTextureSwizzle.Size">
            <summary>
            Defines structure byte size.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexPositionColorTextureSwizzle.Layout">
            <summary>
            The vertex layout of this struct.
            </summary>
        </member>
        <member name="T:Stride.Graphics.VertexPositionNormalColor">
            <summary>
            Describes a custom vertex format structure that contains position, normal and color information. 
            </summary>
        </member>
        <member name="M:Stride.Graphics.VertexPositionNormalColor.#ctor(Stride.Core.Mathematics.Vector3,Stride.Core.Mathematics.Vector3,Stride.Core.Mathematics.Color)">
            <summary>
            Initializes a new <see cref="T:Stride.Graphics.VertexPositionNormalColor"/> instance.
            </summary>
            <param name="position">The position of this vertex.</param>
            <param name="normal">The vertex normal.</param>
            <param name="color">the color</param>
        </member>
        <member name="F:Stride.Graphics.VertexPositionNormalColor.Position">
            <summary>
            XYZ position.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexPositionNormalColor.Normal">
            <summary>
            The vertex normal.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexPositionNormalColor.Color">
            <summary>
            The color.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexPositionNormalColor.Size">
            <summary>
            Defines structure byte size.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexPositionNormalColor.Layout">
            <summary>
            The vertex layout of this structure.
            </summary>
        </member>
        <member name="T:Stride.Graphics.VertexPositionNormalTexture">
            <summary>
            Describes a custom vertex format structure that contains position, normal and texture information.
            </summary>
        </member>
        <member name="M:Stride.Graphics.VertexPositionNormalTexture.#ctor(Stride.Core.Mathematics.Vector3,Stride.Core.Mathematics.Vector3,Stride.Core.Mathematics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.VertexPositionNormalTexture"/> struct.
            </summary>
            <param name="position">The position of this vertex.</param>
            <param name="normal">The vertex normal.</param>
            <param name="textureCoordinate">UV texture coordinates.</param>
        </member>
        <member name="F:Stride.Graphics.VertexPositionNormalTexture.Position">
            <summary>
            XYZ position.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexPositionNormalTexture.Normal">
            <summary>
            The vertex normal.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexPositionNormalTexture.TextureCoordinate">
            <summary>
            UV texture coordinates.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexPositionNormalTexture.Size">
            <summary>
            Defines structure byte size.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexPositionNormalTexture.Layout">
            <summary>
            The vertex layout of this struct.
            </summary>
        </member>
        <member name="T:Stride.Graphics.VertexPositionTexture">
            <summary>
            Describes a custom vertex format structure that contains position and color information. 
            </summary>
        </member>
        <member name="M:Stride.Graphics.VertexPositionTexture.#ctor(Stride.Core.Mathematics.Vector3,Stride.Core.Mathematics.Vector2)">
            <summary>
            Initializes a new <see cref="T:Stride.Graphics.VertexPositionTexture"/> instance.
            </summary>
            <param name="position">The position of this vertex.</param>
            <param name="textureCoordinate">UV texture coordinates.</param>
        </member>
        <member name="F:Stride.Graphics.VertexPositionTexture.Position">
            <summary>
            XYZ position.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexPositionTexture.TextureCoordinate">
            <summary>
            UV texture coordinates.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexPositionTexture.Size">
            <summary>
            Defines structure byte size.
            </summary>
        </member>
        <member name="F:Stride.Graphics.VertexPositionTexture.Layout">
            <summary>
            The vertex layout of this struct.
            </summary>
        </member>
        <member name="T:Stride.Graphics.Viewport">
            <summary>
            Defines the window dimensions of a render-target surface onto which a 3D volume projects.
            </summary>
        </member>
        <member name="F:Stride.Graphics.Viewport.Empty">
            <summary>
            Empty value for an undefined viewport.
            </summary>
        </member>
        <member name="F:Stride.Graphics.Viewport.X">
            <summary>
            Gets or sets the pixel coordinate of the upper-left corner of the viewport on the render-target surface.
            </summary>
        </member>
        <member name="F:Stride.Graphics.Viewport.Y">
            <summary>Gets or sets the pixel coordinate of the upper-left corner of the viewport on the render-target surface.</summary>
        </member>
        <member name="F:Stride.Graphics.Viewport.Width">
            <summary>Gets or sets the width dimension of the viewport on the render-target surface, in pixels.</summary>
        </member>
        <member name="F:Stride.Graphics.Viewport.Height">
            <summary>Gets or sets the height dimension of the viewport on the render-target surface, in pixels.</summary>
        </member>
        <member name="F:Stride.Graphics.Viewport.MinDepth">
            <summary>Gets or sets the minimum depth of the clip volume.</summary>
        </member>
        <member name="F:Stride.Graphics.Viewport.MaxDepth">
            <summary>Gets or sets the maximum depth of the clip volume.</summary>
        </member>
        <member name="M:Stride.Graphics.Viewport.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.Viewport"/> struct.
            </summary>
            <param name="x">The x coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="y">The y coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="width">The width of the viewport in pixels.</param>
            <param name="height">The height of the viewport in pixels.</param>
        </member>
        <member name="M:Stride.Graphics.Viewport.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.Viewport"/> struct.
            </summary>
            <param name="x">The x coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="y">The y coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="width">The width of the viewport in pixels.</param>
            <param name="height">The height of the viewport in pixels.</param>
        </member>
        <member name="M:Stride.Graphics.Viewport.#ctor(Stride.Core.Mathematics.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.Viewport"/> struct.
            </summary>
            <param name="bounds">A bounding box that defines the location and size of the viewport in a render target.</param>
        </member>
        <member name="P:Stride.Graphics.Viewport.Bounds">
            <summary>Gets the size of this resource.</summary>
        </member>
        <member name="M:Stride.Graphics.Viewport.ToString">
            <summary>Retrieves a string representation of this object.</summary>
        </member>
        <member name="M:Stride.Graphics.Viewport.Project(Stride.Core.Mathematics.Vector3,Stride.Core.Mathematics.Matrix,Stride.Core.Mathematics.Matrix,Stride.Core.Mathematics.Matrix)">
            <summary>Projects a 3D vector from object space into screen space.</summary>
            <param name="source">The vector to project.</param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <param name="world">The world matrix.</param>
        </member>
        <member name="M:Stride.Graphics.Viewport.Unproject(Stride.Core.Mathematics.Vector3,Stride.Core.Mathematics.Matrix,Stride.Core.Mathematics.Matrix,Stride.Core.Mathematics.Matrix)">
            <summary>Converts a screen space point into a corresponding point in world space.</summary>
            <param name="source">The vector to project.</param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <param name="world">The world matrix.</param>
        </member>
        <member name="M:Stride.Graphics.Viewport.Unproject(Stride.Core.Mathematics.Vector3,Stride.Core.Mathematics.Matrix@)">
            <summary>Converts a screen space point into a corresponding point in world space.</summary>
            <param name="source">The vector to project.</param>
            <param name="worldViewProjection">The World-View-Projection matrix.</param>
        </member>
        <member name="P:Stride.Graphics.Viewport.AspectRatio">
            <summary>Gets the aspect ratio used by the viewport</summary>
        </member>
        <member name="P:Stride.Graphics.Viewport.Size">
            <summary>
            Gets the size of the viewport (Width, Height).
            </summary>
        </member>
        <member name="T:Stride.Graphics.ViewType">
            <summary>
            Defines how a view is selected from a resource.
            </summary>
            <remarks>
            This selection model is taken from Nuaj by Patapom (http://wiki.patapom.com/index.php/Nuaj)
            </remarks>
        </member>
        <member name="F:Stride.Graphics.ViewType.Full">
            <summary>
            Gets a texture view for the whole texture for all mips/arrays dimensions.
            </summary>
            <example>Here is what the view covers with whatever mipLevelIndex/arrayIndex
            
                   Array0 Array1 Array2
                  ______________________
             Mip0 |   X  |   X  |   X  |
                  |------+------+------|
             Mip1 |   X  |   X  |   X  |
                  |------+------+------|
             Mip2 |   X  |   X  |   X  |
                  ----------------------
            </example>
        </member>
        <member name="F:Stride.Graphics.ViewType.Single">
            <summary>
            Gets a single texture view at the specified index in the mip hierarchy and in the array of textures
            The texture view contains a single texture element at the specified mip level and array index
            </summary>
            <example>Here is what the view covers with mipLevelIndex=1 and mrrayIndex=1
            
                   Array0 Array1 Array2
                  ______________________
             Mip0 |      |      |      |
                  |------+------+------|
             Mip1 |      |  X   |      |
                  |------+------+------|
             Mip2 |      |      |      |
                  ----------------------
            </example>
        </member>
        <member name="F:Stride.Graphics.ViewType.ArrayBand">
            <summary>
            Gets a band texture view at the specified index in the mip hierarchy and in the array of textures
            The texture view contains all the mip level texture elements from the specified mip level and array index
            </summary>
            <example>Here is what the view covers with mipLevelIndex=1 and mrrayIndex=1
            
                   Array0 Array1 Array2
                  ______________________
             Mip0 |      |      |      |
                  |------+------+------|
             Mip1 |      |  X   |      |
                  |------+------+------|
             Mip2 |      |  X   |      |
                  ----------------------
            </example>
        </member>
        <member name="F:Stride.Graphics.ViewType.MipBand">
            <summary>
            Gets a band texture view at the specified index in the mip hierarchy and in the array of textures
            The texture view contains all the array texture elements from the specified mip level and array index
            </summary>
            <example>Here is what the view covers with mipLevelIndex=1 and mrrayIndex=1
            
                   Array0 Array1 Array2
                  ______________________
             Mip0 |      |      |      |
                  |------+------+------|
             Mip1 |      |  X   |  X   |
                  |------+------+------|
             Mip2 |      |      |      |
                  ----------------------
            </example>
        </member>
        <member name="T:Stride.Graphics.WindowHandle">
            <summary>
            A platform specific window handle.
            </summary>
        </member>
        <member name="M:Stride.Graphics.WindowHandle.#ctor(Stride.Games.AppContextType,System.Object,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Graphics.WindowHandle"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="nativeWindow">The native window instance (Winforms, SDLWindow, ...).</param>
            <param name="handle">The associated handle of <paramref name="nativeWindow"/>.</param>
        </member>
        <member name="F:Stride.Graphics.WindowHandle.Context">
            <summary>
            The context.
            </summary>
        </member>
        <member name="P:Stride.Graphics.WindowHandle.NativeWindow">
            <summary>
            The native windows as an opaque <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="P:Stride.Graphics.WindowHandle.Handle">
            <summary>
            The associated platform specific handle of <seealso cref="P:Stride.Graphics.WindowHandle.NativeWindow"/>.
            </summary>
        </member>
        <member name="T:Stride.Rendering.EffectInstance">
            <summary>
            A dynamic effect instance, including its values and resources.
            </summary>
        </member>
        <member name="M:Stride.Rendering.EffectInstance.UpdateEffect(Stride.Graphics.GraphicsDevice)">
            <summary>
            Compiles or recompiles the effect if necesssary.
            </summary>
            <param name="graphicsDevice"></param>
            <returns>True if the effect was recompiled, false otherwise.</returns>
        </member>
        <member name="T:Stride.Rendering.EffectParameterUpdater">
            <summary>
            Helper class to update several <see cref="T:Stride.Graphics.ResourceGroup"/> from a <see cref="T:Stride.Rendering.ParameterCollection"/>.
            </summary>
        </member>
        <member name="T:Stride.Rendering.EffectParameterUpdaterLayout">
            <summary>
            Defines a layout used by <see cref="T:Stride.Rendering.EffectParameterUpdater"/> to update several <see cref="T:Stride.Graphics.ResourceGroup"/> from a <see cref="T:Stride.Rendering.ParameterCollection"/>.
            </summary>
        </member>
        <member name="F:Stride.Rendering.TexturingKeys.DefaultTextures">
            <summary>
            Default textures used by this class (<see cref="F:Stride.Rendering.TexturingKeys.Texture0"/>, <see cref="F:Stride.Rendering.TexturingKeys.Texture1"/>...etc.)
            </summary>
        </member>
        <member name="F:Stride.Rendering.TexturingKeys.TextureCubes">
            <summary>
            The cube textures used by this class (<see cref="F:Stride.Rendering.TexturingKeys.TextureCube0"/>, <see cref="F:Stride.Rendering.TexturingKeys.TextureCube1"/>...etc.)
            </summary>
        </member>
        <member name="F:Stride.Rendering.TexturingKeys.Textures3D">
            <summary>
            The 3d textures used by this class (<see cref="F:Stride.Rendering.TexturingKeys.Texture3D0"/>, <see cref="F:Stride.Rendering.TexturingKeys.Texture3D1"/>...etc.)
            </summary>
        </member>
        <member name="F:Stride.Rendering.TexturingKeys.TexturesTexelSize">
            <summary>
            Default textures size used by this class (<see cref="F:Stride.Rendering.TexturingKeys.Texture0TexelSize"/>, <see cref="F:Stride.Rendering.TexturingKeys.Texture1TexelSize"/>...etc.)
            </summary>
        </member>
        <member name="T:Stride.Internal.Refactor">
            <summary>
            Set of methods to help in refactoring that can be easily tracked by finding usages.
            </summary>
        </member>
        <member name="M:Stride.Internal.Refactor.ThrowNotImplementedException(System.String)">
            <summary>
            Throw a not implemented exception. Useful to avoid warnings about non-reachable code.
            </summary>
            <param name="message">Reason for the exception.</param>
        </member>
        <member name="M:Stride.Internal.Refactor.NewNotImplementedException(System.String)">
            <summary>
            Create a new not implemented exception. Useful when we need to tell the C# compiler code
            won't be reached after.
            </summary>
            <param name="message">Reason for the exception.</param>
        </member>
        <member name="T:Stride.StrideVersion">
            <summary>
            Internal version used to identify Stride version.
            </summary>
            <remarks>
            During package build, PackageUpdateVersionTask is updating that file and expect some specific text regex so be careful if you change any of this.
            </remarks>
        </member>
        <member name="F:Stride.StrideVersion.PublicVersion">
            <summary>
            The version used by editor for display purpose. 4th digit needs to be at least 1 if used (due to NuGet special cases).
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.AssemblyVersion">
            <summary>
            The current assembly version as text, currently same as <see cref="F:Stride.StrideVersion.PublicVersion"/>.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersionSimple">
            <summary>
            The NuGet package version without special tags.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersion">
            <summary>
            The NuGet package version.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersionSuffix">
            <summary>
            The NuGet package suffix (i.e. -beta01). Automatically set by Stride.GitVersioning.GenerateVersionFile.
            Three possible values:
            - Empty: official release
            - -betaXX: development version (XX should corespond to development asset versioning)
            - -betaXX-YYYY: beta release (YYYY is the git height since current version has been bumped)
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.BuildMetadata">
            <summary>
            The build metadata, usually +g[git_hash] during package. Automatically set by Stride.GitVersioning.GenerateVersionFile.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.AssemblyInformationalVersion">
            <summary>
            The informational assembly version, containing -beta01 or +g[git_hash] during package.
            </summary>
        </member>
        <member name="T:Stride.PublicKeys">
            <summary>
            Assembly signing information.
            </summary>
        </member>
        <member name="F:Stride.PublicKeys.Default">
            <summary>
            Assembly name suffix that contains signing information.
            </summary>
        </member>
    </members>
</doc>
