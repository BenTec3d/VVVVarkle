<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VL.CoreLib</name>
    </assembly>
    <members>
        <member name="T:VL.Lib.Mathematics.Circle">
            <summary>
            A circle with center and radius
            </summary>
        </member>
        <member name="T:VL.Lib.Mathematics.Collision2D">
            <summary>
            
            This class is organized like the <see cref="T:Stride.Core.Mathematics.CollisionHelper"/> class.
            So that the least complex objects will have the most methods in most cases. 
            Note that not all shapes exist at this time and not all shapes have a corresponding struct. 
            Only the objects that have a corresponding struct should come first in naming and in parameter order.
            The order of complexity is as follows:
                
            1. Point
            2. Circle
            3. Rectangle
            
            </summary>
        </member>
        <member name="M:VL.Lib.Mathematics.Collision2D.CircleContainsPoint(VL.Lib.Mathematics.Circle@,Stride.Core.Mathematics.Vector2@)">
            <summary>
            Checks whether the circle contains the point
            </summary>
            <param name="circle"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Collision2D.CircleIntersectsCircle(VL.Lib.Mathematics.Circle@,VL.Lib.Mathematics.Circle@)">
            <summary>
            Checks whether the circles intersect
            </summary>
            <param name="circle1"></param>
            <param name="circle2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Collision2D.CircleContainsCircle(VL.Lib.Mathematics.Circle@,VL.Lib.Mathematics.Circle@)">
            <summary>
            Checks whether Circle 1 contains Circle 2
            </summary>
            <param name="circle1"></param>
            <param name="circle2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Collision2D.CircleIntersectsRect(VL.Lib.Mathematics.Circle@,Stride.Core.Mathematics.RectangleF@)">
            <summary>
            Checks whether the circle and the rect intersect
            </summary>
            <param name="circle"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Collision2D.RectContainsPoint(Stride.Core.Mathematics.RectangleF@,Stride.Core.Mathematics.Vector2@,System.Boolean@)">
            <summary>
            Checks whether the rectangle contains the point
            </summary>
            <param name="rectangle"></param>
            <param name="point"></param>
            <param name="result"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.Collision2D.RectIntersectsRect(Stride.Core.Mathematics.RectangleF@,Stride.Core.Mathematics.RectangleF@,System.Boolean@)">
            <summary>
            Checks whether the rectangles intersect
            </summary>
            <param name="rectangle1"></param>
            <param name="rectangle2"></param>
            <param name="result"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.Collision2D.RectContainsRect(Stride.Core.Mathematics.RectangleF@,Stride.Core.Mathematics.RectangleF@,System.Boolean@)">
            <summary>
            Checks whether Rectangle 1 contains Rectangle 2
            </summary>
            <param name="rectangle1"></param>
            <param name="rectangle2"></param>
            <param name="result"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.RectangleNodes.Join(Stride.Core.Mathematics.Vector2@,Stride.Core.Mathematics.Vector2@,VL.Lib.Mathematics.RectangleAnchor,Stride.Core.Mathematics.RectangleF@)">
            <summary>
            Creates the rectangle defined by anchor position and size.
            </summary>
            <remarks>
            Size can be negative.
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.RectangleNodes.JoinComponentwise(System.Single,System.Single,System.Single,System.Single,VL.Lib.Mathematics.RectangleAnchor,Stride.Core.Mathematics.RectangleF@)">
            <summary>
            Creates the rectangle defined by anchor position and size.
            </summary>
            <remarks>
            Size can be negative.
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.RectangleNodes.Split(Stride.Core.Mathematics.RectangleF@,VL.Lib.Mathematics.RectangleAnchor,Stride.Core.Mathematics.Vector2@,Stride.Core.Mathematics.Vector2@)">
            <summary>
            Gets anchor position and size of the rectangle.
            </summary>
            <remarks>
            Size can be negative.
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.RectangleNodes.SplitComponentwise(Stride.Core.Mathematics.RectangleF@,VL.Lib.Mathematics.RectangleAnchor,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets anchor position and size of the rectangle.
            </summary>
            <remarks>
            Size can be negative.
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.RectangleNodes.JoinPoints(Stride.Core.Mathematics.Vector2@,Stride.Core.Mathematics.Vector2@,Stride.Core.Mathematics.RectangleF@)">
            <summary>
            Creates the rectangle spanned by the points.
            </summary>
            <remarks>
            Size will always be positive.
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.RectangleNodes.FromLRTB(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a rectangle defined the coordinates values of the edges.
            </summary>
        </member>
        <member name="M:VL.Lib.Mathematics.RectangleNodes.Rectangle(Stride.Core.Mathematics.RectangleF@,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the coordinate values of the edges.
            </summary>
        </member>
        <member name="M:VL.Lib.Mathematics.RectangleNodes.TopCenter(Stride.Core.Mathematics.RectangleF@,Stride.Core.Mathematics.Vector2@)">
            <summary>
            Center of the upper edge.
            </summary>
        </member>
        <member name="M:VL.Lib.Mathematics.RectangleNodes.BottomCenter(Stride.Core.Mathematics.RectangleF@,Stride.Core.Mathematics.Vector2@)">
            <summary>
            Center of the lower edge.
            </summary>
        </member>
        <member name="M:VL.Lib.Mathematics.RectangleNodes.MiddleLeft(Stride.Core.Mathematics.RectangleF@,Stride.Core.Mathematics.Vector2@)">
            <summary>
            Center of the left edge.
            </summary>
        </member>
        <member name="M:VL.Lib.Mathematics.RectangleNodes.MiddleRight(Stride.Core.Mathematics.RectangleF@,Stride.Core.Mathematics.Vector2@)">
            <summary>
            Center of the right edge.
            </summary>
        </member>
        <member name="M:VL.Lib.Mathematics.RectangleNodes.Inflate(Stride.Core.Mathematics.RectangleF@,System.Single,System.Single,System.Single,System.Single,Stride.Core.Mathematics.RectangleF@)">
            <summary>
            Offsets the edges of the rectangle in each direction away from center. Negative values deflate the rectngle.
            </summary>
        </member>
        <member name="M:VL.Lib.Mathematics.RectangleNodes.InflateCentered(Stride.Core.Mathematics.RectangleF@,System.Single,System.Single,Stride.Core.Mathematics.RectangleF@)">
            <summary>
            Offsets the edges of the rectangle horizontally and vertically away from center. Negative values deflate the rectangle.
            </summary>
        </member>
        <member name="M:VL.Lib.Mathematics.RectangleNodes.InflateUniform(Stride.Core.Mathematics.RectangleF@,System.Single,Stride.Core.Mathematics.RectangleF@)">
            <summary>
            Offsets all edges of the rectangle away from center. Negative values deflate the rectangle.
            </summary>
        </member>
        <member name="M:VL.Lib.Mathematics.RectangleNodes.Scale(Stride.Core.Mathematics.RectangleF@,System.Single,System.Single,System.Single,System.Single,Stride.Core.Mathematics.RectangleF@)">
            <summary>
            Scales the edges of the rectangle in each direction away from center. Negative values flip the rectangle.
            </summary>
        </member>
        <member name="M:VL.Lib.Mathematics.RectangleNodes.ScaleCentered(Stride.Core.Mathematics.RectangleF@,System.Single,System.Single,Stride.Core.Mathematics.RectangleF@)">
            <summary>
            Scales the edges of the rectangle horizontally and vertically away from center. Negative values flip the rectangle.
            </summary>
        </member>
        <member name="M:VL.Lib.Mathematics.RectangleNodes.ScaleUniform(Stride.Core.Mathematics.RectangleF@,System.Single,Stride.Core.Mathematics.RectangleF@)">
            <summary>
            Scales all edges of the rectangle away from center. Negative values flip the rectangle.
            </summary>
        </member>
        <member name="M:VL.Lib.Mathematics.RectangleNodes.Scale(Stride.Core.Mathematics.RectangleF@,Stride.Core.Mathematics.Vector2@)">
            <summary>
            Scales the rectangle in horizontal and vertical direction
            </summary>
            <param name="input"></param>
            <param name="scaling"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.RectangleNodes.Translate(Stride.Core.Mathematics.RectangleF@,Stride.Core.Mathematics.Vector2@)">
            <summary>
            Changes the position of the rectangle
            </summary>
            <param name="input"></param>
            <param name="translation"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector2Nodes.Vector(Stride.Core.Mathematics.Vector2@,System.Single@,System.Single@)">
            <summary>
            Splits a vector into its components
            </summary>
            <param name="input"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector2Nodes.Equals(Stride.Core.Mathematics.Vector2@,Stride.Core.Mathematics.Vector2@)">
            <summary>
            Determines whether the specified <see cref="T:Stride.Core.Mathematics.Vector2"/> is equal to this instance.
            </summary>
            <param name="input"></param>
            <param name="other">The <see cref="T:Stride.Core.Mathematics.Vector2"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:Stride.Core.Mathematics.Vector2"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector2Nodes.ToVector3(Stride.Core.Mathematics.Vector2@,System.Single)">
            <summary>
            Converts to a Vector3 with a specified z
            </summary>
            <param name="input"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector2Nodes.ToVector4(Stride.Core.Mathematics.Vector2@,System.Single,System.Single)">
            <summary>
            Converts to a Vector4 with a specified z and w
            </summary>
            <param name="input"></param>
            <param name="z"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector2Nodes.GetItem(Stride.Core.Mathematics.Vector2@,System.Int32)">
            <summary>
            Gets the specified component of the vector, throws an exception when out of bounds. Use GetSlice if you want to auto wrap the index
            </summary>
            <param name="input"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector2Nodes.SetItem(Stride.Core.Mathematics.Vector2@,System.Single,System.Int32,Stride.Core.Mathematics.Vector2@)">
            <summary>
            Sets the specified component of the vector, throws an exception when out of bounds. Use SetSlice if you want to auto wrap the index
            </summary>
            <param name="input"></param>
            <param name="value"></param>
            <param name="index"></param>
            <param name="result"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector2Nodes.GetSlice(Stride.Core.Mathematics.Vector2@,System.Int32)">
            <summary>
            Gets the specified component of the vector, wraps the index if out of bounds. Use GetItem if you want better performance
            </summary>
            <param name="input"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector2Nodes.SetSlice(Stride.Core.Mathematics.Vector2@,System.Single,System.Int32,Stride.Core.Mathematics.Vector2@)">
            <summary>
            Sets the specified component of the vector, wraps the index if out of bounds. Use SetItem if you want better performance
            </summary>
            <param name="input"></param>
            <param name="value"></param>
            <param name="index"></param>
            <param name="result"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector2Nodes.Multiply(Stride.Core.Mathematics.Vector2@,Stride.Core.Mathematics.Vector2@,Stride.Core.Mathematics.Vector2@)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the multiplied vector.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector2Nodes.Cross(Stride.Core.Mathematics.Vector2@,Stride.Core.Mathematics.Vector2@)">
            <summary>
            Two dimensional cross product, also called perp dot product 
            </summary>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector2Nodes.Angle(Stride.Core.Mathematics.Vector2@)">
            <summary>
            Calculates the angle between the direction of a 2d vector and the X-Axis in cycles
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector2Nodes.FromValues(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Creates a vector from the first values of a sequence, if the count of the sequence is lower than the dimension the remainig values get filled with 0
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.AlignedBoxExtensions.CreateCenterSize(Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Vector3@)">
            <summary>
            Creates an AlignedBox from center position and size vector
            </summary>
            <param name="center"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.BoxExtensions.CreateCenterSize(Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Vector3@)">
            <summary>
            Creates a Box from center position and size vector. Initially, the Box is axis-aligned box, but it can be rotated and transformed later
            </summary>
            <param name="center"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.BoxExtensions.BoxJoin(Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Matrix@)">
            <summary>
            Creates a Box from extends (half size for each axis) and transformation
            </summary>
            <param name="extends"></param>
            <param name="transformation"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.BoxExtensions.Scale(VL.Lib.Mathematics.OrientedBoundingBox@,Stride.Core.Mathematics.Vector3@)">
            <summary>
            Scales the Box by scaling its Extents without affecting the Transformation matrix. By keeping Transformation matrix scaling-free, the collision detection methods will be more accurate
            </summary>
            <param name="input"></param>
            <param name="scaling"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.BoxExtensions.Translate(VL.Lib.Mathematics.OrientedBoundingBox@,Stride.Core.Mathematics.Vector3@)">
            <summary>
            Translates the Box to a new position using a translation vector
            </summary>
            <param name="input"></param>
            <param name="translation"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.BoxExtensions.Transform(VL.Lib.Mathematics.OrientedBoundingBox@,Stride.Core.Mathematics.Matrix@)">
            <summary>
            Transforms this Box using a transformation matrix. While any kind of transformation can be applied, it is recommended to apply scaling using scale method instead, which scales the Extents and keeps the Transformation matrix for rotation only, and that preserves collision detection accuracy
            </summary>
            <param name="input"></param>
            <param name="transformation"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.MatrixNodes.MatrixSplit(Stride.Core.Mathematics.Matrix@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Returns all individual values of the matrix.
            </summary>
        </member>
        <member name="M:VL.Lib.Mathematics.MatrixNodes.GetValues(Stride.Core.Mathematics.Matrix@)">
            <summary>
            Gets the matrix values as a spread of floats
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.MatrixNodes.Transform(Stride.Core.Mathematics.Matrix@,Stride.Core.Mathematics.Matrix@,Stride.Core.Mathematics.Matrix@)">
            <summary>
            Transforms one matrix by another
            </summary>
            <param name="transformation">The first matrix to multiply.</param>
            <param name="input">The second matrix to multiply.</param>
            <param name="result">The product of the two matrices.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.MatrixNodes.SolvePerspectiveUnitSquare(System.Collections.Generic.IReadOnlyList{Stride.Core.Mathematics.Vector2},System.Single)">
            <summary>
            Very fast and direct solution of a 4-point homography, assumes that the original points are (0, 1), (1, 1), (1, 0) and (0, 0)
            </summary>
            <param name="P"></param>
            <param name="zScale"></param>
            <returns></returns>
        </member>
        <member name="T:VL.Lib.Mathematics.Matrix3x3">
            <summary>
            Represents a 3x3 Matrix ( contains only Scale and Rotation ).
            </summary>
        </member>
        <member name="F:VL.Lib.Mathematics.Matrix3x3.SizeInBytes">
            <summary>
            The size of the <see cref="T:VL.Lib.Mathematics.Matrix3x3"/> type, in bytes.
            </summary>
        </member>
        <member name="F:VL.Lib.Mathematics.Matrix3x3.Zero">
            <summary>
            A <see cref="T:VL.Lib.Mathematics.Matrix3x3"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:VL.Lib.Mathematics.Matrix3x3.Identity">
            <summary>
            The identity <see cref="T:VL.Lib.Mathematics.Matrix3x3"/>.
            </summary>
        </member>
        <member name="F:VL.Lib.Mathematics.Matrix3x3.M11">
            <summary>
            Value at row 1 column 1 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:VL.Lib.Mathematics.Matrix3x3.M12">
            <summary>
            Value at row 1 column 2 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:VL.Lib.Mathematics.Matrix3x3.M13">
            <summary>
            Value at row 1 column 3 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:VL.Lib.Mathematics.Matrix3x3.M21">
            <summary>
            Value at row 2 column 1 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:VL.Lib.Mathematics.Matrix3x3.M22">
            <summary>
            Value at row 2 column 2 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:VL.Lib.Mathematics.Matrix3x3.M23">
            <summary>
            Value at row 2 column 3 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:VL.Lib.Mathematics.Matrix3x3.M31">
            <summary>
            Value at row 3 column 1 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:VL.Lib.Mathematics.Matrix3x3.M32">
            <summary>
            Value at row 3 column 2 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:VL.Lib.Mathematics.Matrix3x3.M33">
            <summary>
            Value at row 3 column 3 of the Matrix3x3.
            </summary>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:VL.Lib.Mathematics.Matrix3x3"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:VL.Lib.Mathematics.Matrix3x3"/> struct.
            </summary>
            <param name="M11">The value to assign at row 1 column 1 of the Matrix3x3.</param>
            <param name="M12">The value to assign at row 1 column 2 of the Matrix3x3.</param>
            <param name="M13">The value to assign at row 1 column 3 of the Matrix3x3.</param>
            <param name="M21">The value to assign at row 2 column 1 of the Matrix3x3.</param>
            <param name="M22">The value to assign at row 2 column 2 of the Matrix3x3.</param>
            <param name="M23">The value to assign at row 2 column 3 of the Matrix3x3.</param>
            <param name="M31">The value to assign at row 3 column 1 of the Matrix3x3.</param>
            <param name="M32">The value to assign at row 3 column 2 of the Matrix3x3.</param>
            <param name="M33">The value to assign at row 3 column 3 of the Matrix3x3.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:VL.Lib.Mathematics.Matrix3x3"/> struct.
            </summary>
            <param name="values">The values to assign to the components of the Matrix3x3. This must be an array with sixteen elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than sixteen elements.</exception>
        </member>
        <member name="P:VL.Lib.Mathematics.Matrix3x3.Row1">
            <summary>
            Gets or sets the first row in the Matrix3x3; that is M11, M12, M13
            </summary>
        </member>
        <member name="P:VL.Lib.Mathematics.Matrix3x3.Row2">
            <summary>
            Gets or sets the second row in the Matrix3x3; that is M21, M22, M23
            </summary>
        </member>
        <member name="P:VL.Lib.Mathematics.Matrix3x3.Row3">
            <summary>
            Gets or sets the third row in the Matrix3x3; that is M31, M32, M33
            </summary>
        </member>
        <member name="P:VL.Lib.Mathematics.Matrix3x3.Column1">
            <summary>
            Gets or sets the first column in the Matrix3x3; that is M11, M21, M31
            </summary>
        </member>
        <member name="P:VL.Lib.Mathematics.Matrix3x3.Column2">
            <summary>
            Gets or sets the second column in the Matrix3x3; that is M12, M22, M32
            </summary>
        </member>
        <member name="P:VL.Lib.Mathematics.Matrix3x3.Column3">
            <summary>
            Gets or sets the third column in the Matrix3x3; that is M13, M23, M33
            </summary>
        </member>
        <member name="P:VL.Lib.Mathematics.Matrix3x3.ScaleVector">
            <summary>
            Gets or sets the scale of the Matrix3x3; that is M11, M22, and M33.
            </summary>
        </member>
        <member name="P:VL.Lib.Mathematics.Matrix3x3.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is an identity Matrix3x3.
            </summary>
            <value>
            <c>true</c> if this instance is an identity Matrix3x3; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VL.Lib.Mathematics.Matrix3x3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the Matrix3x3 component, depending on the index.</value>
            <param name="index">The zero-based index of the component to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 15].</exception>
        </member>
        <member name="P:VL.Lib.Mathematics.Matrix3x3.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the Matrix3x3 component, depending on the index.</value>
            <param name="row">The row of the Matrix3x3 to access.</param>
            <param name="column">The column of the Matrix3x3 to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>is out of the range [0, 3].</exception>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Determinant">
            <summary>
            Calculates the determinant of the Matrix3x3.
            </summary>
            <returns>The determinant of the Matrix3x3.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Invert">
            <summary>
            Inverts the Matrix3x3.
            </summary>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Transpose">
            <summary>
            Transposes the Matrix3x3.
            </summary>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Orthogonalize">
            <summary>
            Orthogonalizes the specified Matrix3x3.
            </summary>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the Matrix3x3 will be orthogonal to any other given row in the
            Matrix3x3.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Orthonormalize">
            <summary>
            Orthonormalizes the specified Matrix3x3.
            </summary>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.DecomposeQR(VL.Lib.Mathematics.Matrix3x3@,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Decomposes a Matrix3x3 into an orthonormalized Matrix3x3 Q and a right triangular Matrix3x3 R.
            </summary>
            <param name="Q">When the method completes, contains the orthonormalized Matrix3x3 of the decomposition.</param>
            <param name="R">When the method completes, contains the right triangular Matrix3x3 of the decomposition.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.DecomposeLQ(VL.Lib.Mathematics.Matrix3x3@,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Decomposes a Matrix3x3 into a lower triangular Matrix3x3 L and an orthonormalized Matrix3x3 Q.
            </summary>
            <param name="L">When the method completes, contains the lower triangular Matrix3x3 of the decomposition.</param>
            <param name="Q">When the method completes, contains the orthonormalized Matrix3x3 of the decomposition.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Decompose(Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Quaternion@)">
            <summary>
            Decomposes a Matrix3x3 into a scale, rotation, and translation.
            </summary>
            <param name="scale">When the method completes, contains the scaling component of the decomposed Matrix3x3.</param>
            <param name="rotation">When the method completes, contains the rotation component of the decomposed Matrix3x3.</param>
            <remarks>
            This method is designed to decompose an SRT transformation Matrix3x3 only.
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.DecomposeUniformScale(System.Single@,Stride.Core.Mathematics.Quaternion@)">
            <summary>
            Decomposes a uniform scale matrix into a scale, rotation, and translation.
            A uniform scale matrix has the same scale in every axis.
            </summary>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <param name="rotation">When the method completes, contains the rotation component of the decomposed matrix.</param>
            <remarks>
            This method is designed to decompose only an SRT transformation matrix that has the same scale in every axis.
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.ExchangeRows(System.Int32,System.Int32)">
            <summary>
            Exchanges two rows in the Matrix3x3.
            </summary>
            <param name="firstRow">The first row to exchange. This is an index of the row starting at zero.</param>
            <param name="secondRow">The second row to exchange. This is an index of the row starting at zero.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.ExchangeColumns(System.Int32,System.Int32)">
            <summary>
            Exchanges two columns in the Matrix3x3.
            </summary>
            <param name="firstColumn">The first column to exchange. This is an index of the column starting at zero.</param>
            <param name="secondColumn">The second column to exchange. This is an index of the column starting at zero.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.ToArray">
            <summary>
            Creates an array containing the elements of the Matrix3x3.
            </summary>
            <returns>A 9-element array containing the components of the Matrix3x3.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Add(VL.Lib.Mathematics.Matrix3x3@,VL.Lib.Mathematics.Matrix3x3@,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to add.</param>
            <param name="right">The second Matrix3x3 to add.</param>
            <param name="result">When the method completes, contains the sum of the two matrices.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Add(VL.Lib.Mathematics.Matrix3x3,VL.Lib.Mathematics.Matrix3x3)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to add.</param>
            <param name="right">The second Matrix3x3 to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Subtract(VL.Lib.Mathematics.Matrix3x3@,VL.Lib.Mathematics.Matrix3x3@,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to subtract.</param>
            <param name="right">The second Matrix3x3 to subtract.</param>
            <param name="result">When the method completes, contains the difference between the two matrices.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Subtract(VL.Lib.Mathematics.Matrix3x3,VL.Lib.Mathematics.Matrix3x3)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to subtract.</param>
            <param name="right">The second Matrix3x3 to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Multiply(VL.Lib.Mathematics.Matrix3x3@,System.Single,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Scales a Matrix3x3 by the given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled Matrix3x3.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Multiply(VL.Lib.Mathematics.Matrix3x3,System.Single)">
            <summary>
            Scales a Matrix3x3 by the given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Multiply(VL.Lib.Mathematics.Matrix3x3@,VL.Lib.Mathematics.Matrix3x3@,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to multiply.</param>
            <param name="right">The second Matrix3x3 to multiply.</param>
            <param name="result">The product of the two matrices.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Multiply(VL.Lib.Mathematics.Matrix3x3,VL.Lib.Mathematics.Matrix3x3)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to multiply.</param>
            <param name="right">The second Matrix3x3 to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Divide(VL.Lib.Mathematics.Matrix3x3@,System.Single,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Scales a Matrix3x3 by the given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled Matrix3x3.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Divide(VL.Lib.Mathematics.Matrix3x3,System.Single)">
            <summary>
            Scales a Matrix3x3 by the given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Divide(VL.Lib.Mathematics.Matrix3x3@,VL.Lib.Mathematics.Matrix3x3@,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to divide.</param>
            <param name="right">The second Matrix3x3 to divide.</param>
            <param name="result">When the method completes, contains the quotient of the two matrices.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Divide(VL.Lib.Mathematics.Matrix3x3,VL.Lib.Mathematics.Matrix3x3)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to divide.</param>
            <param name="right">The second Matrix3x3 to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Exponent(VL.Lib.Mathematics.Matrix3x3@,System.Int32,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Performs the exponential operation on a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to perform the operation on.</param>
            <param name="exponent">The exponent to raise the Matrix3x3 to.</param>
            <param name="result">When the method completes, contains the exponential Matrix3x3.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent"/> is negative.</exception>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Exponent(VL.Lib.Mathematics.Matrix3x3,System.Int32)">
            <summary>
            Performs the exponential operation on a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to perform the operation on.</param>
            <param name="exponent">The exponent to raise the Matrix3x3 to.</param>
            <returns>The exponential Matrix3x3.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent"/> is negative.</exception>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Negate(VL.Lib.Mathematics.Matrix3x3@,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Negates a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to be negated.</param>
            <param name="result">When the method completes, contains the negated Matrix3x3.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Negate(VL.Lib.Mathematics.Matrix3x3)">
            <summary>
            Negates a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to be negated.</param>
            <returns>The negated Matrix3x3.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Lerp(VL.Lib.Mathematics.Matrix3x3@,VL.Lib.Mathematics.Matrix3x3@,System.Single,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Performs a linear interpolation between two matrices.
            </summary>
            <param name="start">Start Matrix3x3.</param>
            <param name="end">End Matrix3x3.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two matrices.</param>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Lerp(VL.Lib.Mathematics.Matrix3x3,VL.Lib.Mathematics.Matrix3x3,System.Single)">
            <summary>
            Performs a linear interpolation between two matrices.
            </summary>
            <param name="start">Start Matrix3x3.</param>
            <param name="end">End Matrix3x3.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two matrices.</returns>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.SmoothStep(VL.Lib.Mathematics.Matrix3x3@,VL.Lib.Mathematics.Matrix3x3@,System.Single,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start Matrix3x3.</param>
            <param name="end">End Matrix3x3.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two matrices.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.SmoothStep(VL.Lib.Mathematics.Matrix3x3,VL.Lib.Mathematics.Matrix3x3,System.Single)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start Matrix3x3.</param>
            <param name="end">End Matrix3x3.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two matrices.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Transpose(VL.Lib.Mathematics.Matrix3x3@,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Calculates the transpose of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose transpose is to be calculated.</param>
            <param name="result">When the method completes, contains the transpose of the specified Matrix3x3.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.TransposeByRef(VL.Lib.Mathematics.Matrix3x3@,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Calculates the transpose of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose transpose is to be calculated.</param>
            <param name="result">When the method completes, contains the transpose of the specified Matrix3x3.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Transpose(VL.Lib.Mathematics.Matrix3x3)">
            <summary>
            Calculates the transpose of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose transpose is to be calculated.</param>
            <returns>The transpose of the specified Matrix3x3.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Invert(VL.Lib.Mathematics.Matrix3x3@,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Calculates the inverse of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose inverse is to be calculated.</param>
            <param name="result">When the method completes, contains the inverse of the specified Matrix3x3.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Invert(VL.Lib.Mathematics.Matrix3x3)">
            <summary>
            Calculates the inverse of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose inverse is to be calculated.</param>
            <returns>The inverse of the specified Matrix3x3.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Orthogonalize(VL.Lib.Mathematics.Matrix3x3@,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Orthogonalizes the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to orthogonalize.</param>
            <param name="result">When the method completes, contains the orthogonalized Matrix3x3.</param>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the Matrix3x3 will be orthogonal to any other given row in the
            Matrix3x3.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Orthogonalize(VL.Lib.Mathematics.Matrix3x3)">
            <summary>
            Orthogonalizes the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to orthogonalize.</param>
            <returns>The orthogonalized Matrix3x3.</returns>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the Matrix3x3 will be orthogonal to any other given row in the
            Matrix3x3.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Orthonormalize(VL.Lib.Mathematics.Matrix3x3@,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Orthonormalizes the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to orthonormalize.</param>
            <param name="result">When the method completes, contains the orthonormalized Matrix3x3.</param>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Orthonormalize(VL.Lib.Mathematics.Matrix3x3)">
            <summary>
            Orthonormalizes the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to orthonormalize.</param>
            <returns>The orthonormalized Matrix3x3.</returns>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.UpperTriangularForm(VL.Lib.Mathematics.Matrix3x3@,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Brings the Matrix3x3 into upper triangular form using elementary row operations.
            </summary>
            <param name="value">The Matrix3x3 to put into upper triangular form.</param>
            <param name="result">When the method completes, contains the upper triangular Matrix3x3.</param>
            <remarks>
            If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.UpperTriangularForm(VL.Lib.Mathematics.Matrix3x3)">
            <summary>
            Brings the Matrix3x3 into upper triangular form using elementary row operations.
            </summary>
            <param name="value">The Matrix3x3 to put into upper triangular form.</param>
            <returns>The upper triangular Matrix3x3.</returns>
            <remarks>
            If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.LowerTriangularForm(VL.Lib.Mathematics.Matrix3x3@,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Brings the Matrix3x3 into lower triangular form using elementary row operations.
            </summary>
            <param name="value">The Matrix3x3 to put into lower triangular form.</param>
            <param name="result">When the method completes, contains the lower triangular Matrix3x3.</param>
            <remarks>
            If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.LowerTriangularForm(VL.Lib.Mathematics.Matrix3x3)">
            <summary>
            Brings the Matrix3x3 into lower triangular form using elementary row operations.
            </summary>
            <param name="value">The Matrix3x3 to put into lower triangular form.</param>
            <returns>The lower triangular Matrix3x3.</returns>
            <remarks>
            If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.RowEchelonForm(VL.Lib.Mathematics.Matrix3x3@,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Brings the Matrix3x3 into row echelon form using elementary row operations;
            </summary>
            <param name="value">The Matrix3x3 to put into row echelon form.</param>
            <param name="result">When the method completes, contains the row echelon form of the Matrix3x3.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.RowEchelonForm(VL.Lib.Mathematics.Matrix3x3)">
            <summary>
            Brings the Matrix3x3 into row echelon form using elementary row operations;
            </summary>
            <param name="value">The Matrix3x3 to put into row echelon form.</param>
            <returns>When the method completes, contains the row echelon form of the Matrix3x3.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.BillboardLH(Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Vector3@,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard Matrix3x3.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.BillboardLH(Stride.Core.Mathematics.Vector3,Stride.Core.Mathematics.Vector3,Stride.Core.Mathematics.Vector3,Stride.Core.Mathematics.Vector3)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard Matrix3x3.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.BillboardRH(Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Vector3@,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Creates a right-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard Matrix3x3.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.BillboardRH(Stride.Core.Mathematics.Vector3,Stride.Core.Mathematics.Vector3,Stride.Core.Mathematics.Vector3,Stride.Core.Mathematics.Vector3)">
            <summary>
            Creates a right-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard Matrix3x3.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.LookAtLH(Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Vector3@,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Creates a left-handed, look-at Matrix3x3.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at Matrix3x3.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.LookAtLH(Stride.Core.Mathematics.Vector3,Stride.Core.Mathematics.Vector3,Stride.Core.Mathematics.Vector3)">
            <summary>
            Creates a left-handed, look-at Matrix3x3.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at Matrix3x3.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.LookAtRH(Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Vector3@,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Creates a right-handed, look-at Matrix3x3.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at Matrix3x3.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.LookAtRH(Stride.Core.Mathematics.Vector3,Stride.Core.Mathematics.Vector3,Stride.Core.Mathematics.Vector3)">
            <summary>
            Creates a right-handed, look-at Matrix3x3.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at Matrix3x3.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Scaling(Stride.Core.Mathematics.Vector3@,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <param name="result">When the method completes, contains the created scaling Matrix3x3.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Scaling(Stride.Core.Mathematics.Vector3)">
            <summary>
            Creates a Matrix3x3 that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <returns>The created scaling Matrix3x3.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Scaling(System.Single,System.Single,System.Single,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <param name="result">When the method completes, contains the created scaling Matrix3x3.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Scaling(System.Single,System.Single,System.Single)">
            <summary>
            Creates a Matrix3x3 that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <returns>The created scaling Matrix3x3.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Scaling(System.Single,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that uniformly scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <param name="result">When the method completes, contains the created scaling Matrix3x3.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Scaling(System.Single)">
            <summary>
            Creates a Matrix3x3 that uniformly scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <returns>The created scaling Matrix3x3.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.RotationX(System.Single,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.RotationX(System.Single)">
            <summary>
            Creates a Matrix3x3 that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.RotationY(System.Single,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.RotationY(System.Single)">
            <summary>
            Creates a Matrix3x3 that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.RotationZ(System.Single,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.RotationZ(System.Single)">
            <summary>
            Creates a Matrix3x3 that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.RotationAxis(Stride.Core.Mathematics.Vector3@,System.Single,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that rotates around an arbitrary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.RotationAxis(Stride.Core.Mathematics.Vector3,System.Single)">
            <summary>
            Creates a Matrix3x3 that rotates around an arbitrary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.RotationQuaternion(Stride.Core.Mathematics.Quaternion@,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Creates a rotation Matrix3x3 from a quaternion.
            </summary>
            <param name="rotation">The quaternion to use to build the Matrix3x3.</param>
            <param name="result">The created rotation Matrix3x3.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.RotationQuaternion(Stride.Core.Mathematics.Quaternion)">
            <summary>
            Creates a rotation Matrix3x3 from a quaternion.
            </summary>
            <param name="rotation">The quaternion to use to build the Matrix3x3.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.RotationYawPitchRoll(System.Single,System.Single,System.Single,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Creates a rotation Matrix3x3 with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a rotation Matrix3x3 with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.op_Addition(VL.Lib.Mathematics.Matrix3x3,VL.Lib.Mathematics.Matrix3x3)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to add.</param>
            <param name="right">The second Matrix3x3 to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.op_UnaryPlus(VL.Lib.Mathematics.Matrix3x3)">
            <summary>
            Assert a Matrix3x3 (return it unchanged).
            </summary>
            <param name="value">The Matrix3x3 to assert (unchanged).</param>
            <returns>The asserted (unchanged) Matrix3x3.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.op_Subtraction(VL.Lib.Mathematics.Matrix3x3,VL.Lib.Mathematics.Matrix3x3)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to subtract.</param>
            <param name="right">The second Matrix3x3 to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.op_UnaryNegation(VL.Lib.Mathematics.Matrix3x3)">
            <summary>
            Negates a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to negate.</param>
            <returns>The negated Matrix3x3.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.op_Multiply(System.Single,VL.Lib.Mathematics.Matrix3x3)">
            <summary>
            Scales a Matrix3x3 by a given value.
            </summary>
            <param name="right">The Matrix3x3 to scale.</param>
            <param name="left">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.op_Multiply(VL.Lib.Mathematics.Matrix3x3,System.Single)">
            <summary>
            Scales a Matrix3x3 by a given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.op_Multiply(VL.Lib.Mathematics.Matrix3x3,VL.Lib.Mathematics.Matrix3x3)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to multiply.</param>
            <param name="right">The second Matrix3x3 to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.op_Division(VL.Lib.Mathematics.Matrix3x3,System.Single)">
            <summary>
            Scales a Matrix3x3 by a given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.op_Division(VL.Lib.Mathematics.Matrix3x3,VL.Lib.Mathematics.Matrix3x3)">
            <summary>
            Divides two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to divide.</param>
            <param name="right">The second Matrix3x3 to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.op_Equality(VL.Lib.Mathematics.Matrix3x3,VL.Lib.Mathematics.Matrix3x3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.op_Inequality(VL.Lib.Mathematics.Matrix3x3,VL.Lib.Mathematics.Matrix3x3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.op_Explicit(VL.Lib.Mathematics.Matrix3x3)~Stride.Core.Mathematics.Matrix">
            <summary>
            Convert the 3x3 Matrix to a 4x4 Matrix.
            </summary>
            <returns>A 4x4 Matrix with zero translation and M44=1</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.op_Explicit(Stride.Core.Mathematics.Matrix)~VL.Lib.Mathematics.Matrix3x3">
            <summary>
            Convert the 4x4 Matrix to a 3x3 Matrix.
            </summary>
            <returns>A 3x3 Matrix</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Equals(VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Determines whether the specified <see cref="T:VL.Lib.Mathematics.Matrix3x3"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:VL.Lib.Mathematics.Matrix3x3"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:VL.Lib.Mathematics.Matrix3x3"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Equals(VL.Lib.Mathematics.Matrix3x3)">
            <summary>
            Determines whether the specified <see cref="T:VL.Lib.Mathematics.Matrix3x3"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:VL.Lib.Mathematics.Matrix3x3"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:VL.Lib.Mathematics.Matrix3x3"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Equals(VL.Lib.Mathematics.Matrix3x3@,VL.Lib.Mathematics.Matrix3x3@)">
            <summary>
            Determines whether the specified <see cref="T:VL.Lib.Mathematics.Matrix3x3"/> are equal.
            </summary>
        </member>
        <member name="M:VL.Lib.Mathematics.Matrix3x3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:VL.Lib.Mathematics.OrientedBoundingBox">
            <summary>
            OrientedBoundingBox (OBB) is a rectangular block, much like an AABB (BoundingBox) but with an arbitrary orientation.
            </summary>
        </member>
        <member name="F:VL.Lib.Mathematics.OrientedBoundingBox.Extents">
            <summary>
            Half lengths of the box along each axis.
            </summary>
        </member>
        <member name="F:VL.Lib.Mathematics.OrientedBoundingBox.Transformation">
            <summary>
            The matrix which aligns and scales the box, and its translation vector represents the center of the box.
            </summary>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.#ctor(Stride.Core.Mathematics.BoundingBox)">
            <summary>
            Creates an <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> from a BoundingBox.
            </summary>
            <param name="bb">The BoundingBox to create from.</param>
            <remarks>
            Initially, the OBB is axis-aligned box, but it can be rotated and transformed later.
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.#ctor(Stride.Core.Mathematics.Vector3,Stride.Core.Mathematics.Vector3)">
            <summary>
            Creates an <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> which contained between two minimum and maximum points.
            </summary>
            <param name="minimum">The minimum vertex of the bounding box.</param>
            <param name="maximum">The maximum vertex of the bounding box.</param>
            <remarks>
            Initially, the OrientedBoundingBox is axis-aligned box, but it can be rotated and transformed later.
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.#ctor(Stride.Core.Mathematics.Vector3[])">
            <summary>
            Creates an <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <remarks>
            This method is not for computing the best tight-fitting OrientedBoundingBox.
            And initially, the OrientedBoundingBox is axis-aligned box, but it can be rotated and transformed later.
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.GetCorners">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <returns>An array of points representing the eight corners of the bounding box.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.Transform(Stride.Core.Mathematics.Matrix@)">
            <summary>
            Transforms this box using a transformation matrix.
            </summary>
            <param name="mat">The transformation matrix.</param>
            <remarks>
            While any kind of transformation can be applied, it is recommended to apply scaling using scale method instead, which
            scales the Extents and keeps the Transformation matrix for rotation only, and that preserves collision detection accuracy.
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.Transform(Stride.Core.Mathematics.Matrix)">
            <summary>
            Transforms this box using a transformation matrix.
            </summary>
            <param name="mat">The transformation matrix.</param>
            <remarks>
            While any kind of transformation can be applied, it is recommended to apply scaling using scale method instead, which
            scales the Extents and keeps the Transformation matrix for rotation only, and that preserves collision detection accuracy.
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.Scale(Stride.Core.Mathematics.Vector3@)">
            <summary>
            Scales the <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> by scaling its Extents without affecting the Transformation matrix,
            By keeping Transformation matrix scaling-free, the collision detection methods will be more accurate.
            </summary>
            <param name="scaling"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.Scale(Stride.Core.Mathematics.Vector3)">
            <summary>
            Scales the <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> by scaling its Extents without affecting the Transformation matrix,
            By keeping Transformation matrix scaling-free, the collision detection methods will be more accurate.
            </summary>
            <param name="scaling"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.Scale(System.Single)">
            <summary>
            Scales the <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> by scaling its Extents without affecting the Transformation matrix,
            By keeping Transformation matrix scaling-free, the collision detection methods will be more accurate.
            </summary>
            <param name="scaling"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.Translate(Stride.Core.Mathematics.Vector3@)">
            <summary>
            Translates the <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> to a new position using a translation vector;
            </summary>
            <param name="translation">the translation vector.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.Translate(Stride.Core.Mathematics.Vector3)">
            <summary>
            Translates the <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> to a new position using a translation vector;
            </summary>
            <param name="translation">the translation vector.</param>
        </member>
        <member name="P:VL.Lib.Mathematics.OrientedBoundingBox.Size">
            <summary>
            The size of the <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> if no scaling is applied to the transformation matrix.
            </summary>
            <remarks>
            The property will return the actual size even if the scaling is applied using Scale method, 
            but if the scaling is applied to transformation matrix, use GetSize Function instead.
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.GetSize">
            <summary>
            Returns the size of the <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> taking into consideration the scaling applied to the transformation matrix.
            </summary>
            <returns>The size of the consideration</returns>
            <remarks>
            This method is computationally expensive, so if no scale is applied to the transformation matrix
            use <see cref="P:VL.Lib.Mathematics.OrientedBoundingBox.Size"/> property instead.
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.GetSizeSquared">
            <summary>
            Returns the square size of the <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> taking into consideration the scaling applied to the transformation matrix.
            </summary>
            <returns>The size of the consideration</returns>
        </member>
        <member name="P:VL.Lib.Mathematics.OrientedBoundingBox.Center">
            <summary>
            Returns the center of the <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/>.
            </summary>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.Contains(Stride.Core.Mathematics.Vector3@)">
            <summary>
            Determines whether a <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> contains a point. 
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.Contains(Stride.Core.Mathematics.Vector3)">
            <summary>
            Determines whether a <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> contains a point. 
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.Contains(Stride.Core.Mathematics.Vector3[])">
            <summary>
            Determines whether a <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> contains an array of points>.
            </summary>
            <param name="points">The points array to test.</param>
            <returns>The type of containment.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.Contains(Stride.Core.Mathematics.BoundingSphere,System.Boolean)">
            <summary>
            Determines whether a <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> contains a <see cref="T:Stride.Core.Mathematics.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="IgnoreScale">Optimize the check operation by assuming that <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> has no scaling applied</param>
            <returns>The type of containment the two objects have.</returns>
            <remarks>
            This method is not designed for <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> which has a non-uniform scaling applied to its transformation matrix.
            But any type of scaling applied using Scale method will keep this method accurate.
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.Contains(VL.Lib.Mathematics.OrientedBoundingBox@)">
            <summary>
            Check the intersection between two <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/>
            </summary>
            <param name="obb">The OrientedBoundingBoxs to test.</param>
            <returns>The type of containment the two objects have.</returns>
            <remarks>
            For accuracy, The transformation matrix for both <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> must not have any scaling applied to it.
            Anyway, scaling using Scale method will keep this method accurate.
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.ContainsLine(Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Vector3@)">
            <summary>
            Check the intersection between an <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> and a line defined by two points
            </summary>
            <param name="L1">The first point in the line.</param>
            <param name="L2">The second point in the line.</param>
            <returns>The type of containment the two objects have.</returns>
            <remarks>
            For accuracy, The transformation matrix for the <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> must not have any scaling applied to it.
            Anyway, scaling using Scale method will keep this method accurate.
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.Contains(Stride.Core.Mathematics.BoundingBox@)">
            <summary>
            Check the intersection between an <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> and <see cref="T:Stride.Core.Mathematics.BoundingBox"/>
            </summary>
            <param name="box">The BoundingBox to test.</param>
            <returns>The type of containment the two objects have.</returns>
            <remarks>
            For accuracy, The transformation matrix for the <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> must not have any scaling applied to it.
            Anyway, scaling using Scale method will keep this method accurate.
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.Intersects(Stride.Core.Mathematics.Ray@,Stride.Core.Mathematics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:Stride.Core.Mathematics.Ray"/> and a <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:Stride.Core.Mathematics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.Intersects(Stride.Core.Mathematics.Ray@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:Stride.Core.Mathematics.Ray"/> and a <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.GetBoundingBox">
            <summary>
            Get the axis-aligned <see cref="T:Stride.Core.Mathematics.BoundingBox"/> which contains all <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> corners.
            </summary>
            <returns>The axis-aligned BoundingBox of this OrientedBoundingBox.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.GetBoxToBoxMatrix(VL.Lib.Mathematics.OrientedBoundingBox@,VL.Lib.Mathematics.OrientedBoundingBox@,System.Boolean)">
            <summary>
            Calculates the matrix required to transfer any point from one <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> local coordinates to another.
            </summary>
            <param name="A">The source OrientedBoundingBox.</param>
            <param name="B">The target OrientedBoundingBox.</param>
            <param name="NoMatrixScaleApplied">
            If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation matrix of the OrientedBoundingBox.
            </param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.Merge(VL.Lib.Mathematics.OrientedBoundingBox@,VL.Lib.Mathematics.OrientedBoundingBox@,System.Boolean)">
            <summary>
            Merge an OrientedBoundingBox B into another OrientedBoundingBox A, by expanding A to contain B and keeping A orientation.
            </summary>
            <param name="A">The <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> to merge into it.</param>
            <param name="B">The <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> to be merged</param>
            <param name="NoMatrixScaleApplied">
            If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation matrix of the OrientedBoundingBox.
            </param>
            <remarks>
            Unlike merging axis aligned boxes, The operation is not interchangeable, because it keeps A orientation and merge B into it.
            </remarks>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.MergeInto(VL.Lib.Mathematics.OrientedBoundingBox@,System.Boolean)">
            <summary>
            Merge this OrientedBoundingBox into another OrientedBoundingBox, keeping the other OrientedBoundingBox orientation.
            </summary>
            <param name="OBB">The other <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> to merge into.</param>
            <param name="NoMatrixScaleApplied">
            If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation matrix of the OrientedBoundingBox.
            </param>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.Add(VL.Lib.Mathematics.OrientedBoundingBox@,System.Boolean)">
            <summary>
            Merge another OrientedBoundingBox into this OrientedBoundingBox.
            </summary>
            <param name="OBB">The other <see cref="T:VL.Lib.Mathematics.OrientedBoundingBox"/> to merge into this OrientedBoundingBox.</param>
            <param name="NoMatrixScaleApplied">
            If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation matrix of the OrientedBoundingBox.
            </param>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.Equals(VL.Lib.Mathematics.OrientedBoundingBox@)">
            <summary>
            Determines whether the specified <see cref="T:Stride.Core.Mathematics.Vector4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:Stride.Core.Mathematics.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Stride.Core.Mathematics.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.Equals(VL.Lib.Mathematics.OrientedBoundingBox)">
            <summary>
            Determines whether the specified <see cref="T:Stride.Core.Mathematics.Vector4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:Stride.Core.Mathematics.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Stride.Core.Mathematics.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.op_Equality(VL.Lib.Mathematics.OrientedBoundingBox,VL.Lib.Mathematics.OrientedBoundingBox)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.op_Inequality(VL.Lib.Mathematics.OrientedBoundingBox,VL.Lib.Mathematics.OrientedBoundingBox)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:VL.Lib.Mathematics.OrientedBoundingBox.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:VL.Lib.Mathematics.QuaternionNodes.Quaternion(Stride.Core.Mathematics.Quaternion@,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Splits a quaternion into its components
            </summary>
            <param name="input"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.QuaternionNodes.QuaternionToEulerYawPitchRoll(Stride.Core.Mathematics.Quaternion,System.Single@,System.Single@,System.Single@)">
            <summary>
            Converts a quaternion into euler angles, assuming that the euler angle multiplication to create the quaternion was yaw*pitch*roll.
            Output angles are in cycles.
            </summary>
            <param name="q">A quaternion, can be non normalized</param>
            <param name="pitch"></param>
            <param name="yaw"></param>
            <param name="roll"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.QuaternionNodes.LookAtLH(Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Quaternion@)">
            <summary>
            Creates a left-handed, look-at quaternion.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at quaternion.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.QuaternionNodes.RotationLookAtLH(Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Quaternion@)">
            <summary>
            Creates a left-handed, look-at quaternion.
            </summary>
            <param name="forward">The camera's forward direction.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at quaternion.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.QuaternionNodes.LookAtRH(Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Quaternion@)">
            <summary>
            Creates a right-handed, look-at quaternion.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at quaternion.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.QuaternionNodes.RotationLookAtRH(Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Quaternion@)">
            <summary>
            Creates a right-handed, look-at quaternion.
            </summary>
            <param name="forward">The camera's forward direction.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at quaternion.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.QuaternionNodes.RotationMatrix(VL.Lib.Mathematics.Matrix3x3@,Stride.Core.Mathematics.Quaternion@)">
            <summary>
            Creates a quaternion given a rotation matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.RayNodes.GetPickRay(System.Int32,System.Int32,VL.Lib.Mathematics.ViewportF,Stride.Core.Mathematics.Matrix)">
            <summary>
            Calculates a world space <see cref="T:Stride.Core.Mathematics.Ray"/> from 2d screen coordinates.
            </summary>
            <param name="x">X coordinate on 2d screen.</param>
            <param name="y">Y coordinate on 2d screen.</param>
            <param name="viewport"><see cref="T:VL.Lib.Mathematics.ViewportF"/>.</param>
            <param name="worldViewProjection">Transformation <see cref="T:Stride.Core.Mathematics.Matrix"/>.</param>
            <returns>Resulting <see cref="T:Stride.Core.Mathematics.Ray"/>.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector3Nodes.Vector(Stride.Core.Mathematics.Vector3@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Splits a vector into its components
            </summary>
            <param name="input"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector3Nodes.ToVector4(Stride.Core.Mathematics.Vector3@,System.Single)">
            <summary>
            Converts to a Vector4 with a specified w
            </summary>
            <param name="input"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector3Nodes.GetItem(Stride.Core.Mathematics.Vector3@,System.Int32)">
            <summary>
            Gets the specified component of the vector, throws an exception when out of bounds. Use GetSlice if you want to auto wrap the index
            </summary>
            <param name="input"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector3Nodes.SetItem(Stride.Core.Mathematics.Vector3@,System.Single,System.Int32,Stride.Core.Mathematics.Vector3@)">
            <summary>
            Sets the specified component of the vector, throws an exception when out of bounds. Use SetSlice if you want to auto wrap the index
            </summary>
            <param name="input"></param>
            <param name="value"></param>
            <param name="index"></param>
            <param name="result"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector3Nodes.GetSlice(Stride.Core.Mathematics.Vector3@,System.Int32)">
            <summary>
            Gets the specified component of the vector, wraps the index if out of bounds. Use GetItem if you want better performance
            </summary>
            <param name="input"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector3Nodes.SetSlice(Stride.Core.Mathematics.Vector3@,System.Single,System.Int32,Stride.Core.Mathematics.Vector3@)">
            <summary>
            Sets the specified component of the vector, wraps the index if out of bounds. Use SetItem if you want better performance
            </summary>
            <param name="input"></param>
            <param name="value"></param>
            <param name="index"></param>
            <param name="result"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector3Nodes.Multiply(Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Vector3@)">
            <summary>
            Multiply a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the multiplied vector.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector3Nodes.Angle(Stride.Core.Mathematics.Vector3@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Calculates yaw and pitch for the direction of a Vector3 in cycles, the lenght is output as well since its calculated in the process anyway
            </summary>
            <param name="input"></param>
            <param name="polar"></param>
            <param name="azimuthal"></param>
            <param name="length"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector3Nodes.FromValues(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Creates a vector from the first values of a sequence, if the count of the sequence is lower than the dimension the remainig values get filled with 0
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector4Nodes.Vector(Stride.Core.Mathematics.Vector4@,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Splits a vector into its components
            </summary>
            <param name="input"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector4Nodes.GetItem(Stride.Core.Mathematics.Vector4@,System.Int32)">
            <summary>
            Gets the specified component of the vector, throws an exception when out of bounds. Use GetSlice if you want to auto wrap the index
            </summary>
            <param name="input"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector4Nodes.SetItem(Stride.Core.Mathematics.Vector4@,System.Single,System.Int32,Stride.Core.Mathematics.Vector4@)">
            <summary>
            Sets the specified component of the vector, throws an exception when out of bounds. Use SetSlice if you want to auto wrap the index
            </summary>
            <param name="input"></param>
            <param name="value"></param>
            <param name="index"></param>
            <param name="result"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector4Nodes.GetSlice(Stride.Core.Mathematics.Vector4@,System.Int32)">
            <summary>
            Gets the specified component of the vector, wraps the index if out of bounds. Use GetItem if you want better performance
            </summary>
            <param name="input"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector4Nodes.SetSlice(Stride.Core.Mathematics.Vector4@,System.Single,System.Int32,Stride.Core.Mathematics.Vector4@)">
            <summary>
            Sets the specified component of the vector, wraps the index if out of bounds. Use SetItem if you want better performance
            </summary>
            <param name="input"></param>
            <param name="value"></param>
            <param name="index"></param>
            <param name="result"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector4Nodes.Multiply(Stride.Core.Mathematics.Vector4@,Stride.Core.Mathematics.Vector4@,Stride.Core.Mathematics.Vector4@)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the multiplied vector.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector4Nodes.FromValues(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Creates a vector from the first values of a sequence, if the count of the sequence is lower than the dimension the remainig values get filled with 0
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:VL.Lib.Mathematics.ViewportF">
            <summary>
            Defines the viewport dimensions using float coordinates for (X,Y,Width,Height).
            </summary>
        </member>
        <member name="F:VL.Lib.Mathematics.ViewportF.X">
            <summary>
            Position of the pixel coordinate of the upper-left corner of the viewport.
            </summary>
        </member>
        <member name="F:VL.Lib.Mathematics.ViewportF.Y">
            <summary>
            Position of the pixel coordinate of the upper-left corner of the viewport.
            </summary>
        </member>
        <member name="F:VL.Lib.Mathematics.ViewportF.Width">
            <summary>
            Width dimension of the viewport.
            </summary>
        </member>
        <member name="F:VL.Lib.Mathematics.ViewportF.Height">
            <summary>
            Height dimension of the viewport.
            </summary>
        </member>
        <member name="F:VL.Lib.Mathematics.ViewportF.MinDepth">
            <summary>
            Gets or sets the minimum depth of the clip volume.
            </summary>
        </member>
        <member name="F:VL.Lib.Mathematics.ViewportF.MaxDepth">
            <summary>
            Gets or sets the maximum depth of the clip volume.
            </summary>
        </member>
        <member name="M:VL.Lib.Mathematics.ViewportF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:VL.Lib.Mathematics.ViewportF"/> struct.
            </summary>
            <param name="x">The x coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="y">The y coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="width">The width of the viewport in pixels.</param>
            <param name="height">The height of the viewport in pixels.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.ViewportF.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:VL.Lib.Mathematics.ViewportF"/> struct.
            </summary>
            <param name="x">The x coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="y">The y coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="width">The width of the viewport in pixels.</param>
            <param name="height">The height of the viewport in pixels.</param>
            <param name="minDepth">The minimum depth of the clip volume.</param>
            <param name="maxDepth">The maximum depth of the clip volume.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.ViewportF.#ctor(Stride.Core.Mathematics.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:VL.Lib.Mathematics.ViewportF"/> struct.
            </summary>
            <param name="bounds">A bounding box that defines the location and size of the viewport in a render target.</param>
        </member>
        <member name="P:VL.Lib.Mathematics.ViewportF.Bounds">
            <summary>
            Gets the size of this resource.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="M:VL.Lib.Mathematics.ViewportF.Equals(VL.Lib.Mathematics.ViewportF@)">
            <summary>
            Determines whether the specified <see cref="T:VL.Lib.Mathematics.ViewportF"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:VL.Lib.Mathematics.ViewportF"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:VL.Lib.Mathematics.ViewportF"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VL.Lib.Mathematics.ViewportF.Equals(VL.Lib.Mathematics.ViewportF)">
            <summary>
            Determines whether the specified <see cref="T:VL.Lib.Mathematics.ViewportF"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:VL.Lib.Mathematics.ViewportF"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:VL.Lib.Mathematics.ViewportF"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VL.Lib.Mathematics.ViewportF.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VL.Lib.Mathematics.ViewportF.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:VL.Lib.Mathematics.ViewportF.op_Equality(VL.Lib.Mathematics.ViewportF,VL.Lib.Mathematics.ViewportF)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.ViewportF.op_Inequality(VL.Lib.Mathematics.ViewportF,VL.Lib.Mathematics.ViewportF)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.ViewportF.ToString">
            <summary>
            Retrieves a string representation of this object.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.ViewportF.Project(Stride.Core.Mathematics.Vector3,Stride.Core.Mathematics.Matrix,Stride.Core.Mathematics.Matrix,Stride.Core.Mathematics.Matrix)">
            <summary>
            Projects a 3D vector from object space into screen space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <param name="world">The world matrix.</param>
            <returns>The projected vector.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.ViewportF.Project(Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Matrix@,Stride.Core.Mathematics.Vector3@)">
            <summary>
            Projects a 3D vector from object space into screen space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="matrix">A combined WorldViewProjection matrix.</param>
            <param name="vector">The projected vector.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.ViewportF.Unproject(Stride.Core.Mathematics.Vector3,Stride.Core.Mathematics.Matrix,Stride.Core.Mathematics.Matrix,Stride.Core.Mathematics.Matrix)">
            <summary>
            Converts a screen space point into a corresponding point in world space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <param name="world">The world matrix.</param>
            <returns>The unprojected Vector.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.ViewportF.Unproject(Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Matrix@,Stride.Core.Mathematics.Vector3@)">
            <summary>
            Converts a screen space point into a corresponding point in world space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="matrix">An inverted combined WorldViewProjection matrix.</param>
            <param name="vector">The unprojected vector.</param>
        </member>
        <member name="P:VL.Lib.Mathematics.ViewportF.AspectRatio">
            <summary>
            Gets the aspect ratio used by the viewport.
            </summary>
            <value>The aspect ratio.</value>
        </member>
        <member name="M:VL.Lib.Mathematics.Noise.Random(System.Single,System.Single)">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>A random number between 0.0 and 1.0.</returns>
        </member>
        <member name="T:VL.Lib.Mathematics.RandomUtil">
            <summary>
            Random functions on commun types.
            </summary>
        </member>
        <member name="M:VL.Lib.Mathematics.RandomUtil.NextFloat(System.Random,System.Single,System.Single)">
            <summary>
            Gets random <c>float</c> number within range.
            </summary>
            <param name="random">Current <see cref="T:System.Random"/>.</param>
            <param name="min">Minimum.</param>
            <param name="max">Maximum.</param>
            <returns>Random <c>float</c> number.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.RandomUtil.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
            Gets random <c>double</c> number within range.
            </summary>
            <param name="random">Current <see cref="T:System.Random"/>.</param>
            <param name="min">Minimum.</param>
            <param name="max">Maximum.</param>
            <returns>Random <c>double</c> number.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.RandomUtil.NextLong(System.Random)">
            <summary>
            Gets random <c>long</c> number.
            </summary>
            <param name="random">Current <see cref="T:System.Random"/>.</param>
            <returns>Random <c>long</c> number.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.RandomUtil.NextLong(System.Random,System.Int64,System.Int64)">
            <summary>
            Gets random <c>long</c> number within range.
            </summary>
            <param name="random">Current <see cref="T:System.Random"/>.</param>
            <param name="min">Minimum.</param>
            <param name="max">Maximum.</param>
            <returns>Random <c>long</c> number.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.RandomUtil.NextVector2(System.Random,Stride.Core.Mathematics.Vector2,Stride.Core.Mathematics.Vector2)">
            <summary>
            Gets random <see cref="T:Stride.Core.Mathematics.Vector2"/> within range.
            </summary>
            <param name="random">Current <see cref="T:System.Random"/>.</param>
            <param name="min">Minimum.</param>
            <param name="max">Maximum.</param>
            <returns>Random <see cref="T:Stride.Core.Mathematics.Vector2"/>.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.RandomUtil.NextVector3(System.Random,Stride.Core.Mathematics.Vector3,Stride.Core.Mathematics.Vector3)">
            <summary>
            Gets random <see cref="T:Stride.Core.Mathematics.Vector3"/> within range.
            </summary>
            <param name="random">Current <see cref="T:System.Random"/>.</param>
            <param name="min">Minimum.</param>
            <param name="max">Maximum.</param>
            <returns>Random <see cref="T:Stride.Core.Mathematics.Vector3"/>.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.RandomUtil.NextVector4(System.Random,Stride.Core.Mathematics.Vector4,Stride.Core.Mathematics.Vector4)">
            <summary>
            Gets random <see cref="T:Stride.Core.Mathematics.Vector4"/> within range.
            </summary>
            <param name="random">Current <see cref="T:System.Random"/>.</param>
            <param name="min">Minimum.</param>
            <param name="max">Maximum.</param>
            <returns>Random <see cref="T:Stride.Core.Mathematics.Vector4"/>.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.RandomUtil.NextColor4(System.Random,Stride.Core.Mathematics.Color4,Stride.Core.Mathematics.Color4)">
            <summary>
            Gets random <see cref="T:Stride.Core.Mathematics.Color4"/> within range.
            </summary>
            <param name="random">Current <see cref="T:System.Random"/>.</param>
            <param name="min">Minimum.</param>
            <param name="max">Maximum.</param>
            <returns>Random <see cref="T:Stride.Core.Mathematics.Color4"/>.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.RandomUtil.NextPoint(System.Random,Stride.Core.Mathematics.Point,Stride.Core.Mathematics.Point)">
            <summary>
            Gets random <see cref="T:Stride.Core.Mathematics.Point"/>.
            </summary>
            <param name="random">Current <see cref="T:System.Random"/>.</param>
            <param name="min">Minimum.</param>
            <param name="max">Maximum.</param>
            <returns>Random <see cref="T:Stride.Core.Mathematics.Point"/>.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.RandomUtil.NextTime(System.Random,System.TimeSpan,System.TimeSpan)">
            <summary>
            Gets random <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="random">Current <see cref="T:System.Random"/>.</param>
            <param name="min">Minimum.</param>
            <param name="max">Maximum.</param>
            <returns>Random <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="F:VL.Lib.Mathematics.RangeMapping.None">
            <summary>
            No mapping.
            </summary>
        </member>
        <member name="F:VL.Lib.Mathematics.RangeMapping.Clamp">
            <summary>
            Values are clamped at the borders.
            </summary>
        </member>
        <member name="F:VL.Lib.Mathematics.RangeMapping.Mirror">
            <summary>
            Values are mirrored at the borders.
            </summary>
        </member>
        <member name="F:VL.Lib.Mathematics.RangeMapping.Wrap">
            <summary>
            Values are wrapped around the borders.
            </summary>
        </member>
        <member name="T:VL.Lib.Mathematics.TweenerFloat32">
            <summary>
            Tweener routines, interpolation functions for a value in the range [0..1] in various shapes
            
            Code by west
            </summary>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.QuadEaseIn(System.Single)">
            <summary>
            QUADRATIC EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.QuadEaseOut(System.Single)">
            <summary>
            QUADRATIC EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.QuadEaseInOut(System.Single)">
            <summary>
            QUADRATIC EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.QuadEaseOutIn(System.Single)">
            <summary>
            QUADRATIC EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.CubicEaseIn(System.Single)">
            <summary>
            CUBIC EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.CubicEaseOut(System.Single)">
            <summary>
            CUBIC EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.CubicEaseInOut(System.Single)">
            <summary>
            CUBIC EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.CubicEaseOutIn(System.Single)">
            <summary>
            CUBIC EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.QuarticEaseIn(System.Single)">
            <summary>
            QUARTIC EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.QuarticEaseOut(System.Single)">
            <summary>
            QUARTIC EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.QuarticEaseInOut(System.Single)">
            <summary>
            QUARTIC EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.QuarticEaseOutIn(System.Single)">
            <summary>
            QUARTIC EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>		
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.QuinticEaseIn(System.Single)">
            <summary>
            QUINTYIC EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.QuinticEaseOut(System.Single)">
            <summary>
            QUINTYIC EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.QuinticEaseInOut(System.Single)">
            <summary>
            QUINTYIC EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.QuinticEaseOutIn(System.Single)">
            <summary>
            QUINTYIC EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.SinusoidalEaseIn(System.Single)">
            <summary>
            SINUSOIDAL EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.SinusoidalEaseOut(System.Single)">
            <summary>
            SINUSOIDAL EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.SinusoidalEaseInOut(System.Single)">
            <summary>
            SINUSOIDAL EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.SinusoidalEaseOutIn(System.Single)">
            <summary>
            SINUSOIDAL EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.ExponentialEaseIn(System.Single)">
            <summary>
            EXPONENTIAL EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.ExponentialEaseOut(System.Single)">
            <summary>
            EXPONENTIAL EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.ExponentialEaseInOut(System.Single)">
            <summary>
            EXPONENTIAL EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.ExponentialEaseOutIn(System.Single)">
            <summary>
            EXPONENTIAL EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.CircularEaseIn(System.Single)">
            <summary>
            CIRCULAR EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.CircularEaseOut(System.Single)">
            <summary>
            CIRCULAR EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.CircularEaseInOut(System.Single)">
            <summary>
            CIRCULAR EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.CircularEaseOutIn(System.Single)">
            <summary>
            CIRCULAR EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>	
            <returns>Shaped value</returns>			
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.ElasticEaseIn(System.Single)">
            <summary>
            ELASTIC EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.ElasticEaseOut(System.Single)">
            <summary>
            ELASTIC EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.ElasticEaseInOut(System.Single)">
            <summary>
            ELASTIC EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.ElasticEaseOutIn(System.Single)">
            <summary>
            ELASTIC EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.BackEaseIn(System.Single)">
            <summary>
            BACK EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.BackEaseOut(System.Single)">
            <summary>
            BACK EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.BackEaseInOut(System.Single)">
            <summary>
            BACK EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.BackEaseOutIn(System.Single)">
            <summary>
            BACK EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.BounceEaseIn(System.Single)">
            <summary>
            BOUNCE EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.BounceEaseOut(System.Single)">
            <summary>
            BOUNCE EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.BounceEaseInOut(System.Single)">
            <summary>
            BOUNCE EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.BounceEaseOutIn(System.Single)">
            <summary>
            BOUNCE EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib._3D.BoundingFrustumNodes.Equals(Stride.Core.Mathematics.BoundingFrustum@,Stride.Core.Mathematics.BoundingFrustum@)">
            <summary>
            Determines whether the specified <see cref="T:Stride.Core.Mathematics.BoundingFrustum"/> is equal to this instance.
            </summary>
            <param name="input"></param>
            <param name="other">The <see cref="T:Stride.Core.Mathematics.BoundingFrustum"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Stride.Core.Mathematics.BoundingFrustum"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VL.Lib._3D.BoundingFrustumNodes.NotEquals(Stride.Core.Mathematics.BoundingFrustum@,Stride.Core.Mathematics.BoundingFrustum@)">
            <summary>
            Determines whether the specified <see cref="T:Stride.Core.Mathematics.BoundingFrustum"/> is not equal to this instance.
            </summary>
            <param name="input"></param>
            <param name="other">The <see cref="T:Stride.Core.Mathematics.BoundingFrustum"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Stride.Core.Mathematics.BoundingFrustum"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VL.Lib._3D.BoundingFrustumNodes.IsOrthographic(Stride.Core.Mathematics.BoundingFrustum@)">
            <summary>
            Indicate whether the current BoundingFrustrum is Orthographic.
            </summary>
            <value>
            	<c>true</c> if the current BoundingFrustrum is Orthographic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:VL.Lib._3D.BoundingFrustumNodes.GetPlane(Stride.Core.Mathematics.BoundingFrustum@,System.Int32)">
            <summary>
            Returns one of the 6 planes related to this frustum.
            </summary>
            <param name="input"></param>
            <param name="index">Plane index where 0 for Left, 1 for Right, 2 for Top, 3 for Bottom, 4 for Near, 5 for Far</param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib._3D.BoundingFrustumNodes.GetCorners(Stride.Core.Mathematics.BoundingFrustum@,Stride.Core.Mathematics.Vector3[])">
            <summary>
            Returns the 8 corners of the frustum, element0 is Near1 (near right down corner)
            , element1 is Near2 (near right top corner)
            , element2 is Near3 (near Left top corner)
            , element3 is Near4 (near Left down corner)
            , element4 is Far1 (far right down corner)
            , element5 is Far2 (far right top corner)
            , element6 is Far3 (far left top corner)
            , element7 is Far4 (far left down corner)
            </summary>
            <returns>The 8 corners of the frustum</returns>
        </member>
        <member name="M:VL.Lib._3D.BoundingFrustumNodes.GetCorners(Stride.Core.Mathematics.BoundingFrustum@)">
            <summary>
            Returns the 8 corners of the frustum, element0 is Near1 (near right down corner)
            , element1 is Near2 (near right top corner)
            , element2 is Near3 (near Left top corner)
            , element3 is Near4 (near Left down corner)
            , element4 is Far1 (far right down corner)
            , element5 is Far2 (far right top corner)
            , element6 is Far3 (far left top corner)
            , element7 is Far4 (far left down corner)
            </summary>
            <returns>The 8 corners of the frustum</returns>
        </member>
        <member name="M:VL.Lib._3D.BoundingFrustumNodes.Contains(Stride.Core.Mathematics.BoundingFrustum@,Stride.Core.Mathematics.Vector3@)">
            <summary>
            Checks whether a point lay inside, intersects or lay outside the frustum.
            </summary>
            <param name="input"></param>
            <param name="point">The point.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:VL.Lib._3D.BoundingFrustumNodes.Contains(Stride.Core.Mathematics.BoundingFrustum@,Stride.Core.Mathematics.BoundingBox@)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding box.
            </summary>
            <param name="input"></param>
            <param name="box">The box.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:VL.Lib._3D.BoundingFrustumNodes.Contains(Stride.Core.Mathematics.BoundingFrustum@,Stride.Core.Mathematics.BoundingSphere@)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding sphere.
            </summary>
            <param name="input"></param>
            <param name="sphere">The sphere.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:VL.Lib._3D.BoundingFrustumNodes.Intersects(Stride.Core.Mathematics.BoundingFrustum@,Stride.Core.Mathematics.BoundingSphere@)">
            <summary>
            Checks whether the current BoundingFrustum intersects a BoundingSphere.
            </summary>
            <param name="input"></param>
            <param name="sphere">The sphere.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:VL.Lib._3D.BoundingFrustumNodes.Intersects(Stride.Core.Mathematics.BoundingFrustum@,Stride.Core.Mathematics.BoundingBox@)">
            <summary>
            Checks whether the current BoundingFrustum intersects a BoundingBox.
            </summary>
            <param name="input"></param>
            <param name="box">The box.</param>
            <returns><c>true</c> if the current BoundingFrustum intersects a BoundingSphere.</returns>
        </member>
        <member name="M:VL.Lib._3D.BoundingFrustumNodes.Intersects(Stride.Core.Mathematics.BoundingFrustum@,Stride.Core.Mathematics.Plane@)">
            <summary>
            Checks whether the current BoundingFrustum intersects the specified Plane.
            </summary>
            <param name="input"></param>
            <param name="plane">The plane.</param>
            <returns>Plane intersection type.</returns>
        </member>
        <member name="M:VL.Lib._3D.BoundingFrustumNodes.Intersects(Stride.Core.Mathematics.BoundingFrustum@,Stride.Core.Mathematics.Ray@,System.Nullable{System.Single}@,System.Nullable{System.Single}@)">
            <summary>
            Checks whether the current BoundingFrustum intersects the specified Ray.
            </summary>
            <param name="input"></param>
            <param name="ray">The Ray to check for intersection with.</param>
            <param name="inDistance">The distance at which the ray enters the frustum if there is an intersection and the ray starts outside the frustum.</param>
            <param name="outDistance">The distance at which the ray exits the frustum if there is an intersection.</param>
            <returns><c>true</c> if the current BoundingFrustum intersects the specified Ray.</returns>
        </member>
        <member name="M:VL.Lib._3D.BoundingFrustumNodes.FromCamera(Stride.Core.Mathematics.Vector3,Stride.Core.Mathematics.Vector3,Stride.Core.Mathematics.Vector3,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new frustum relaying on perspective camera parameters
            </summary>
            <param name="cameraPos">The camera pos.</param>
            <param name="lookDir">The look dir.</param>
            <param name="upDir">Up dir.</param>
            <param name="fov">The fov.</param>
            <param name="znear">The znear.</param>
            <param name="zfar">The zfar.</param>
            <param name="aspect">The aspect.</param>
            <returns>The bounding frustum calculated from perspective camera</returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.plus``1(``0,``0)">
            <summary>
            Plus operator
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.minus``1(``0,``0)">
            <summary>
            Minus operator
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.multiply``1(``0,``0)">
            <summary>
            Multiply operator; the inverse operation of division
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.divide``1(``0,``0)">
            <summary>
            Division operator; the inverse operation of multiplication
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.divideInteger``1(``0,``0)">
            <summary>
            Integer division, ie. the fractional part (remainder) is being discarded
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.mod``1(``0,``0)">
            <summary>
            Modulo operator
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.zmod``1(``0,``0)">
            <summary>
            Modulo operator with the property, that the remainder of a division z / d is always positive. For example: zmod(-2, 30) = 28.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.onesComplement``1(``0)">
            <summary>
            Bitwise negation for integer types
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.orBitwise``1(``0,``0)">
            <summary>
            Bitwise OR for integer types
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.andBitwise``1(``0,``0)">
            <summary>
            Bitwise AND for integer types
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.xorBitwise``1(``0,``0)">
            <summary>
            Bitwise XOR for integer types
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.Zero``1(``0@)">
            <summary>
            The zero object for a specific type, the identity element for the addition operation
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.One``1(``0@)">
            <summary>
            The one object for a specific type, the identity element for the multiplication operation
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.Quantize``1(``0,``0)">
            <summary>
            Puts the value into a grid with given step size
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="stepSize"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.Min``1(``0,``0)">
            <summary>
            Outputs the smaller value of the two inputs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.Max``1(``0,``0)">
            <summary>
            Outputs the greater value of the two inputs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.Saturate``1(``0)">
            <summary>
            Clamps the input into 0..1 range
            </summary>
            <typeparam name="F"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.Clamp``1(``0,``0,``0)">
            <summary>
            Clamps the input into Minimum..Maximum range
            </summary>
            <typeparam name="F"></typeparam>
            <param name="input"></param>
            <param name="Minimum"></param>
            <param name="Maximum"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.Simplex``1(``0)">
            <summary>
            Samples a smooth noise function at the input position.
            </summary>
            <remarks>
            Output range is roughly [-1..1]
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.Simplex``1(``0,System.Single)">
            <summary>
            Samples a smooth noise function at the input position.
            The additional Scalar input animates the noise function.
            </summary>
            <remarks>
            Output range is roughly [-1..1]
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.CatmullRom``2(``0,``0,``0,``0,``1)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
            <param name="value4"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.Hermite``2(``0,``0,``0,``0,``1)">
            <summary>
            Performs a Hermite spline interpolation
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="value1"></param>
            <param name="tangent1"></param>
            <param name="value2"></param>
            <param name="tangent2"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.Compare.By``2(System.Func{``0,``1})">
            <summary>
            Creates an equality comparer from a key selector delegate
            </summary>
            <typeparam name="T">Item type</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="selector">The selector.</param>
        </member>
        <member name="T:VL.Lib.Collections.TreePatching.TreeNodeChildrenManager`2">
            <summary>
            Place this process node in a patch that accepts children on update. Initialize it with your tree node.
            </summary>
        </member>
        <member name="T:VL.Lib.Collections.TreePatching.TreeNodeParentManager`2">
            <summary>
            Place this process node in a patch that outputs a potential child of another node in your tree structure.
            </summary>
        </member>
        <member name="T:VL.Lib.Collections.EnumerableNodes">
            <summary>
            All the nodes which are safe to use on a sequence. All the other are defined in the VL.DevLib project.
            </summary>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.FirstOrDefault``2(``1,``0,``0@)">
            <summary>
            Returns the first element of a sequence, or the given default value if the sequence contains no elements
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TSequence"></typeparam>
            <param name="input"></param>
            <param name="defaultValue"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.FirstOrDefault``2(``1,``0,System.Func{``0,System.Boolean},``0@)">
            <summary>
            Returns the first element of the sequence that satisfies a condition or the given default value if no such element is found
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TSequence"></typeparam>
            <param name="input"></param>
            <param name="defaultValue"></param>
            <param name="predicate"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.LastOrDefault``2(``1,``0,``0@)">
            <summary>
            Returns the last element of a sequence, or the given default value if the sequence contains no elements
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TSequence"></typeparam>
            <param name="input"></param>
            <param name="defaultValue"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.LastOrDefault``2(``1,``0,System.Func{``0,System.Boolean},``0@)">
            <summary>
            Returns the last element of a sequence that satisfies a condition or the given default value if no such element is found
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TSequence"></typeparam>
            <param name="input"></param>
            <param name="defaultValue"></param>
            <param name="predicate"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.AND(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Determines whether all elements of a bool sequence are true
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.OR(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Determines whether any elements of a bool sequence is true
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether all elements of a sequence satisfy a condition
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.Any``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether a sequence contains any elements
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether any element of a sequence satisfies a condition
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.None``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether a sequence contains no elements
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.None``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether all elements of a sequence do not satisfy a condition
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="input"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.SplitFirst``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEnumerable{``0}@,``0@)">
            <summary>
            Splits the sequence into its first element and the rest
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="defaultValue"></param>
            <param name="output"></param>
            <param name="result"></param>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.SplitLast``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEnumerable{``0}@,``0@)">
            <summary>
            Splits the sequence into its last element and the rest
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="defaultValue"></param>
            <param name="output"></param>
            <param name="result"></param>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.IntersectByKey``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Produces the set intersection of two sequences by using a key selector delegate to compare values
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.UnionByKey``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Produces the set union of two sequences by using a key selector delegate to compare values
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.ExceptByKey``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Produces the set difference of two sequences by using a key selector delegate to compare values
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.SplitAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{``0}@,System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Splits the sequence at the given index into two sequences
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="index"></param>
            <param name="output"></param>
            <param name="output2"></param>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.ToSequence``1(``0)">
            <summary>
            Returns the input as a Sequence with one element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.UnZip``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}@,System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            The inverse of Zip. Interprets the input sequence as being interleaved and untangles it
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="output"></param>
            <param name="output2"></param>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.ZipIt``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Interleaves the two input sequences. To get the functionality as defined in LINQ use Zip (LINQ)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <param name="useMinCount"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TAccumulate"></typeparam>
            <param name="input"></param>
            <param name="seed"></param>
            <param name="accumulator"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.Cast``1(System.Collections.IEnumerable)">
            <summary>
            Casts the elements of an System.Collections.IEnumerable to the specified type
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates all incoming sequences to one sequence
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.Count``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the number of elements in a sequence
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns a number that represents how many elements in the specified sequence satisfy a condition
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="input"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="input"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns distinct elements from a sequence by using the default equality comparer to compare values
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.Empty``1">
            <summary>
            Returns an empty sequence
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Produces the set difference of two sequences by using the default equality comparer to compare values
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="input"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Produces the set intersection of two sequences by using the default equality comparer to compare values
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.OfType``1(System.Collections.IEnumerable)">
            <summary>
            Filters the elements of a sequence based on a specified type
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="input"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Sorts the elements of a sequence in descending order according to a key
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="input"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Inverts the order of the elements in a sequence
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.Project``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
            <summary>
            Projects each element of a sequence into a new form by incorporating the element's index
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="input"></param>
            <param name="transformer"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.Project``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Projects each element of a sequence to a sequence, and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="input"></param>
            <param name="transformer"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="input"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="input"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="input"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="input"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="input"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order, according to a key
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="input"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates an array from a sequence
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Produces the set union of two sequences by using the default equality comparer
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="input"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <param name="resultSelector"></param>
            <returns></returns>
        </member>
        <member name="T:VL.Lib.Collections.HoldLatestCopy`1">
            <summary>
            Holds on to a copy of the latest received collection. Whenever a collection gets pushed to the node a copy is made and stored internally.
            </summary>
        </member>
        <member name="M:VL.Lib.Collections.Spread.SpreadGenerators.ToSpreadBuilder``1(``0)">
            <summary>
            Returns the input as a SpreadBuilder with one element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.Spread.SpreadGenerators.LinearSpread(System.Single,System.Single,System.Int32)">
            <summary>
            Creates a spread of values linearly spread across the given interval
            </summary>
            <param name="center"></param>
            <param name="width"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.Spread.SpreadGenerators.RandomSpread(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Creates a spread of random values
            </summary>
            <param name="center"></param>
            <param name="width"></param>
            <param name="seed"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.Spread.SpreadGenerators.Repeat``1(``0,System.Int32)">
            <summary>
            Generates a spread that contains the same value repeated the given number of times
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.Spread.ValuesToVectorsNodes.ValuesToVectors2D(VL.Lib.Collections.SpreadBuilder{Stride.Core.Mathematics.Vector2},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Converts a sequence of values to vectors, if the count of the sequence is not divisible by the dimension the remainig value gets omitted
            </summary>
        </member>
        <member name="M:VL.Lib.Collections.Spread.ValuesToVectorsNodes.ValuesToVectors2D(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Converts a sequence of values to vectors, if the count of the sequence is not divisible by the dimension the remainig value gets omitted
            </summary>
        </member>
        <member name="M:VL.Lib.Collections.Spread.ValuesToVectorsNodes.ValuesToVectors3D(VL.Lib.Collections.SpreadBuilder{Stride.Core.Mathematics.Vector3},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Converts a sequence of values to vectors, if the count of the sequence is not divisible by the dimension the remainig value gets omitted
            </summary>
        </member>
        <member name="M:VL.Lib.Collections.Spread.ValuesToVectorsNodes.ValuesToVectors3D(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Converts a sequence of values to vectors, if the count of the sequence is not divisible by the dimension the remainig value gets omitted
            </summary>
        </member>
        <member name="M:VL.Lib.Collections.Spread.ValuesToVectorsNodes.ValuesToVectors4D(VL.Lib.Collections.SpreadBuilder{Stride.Core.Mathematics.Vector4},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Converts a sequence of values to vectors, if the count of the sequence is not divisible by the dimension the remainig value gets omitted
            </summary>
        </member>
        <member name="M:VL.Lib.Collections.Spread.ValuesToVectorsNodes.ValuesToVectors4D(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Converts a sequence of values to vectors, if the count of the sequence is not divisible by the dimension the remainig value gets omitted
            </summary>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Add``1(VL.Lib.Collections.Spread{``0},``0)">
            <summary>
            Returns a new spread with the item added at the end
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.AddRange``1(VL.Lib.Collections.Spread{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the specified items to the end of the spread
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Concat``1(VL.Lib.Collections.Spread{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Concatenates all incoming spreads to one spread
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Clear``1(VL.Lib.Collections.Spread{``0})">
            <summary>
            Returns the empty spread
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Distinct``1(VL.Lib.Collections.Spread{``0})">
            <summary>
            Returns distinct elements from a spread by using the default equality comparer to compare values
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Except``1(VL.Lib.Collections.Spread{``0},VL.Lib.Collections.Spread{``0})">
            <summary>
            Produces the set difference of two spreads by using the default equality comparer to compare values
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.GetSlice``1(VL.Lib.Collections.Spread{``0},``0,System.Int32)">
            <summary>
            Returns the slice at the specified index or the given default value in case the spread is empty
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="defaultValue"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.GetSpread``1(VL.Lib.Collections.Spread{``0},System.Int32,System.Int32)">
            <summary>
            Returns a sub-spread of the spread that is addressed via index and count
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Insert``1(VL.Lib.Collections.Spread{``0},System.Int32,``0)">
            <summary>
            Inserts the item at the specified index. Can throw ArgumentOutOfRangeException exception
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="index"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.InsertSlice``1(VL.Lib.Collections.Spread{``0},System.Int32,``0)">
            <summary>
            Inserts a new slice at the specified index
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Pairwise``2(VL.Lib.Collections.Spread{``0},System.Func{``0,``0,``1})">
            <summary>
            Applies the selector for each pair in the spread and returns a new spread with one less item
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TOutput"></typeparam>
            <param name="input"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Project``2(VL.Lib.Collections.Spread{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Projects each element of a spread to a sequence, and flattens the resulting sequences into one spread
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TOutput"></typeparam>
            <param name="input"></param>
            <param name="transformer"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.RemoveAt``1(VL.Lib.Collections.Spread{``0},System.Int32)">
            <summary>
            Removes the item at the specified index. Can throw ArgumentOutOfRangeException exception
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.RemoveAll``1(VL.Lib.Collections.Spread{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all the elements that match the conditions defined by the specified predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.RemoveSliceAt``1(VL.Lib.Collections.Spread{``0},System.Int32)">
            <summary>
            Removes the slice at the specified index
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Resize``1(VL.Lib.Collections.Spread{``0},System.Int32,System.Func{``0})">
            <summary>
            Returns a new spread of the given size using the item factory to create new items
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="size"></param>
            <param name="itemFactory"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Reverse``1(VL.Lib.Collections.Spread{``0})">
            <summary>
            Inverts the order of the elements in a spread
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Sort``1(VL.Lib.Collections.Spread{``0})">
            <summary>
            Sorts the elements in the entire spread using the default comparer
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Sort``1(VL.Lib.Collections.Spread{``0},System.Func{``0,``0,System.Int32})">
            <summary>
            Sorts the elements in the entire spread using the specified comparer function
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.OrderBy``2(VL.Lib.Collections.Spread{``0},System.Boolean,System.Func{``0,``1})">
            <summary>
            Sorts the elements in the entire spread according to a key
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="input"></param>
            <param name="descending"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.SetItem``1(VL.Lib.Collections.Spread{``0},System.Int32,``0)">
            <summary>
            Replaces the item at the specified index with the new value. Can throw ArgumentOutOfRangeException exception
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="index"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.SetSlice``1(VL.Lib.Collections.Spread{``0},``0,System.Int32)">
            <summary>
            Replaces the slice at the specified index with the new value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="value"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Skip``1(VL.Lib.Collections.Spread{``0},System.Int32)">
            <summary>
            Bypasses a specified number of elements in the spread and then returns the remaining elements
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.SkipLast``1(VL.Lib.Collections.Spread{``0},System.Int32)">
            <summary>
            Bypasses a specified number of contiguous elements from the end of the spread and returns the remaining elements
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.SplitAt``1(VL.Lib.Collections.Spread{``0},System.Int32,VL.Lib.Collections.Spread{``0}@,VL.Lib.Collections.Spread{``0}@)">
            <summary>
            Splits the spread at the given index into two spreads
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="index"></param>
            <param name="output"></param>
            <param name="output2"></param>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.SplitFirst``1(VL.Lib.Collections.Spread{``0},``0,VL.Lib.Collections.Spread{``0}@,``0@)">
            <summary>
            Splits the spread into its first slice and the rest
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="defaultValue"></param>
            <param name="output"></param>
            <param name="result"></param>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.SplitLast``1(VL.Lib.Collections.Spread{``0},``0,VL.Lib.Collections.Spread{``0}@,``0@)">
            <summary>
            Splits the spread into its last slice and the rest
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="defaultValue"></param>
            <param name="output"></param>
            <param name="result"></param>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Take``1(VL.Lib.Collections.Spread{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of the spread
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.TakeLast``1(VL.Lib.Collections.Spread{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the end of the spread
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Union``1(VL.Lib.Collections.Spread{``0},VL.Lib.Collections.Spread{``0})">
            <summary>
            Produces the set union of two spreads by using the default equality comparer
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.UnZip``1(VL.Lib.Collections.Spread{``0},VL.Lib.Collections.Spread{``0}@,VL.Lib.Collections.Spread{``0}@)">
            <summary>
            The inverse of Zip. Interprets the input sequence as being interleaved and untangles it
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="output"></param>
            <param name="output2"></param>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Where``1(VL.Lib.Collections.Spread{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Filters a spread based on a predicate. Each element's index is used in the logic of the predicate function
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Zip``1(VL.Lib.Collections.Spread{``0},VL.Lib.Collections.Spread{``0},System.Boolean)">
            <summary>
            Interleaves the two input spreads
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <param name="useMinCount"></param>
            <returns></returns>
        </member>
        <member name="T:VL.Lib.Collections.Trees.IReadOnlyTreeNode">
            <summary>
            Gives you an untyped view on a node in a tree.
            Implement this interface if you want to be able to be part of a tree that you can traverse.
            Note that different implementations of this interface may contribute to one tree structure.
            </summary>
        </member>
        <member name="T:VL.Lib.Collections.Trees.IReadOnlyTree`1">
            <summary>
            A typed tree that guarantees that all nodes in all child branches are of the same type.
            Implement this interface if you want a guarantee that all nodes are of a particular type.
            Note that a typed tree can be a part of an untyped tree structure, but not the other way around.
            </summary>
            <typeparam name="T">The type that all nodes in the whole tree share. This can be an interface again, which would again allow to mix different types in one tree. </typeparam>
        </member>
        <member name="T:VL.Lib.Collections.Trees.ITraverseCommand">
            <summary>
            Used in traverse algorithms of IReadOnlyTree
            </summary>
        </member>
        <member name="F:VL.Lib.Collections.Trees.OneUp">
            <summary>
            Don't traverse Children and also don't traverse the rest of the siblings. Not supported by BreadthFirst traversing.
            </summary>
        </member>
        <member name="M:VL.Lib.Color.ColorNodes.Join(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Joins a color from its components
            </summary>
        </member>
        <member name="M:VL.Lib.Color.ColorNodes.JoinRGBAlpha(Stride.Core.Mathematics.Vector3@,System.Single)">
            <summary>
            Joins a color from a Vector3 and alpha
            </summary>
        </member>
        <member name="M:VL.Lib.Color.ColorNodes.Split(Stride.Core.Mathematics.Color4@,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Splits a color into its components
            </summary>
        </member>
        <member name="M:VL.Lib.Color.ColorNodes.SetRed(Stride.Core.Mathematics.Color4@,System.Single)">
            <summary>
            Overrides the red component of the color
            </summary>
            <param name="input"></param>
            <param name="red"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Color.ColorNodes.SetGreen(Stride.Core.Mathematics.Color4@,System.Single)">
            <summary>
            Overrides the green component of the color
            </summary>
            <param name="input"></param>
            <param name="green"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Color.ColorNodes.SetBlue(Stride.Core.Mathematics.Color4@,System.Single)">
            <summary>
            Overrides the blue component of the color
            </summary>
            <param name="input"></param>
            <param name="blue"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Color.ColorNodes.SetAlpha(Stride.Core.Mathematics.Color4@,System.Single)">
            <summary>
            Overrides the alpha component of the color
            </summary>
            <param name="input"></param>
            <param name="alpha"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Color.ColorNodes.Scale(Stride.Core.Mathematics.Color4@,Stride.Core.Mathematics.Color4@,System.Single)">
            <summary>
            Scales the RGB values, alpha will stay the same
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <param name="scalar"></param>
        </member>
        <member name="M:VL.Lib.Color.ColorNodes.DivScale(Stride.Core.Mathematics.Color4@,Stride.Core.Mathematics.Color4@,System.Single)">
            <summary>
            Scales the RGB values, alpha will stay the same
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <param name="scalar"></param>
        </member>
        <member name="M:VL.Lib.Color.ColorNodes.Premultiply(Stride.Core.Mathematics.Color4@,Stride.Core.Mathematics.Color4@)">
            <summary>
            Computes the premultiplied value of the provided color.
            </summary>
            <param name="value">The non-premultiplied value.</param>
            <param name="result">The premultiplied result.</param>
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.Try``1(System.Func{``0},``0,System.Boolean@,System.String@)">
            <summary>
            Runs the given stateless patch and returns whether it has been successful or not
            </summary>
            <typeparam name="TOutput"></typeparam>
            <param name="try"></param>
            <param name="defaultOutput"></param>
            <param name="success"></param>
            <param name="errorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.TryCatch``1(System.Func{``0},System.Func{System.Exception,``0})">
            <summary>
            Runs the given stateless patch, runs catch instead if it has been unsuccessful
            </summary>
            <typeparam name="TOutput"></typeparam>
            <param name="try"></param>
            <param name="catch"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.TryCatchFinally``2(System.Func{``0},System.Func{System.Exception,``0},System.Func{``0,``1})">
            <summary>
            Runs the given stateless patch, runs Catch instead if it has been unsuccessful. Guarantees to run Finally afterwards
            </summary>
            <typeparam name="TData"></typeparam>
            <typeparam name="TOutput"></typeparam>
            <param name="try"></param>
            <param name="catch"></param>
            <param name="finally"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.Try2``2(System.Func{System.Tuple{``0,``1}},``0,``1,``0@,``1@,System.Boolean@,System.String@)">
            ---------------------------------------------------------------------------------------------------------
            TRY 2
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given stateless patch and returns whether it has been successful or not. Supports 2 regular outputs
            </summary> 
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.TryCatch2``2(System.Func{System.Tuple{``0,``1}},System.Func{System.Exception,System.Tuple{``0,``1}},``0@,``1@)">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCH 2
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given stateless patch, runs Catch instead if it has been unsuccessful. Supports 2 regular outputs
            </summary> 
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.TryCatchFinally2``4(System.Func{System.Tuple{``2,``3}},System.Func{System.Exception,System.Tuple{``2,``3}},System.Func{System.Tuple{``2,``3},System.Tuple{``0,``1}},``0@,``1@)">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCHFINALLY 2
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given stateless patch, runs Catch instead if it has been unsuccessful. Guarantees to run Finally afterwards. Supports 2 regular outputs
            </summary>
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.Try3``3(System.Func{System.Tuple{``0,``1,``2}},``0,``1,``2,``0@,``1@,``2@,System.Boolean@,System.String@)">
            ---------------------------------------------------------------------------------------------------------
            TRY 3
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given stateless patch and returns whether it has been successful or not. Supports 3 regular outputs
            </summary> 
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.TryCatch3``3(System.Func{System.Tuple{``0,``1,``2}},System.Func{System.Exception,System.Tuple{``0,``1,``2}},``0@,``1@,``2@)">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCH 3
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given stateless patch, runs Catch instead if it has been unsuccessful. Supports 3 regular outputs
            </summary> 
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.TryCatchFinally3``6(System.Func{System.Tuple{``3,``4,``5}},System.Func{System.Exception,System.Tuple{``3,``4,``5}},System.Func{System.Tuple{``3,``4,``5},System.Tuple{``0,``1,``2}},``0@,``1@,``2@)">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCHFINALLY 3
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given stateless patch, runs Catch instead if it has been unsuccessful. Guarantees to run Finally afterwards. Supports 3 regular outputs
            </summary>
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.Try4``4(System.Func{System.Tuple{``0,``1,``2,``3}},``0,``1,``2,``3,``0@,``1@,``2@,``3@,System.Boolean@,System.String@)">
            ---------------------------------------------------------------------------------------------------------
            TRY 4
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given stateless patch and returns whether it has been successful or not. Supports 4 regular outputs
            </summary> 
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.TryCatch4``4(System.Func{System.Tuple{``0,``1,``2,``3}},System.Func{System.Exception,System.Tuple{``0,``1,``2,``3}},``0@,``1@,``2@,``3@)">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCH 4
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given stateless patch, runs Catch instead if it has been unsuccessful. Supports 4 regular outputs
            </summary> 
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.TryCatchFinally4``8(System.Func{System.Tuple{``4,``5,``6,``7}},System.Func{System.Exception,System.Tuple{``4,``5,``6,``7}},System.Func{System.Tuple{``4,``5,``6,``7},System.Tuple{``0,``1,``2,``3}},``0@,``1@,``2@,``3@)">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCHFINALLY 4
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given stateless patch, runs Catch instead if it has been unsuccessful. Guarantees to run Finally afterwards. Supports 4 regular outputs
            </summary>
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.Try5``5(System.Func{System.Tuple{``0,``1,``2,``3,``4}},``0,``1,``2,``3,``4,``0@,``1@,``2@,``3@,``4@,System.Boolean@,System.String@)">
            ---------------------------------------------------------------------------------------------------------
            TRY 5
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given stateless patch and returns whether it has been successful or not. Supports 5 regular outputs
            </summary> 
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.TryCatch5``5(System.Func{System.Tuple{``0,``1,``2,``3,``4}},System.Func{System.Exception,System.Tuple{``0,``1,``2,``3,``4}},``0@,``1@,``2@,``3@,``4@)">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCH 5
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given stateless patch, runs Catch instead if it has been unsuccessful. Supports 5 regular outputs
            </summary> 
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.TryCatchFinally5``10(System.Func{System.Tuple{``5,``6,``7,``8,``9}},System.Func{System.Exception,System.Tuple{``5,``6,``7,``8,``9}},System.Func{System.Tuple{``5,``6,``7,``8,``9},System.Tuple{``0,``1,``2,``3,``4}},``0@,``1@,``2@,``3@,``4@)">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCHFINALLY 5
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given stateless patch, runs Catch instead if it has been unsuccessful. Guarantees to run Finally afterwards. Supports 5 regular outputs
            </summary>
        </member>
        <member name="T:VL.Lib.Control.TryStateful`1">
            <summary>
            Runs the given patch and returns whether it has been successful or not
            </summary>
            <typeparam name="TState"></typeparam>
        </member>
        <member name="T:VL.Lib.Control.TryCatchStateful`1">
            <summary>
            Runs the given patch, runs catch instead if it has been unsuccessful
            </summary>
            <typeparam name="TState"></typeparam>
        </member>
        <member name="T:VL.Lib.Control.TryCatchFinallyStateful`1">
            <summary>
            Runs the given patch, runs catch instead if it has been unsuccessful. Guarantees to run Finally afterwards
            </summary>
            <typeparam name="TState"></typeparam>
        </member>
        <member name="T:VL.Lib.Control.TryStateful2`1">
            ---------------------------------------------------------------------------------------------------------
            TRY 2
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given patch and returns whether it has been successful or not. Supports 2 regular output pins
            </summary>
        </member>
        <member name="T:VL.Lib.Control.TryCatchStateful2`1">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCH 2
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given patch, runs catch instead if it has been unsuccessful. Supports 2 regular output pins
            </summary>
        </member>
        <member name="T:VL.Lib.Control.TryCatchFinallyStateful2`1">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCHFINALLY 2
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given patch, runs catch instead if it has been unsuccessful. Supports 2 regular output pins
            </summary>
        </member>
        <member name="T:VL.Lib.Control.TryStateful3`1">
            ---------------------------------------------------------------------------------------------------------
            TRY 3
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given patch and returns whether it has been successful or not. Supports 3 regular output pins
            </summary>
        </member>
        <member name="T:VL.Lib.Control.TryCatchStateful3`1">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCH 3
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given patch, runs catch instead if it has been unsuccessful. Supports 3 regular output pins
            </summary>
        </member>
        <member name="T:VL.Lib.Control.TryCatchFinallyStateful3`1">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCHFINALLY 3
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given patch, runs catch instead if it has been unsuccessful. Supports 3 regular output pins
            </summary>
        </member>
        <member name="T:VL.Lib.Control.TryStateful4`1">
            ---------------------------------------------------------------------------------------------------------
            TRY 4
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given patch and returns whether it has been successful or not. Supports 4 regular output pins
            </summary>
        </member>
        <member name="T:VL.Lib.Control.TryCatchStateful4`1">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCH 4
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given patch, runs catch instead if it has been unsuccessful. Supports 4 regular output pins
            </summary>
        </member>
        <member name="T:VL.Lib.Control.TryCatchFinallyStateful4`1">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCHFINALLY 4
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given patch, runs catch instead if it has been unsuccessful. Supports 4 regular output pins
            </summary>
        </member>
        <member name="T:VL.Lib.Control.TryStateful5`1">
            ---------------------------------------------------------------------------------------------------------
            TRY 5
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given patch and returns whether it has been successful or not. Supports 5 regular output pins
            </summary>
        </member>
        <member name="T:VL.Lib.Control.TryCatchStateful5`1">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCH 5
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given patch, runs catch instead if it has been unsuccessful. Supports 5 regular output pins
            </summary>
        </member>
        <member name="T:VL.Lib.Control.TryCatchFinallyStateful5`1">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCHFINALLY 5
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given patch, runs catch instead if it has been unsuccessful. Supports 5 regular output pins
            </summary>
        </member>
        <member name="T:VL.Lib.IO.FolderDialog">
            <summary>
            Opens a folder selection dialog and returns the selected folder
            </summary>
        </member>
        <member name="T:VL.Lib.IO.FileDialogOpen">
            <summary>
            Opens a file selection dialog and returns the selected file(s)
            </summary>
        </member>
        <member name="T:VL.Lib.IO.FileDialogSave">
            <summary>
            Opens a file save dialog and returns the selected file
            </summary>
        </member>
        <member name="T:VL.Lib.IO.Net.NetUtils">
            <summary>
            A couple of utility functions around IP addresses and end points.
            </summary>
        </member>
        <member name="F:VL.Lib.IO.Net.NetUtils.DefaultAddress">
            <summary>
            The default IP address to use for unconnected pins. Points to the 127.0.0.1
            </summary>
        </member>
        <member name="F:VL.Lib.IO.Net.NetUtils.DefaultIPEndPoint">
            <summary>
            The default IP end point to use for unconnected pins. Points to 127.0.0.1 and port 0
            </summary>
        </member>
        <member name="F:VL.Lib.IO.Net.NetUtils.NoIPEndPoint">
            <summary>
            An IP end point which points to nowhere.
            </summary>
        </member>
        <member name="M:VL.Lib.IO.Net.NetUtils.GetHostAddresses(System.String)">
            <summary>
            Returns the Internet Protocol (IP) addresses for the specified host
            </summary>
            <param name="hostNameOrAddress"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.Net.NetUtils.GetHostAddressesAsync(System.String)">
            <summary>
            Returns the Internet Protocol (IP) addresses for the specified host asynchronously
            </summary>
            <param name="hostNameOrAddress"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.Net.NetUtils.GetIPEndPoint(System.String,System.Int32)">
            <summary>
            Returns the IP end point for the specified host and port
            </summary>
            <param name="hostNameOrAddress"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.Net.NetUtils.GetIPEndPointAsync(System.String,System.Int32)">
            <summary>
            Returns the IP end point for the specified host and port asynchronously
            </summary>
            <param name="hostNameOrAddress"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="T:VL.Lib.IO.Net.HTTPServer">
            <summary>
            From https://gist.github.com/zezba9000/04054e3128e6af413e5bc8002489b2fe
            In order to work on needs to execute as admin:
            netsh http add urlacl url=http://+:80/ user=username
            </summary>
        </member>
        <member name="T:VL.Lib.IO.FileNode">
            <summary>
            Gets or creates the stream of a file for reading and writing. 
            The directory will be created in case it doesn't exist and the file mode is set in a way that a new file should be created.
            </summary>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.ToPath(System.String)">
            <summary>
            Converts the string to a Path
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.ToPathExplicit(System.String,System.Boolean)">
            <summary>
            Converts the string to a Path, explicitly decide if file or folder
            </summary>
            <param name="input"></param>
            <param name="isDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.Filename(System.String,System.String,System.String)">
            <summary>
            Creates a Path from directory, file and extension strings
            </summary>
            <param name="directory"></param>
            <param name="filename"></param>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.MakePath(VL.Lib.IO.Path,System.String)">
            <summary>
            Combines strings to a path
            </summary>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.IsRooted(VL.Lib.IO.Path)">
            <summary>
            Checks if a path is absolute or relative
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.Normalize(VL.Lib.IO.Path)">
            <summary>
            Normalizes the specified path, aka canonicalization.
            e.g. converts c:\aaa\bbb\..\ccc to c:\aaa\ccc
            This operation is rather slow.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.SystemFolder(VL.Lib.IO.SpecialFolder)">
            <summary>
            Returns various folders of the system
            </summary>
            <param name="specialFolder"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.CreateDirectory(VL.Lib.IO.Path,System.Boolean,System.Boolean@)">
            <summary>
            Creates the folder of the path
            </summary>
            <param name="input"></param>
            <param name="create"></param>
            <param name="success"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.Move(VL.Lib.IO.Path,VL.Lib.IO.Path,System.Boolean)">
            <summary>
            Moves the file or folder to a new location
            </summary>
            <param name="input"></param>
            <param name="newPath"></param>
            <param name="replaceExisting"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.Rename(VL.Lib.IO.Path,System.String,System.Boolean)">
            <summary>
            Renames the file or folder
            </summary>
            <param name="input"></param>
            <param name="newName"></param>
            <param name="replaceExisting"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.Copy(VL.Lib.IO.Path,VL.Lib.IO.Path,System.Boolean,VL.Lib.IO.Path@)">
            <summary>
            Copies the file or folder to a new location
            </summary>
            <param name="input"></param>
            <param name="newPath"></param>
            <param name="replaceExisting"></param>
            <param name="copy"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.Delete(VL.Lib.IO.Path,System.Boolean@,System.Boolean,System.Boolean)">
            <summary>
            Deletes the file or folder to Recycle Bin, optionally removes it completely.
            </summary>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.DeleteHard(VL.Lib.IO.Path,System.Boolean,System.Boolean@)">
            <summary>
            Deletes the file or folder
            </summary>
            <param name="input"></param>
            <param name="do"></param>
            <param name="success"></param>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.DeleteRecycleBin(VL.Lib.IO.Path,System.Boolean,System.Boolean@)">
            <summary>
            Moves a file or folder to Recycle bin.
            </summary>
            <param name="input"></param>
            <param name="do"></param>
            <param name="success"></param>
        </member>
        <member name="T:VL.Lib.IO.Ports.SerialPort">
            <summary>
            Manages a serialport provider.
            </summary>
        </member>
        <member name="P:VL.Lib.IO.Ports.SerialPort.IsOpen">
            <summary>
            Whether or not the serialport is connected.
            </summary>
        </member>
        <member name="M:VL.Lib.IO.Ports.SerialPort.Update(VL.Lib.IO.Ports.ComPort,System.Int32,System.Int32,System.IO.Ports.StopBits,System.IO.Ports.Parity,System.IO.Ports.Handshake,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Configures the internally managed serialport provider.
            </summary>
            <returns>A serialport provider which can be used by multiple threads in parallel.</returns>
        </member>
        <member name="T:VL.Lib.IO.Ports.Receiver">
            <summary>
            Receives bytes from a SerialPort.
            </summary>
        </member>
        <member name="P:VL.Lib.IO.Ports.Receiver.Data">
            <summary>
            The observable sequence of bytes. The bytes will be pushed on the network thread.
            </summary>
        </member>
        <member name="M:VL.Lib.IO.Ports.Receiver.Update(VL.Lib.Basics.Resources.IResourceProvider{System.IO.Ports.SerialPort})">
            <summary>
            Configures the receiver.
            </summary>
            <param name="port">The serialport to receive data from.</param>
        </member>
        <member name="T:VL.Lib.IO.Ports.Sender">
            <summary>
            Sends bytes on a SerialPort.
            </summary>
        </member>
        <member name="M:VL.Lib.IO.Ports.Sender.Update(VL.Lib.Basics.Resources.IResourceProvider{System.IO.Ports.SerialPort},System.IObservable{VL.Lib.Collections.Spread{System.Byte}})">
            <summary>
            Configures the sender.
            </summary>
            <param name="port">The serialport to send data to.</param>
            <param name="data">The bytes to send.</param>
        </member>
        <member name="T:VL.Lib.IO.Socket.Datagram">
            <summary>
            A datagram is a little message used in connection less network protocols (like UDP). 
            </summary>
        </member>
        <member name="M:VL.Lib.IO.Socket.Datagram.#ctor(System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Creates a datagram with a mutable array of bytes as data.
            </summary>
            <param name="remoteEndPoint">The remote end point.</param>
            <param name="payload">The payload.</param>
        </member>
        <member name="M:VL.Lib.IO.Socket.Datagram.#ctor(System.Net.IPEndPoint,VL.Lib.Collections.Spread{System.Byte})">
            <summary>
            Creates a datagram with a spread of bytes as data.
            </summary>
            <param name="remoteEndPoint">The remote end point.</param>
            <param name="payload">The payload.</param>
        </member>
        <member name="M:VL.Lib.IO.Socket.Datagram.Split(System.Net.IPEndPoint@,VL.Lib.Collections.Spread{System.Byte}@)">
            <summary>
            Splits the datagram into its remote end point and payload.
            </summary>
            <param name="remoteEndPoint">The remote end point from which this datagram was received or will be sent to. Returns none if it's the default value.</param>
            <param name="payload">The payload of the datagram. Returns the empty spread if it's the default value.</param>
        </member>
        <member name="M:VL.Lib.IO.Socket.Datagram.SplitArray(System.Net.IPEndPoint@,System.Byte[]@)">
            <summary>
            Splits the datagram into its remote end point and payload as raw bytes.
            </summary>
            <param name="remoteEndPoint">The remote end point from which this datagram was received or will be sent to. Returns none if it's the default value.</param>
            <param name="payload">The payload of the datagram. Returns the empty array if it's the default value.</param>
        </member>
        <member name="P:VL.Lib.IO.Socket.Datagram.RemoteEndPoint">
            <summary>
            The remote end point this datagram shall be sent to or was received from.
            </summary>
        </member>
        <member name="P:VL.Lib.IO.Socket.Datagram.Payload">
            <summary>
            The content of this datagram as spread.
            </summary>
        </member>
        <member name="P:VL.Lib.IO.Socket.Datagram.PayloadArray">
            <summary>
            The content of this datagram as raw bytes.
            </summary>
        </member>
        <member name="T:VL.Lib.IO.Socket.DatagramReceiver">
            <summary>
            Receives datagrams from a local socket.
            </summary>
        </member>
        <member name="P:VL.Lib.IO.Socket.DatagramReceiver.Datagrams">
            <summary>
            The observable sequence of datagrams. The datagrams will be pushed on the network thread.
            </summary>
        </member>
        <member name="M:VL.Lib.IO.Socket.DatagramReceiver.Update(VL.Lib.Basics.Resources.IResourceProvider{System.Net.Sockets.Socket})">
            <summary>
            Configures the receiver.
            </summary>
            <param name="localSocket">The local socket to receive data from.</param>
        </member>
        <member name="T:VL.Lib.IO.Socket.DatagramSender">
            <summary>
            Sends datagrams on a local socket.
            </summary>
        </member>
        <member name="M:VL.Lib.IO.Socket.DatagramSender.Update(VL.Lib.Basics.Resources.IResourceProvider{System.Net.Sockets.Socket},System.IObservable{VL.Lib.IO.Socket.Datagram})">
            <summary>
            Configures the sender.
            </summary>
            <param name="localSocket">The local socket to send data out of.</param>
            <param name="datagrams">The datagrams to send.</param>
        </member>
        <member name="T:VL.Lib.IO.Socket.UDPSocket">
            <summary>
            Manages a UDP socket provider.
            </summary>
        </member>
        <member name="P:VL.Lib.IO.Socket.UDPSocket.IsOpen">
            <summary>
            Whether or not the socket is open.
            </summary>
        </member>
        <member name="P:VL.Lib.IO.Socket.UDPSocket.Enabled">
            <summary>
            Gets or sets whether the socket is active.
            </summary>
        </member>
        <member name="M:VL.Lib.IO.Socket.UDPSocket.Update(System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Configures the internally managed socket provider.
            </summary>
            <param name="localEndPoint">The local end point to use.</param>
            <param name="bind">Whether or not to bind the socket.</param>
            <returns>A socket provider which can be used by multiple threads in parallel.</returns>
        </member>
        <member name="T:VL.Lib.IO.Socket.SocketProvider">
            <summary>
            Returns a very basic socket type
            </summary>
        </member>
        <member name="T:VL.Lib.IO.Socket.TCPClientSocket">
            <summary>
            Returns socket configured as TCP Client
            </summary>
        </member>
        <member name="T:VL.Lib.IO.Socket.TCPServerSocket">
            <summary>
            Creates a TCP server socket
            </summary>
        </member>
        <member name="T:VL.Lib.IO.ByteChunkifier">
            <summary>
            Chunkifies the input spread.
            </summary>
        </member>
        <member name="T:VL.Lib.IO.CharChunkifier">
            <summary>
            Chunkifies the input string.
            </summary>
        </member>
        <member name="T:VL.Lib.IO.AsyncByteChunkifier">
            <summary>
            Chunkifies the incoming spreads.
            </summary>
        </member>
        <member name="T:VL.Lib.IO.AsyncCharChunkifier">
            <summary>
            Chunkifies the incoming strings.
            </summary>
        </member>
        <member name="T:VL.Lib.IO.ByteCollector">
            <summary>
            Collects the incoming chunks into a spread.
            </summary>
        </member>
        <member name="T:VL.Lib.IO.CharCollector">
            <summary>
            Collects the incoming chunks into a string.
            </summary>
        </member>
        <member name="T:VL.Lib.IO.AsyncByteCollector">
            <summary>
            Collects the incoming chunks into spreads.
            </summary>
        </member>
        <member name="T:VL.Lib.IO.AsyncCharCollector">
            <summary>
            Collects the incoming chunks into strings.
            </summary>
        </member>
        <member name="T:VL.Lib.IO.Chunk`1">
            <summary>
            A chunk of data part of a larger data stream.
            </summary>
            <typeparam name="T">The elment type.</typeparam>
        </member>
        <member name="T:VL.Lib.IO.Monitor`1">
            <summary>
            Monitors the inner data streams.
            The "In Progress" outputs returns true whenever one of the inner streams get activated.
            The "OnCompleted" output bangs whenever one of the inner streams terminate successfully.
            </summary>
        </member>
        <member name="T:VL.Lib.IO.ByteReader">
            <summary>
            Returns a sequence which will read chunks of bytes from the given stream when enumerated.
            </summary>
        </member>
        <member name="T:VL.Lib.IO.CharReader">
            <summary>
            Returns a sequence which will read chunks of characters from the given stream when enumerated.
            </summary>
        </member>
        <member name="T:VL.Lib.IO.XDocumentReader">
            <summary>
            Reads and returns the <see cref="T:System.Xml.Linq.XDocument"/> from the given stream.
            </summary>
        </member>
        <member name="T:VL.Lib.IO.AsyncByteReader">
            <summary>
            Returns an observable sequence which will read chunks of bytes from the given stream on subscription.
            </summary>
        </member>
        <member name="T:VL.Lib.IO.AsyncCharReader">
            <summary>
            Returns an observable sequence which will read chunks of characters from the given stream on subscription.
            </summary>
        </member>
        <member name="T:VL.Lib.IO.AsyncXDocumentReader">
            <summary>
            Returns an observable sequence which will read the <see cref="T:System.Xml.Linq.XDocument"/> from the given stream on subscription.
            </summary>
        </member>
        <member name="T:VL.Lib.IO.ReaderString">
            <summary>
            Asynchronously reads string from an entire stream
            </summary>
        </member>
        <member name="T:VL.Lib.IO.WriterBytes">
            <summary>
            Asynchronously writes bytes to a stream
            </summary>
        </member>
        <member name="T:VL.Lib.IO.WriterString">
            <summary>
            Asynchronously writes strings to a stream
            </summary>
        </member>
        <member name="M:VL.Lib.IO.StreamUtils.Length(VL.Lib.Basics.Resources.IResourceProvider{System.IO.Stream},System.Int64@)">
            <summary>
            Gets the byte length of the stream
            </summary>
            <param name="streamProvider"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.StreamUtils.GetPosition(VL.Lib.Basics.Resources.IResourceProvider{System.IO.Stream},System.Int64@)">
            <summary>
            Gets the current position in the stream
            </summary>
            <param name="input"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.StreamUtils.ReadBytes(VL.Lib.Basics.Resources.IResourceProvider{System.IO.Stream},System.Int64,System.Int64,VL.Lib.Collections.Spread{System.Byte}@)">
            <summary>
            Reads bytes from a stream
            </summary>
            <param name="input"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.StreamUtils.ReadAllBytes(VL.Lib.Basics.Resources.IResourceProvider{System.IO.Stream},VL.Lib.Collections.Spread{System.Byte}@)">
            <summary>
            Reads all bytes from a stream
            </summary>
            <param name="input"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.StreamUtils.ReadString(VL.Lib.Basics.Resources.IResourceProvider{System.IO.Stream},VL.Lib.Text.Encodings,System.Int64,System.Int64,System.String@)">
            <summary>
            Reads strings from a stream
            </summary>
            <param name="input"></param>
            <param name="encoding"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.StreamUtils.ReadAllString(VL.Lib.Basics.Resources.IResourceProvider{System.IO.Stream},VL.Lib.Text.Encodings,System.String@)">
            <summary>
            Reads the string from an entire stream
            </summary>
            <param name="input"></param>
            <param name="encoding"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.StreamUtils.WriteBytes(VL.Lib.Basics.Resources.IResourceProvider{System.IO.Stream},System.Collections.Generic.IEnumerable{System.Byte},System.Int64)">
            <summary>
            Writes bytes to a stream
            </summary>
            <param name="input"></param>
            <param name="data"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.StreamUtils.WriteString(VL.Lib.Basics.Resources.IResourceProvider{System.IO.Stream},System.String,VL.Lib.Text.Encodings,System.Int64)">
            <summary>
            Writes a string to a stream
            </summary>
            <param name="input"></param>
            <param name="data"></param>
            <param name="encoding"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="T:VL.Lib.IO.ByteWriter">
            <summary>
            Writes the incoming chunks of bytes to the given stream.
            </summary>
        </member>
        <member name="T:VL.Lib.IO.CharWriter">
            <summary>
            Writes the incoming chunks of characters to the given stream.
            </summary>
        </member>
        <member name="T:VL.Lib.IO.XDocumentWriter">
            <summary>
            Writes the <see cref="T:System.Xml.Linq.XDocument"/> to the given stream.
            </summary>
        </member>
        <member name="T:VL.Lib.IO.AsyncByteWriter">
            <summary>
            Returns an observable sequence which will write the incoming chunks of bytes to the given stream on subscription.
            </summary>
        </member>
        <member name="T:VL.Lib.IO.AsyncCharWriter">
            <summary>
            Returns an observable sequence which will write the incoming chunks of characters to the given stream on subscription.
            </summary>
        </member>
        <member name="T:VL.Lib.IO.AsyncXDocumentWriter">
            <summary>
            Returns an observable sequence which will start writing the document to the given stream on subscription.
            </summary>
        </member>
        <member name="M:VL.Lib.IO.RenamedEventArgsUtils.NewPath(System.IO.RenamedEventArgs)">
            <summary>
            Returns the new path of a rename reported by watcher
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.RenamedEventArgsUtils.OldPath(System.IO.RenamedEventArgs)">
            <summary>
            Returns the old path of a rename reported by watcher
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:VL.Lib.IO.Watcher">
            <summary>
            Monitors a folder and its files for creation, change, deletion and renaming
            </summary>
        </member>
        <member name="T:VL.Lib.IO.Obsolete.ObsoleteFile">
            <summary>
            Gets or creates the stream of a file for reading and writing
            </summary>
        </member>
        <member name="T:VL.Lib.IO.Obsolete.ObsoleteFileNoSharing">
            <summary>
            Gets or creates the stream of a file for reading and writing
            </summary>
        </member>
        <member name="M:VL.Lib.LinearEquationSolver.Solve(VL.Lib.Collections.Spread{VL.Lib.Collections.Spread{System.Single}},VL.Lib.Collections.Spread{System.Single},VL.Lib.Collections.Spread{System.Single}@,System.Boolean@)">
            <summary>
            Computes the solution of a linear equation system using Gauss elimination
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <param name="x"></param>
            <param name="success"></param>
        </member>
        <member name="M:VL.Lib.Primitive.ByteNodes.TryParseHex(System.String,System.Byte@)">
            <summary>
            Parses a hex string to an integer
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.ByteNodes.TryParseHex(System.String,System.SByte@)">
            <summary>
            Parses a hex string to an integer
            </summary>
        </member>
        <member name="T:VL.Lib.Primitive.CacheRegion.Manager`3">
            <summary>
            var manager = this.manager;
            var inputs = (a, b, c);
            if (force || manager.InputsChanged(inputs))
            {
              var state = manager.State;
              if (state is null)
                state = CREATE
              UPDATE
              var outputs = (x, y, z);
              manager = manager.Update(inputs, disposeOutputs, state, outputs);
            }
            else
            {
              manager = manager.Update(inputs, disposeOutputs);
            }
            </summary>
            <typeparam name="TInputs"></typeparam>
            <typeparam name="TState"></typeparam>
            <typeparam name="TOutputs"></typeparam>
        </member>
        <member name="M:VL.Lib.Primitive.IDisposableUtils.TryDispose(System.Object,System.Boolean@)">
            <summary>
            Tries to cast the input to IEnumerable or IDisposable, and then either tries to dispose all elements or the input itself.
            Does not catch exceptions.
            </summary>
            <param name="input"></param>
            <param name="success">Set to <c>true</c> if Dispose was called successfully on all elements or the input instance.</param>
        </member>
        <member name="M:VL.Lib.Primitive.IDisposableUtils.TryDisposeInstance(System.Object,System.Boolean@)">
            <summary>
            Tries to cast the input to IDisposable and then calls Dispose. 
            Does not catch exceptions.
            </summary>
            <param name="input"></param>
            <param name="success">Set to <c>true</c> if input is a IDisposable and Dispose was called successfully.</param>
        </member>
        <member name="M:VL.Lib.Primitive.IDisposableUtils.TryDisposeSequence(System.Collections.ICollection,System.Boolean@)">
            <summary>
            Tries to cast the elements in the input to IDisposable and then calls Dispose on each element. 
            Does not catch exceptions.
            </summary>
            <param name="input"></param>
            <param name="success">Set to <c>true</c> if Dispose was called successfully on all elements.</param>
        </member>
        <member name="M:VL.Lib.Primitive.Float32Extensions.ZMOD(System.Single,System.Single)">
            <summary>
            Modulo operator with the property, that the remainder of a division z / d
            and z &lt; 0 is positive. For example: zmod(-2, 30) = 28.
            </summary>
            <param name="z"></param>
            <param name="input2"></param>
            <returns>Remainder of division z / d.</returns>
        </member>
        <member name="M:VL.Lib.Primitive.Float32Extensions.CatmullRom(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:VL.Lib.Primitive.Float64Extensions.ZMOD(System.Double,System.Double)">
            <summary>
            Modulo operator with the property, that the remainder of a division z / d
            and z &lt; 0 is positive. For example: zmod(-2, 30) = 28.
            </summary>
            <param name="z"></param>
            <param name="input2"></param>
            <returns>Remainder of division z / d.</returns>
        </member>
        <member name="M:VL.Lib.Primitive.Float64Extensions.CatmullRom(System.Double,System.Double,System.Double,System.Double,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="T:VL.Lib.Primitive.DoubleConverter">
            <summary>
            A class to allow the conversion of doubles to string representations of
            their exact decimal values. The implementation aims for readability over
            efficiency.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.DoubleConverter.ToExactString(System.Double)">
            <summary>
            Converts the given double to a string representation of its
            exact decimal value.
            </summary>
            <param name="input">The double to convert.</param>
            <returns>A string representation of the double's exact decimal value.</returns>
        </member>
        <member name="T:VL.Lib.Primitive.DoubleConverter.ArbitraryDecimal">
            <summary>
            Private class used for manipulating
            </summary>
        </member>
        <member name="F:VL.Lib.Primitive.DoubleConverter.ArbitraryDecimal.digits">
            <summary>
            Digits in the decimal expansion, one byte per digit
            </summary>
        </member>
        <member name="F:VL.Lib.Primitive.DoubleConverter.ArbitraryDecimal.decimalPoint">
            <summary> 
            How many digits are *after* the decimal point
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.DoubleConverter.ArbitraryDecimal.#ctor(System.Int64)">
            <summary> 
            Constructs an arbitrary decimal expansion from the given long.
            The long must not be negative.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.DoubleConverter.ArbitraryDecimal.MultiplyBy(System.Int32)">
            <summary>
            Multiplies the current expansion by the given amount, which should
            only be 2 or 5.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.DoubleConverter.ArbitraryDecimal.Shift(System.Int32)">
            <summary>
            Shifts the decimal point; a negative value makes
            the decimal expansion bigger (as fewer digits come after the
            decimal place) and a positive value makes the decimal
            expansion smaller.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.DoubleConverter.ArbitraryDecimal.Normalize">
            <summary>
            Removes leading/trailing zeroes from the expansion.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.DoubleConverter.ArbitraryDecimal.ToString">
            <summary>
            Converts the value to a proper decimal string representation.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.Integer32Extensions.Inc(System.Int32)">
            <summary>
            Increments the input by 1
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Primitive.Integer32Extensions.Dec(System.Int32)">
            <summary>
            Decrements the input by 1
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Primitive.Integer32Extensions.ZMOD(System.Int32,System.Int32)">
            <summary>
            Modulo operator with the property, that the remainder of a division z / d
            and z &lt; 0 is positive. For example: zmod(-2, 30) = 28.
            </summary>
            <param name="z"></param>
            <param name="input2"></param>
            <returns>Remainder of division z / d.</returns>
        </member>
        <member name="M:VL.Lib.Primitive.Integer64Extensions.Inc(System.Int64)">
            <summary>
            Increments the input by 1
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Primitive.Integer64Extensions.Dec(System.Int64)">
            <summary>
            Decrements the input by 1
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Primitive.Integer64Extensions.ZMOD(System.Int64,System.Int64)">
            <summary>
            Modulo operator with the property, that the remainder of a division z / d
            and z &lt; 0 is positive. For example: zmod(-2, 30) = 28.
            </summary>
            <param name="z"></param>
            <param name="input2"></param>
            <returns>Remainder of division z / d.</returns>
        </member>
        <member name="T:VL.Lib.Primitive.IntegerConversions">
            <summary>
            Convertions between number types.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt8(System.SByte)">
            <summary>
            Unchecked bitwise copy to Integer8.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToByte(System.SByte)">
            <summary>
            Unchecked bitwise copy to Byte.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToChar(System.SByte)">
            <summary>
            Unchecked bitwise copy to Char.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt16(System.SByte)">
            <summary>
            Unchecked bitwise copy to Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt16(System.SByte)">
            <summary>
            Unchecked bitwise copy to unsigned Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt32(System.SByte)">
            <summary>
            Unchecked bitwise copy to Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt32(System.SByte)">
            <summary>
            Unchecked bitwise copy to unsigned Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt64(System.SByte)">
            <summary>
            Unchecked bitwise copy to Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt64(System.SByte)">
            <summary>
            Unchecked bitwise copy to unsigned Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat32(System.SByte)">
            <summary>
            Unchecked bitwise copy to Float32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat64(System.SByte)">
            <summary>
            Unchecked bitwise copy to Float64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt8(System.Byte)">
            <summary>
            Unchecked bitwise copy to Integer8.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToByte(System.Byte)">
            <summary>
            Unchecked bitwise copy to Byte.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToChar(System.Byte)">
            <summary>
            Unchecked bitwise copy to Char.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt16(System.Byte)">
            <summary>
            Unchecked bitwise copy to Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt16(System.Byte)">
            <summary>
            Unchecked bitwise copy to unsigned Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt32(System.Byte)">
            <summary>
            Unchecked bitwise copy to Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt32(System.Byte)">
            <summary>
            Unchecked bitwise copy to unsigned Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt64(System.Byte)">
            <summary>
            Unchecked bitwise copy to Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt64(System.Byte)">
            <summary>
            Unchecked bitwise copy to unsigned Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat32(System.Byte)">
            <summary>
            Unchecked bitwise copy to Float32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat64(System.Byte)">
            <summary>
            Unchecked bitwise copy to Float64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt8(System.Char)">
            <summary>
            Unchecked bitwise copy to Integer8.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToByte(System.Char)">
            <summary>
            Unchecked bitwise copy to Byte.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToChar(System.Char)">
            <summary>
            Unchecked bitwise copy to Char.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt16(System.Char)">
            <summary>
            Unchecked bitwise copy to Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt16(System.Char)">
            <summary>
            Unchecked bitwise copy to unsigned Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt32(System.Char)">
            <summary>
            Unchecked bitwise copy to Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt32(System.Char)">
            <summary>
            Unchecked bitwise copy to unsigned Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt64(System.Char)">
            <summary>
            Unchecked bitwise copy to Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt64(System.Char)">
            <summary>
            Unchecked bitwise copy to unsigned Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat32(System.Char)">
            <summary>
            Unchecked bitwise copy to Float32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat64(System.Char)">
            <summary>
            Unchecked bitwise copy to Float64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt8(System.Int16)">
            <summary>
            Unchecked bitwise copy to Integer8.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToByte(System.Int16)">
            <summary>
            Unchecked bitwise copy to Byte.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToChar(System.Int16)">
            <summary>
            Unchecked bitwise copy to Char.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt16(System.Int16)">
            <summary>
            Unchecked bitwise copy to Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt16(System.Int16)">
            <summary>
            Unchecked bitwise copy to unsigned Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt32(System.Int16)">
            <summary>
            Unchecked bitwise copy to Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt32(System.Int16)">
            <summary>
            Unchecked bitwise copy to unsigned Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt64(System.Int16)">
            <summary>
            Unchecked bitwise copy to Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt64(System.Int16)">
            <summary>
            Unchecked bitwise copy to unsigned Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat32(System.Int16)">
            <summary>
            Unchecked bitwise copy to Float32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat64(System.Int16)">
            <summary>
            Unchecked bitwise copy to Float64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt8(System.UInt16)">
            <summary>
            Unchecked bitwise copy to Integer8.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToByte(System.UInt16)">
            <summary>
            Unchecked bitwise copy to Byte.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToChar(System.UInt16)">
            <summary>
            Unchecked bitwise copy to Char.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt16(System.UInt16)">
            <summary>
            Unchecked bitwise copy to Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt16(System.UInt16)">
            <summary>
            Unchecked bitwise copy to unsigned Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt32(System.UInt16)">
            <summary>
            Unchecked bitwise copy to Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt32(System.UInt16)">
            <summary>
            Unchecked bitwise copy to unsigned Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt64(System.UInt16)">
            <summary>
            Unchecked bitwise copy to Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt64(System.UInt16)">
            <summary>
            Unchecked bitwise copy to unsigned Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat32(System.UInt16)">
            <summary>
            Unchecked bitwise copy to Float32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat64(System.UInt16)">
            <summary>
            Unchecked bitwise copy to Float64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt8(System.Int32)">
            <summary>
            Unchecked bitwise copy to Integer8.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToByte(System.Int32)">
            <summary>
            Unchecked bitwise copy to Byte.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToChar(System.Int32)">
            <summary>
            Unchecked bitwise copy to Char.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt16(System.Int32)">
            <summary>
            Unchecked bitwise copy to Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt16(System.Int32)">
            <summary>
            Unchecked bitwise copy to unsigned Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt32(System.Int32)">
            <summary>
            Unchecked bitwise copy to Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt32(System.Int32)">
            <summary>
            Unchecked bitwise copy to unsigned Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt64(System.Int32)">
            <summary>
            Unchecked bitwise copy to Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt64(System.Int32)">
            <summary>
            Unchecked bitwise copy to unsigned Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat32(System.Int32)">
            <summary>
            Unchecked bitwise copy to Float32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat64(System.Int32)">
            <summary>
            Unchecked bitwise copy to Float64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt8(System.UInt32)">
            <summary>
            Unchecked bitwise copy to Integer8.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToByte(System.UInt32)">
            <summary>
            Unchecked bitwise copy to Byte.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToChar(System.UInt32)">
            <summary>
            Unchecked bitwise copy to Char.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt16(System.UInt32)">
            <summary>
            Unchecked bitwise copy to Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt16(System.UInt32)">
            <summary>
            Unchecked bitwise copy to unsigned Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt32(System.UInt32)">
            <summary>
            Unchecked bitwise copy to Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt32(System.UInt32)">
            <summary>
            Unchecked bitwise copy to unsigned Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt64(System.UInt32)">
            <summary>
            Unchecked bitwise copy to Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt64(System.UInt32)">
            <summary>
            Unchecked bitwise copy to unsigned Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat32(System.UInt32)">
            <summary>
            Unchecked bitwise copy to Float32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat64(System.UInt32)">
            <summary>
            Unchecked bitwise copy to Float64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt8(System.Int64)">
            <summary>
            Unchecked bitwise copy to Integer8.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToByte(System.Int64)">
            <summary>
            Unchecked bitwise copy to Byte.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToChar(System.Int64)">
            <summary>
            Unchecked bitwise copy to Char.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt16(System.Int64)">
            <summary>
            Unchecked bitwise copy to Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt16(System.Int64)">
            <summary>
            Unchecked bitwise copy to unsigned Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt32(System.Int64)">
            <summary>
            Unchecked bitwise copy to Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt32(System.Int64)">
            <summary>
            Unchecked bitwise copy to unsigned Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt64(System.Int64)">
            <summary>
            Unchecked bitwise copy to Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt64(System.Int64)">
            <summary>
            Unchecked bitwise copy to unsigned Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat32(System.Int64)">
            <summary>
            Unchecked bitwise copy to Float32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat64(System.Int64)">
            <summary>
            Unchecked bitwise copy to Float64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt8(System.UInt64)">
            <summary>
            Unchecked bitwise copy to Integer8.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToByte(System.UInt64)">
            <summary>
            Unchecked bitwise copy to Byte.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToChar(System.UInt64)">
            <summary>
            Unchecked bitwise copy to Char.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt16(System.UInt64)">
            <summary>
            Unchecked bitwise copy to Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt16(System.UInt64)">
            <summary>
            Unchecked bitwise copy to unsigned Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt32(System.UInt64)">
            <summary>
            Unchecked bitwise copy to Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt32(System.UInt64)">
            <summary>
            Unchecked bitwise copy to unsigned Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt64(System.UInt64)">
            <summary>
            Unchecked bitwise copy to Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt64(System.UInt64)">
            <summary>
            Unchecked bitwise copy to unsigned Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat32(System.UInt64)">
            <summary>
            Unchecked bitwise copy to Float32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat64(System.UInt64)">
            <summary>
            Unchecked bitwise copy to Float64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt8(System.Single)">
            <summary>
            Unchecked bitwise copy to Integer8.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToByte(System.Single)">
            <summary>
            Unchecked bitwise copy to Byte.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToChar(System.Single)">
            <summary>
            Unchecked bitwise copy to Char.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt16(System.Single)">
            <summary>
            Unchecked bitwise copy to Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt16(System.Single)">
            <summary>
            Unchecked bitwise copy to unsigned Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt32(System.Single)">
            <summary>
            Unchecked bitwise copy to Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt32(System.Single)">
            <summary>
            Unchecked bitwise copy to unsigned Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt64(System.Single)">
            <summary>
            Unchecked bitwise copy to Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt64(System.Single)">
            <summary>
            Unchecked bitwise copy to unsigned Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat32(System.Single)">
            <summary>
            Unchecked bitwise copy to Float32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat64(System.Single)">
            <summary>
            Unchecked bitwise copy to Float64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt8(System.Double)">
            <summary>
            Unchecked bitwise copy to Integer8.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToByte(System.Double)">
            <summary>
            Unchecked bitwise copy to Byte.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToChar(System.Double)">
            <summary>
            Unchecked bitwise copy to Char.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt16(System.Double)">
            <summary>
            Unchecked bitwise copy to Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt16(System.Double)">
            <summary>
            Unchecked bitwise copy to unsigned Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt32(System.Double)">
            <summary>
            Unchecked bitwise copy to Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt32(System.Double)">
            <summary>
            Unchecked bitwise copy to unsigned Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt64(System.Double)">
            <summary>
            Unchecked bitwise copy to Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt64(System.Double)">
            <summary>
            Unchecked bitwise copy to unsigned Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat32(System.Double)">
            <summary>
            Unchecked bitwise copy to Float32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat64(System.Double)">
            <summary>
            Unchecked bitwise copy to Float64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt8``1(``0)">
            <summary>
            Range checked value conversion to Integer8. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToByte``1(``0)">
            <summary>
            Range checked value conversion to Byte. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToChar``1(``0)">
            <summary>
            Range checked value conversion to Char. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt16``1(``0)">
            <summary>
            Range checked value conversion to Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt16``1(``0)">
            <summary>
            Range checked value conversion to unsigned Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt32``1(``0)">
            <summary>
            Range checked value conversion to Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt32``1(``0)">
            <summary>
            Range checked value conversion to unsigned Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt64``1(``0)">
            <summary>
            Range checked value conversion to Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt64``1(``0)">
            <summary>
            Range checked value conversion to unsigned Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat32``1(``0)">
            <summary>
            Range checked value conversion to Float32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat64``1(``0)">
            <summary>
            Range checked value conversion to Float64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt8(System.Boolean)">
            <summary>
            Range checked value conversion to Integer8. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToByte(System.Boolean)">
            <summary>
            Range checked value conversion to Byte. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToChar(System.Boolean)">
            <summary>
            Range checked value conversion to Char. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt16(System.Boolean)">
            <summary>
            Range checked value conversion to Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt16(System.Boolean)">
            <summary>
            Range checked value conversion to unsigned Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt32(System.Boolean)">
            <summary>
            Range checked value conversion to Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt32(System.Boolean)">
            <summary>
            Range checked value conversion to unsigned Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt64(System.Boolean)">
            <summary>
            Range checked value conversion to Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt64(System.Boolean)">
            <summary>
            Range checked value conversion to unsigned Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat32(System.Boolean)">
            <summary>
            Range checked value conversion to Float32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat64(System.Boolean)">
            <summary>
            Range checked value conversion to Float64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt8(System.SByte)">
            <summary>
            Range checked value conversion to Integer8. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToByte(System.SByte)">
            <summary>
            Range checked value conversion to Byte. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToChar(System.SByte)">
            <summary>
            Range checked value conversion to Char. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt16(System.SByte)">
            <summary>
            Range checked value conversion to Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt16(System.SByte)">
            <summary>
            Range checked value conversion to unsigned Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt32(System.SByte)">
            <summary>
            Range checked value conversion to Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt32(System.SByte)">
            <summary>
            Range checked value conversion to unsigned Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt64(System.SByte)">
            <summary>
            Range checked value conversion to Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt64(System.SByte)">
            <summary>
            Range checked value conversion to unsigned Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat32(System.SByte)">
            <summary>
            Range checked value conversion to Float32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat64(System.SByte)">
            <summary>
            Range checked value conversion to Float64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt8(System.Byte)">
            <summary>
            Range checked value conversion to Integer8. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToByte(System.Byte)">
            <summary>
            Range checked value conversion to Byte. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToChar(System.Byte)">
            <summary>
            Range checked value conversion to Char. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt16(System.Byte)">
            <summary>
            Range checked value conversion to Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt16(System.Byte)">
            <summary>
            Range checked value conversion to unsigned Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt32(System.Byte)">
            <summary>
            Range checked value conversion to Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt32(System.Byte)">
            <summary>
            Range checked value conversion to unsigned Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt64(System.Byte)">
            <summary>
            Range checked value conversion to Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt64(System.Byte)">
            <summary>
            Range checked value conversion to unsigned Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat32(System.Byte)">
            <summary>
            Range checked value conversion to Float32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat64(System.Byte)">
            <summary>
            Range checked value conversion to Float64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt8(System.Char)">
            <summary>
            Range checked value conversion to Integer8. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToByte(System.Char)">
            <summary>
            Range checked value conversion to Byte. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToChar(System.Char)">
            <summary>
            Range checked value conversion to Char. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt16(System.Char)">
            <summary>
            Range checked value conversion to Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt16(System.Char)">
            <summary>
            Range checked value conversion to unsigned Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt32(System.Char)">
            <summary>
            Range checked value conversion to Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt32(System.Char)">
            <summary>
            Range checked value conversion to unsigned Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt64(System.Char)">
            <summary>
            Range checked value conversion to Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt64(System.Char)">
            <summary>
            Range checked value conversion to unsigned Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat32(System.Char)">
            <summary>
            Range checked value conversion to Float32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat64(System.Char)">
            <summary>
            Range checked value conversion to Float64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt8(System.Int16)">
            <summary>
            Range checked value conversion to Integer8. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToByte(System.Int16)">
            <summary>
            Range checked value conversion to Byte. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToChar(System.Int16)">
            <summary>
            Range checked value conversion to Char. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt16(System.Int16)">
            <summary>
            Range checked value conversion to Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt16(System.Int16)">
            <summary>
            Range checked value conversion to unsigned Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt32(System.Int16)">
            <summary>
            Range checked value conversion to Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt32(System.Int16)">
            <summary>
            Range checked value conversion to unsigned Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt64(System.Int16)">
            <summary>
            Range checked value conversion to Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt64(System.Int16)">
            <summary>
            Range checked value conversion to unsigned Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat32(System.Int16)">
            <summary>
            Range checked value conversion to Float32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat64(System.Int16)">
            <summary>
            Range checked value conversion to Float64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt8(System.UInt16)">
            <summary>
            Range checked value conversion to Integer8. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToByte(System.UInt16)">
            <summary>
            Range checked value conversion to Byte. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToChar(System.UInt16)">
            <summary>
            Range checked value conversion to Char. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt16(System.UInt16)">
            <summary>
            Range checked value conversion to Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt16(System.UInt16)">
            <summary>
            Range checked value conversion to unsigned Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt32(System.UInt16)">
            <summary>
            Range checked value conversion to Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt32(System.UInt16)">
            <summary>
            Range checked value conversion to unsigned Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt64(System.UInt16)">
            <summary>
            Range checked value conversion to Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt64(System.UInt16)">
            <summary>
            Range checked value conversion to unsigned Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat32(System.UInt16)">
            <summary>
            Range checked value conversion to Float32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat64(System.UInt16)">
            <summary>
            Range checked value conversion to Float64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt8(System.Int32)">
            <summary>
            Range checked value conversion to Integer8. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToByte(System.Int32)">
            <summary>
            Range checked value conversion to Byte. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToChar(System.Int32)">
            <summary>
            Range checked value conversion to Char. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt16(System.Int32)">
            <summary>
            Range checked value conversion to Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt16(System.Int32)">
            <summary>
            Range checked value conversion to unsigned Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt32(System.Int32)">
            <summary>
            Range checked value conversion to Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt32(System.Int32)">
            <summary>
            Range checked value conversion to unsigned Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt64(System.Int32)">
            <summary>
            Range checked value conversion to Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt64(System.Int32)">
            <summary>
            Range checked value conversion to unsigned Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat32(System.Int32)">
            <summary>
            Range checked value conversion to Float32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat64(System.Int32)">
            <summary>
            Range checked value conversion to Float64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt8(System.UInt32)">
            <summary>
            Range checked value conversion to Integer8. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToByte(System.UInt32)">
            <summary>
            Range checked value conversion to Byte. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToChar(System.UInt32)">
            <summary>
            Range checked value conversion to Char. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt16(System.UInt32)">
            <summary>
            Range checked value conversion to Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt16(System.UInt32)">
            <summary>
            Range checked value conversion to unsigned Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt32(System.UInt32)">
            <summary>
            Range checked value conversion to Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt32(System.UInt32)">
            <summary>
            Range checked value conversion to unsigned Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt64(System.UInt32)">
            <summary>
            Range checked value conversion to Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt64(System.UInt32)">
            <summary>
            Range checked value conversion to unsigned Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat32(System.UInt32)">
            <summary>
            Range checked value conversion to Float32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat64(System.UInt32)">
            <summary>
            Range checked value conversion to Float64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt8(System.Int64)">
            <summary>
            Range checked value conversion to Integer8. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToByte(System.Int64)">
            <summary>
            Range checked value conversion to Byte. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToChar(System.Int64)">
            <summary>
            Range checked value conversion to Char. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt16(System.Int64)">
            <summary>
            Range checked value conversion to Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt16(System.Int64)">
            <summary>
            Range checked value conversion to unsigned Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt32(System.Int64)">
            <summary>
            Range checked value conversion to Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt32(System.Int64)">
            <summary>
            Range checked value conversion to unsigned Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt64(System.Int64)">
            <summary>
            Range checked value conversion to Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt64(System.Int64)">
            <summary>
            Range checked value conversion to unsigned Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat32(System.Int64)">
            <summary>
            Range checked value conversion to Float32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat64(System.Int64)">
            <summary>
            Range checked value conversion to Float64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt8(System.UInt64)">
            <summary>
            Range checked value conversion to Integer8. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToByte(System.UInt64)">
            <summary>
            Range checked value conversion to Byte. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToChar(System.UInt64)">
            <summary>
            Range checked value conversion to Char. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt16(System.UInt64)">
            <summary>
            Range checked value conversion to Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt16(System.UInt64)">
            <summary>
            Range checked value conversion to unsigned Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt32(System.UInt64)">
            <summary>
            Range checked value conversion to Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt32(System.UInt64)">
            <summary>
            Range checked value conversion to unsigned Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt64(System.UInt64)">
            <summary>
            Range checked value conversion to Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt64(System.UInt64)">
            <summary>
            Range checked value conversion to unsigned Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat32(System.UInt64)">
            <summary>
            Range checked value conversion to Float32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat64(System.UInt64)">
            <summary>
            Range checked value conversion to Float64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt8(System.Single)">
            <summary>
            Range checked value conversion to Integer8. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToByte(System.Single)">
            <summary>
            Range checked value conversion to Byte. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToChar(System.Single)">
            <summary>
            Range checked value conversion to Char. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt16(System.Single)">
            <summary>
            Range checked value conversion to Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt16(System.Single)">
            <summary>
            Range checked value conversion to unsigned Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt32(System.Single)">
            <summary>
            Range checked value conversion to Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt32(System.Single)">
            <summary>
            Range checked value conversion to unsigned Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt64(System.Single)">
            <summary>
            Range checked value conversion to Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt64(System.Single)">
            <summary>
            Range checked value conversion to unsigned Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat32(System.Single)">
            <summary>
            Range checked value conversion to Float32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat64(System.Single)">
            <summary>
            Range checked value conversion to Float64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt8(System.Double)">
            <summary>
            Range checked value conversion to Integer8. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToByte(System.Double)">
            <summary>
            Range checked value conversion to Byte. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToChar(System.Double)">
            <summary>
            Range checked value conversion to Char. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt16(System.Double)">
            <summary>
            Range checked value conversion to Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt16(System.Double)">
            <summary>
            Range checked value conversion to unsigned Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt32(System.Double)">
            <summary>
            Range checked value conversion to Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt32(System.Double)">
            <summary>
            Range checked value conversion to unsigned Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt64(System.Double)">
            <summary>
            Range checked value conversion to Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt64(System.Double)">
            <summary>
            Range checked value conversion to unsigned Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat32(System.Double)">
            <summary>
            Range checked value conversion to Float32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat64(System.Double)">
            <summary>
            Range checked value conversion to Float64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToHexString(System.Char,System.Boolean)">
            <summary>
            Gets the hex representation as a string
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToHexString(System.Int16,System.Boolean)">
            <summary>
            Gets the hex representation as a string
            </summary>		
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToHexString(System.UInt16,System.Boolean)">
            <summary>
            Gets the hex representation as a string
            </summary>		
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToHexString(System.Int32,System.Boolean)">
            <summary>
            Gets the hex representation as a string
            </summary>		
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToHexString(System.UInt32,System.Boolean)">
            <summary>
            Gets the hex representation as a string
            </summary>		
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToHexString(System.Int64,System.Boolean)">
            <summary>
            Gets the hex representation as a string
            </summary>		
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToHexString(System.UInt64,System.Boolean)">
            <summary>
            Gets the hex representation as a string
            </summary>		
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseHex(System.String,System.Char@)">
            <summary>
            Parses a hex string to a char
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseHex(System.String,System.Int16@)">
            <summary>
            Parses a hex string to an integer
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseHex(System.String,System.UInt16@)">
            <summary>
            Parses a hex string to an integer
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseHex(System.String,System.Int32@)">
            <summary>
            Parses a hex string to an integer
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseHex(System.String,System.UInt32@)">
            <summary>
            Parses a hex string to an integer
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseHex(System.String,System.Int64@)">
            <summary>
            Parses a hex string to an integer
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseHex(System.String,System.UInt64@)">
            <summary>
            Parses a hex string to an integer
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToString(System.Byte,System.Boolean)">
            <summary>
            Gets a binary representation as a string
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToString(System.Int16,System.Boolean)">
            <summary>
            Gets a binary representation as a string
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToString(System.Int32,System.Boolean)">
            <summary>
            Gets a binary representation as a string
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToString(System.Int64,System.Boolean)">
            <summary>
            Gets a binary representation as a string
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToString(System.SByte,System.Boolean)">
            <summary>
            Gets a binary representation as a string
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToString(System.Char,System.Boolean)">
            <summary>
            Gets a binary representation as a string
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToString(System.UInt16,System.Boolean)">
            <summary>
            Gets a binary representation as a string
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToString(System.UInt32,System.Boolean)">
            <summary>
            Gets a binary representation as a string
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToString(System.UInt64,System.Boolean)">
            <summary>
            Gets a binary representation as a string
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseBin(System.String,System.Char@)">
            <summary>
            Parses a binary string to an integer, note that leading '0x' is not allowed
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseBin(System.String,System.SByte@)">
            <summary>
            Parses a binary string to an integer, note that leading '0x' is not allowed
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseBin(System.String,System.Byte@)">
            <summary>
            Parses a binary string to an integer, note that leading '0x' is not allowed
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseBin(System.String,System.Int16@)">
            <summary>
            Parses a binary string to an integer, note that leading '0x' is not allowed
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseBin(System.String,System.UInt16@)">
            <summary>
            Parses a binary string to an integer, note that leading '0x' is not allowed
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseBin(System.String,System.Int32@)">
            <summary>
            Parses a binary string to an integer, note that leading '0x' is not allowed
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseBin(System.String,System.UInt32@)">
            <summary>
            Parses a binary string to an integer, note that leading '0x' is not allowed
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseBin(System.String,System.Int64@)">
            <summary>
            Parses a binary string to an integer, note that leading '0x' is not allowed
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseBin(System.String,System.UInt64@)">
            <summary>
            Parses a binary string to an integer, note that leading '0x' is not allowed
            </summary>
        </member>
        <member name="T:VL.Lib.Primitive.AbstractLoopRegion">
            <summary>
            Abstract base class for our loop regions.
            </summary>
        </member>
        <member name="T:VL.Lib.Primitive.ForeachLoopRegion">
            <summary>
            Our foreach region.
            </summary>
        </member>
        <member name="T:VL.Lib.Primitive.RepeatLoopRegion">
            <summary>
            Our repeat region.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.Object.ObjectHelpers.IsAssigned(System.Object,System.Boolean@,System.Boolean@)">
            <summary>
            Whether or not the value is null
            </summary>
            <param name="x"></param>
            <param name="result"></param>
            <param name="notAssigned"></param>
        </member>
        <member name="M:VL.Lib.Primitive.Object.ObjectHelpers.NullCoalescing``1(``0,``0)">
            <summary>
            The ?? operator is called the null-coalescing operator. It returns the left-hand operand if the operand is not null; otherwise it returns the right hand operand
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Primitive.Object.ObjectHelpers.HardCast``1(System.Object)">
            <summary>
            Casts the input value to the downstream connected type. Will throw a InvalidCastException if the cast fails
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Primitive.Object.ObjectHelpers.CastAs``1(System.Object,``0,``0@,System.Boolean@)">
            <summary>
            Casts the input value to the downstream connected type. In case the cast fails the provided default value will be used and the success output will return false
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="default"></param>
            <param name="result"></param>
            <param name="success"></param>
        </member>
        <member name="M:VL.Lib.Primitive.Object.ObjectHelpers.CastAsGeneric``2(``0,``1,``1@,System.Boolean@)">
            <summary>
            Casts the input value to the downstream connected type. In case the cast fails the provided default value will be used and the success output will return false
            </summary>
            <typeparam name="TIn"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="input"></param>
            <param name="default"></param>
            <param name="result"></param>
            <param name="success"></param>
        </member>
        <member name="M:VL.Lib.Primitive.Object.ObjectHelpers.AsObject``1(``0,System.Object@)">
            <summary>
            Helps in terms of getting your patch generic.  
            </summary>
            <typeparam name="TIn"></typeparam>
            <param name="input"></param>
            <param name="result"></param>
        </member>
        <member name="M:VL.Lib.Primitive.Object.ObjectHelpers.Identity``1(``0)">
            <summary>
            Returns the input value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Primitive.Object.ObjectHelpers.Eq(System.Object,System.Object)">
            <summary>
            Calls the virtual Equals method on the input value
            </summary>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Primitive.Object.ObjectHelpers.ToString(System.Object)">
            <summary>
            Calls the virtual ToString method on the input value
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Primitive.StringExtensions.SurroundWith(System.String,System.String)">
            <summary>
            Adds the given quote string at the beginning and end of the string
            </summary>
            <param name="text"></param>
            <param name="quotes"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Primitive.StringExtensions.SurroundWith(System.String,System.Char)">
            <summary>
            Adds the given quote char at the beginning and end of the string
            </summary>
            <param name="text"></param>
            <param name="quotes"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Primitive.Tuple.TupleHelpers.Split``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,``7},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Splits the specified 8 item tuple.
            </summary>
            <typeparam name="T1">The type of item 1.</typeparam>
            <typeparam name="T2">The type of item 2.</typeparam>
            <typeparam name="T3">The type of item 3.</typeparam>
            <typeparam name="T4">The type of item 4.</typeparam>
            <typeparam name="T5">The type of item 5.</typeparam>
            <typeparam name="T6">The type of item 6.</typeparam>
            <typeparam name="T7">The type of item 7.</typeparam>
            <typeparam name="TRest">The type of item 8 or the rest tuple.</typeparam>
            <param name="input">The input.</param>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <param name="item3">The item3.</param>
            <param name="item4">The item4.</param>
            <param name="item5">The item5.</param>
            <param name="item6">The item6.</param>
            <param name="item7">The item7.</param>
            <param name="rest">The item8 or the rest tuple.</param>
        </member>
        <member name="M:VL.Lib.Primitive.TypeHelpers.TypeHelpers.IsInteger``1(``0)">
            <summary>
            Checks whether the input is an integer type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:VL.Lib.Reactive.AsyncLoop`2">
            <summary>
            Runs an infinite loop in a background thread.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TOut">The output type.</typeparam>
        </member>
        <member name="T:VL.Lib.Reactive.AsyncTask`1">
            <summary>
            Runs the given task once in a background thread.
            </summary>
            <typeparam name="TOut">The output type.</typeparam>
        </member>
        <member name="T:VL.Lib.Reactive.DebugNode`1">
            <summary>
            Keeps track of the calls made internally in the obserable computation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:VL.Lib.Reactive.ForEach`3">
            <summary>
            Executes for each input event and and can transform the event value into a different type.
            Use the 'Keep' version if you want to filter some events out.
            </summary>
            <typeparam name="TState"></typeparam>
            <typeparam name="TIn"></typeparam>
            <typeparam name="TOut"></typeparam>
        </member>
        <member name="T:VL.Lib.Reactive.ForEachKeep`3">
            <summary>
            Executes for each input event and and can transform the event value into a different type.
            The second boolean output in the region decides whether to pass the current event on.
            </summary>
            <typeparam name="TState"></typeparam>
            <typeparam name="TIn"></typeparam>
            <typeparam name="TOut"></typeparam>
        </member>
        <member name="T:VL.Lib.Reactive.HoldLatest`1">
            <summary>
            Stores the latest notification and outputs it. Use S+H [Reactive] if you want to sample and hold all notifications between two calls
            </summary>
            <typeparam name="TIn"></typeparam>
        </member>
        <member name="T:VL.Lib.Reactive.SampleAndHold`1">
            <summary>
            Sample and hold all notifications between two calls. Use HoldLatest [Reactive] if you only need the newest notification
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:VL.Lib.Reactive.KeepAlive`1">
            <summary>
            Keeps a single subscription of the input observable so that it will be kept alive and passes the events on to the output. The observable on the output is always the same
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:VL.Lib.Reactive.ObservableInputBase`1">
            <summary>
            Base class that manages one input observable and one subscription of it.
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:VL.Lib.Reactive.ObservableInputBase`1.ManageObservable(System.IObservable{`0})">
            <summary>
            Subscribes to the observable if not already.
            If the input is null only the old subscription is disposed.
            </summary>
            <param name="observable">The potentially new observable.</param>
        </member>
        <member name="M:VL.Lib.Reactive.ObservableInputBase`1.OnNext(`0)">
            <summary>
            Called when a new event is observed. Override in subclass to handle the events.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:VL.Lib.Reactive.ObservableInputBase`1.OnError(System.Exception)">
            <summary>
            Called when the upstream observable throws an exception
            </summary>
        </member>
        <member name="M:VL.Lib.Reactive.ObservableInputBase`1.OnCompleted">
            <summary>
            Called when the observable is completed
            </summary>
        </member>
        <member name="M:VL.Lib.Reactive.ObservableInputBase`1.ReleaseResources">
            <summary>
            Releases the subscription. Called on dispose and finalize.
            Override in subclass to release more resources.
            </summary>
        </member>
        <member name="T:VL.Lib.Reactive.ObservableNodes">
            <summary>
            Contains a set of static nodes working on observables.
            </summary>
        </member>
        <member name="M:VL.Lib.Reactive.ObservableNodes.Empty``1">
            <summary>
            Returns an empty observable sequence
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Reactive.ObservableNodes.Never``1">
            <summary>
            Returns a non-terminating observable sequence, which can be used to denote an infinite duration (e.g. when using reactive joins)
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Reactive.ObservableNodes.PubRefCount``1(System.IObservable{``0})">
            <summary>
            Returns an observable sequence that stays connected to the source as long as there is at least one subscription to the observable sequence
            and shares only one single subscription to the underlying sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Reactive.ObservableNodes.OnErrorTerminate``1(System.IObservable{``0})">
            <summary>
            Terminates the sequence upon successful or exceptional termination
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Reactive.ObservableNodes.BackoffAndRetry``1(System.IObservable{``0},System.Double)">
            <summary>
            Repeats the source observable sequence until it successfully terminates. Each subsequent subscription will be delayed by the given amount of time in seconds
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="delayInSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Reactive.ObservableNodes.BackoffAndRetry``1(System.IObservable{``0},System.Int32,System.Double)">
            <summary>
            Repeats the source observable sequence the specified number of times or until it successfully terminates. Each subsequent subscription will be delayed by the given amount of time in seconds
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="retryCount"></param>
            <param name="delay"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Reactive.ObservableNodes.Loop``2(System.Func{``0},System.Func{``0,System.IObserver{``1},System.Threading.CancellationToken,``0},System.Int32)">
            <summary>
            Returns an observable which sets up the <typeparamref name="TState"/> on subscription and will thereafter call the <paramref name="update"/>
            method in a loop on a background thread. The speed of the loop can be controlled with the <paramref name="millisecondsDelay"/>.
            Notifications can be pushed downstream by using the provided <see cref="T:System.IObserver`1"/> inside the update method.
            </summary>
            <remarks>
            The state will get created and disposed of in the thread which subscribes to the observable while the update of the loop will be called
            on a background thread. 
            If that is not the desired behavior one can use <see cref="M:System.Reactive.Linq.Observable.SubscribeOn``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)"/>
            to force the creation and destruction of the state to happen on a background thread.
            </remarks>
            <typeparam name="TState">The type of the state used by the loop.</typeparam>
            <typeparam name="T">The type of the notification.</typeparam>
            <param name="create">The method which produces the state.</param>
            <param name="update">The method which will get called in a loop on a background thread.</param>
            <param name="millisecondsDelay">The amount of time to wait before going into another iteration of the loop.</param>
            <returns>An observable which when subscribed to runs a loop on a background thread.</returns>
        </member>
        <member name="M:VL.Lib.Reactive.ObservableNodes.Subscribe``1(System.IObservable{``0})">
            <summary>
            Returns a provider managing the lifetime of the subscription of the upsream observable.
            The provider will subscribe when a handle is requested and unsubscribe when the handle gets returned.
            </summary>
            <typeparam name="T">The type of the notifications.</typeparam>
            <param name="source">The upstream observable to subscribe to once a handle is requested.</param>
            <returns>A provider managing the lifetime of the upstream observable.</returns>
        </member>
        <member name="M:VL.Lib.Reactive.ObservableNodes.Using``2(VL.Lib.Basics.Resources.IResourceProvider{``0},System.Func{``0,System.IObservable{``1}})">
            <summary>
            Returns an observable sequence that depends on the resource given by the upstream provider. The lifetime of the upstream resource
            handle will be tied to the resulting observable sequence's lifetime.
            </summary>
            <typeparam name="TResource">The type of the resource the resulting observable sequence will depend upon.</typeparam>
            <typeparam name="T">The type of the notifcations produced by the observable.</typeparam>
            <param name="provider">The provider which produces the resource.</param>
            <param name="observableFactory">The factory which produces the observable sequence tied to the resource given by the provider.</param>
            <returns>An observable sequence depending on the upstream resource.</returns>
        </member>
        <member name="M:VL.Lib.Reactive.ObservableNodes.PollResource``3(VL.Lib.Basics.Resources.IResourceProvider{``1},System.Func{``1,``0},System.Func{``0,``1,System.Threading.CancellationToken,System.Tuple{``0,``2}},System.Int32)">
            <summary>
            Polls the device for a resource on a background thread. Each polled resource will be disposed after all observers have been notified.
            </summary>
            <typeparam name="TState">The type of the state used by the polling loop.</typeparam>
            <typeparam name="TDevice">The type of the device.</typeparam>
            <typeparam name="TResource">The type of the resource.</typeparam>
            <param name="deviceProvider">The device provider to poll for a resource.</param>
            <param name="create">The method which produces the state.</param>
            <param name="update">The method used for polling.</param>
            <param name="millisecondsDelay">The amount of time to wait before polling again.</param>
            <returns>An observable of the polled resources.</returns>
        </member>
        <member name="M:VL.Lib.Reactive.ObservableNodes.PollData``3(VL.Lib.Basics.Resources.IResourceProvider{``1},System.Func{``1,``0},System.Func{``0,``1,System.Threading.CancellationToken,System.Tuple{``0,``2}},System.Int32)">
            <summary>
            Polls the device for data on a background thread.
            </summary>
            <typeparam name="TState">The type of the state used by the polling loop.</typeparam>
            <typeparam name="TDevice">The type of the device.</typeparam>
            <typeparam name="TData">The type of the data.</typeparam>
            <param name="deviceProvider">The device to poll data from.</param>
            <param name="create">The method which produces the state.</param>
            <param name="update">The method used for polling.</param>
            /// <param name="millisecondsDelay">The amount of time to wait before polling again.</param>
            <returns>An observable of the polled data.</returns>
        </member>
        <member name="T:VL.Lib.Reactive.ObservableNodes.BlockingReceiver`1">
            <summary>
            Receives values from an input sequence. Each call to Receive blocks until the next value is produced.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:VL.Lib.Reactive.ObservableNodes.BlockingReceiver`1.Receive(System.IObservable{`0},`0,System.Threading.CancellationToken,System.Boolean@)">
            <summary>
            Blocks until the next item is produced by the input sequence and returns the value.
            Since the call is blocking make sure to use it on a different thread than the producer and provide it with a proper cancellation token.
            Without a token the method will return immediately with the default value.
            </summary>
            <param name="input">The sequence to receive values from.</param>
            <param name="defaultValue">The value to return in case the receive call fails.</param>
            <param name="cancellationToken">The cancellation token to cancel the blocking receive call.</param>
            <param name="success">Whether or not a value was received.</param>
            <returns>The received value.</returns>
        </member>
        <member name="T:VL.Lib.Reactive.SafeScheduler">
            <summary>
            Provides wrapped versions of all the standard schedulers of RX with VL exception handling.
            </summary>
        </member>
        <member name="P:VL.Lib.Reactive.SafeScheduler.CurrentSynchronizationContext">
            <summary>
            Gets a scheduler that schedules work as soon as possible on the current thread.
            </summary>
        </member>
        <member name="F:VL.Lib.Reactive.SafeScheduler.Default">
            <summary>
            Gets a scheduler that schedules work on the platform's default scheduler.
            </summary>
        </member>
        <member name="P:VL.Lib.Reactive.SafeScheduler.CurrentThread">
            <summary>
            Gets a scheduler that schedules work as soon as possible on the current thread.
            </summary>
        </member>
        <member name="F:VL.Lib.Reactive.SafeScheduler.Immediate">
            <summary>
            Gets a scheduler that schedules work immediately on the current thread.
            </summary>
        </member>
        <member name="F:VL.Lib.Reactive.SafeScheduler.NewThread">
            <summary>
            Gets a scheduler that schedules work on a new thread using default thread creation options.
            </summary>
        </member>
        <member name="F:VL.Lib.Reactive.SafeScheduler.TaskPool">
            <summary>
            Gets a scheduler that schedules work on Task Parallel Library (TPL) task pool using the default TaskScheduler.
            </summary>
        </member>
        <member name="F:VL.Lib.Reactive.SafeScheduler.ThreadPool">
            <summary>
            Gets a scheduler that schedules work on the thread pool.
            </summary>
        </member>
        <member name="M:VL.Lib.Reactive.SafeScheduler.CatchAndReportRuntimeExceptions(System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns a scheduler that wraps the original scheduler, adding VL exception handling for scheduled actions.
            </summary>
        </member>
        <member name="T:VL.Lib.Reactive.Sampler`1">
            <summary>
            Samples all events that happen between the last update and the current update and outputs the event values as a spread. The output is an empty spread if no events have occured
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:VL.Lib.Reactive.SplitterNode`1">
            <summary>
            Outputs the input observable and observables for OnError and OnCompleted.
            </summary>
            <remarks>
            The OnError and OnCompleted observables only work if the orignal output is connected.
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:VL.Lib.Reactive.ToObservable`1">
            <summary>
            Creates an observable and sends the input value as an event on it. The output observable is always the same and never completes.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:VL.Lib.Reactive.ToObservableSwitch`1">
            <summary>
            Routes the input observable to the output whenever 'Send' is true, the output observable is always the same and never completes.
            It also catches exceptions thrown by the input observable and throws them in its update operation.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:VL.Lib.Reactive.ToObservableSequence`1">
            <summary>
            Creates an observable and sends the all elements of the input as an event on it. The output observable is always the same and never completes.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:VL.Lib.Reactive.BusyWaitTimerObservable">
            <summary>
            Timer using the busy wait method, extremely accurate but uses 100% of one core. But hey... don't you have enough of them?
            </summary>
        </member>
        <member name="M:VL.Lib.Reactive.BusyWaitTimerObservable.Update(System.Single@,System.Single,System.Int32,VL.Core.TimerMode,System.Threading.ApartmentState,System.Boolean,System.Boolean)">
            <summary>
            Updates the timer properties.
            </summary>
            <param name="period">The period time in milliseconds. Values smaller than 1 are possible.</param>
            <param name="waitAccuracy">Helps to save CPU power for period times higher than this value. It is the start of the busy wait phase before the peroid end in milliseconds. Before that Thread.Sleep(1) is called periodically, the precision of Thread.Spleep(1) depends on the current windows system timer accuracy, usually between 16ms and 4ms.</param>
            <param name="mode"></param>
            <param name="threadApartmentState">Set to MTA for background threads and STA if the thread is used for UIs</param>
            <param name="resetCounter">If set to <c>true</c> the frame counter will be reset.</param>
            <param name="enabled">If set to <c>true</c> the timer runs.</param>
            <param name="lastPeriod">Last measured period time in milliseconds.</param>
            <returns>Observable of a TimerClock that can be used as frame clock input for animation nodes.</returns> 
        </member>
        <member name="E:VL.Lib.Reactive.BusyWaitTimerObservable.Started">
            <summary>
            Occurs when the Timer has started;
            </summary>
        </member>
        <member name="E:VL.Lib.Reactive.BusyWaitTimerObservable.Stopped">
            <summary>
            Occurs when the Timer has stopped;
            </summary>
        </member>
        <member name="M:VL.Lib.Reactive.BusyWaitTimerObservable.#ctor">
            <summary>
            Initializes a new instance of the Timer class.
            </summary>
        </member>
        <member name="M:VL.Lib.Reactive.BusyWaitTimerObservable.Start">
            <summary>
            Starts the timer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The timer has already been disposed.
            </exception>
            <exception cref="T:VL.Lib.Reactive.TimerStartException">
            The timer failed to start.
            </exception>
        </member>
        <member name="M:VL.Lib.Reactive.BusyWaitTimerObservable.Stop">
            <summary>
            Stops timer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            If the timer has already been disposed.
            </exception>
        </member>
        <member name="P:VL.Lib.Reactive.BusyWaitTimerObservable.Period">
            <summary>
            Gets or sets the time between Tick events.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            If the timer has already been disposed.
            </exception>   
        </member>
        <member name="P:VL.Lib.Reactive.BusyWaitTimerObservable.Mode">
            <summary>
            Gets the timer mode.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            If the timer has already been disposed.
            </exception>
        </member>
        <member name="P:VL.Lib.Reactive.BusyWaitTimerObservable.IsRunning">
            <summary>
            Gets a value indicating whether the Timer is running.
            </summary>
        </member>
        <member name="P:VL.Lib.Reactive.BusyWaitTimerObservable.Now">
            <summary>
            Returns the time since the timer was created.
            Internally uses the .NET Stopwatch.
            </summary>
        </member>
        <member name="M:VL.Lib.Reactive.BusyWaitTimerObservable.Dispose">
            <summary>
            Frees timer resources.
            </summary>
        </member>
        <member name="T:VL.Lib.Reactive.MultimediaTimerObservable">
            <summary>
            Timer using the systems multimedia timer with millisecond accuracy on a high proiority thread. Experimental, you should only create one if it...
            </summary>
        </member>
        <member name="M:VL.Lib.Reactive.MultimediaTimerObservable.Update(System.Single@,System.Int32,VL.Core.TimerMode,System.Boolean,System.Boolean)">
            <summary>
            Updates the timer properties.
            </summary>
            <param name="period">The period time in milliseconds.</param>
            <param name="mode"></param>
            <param name="resetCounter">If set to <c>true</c> the frame counter will be reset.</param>
            <param name="enabled">If set to <c>true</c> the timer runs.</param>
            <param name="lastPeriod">Last measured period time in milliseconds.</param>
            <returns>Observable of a TimerClock that can be used as frame clock input for animation nodes.</returns>
        </member>
        <member name="E:VL.Lib.Reactive.MultimediaTimerObservable.Started">
            <summary>
            Occurs when the Timer has started;
            </summary>
        </member>
        <member name="E:VL.Lib.Reactive.MultimediaTimerObservable.Stopped">
            <summary>
            Occurs when the Timer has stopped;
            </summary>
        </member>
        <member name="M:VL.Lib.Reactive.MultimediaTimerObservable.#cctor">
            <summary>
            Initialize class.
            </summary>
        </member>
        <member name="M:VL.Lib.Reactive.MultimediaTimerObservable.#ctor">
            <summary>
            Initializes a new instance of the Timer class.
            </summary>
        </member>
        <member name="M:VL.Lib.Reactive.MultimediaTimerObservable.Start">
            <summary>
            Starts the timer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The timer has already been disposed.
            </exception>
            <exception cref="T:VL.Lib.Reactive.TimerStartException">
            The timer failed to start.
            </exception>
        </member>
        <member name="M:VL.Lib.Reactive.MultimediaTimerObservable.Stop">
            <summary>
            Stops timer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            If the timer has already been disposed.
            </exception>
        </member>
        <member name="P:VL.Lib.Reactive.MultimediaTimerObservable.Period">
            <summary>
            Gets or sets the time between Tick events.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            If the timer has already been disposed.
            </exception>   
        </member>
        <member name="P:VL.Lib.Reactive.MultimediaTimerObservable.Mode">
            <summary>
            Gets the timer mode.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            If the timer has already been disposed.
            </exception>
        </member>
        <member name="P:VL.Lib.Reactive.MultimediaTimerObservable.IsRunning">
            <summary>
            Gets a value indicating whether the Timer is running.
            </summary>
        </member>
        <member name="P:VL.Lib.Reactive.MultimediaTimerObservable.Now">
            <summary>
            Returns the time since the timer was created.
            Internally uses the .NET Stopwatch.
            </summary>
        </member>
        <member name="P:VL.Lib.Reactive.MultimediaTimerObservable.Capabilities">
            <summary>
            Gets the timer capabilities.
            </summary>
        </member>
        <member name="M:VL.Lib.Reactive.MultimediaTimerObservable.Dispose">
            <summary>
            Frees timer resources.
            </summary>
        </member>
        <member name="T:VL.Lib.Reactive.TimerCaps">
            <summary>
            Represents information about the multimedia Timer's capabilities.
            </summary>
        </member>
        <member name="F:VL.Lib.Reactive.TimerCaps.periodMin">
            <summary>
            Minimum supported period in milliseconds.
            </summary>
        </member>
        <member name="F:VL.Lib.Reactive.TimerCaps.periodMax">
            <summary>
            Maximum supported period in milliseconds.
            </summary>
        </member>
        <member name="T:VL.Lib.Reactive.TimerStartException">
            <summary>
            The exception that is thrown when a timer fails to start.
            </summary>
        </member>
        <member name="M:VL.Lib.Reactive.TimerStartException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TimerStartException class.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception. 
            </param>
        </member>
        <member name="M:VL.Lib.BitmapNodes.Copy(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Copy the pixel data of a Bitmap into a new one. Uses the same code path as Convert and also copies the metadata PropertyItems.
            </summary>
            <param name="input">The input.</param>
            <param name="disposeInputBitmap">If set to <c>true</c> disposes input bitmap after the copy.</param>
            <returns>
            The new Bitmap.
            </returns>
        </member>
        <member name="M:VL.Lib.BitmapNodes.Convert(System.Drawing.Bitmap,System.Drawing.Imaging.PixelFormat,System.Boolean)">
            <summary>
            Convert a Bitmap to the specified pixel format.
            </summary>
            <param name="input">The input.</param>
            <param name="pixelFormat">The target bitmap pixel format.</param>
            <param name="disposeInputBitmap">If set to <c>true</c> disposes input bitmap after conversion.</param>
            <returns>
            The new, Bitmap with converted pixels.
            </returns>
        </member>
        <member name="M:VL.Lib.BitmapNodes.Resize(System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode,System.Boolean)">
            <summary>
            Resize the Bitmap to the specified width and height.
            </summary>
            <param name="input">The Bitmap to resize.</param>
            <param name="width">The width to resize to.</param>
            <param name="height">The height to resize to.</param>
            <param name="interpolationMode">The interpolation mode.</param>
            <param name="disposeInputBitmap">If set to <c>true</c> disposes input bitmap after conversion.</param>
            <returns>
            The resized and converted Bitmap.
            </returns>
        </member>
        <member name="M:VL.Lib.BitmapNodes.ResizeAndConvert(System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode,System.Drawing.Imaging.PixelFormat,System.Boolean)">
            <summary>
            Resize and convert the Bitmap to the specified width, height and pixel format.
            </summary>
            <param name="input">The Bitmap to resize.</param>
            <param name="width">The width to resize to.</param>
            <param name="height">The height to resize to.</param>
            <param name="interpolationMode">The interpolation mode.</param>
            <param name="pixelFormat">The bitmap pixel format.</param>
            <param name="disposeInputBitmap">If set to <c>true</c> disposes input bitmap after conversion.</param>
            <returns>
            The resized and converted Bitmap.
            </returns>
        </member>
        <member name="M:VL.Lib.BitmapNodes.Save(System.Drawing.Bitmap,System.String,VL.Lib.BitmapFileFormat,System.Boolean,System.Boolean)">
            <summary>
            Saves a bitmap to a file on disc with specified file format. Also takes care of the file extension.
            </summary>
            <param name="input">The input bitmap.</param>
            <param name="filename">The full path.</param>
            <param name="format">The image file format.</param>
            <param name="save">If set to <c>true</c> saves the file to disc.</param>
            <param name="disposeInputBitmap">If set to <c>true</c> disposes input bitmap after save. Useful when the node is the last in a Bitmap processing chain and no other node uses it anymore.</param>
            <returns> Same Bitmap instance as the input.</returns>
        </member>
        <member name="M:VL.Lib.BitmapNodes.SaveCustom(System.Drawing.Bitmap,System.String,System.Drawing.Imaging.ImageFormat,System.Boolean,System.Boolean)">
            <summary>
            Saves a bitmap to a file on disc with specified .NET image format.
            </summary>
            <param name="input">The input bitmap.</param>
            <param name="filename">The full path.</param>
            <param name="format">The image file format.</param>
            <param name="save">If set to <c>true</c> saves the file to disc.</param>
            <param name="disposeInputBitmap">If set to <c>true</c> disposes input bitmap after save. Useful when the node is the last in a Bitmap processing chain and no other node uses it anymore.</param>
            <returns> Same Bitmap instance as the input.</returns>
        </member>
        <member name="T:VL.Lib.Threading.TaskExtensions">
            <summary>
            Extension methods for tasks.
            </summary>
        </member>
        <member name="M:VL.Lib.Threading.TaskExtensions.CancelAndDispose(System.Threading.Tasks.Task,System.Threading.CancellationTokenSource,System.Int32)">
            <summary>
            Cancels the tasks, waits for it to finish and disposes both the cancellation token source as well as the task.
            </summary>
            <param name="task">The task to cancel.</param>
            <param name="cancellation">The cancellation token source whose token is used by the task.</param>
            <param name="timeout">The time in milli seconds to wait for termination of the task.</param>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.JoinXDocument(System.Xml.Linq.XElement,System.Xml.Linq.XDeclaration,System.Xml.Linq.XDocumentType)">
            <summary>
            Creates an XDocument
            </summary>
            <param name="root"></param>
            <param name="declaration"></param>
            <param name="documentType"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.SplitXDocument(System.Xml.Linq.XDocument,System.Xml.Linq.XElement@,System.Xml.Linq.XDeclaration@,System.Xml.Linq.XDocumentType@)">
            <summary>
            Splits an XDocument into its components
            </summary>
            <param name="input"></param>
            <param name="root"></param>
            <param name="declaration"></param>
            <param name="documentType"></param>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.JoinXDeclaration(System.String,System.String,System.String)">
            <summary>
            Creates an XDeclaration
            </summary>
            <param name="version"></param>
            <param name="encoding"></param>
            <param name="standalone"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.SplitXDeclaration(System.Xml.Linq.XDeclaration,System.String@,System.String@,System.String@)">
            <summary>
            Splits an XDeclaration into its components
            </summary>
            <param name="input"></param>
            <param name="version"></param>
            <param name="encoding"></param>
            <param name="standalone"></param>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.JoinXDocumentType(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an XDocumentType
            </summary>
            <param name="name"></param>
            <param name="publicId"></param>
            <param name="systemId"></param>
            <param name="internalSubset"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.SplitXDocumentType(System.Xml.Linq.XDocumentType,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Splits an XDocumentType into its components
            </summary>
            <param name="input"></param>
            <param name="name"></param>
            <param name="publicId"></param>
            <param name="systemId"></param>
            <param name="internalSubset"></param>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.JoinXElement(System.String,System.String,System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute},System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Creates an XElement
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <param name="children"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.SplitXElement(System.Xml.Linq.XElement,System.String@,System.String@,VL.Lib.Collections.Spread{System.Xml.Linq.XElement}@,VL.Lib.Collections.Spread{System.Xml.Linq.XAttribute}@)">
            <summary>
            Splits an XElement into its components
            </summary>
            <param name="input"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="children"></param>
            <param name="attributes"></param>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.JoinXAttribute(System.String,System.String)">
            <summary>
            Creates an XAttribute
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.SplitXAttribute(System.Xml.Linq.XAttribute,System.String@,System.String@)">
            <summary>
            Splits an XAttribute into its components
            </summary>
            <param name="input"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.XElementsByName(System.Xml.Linq.XElement,System.String,System.Boolean)">
            <summary>
            Returns a spread of XElements with the given name
            </summary>
            <param name="input"></param>
            <param name="name"></param>
            <param name="allDescendants"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.XAttributeByName(System.Xml.Linq.XElement,System.String)">
            <summary>
            Returns the XAttribute with the given name
            </summary>
            <param name="input"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.ValidateXDocumentSchema(System.Xml.Linq.XNode,VL.Lib.IO.Path,System.Boolean@,System.String@)">
            <summary>
            Validates an XDocument or XElement against an XML Schema Definition and returns whether it is valid or not
            </summary>
            <param name="node"></param>
            <param name="validationFile"></param>
            <param name="isValid"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.DeserializeXNode(System.String,System.String,System.Boolean)">
            <summary>
            Deserializes an XDocument from a JSON string
            </summary>
            <param name="json"></param>
            <param name="deserializeRootElementName"></param>
            <param name="writeArrayAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.SerializeXNode(System.Xml.Linq.XNode,System.Boolean,System.Boolean)">
            <summary>
            Serializes an XDocument or XElement to a JSON string
            </summary>
            <param name="input"></param>
            <param name="indent"></param>
            <param name="omitRootObject"></param>
            <returns></returns>
        </member>
        <member name="T:VL.Lib.Parallel.ForEach`2">
            <summary>
            A loop region with one input and one output which runs in parallel. The returned spread builder is always the same and will be re-used by the loop.
            </summary>
        </member>
        <member name="T:VL.Lib.Experimental.SingleInstancePerApp`1">
            <summary>
            One instance per app and app run. If you restart the app (via F8 and F5) you will get a fresh instance.
            </summary>
        </member>
        <member name="T:VL.Lib.Experimental.Sender`2.ChannelResolver">
            <summary>
            manages many senders on the same channel. first Sender wins. If the currently sending sender gets deleted another might jump in
            </summary>
        </member>
    </members>
</doc>
