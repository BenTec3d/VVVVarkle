<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stride.Rendering</name>
    </assembly>
    <members>
        <member name="T:Stride.Extensions.GeometricPrimitiveExtensions">
            <summary>
            An extension class for the <see cref="T:Stride.Graphics.GeometricPrimitives.GeometricPrimitive"/>
            </summary>
        </member>
        <member name="M:Stride.Extensions.IndexExtensions.RemoveIndexBuffer(Stride.Rendering.MeshDraw)">
            <summary>
            Expand vertices using index buffer (if existing), and remove it.
            </summary>
            <param name="meshData">The mesh data.</param>
        </member>
        <member name="M:Stride.Extensions.IndexExtensions.GenerateIndexBuffer(Stride.Rendering.MeshDraw,Stride.Graphics.VertexDeclaration)">
            <summary>
            Generates an index buffer for this mesh data.
            </summary>
            <param name="meshData">The mesh data.</param>
            <param name="declaration">The final vertex declaration</param>
        </member>
        <member name="M:Stride.Extensions.IndexExtensions.CompactIndexBuffer(Stride.Rendering.MeshDraw)">
            <summary>
            Compacts the index buffer from 32 bits to 16 bits per index, if possible.
            </summary>
            <param name="meshData">The mesh data.</param>
            <returns>Returns true if index buffer was actually compacted.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Stride.Extensions.IndexExtensions.GenerateIndexBufferAEN(Stride.Rendering.MeshDraw)">
            <summary>
            Generates the index buffer with dominant edge and vertex information.
            Each triangle gets its indices expanded to 12 control points, with 0 to 2 being original triangle,
            3 to 8 being dominant edges and 9 to 11 being dominant vertices.
            </summary>
            <param name="meshData">The mesh data.</param>
        </member>
        <member name="M:Stride.Extensions.IndexExtensions.GenerateIndexMapping(Stride.Graphics.VertexBufferBinding,Stride.Graphics.CommandList,System.String[])">
            <summary>
            Generates an index mapping with the specified vertex elements.
            If no vertex elements are specified, use the whole vertex.
            </summary>
            <param name="vertexBufferBinding">The vertex buffer binding.</param>
            <param name="usages">The vertex element usages to consider.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Extensions.IndexExtensions.ReverseWindingOrder(Stride.Rendering.MeshDraw)">
            <summary>
            Reverses the winding order of an index buffer. Assumes it is stored in <see cref="F:Stride.Graphics.PrimitiveType.TriangleList"/> format.
            Works on both 32 and 16 bit indices.
            </summary>
        </member>
        <member name="M:Stride.Extensions.IndexExtensions.GetReversedWindingOrder(Stride.Rendering.MeshDraw,System.Byte[]@)">
            <summary>
            Reverses the winding order of an index buffer. Assumes it is stored in <see cref="F:Stride.Graphics.PrimitiveType.TriangleList"/> format.
            Works on both 32 and 16 bit indices.
            </summary>
            <param name="outBytes">Output of the operation, the indices matching the reversed winding order</param>
        </member>
        <member name="M:Stride.Extensions.MergeExtensions.MergeDrawData(System.Collections.Generic.IList{Stride.Rendering.MeshDraw},System.Boolean)">
            <summary>
            Transform a vertex buffer positions, normals, tangents and bitangents using the given matrix.
            </summary>
            <param name="meshDrawDatas">The mesh draw datas.</param>
            <param name="can32BitIndex">A flag stating if 32 bit index buffers.</param>
        </member>
        <member name="M:Stride.Extensions.MergeExtensions.CreateDeclarationMergeGroup(System.Collections.Generic.IList{Stride.Rendering.MeshDraw})">
            <summary>
            Group meshes that can be merged because they have the same vertex declaration.
            </summary>
            <param name="meshDrawDatas">The list of meshes.</param>
            <returns>A list of grouped meshes.</returns>
        </member>
        <member name="M:Stride.Extensions.MergeExtensions.CreateOptimizedMergeGroups(System.Collections.Generic.IList{Stride.Rendering.MeshDraw},System.Boolean)">
            <summary>
            Create group of MeshDrawData that will be merged.
            </summary>
            <param name="meshDrawDatas">List of MehsDrawData to merge.</param>
            <param name="can32BitIndex">A flag stating if 32 bit index buffers are allowed.</param>
            <returns>A List of groups to merge internally.</returns>
        </member>
        <member name="M:Stride.Extensions.MergeExtensions.CreateShortIndexBuffer(System.Int32,System.Int32,System.Byte[],System.Boolean)">
            <summary>
            Create an short typed index buffer.
            </summary>
            <param name="offset">The offset to apply to the indices.</param>
            <param name="count">The number of indices.</param>
            <param name="baseIndices">A possible base index buffer</param>
            <param name="is32Bit">Stating if baseIndices is filled with 32 bits int</param>
            <returns>A new index buffer.</returns>
        </member>
        <member name="M:Stride.Extensions.MergeExtensions.CreateIntIndexBuffer(System.Int32,System.Int32,System.Byte[],System.Boolean)">
            <summary>
            Create an int typed index buffer.
            </summary>
            <param name="offset">The offset to apply to the indices.</param>
            <param name="count">The number of indices.</param>
            <param name="baseIndices">A possible base index buffer</param>
            <param name="is32Bits">Stating if baseIndices is filled with 32 bits int</param>
            <returns>A new index buffer.</returns>
        </member>
        <member name="M:Stride.Extensions.MergeExtensions.IsIndexed(System.Collections.Generic.IList{Stride.Rendering.MeshDraw})">
            <summary>
            Check if a index buffer will be needed for this merge group.
            </summary>
            <param name="meshDrawDatas">The list of MeshDrawdata to merge.</param>
            <returns>True if an index is needed, false otherwise.</returns>
        </member>
        <member name="M:Stride.Extensions.MergeExtensions.GroupDrawData(System.Collections.Generic.IList{Stride.Rendering.MeshDraw},System.Boolean)">
            <summary>
            Group the meshes.
            </summary>
            <param name="meshDrawDatas">The list of meshes to group.</param>
            <param name="can32BitIndex">A flag stating if 32 bit index buffers are allowed</param>
            <returns>The list of merged meshes.</returns>
        </member>
        <member name="M:Stride.Extensions.SimpleExtensions.IsSimple(Stride.Graphics.VertexBufferBinding)">
            <summary>
            Determines whether the specified vertex buffer binding data is simple.
            A vertex buffer binding data is simple if:
            * Offset is 0.
            * Stride is 0 (automatic), or equals to Declaration.VertexStride.
            * Buffer.Content.Length is equal to Declaration.VertexStride * Count
            </summary>
            <param name="vertexBufferBindingData">The vertex buffer binding data.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Extensions.SimpleExtensions.IsSimple(Stride.Graphics.IndexBufferBinding)">
            <summary>
            Determines whether the specified index buffer binding data is simple.
            A index buffer binding data is simple if:
            * Offset is 0.
            * Is32Bit is true.
            * Buffer.Content.Length is equal to sizeof(int) * Count.
            </summary>
            <param name="indexBufferBindingData">The index buffer binding data.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Extensions.SimpleExtensions.IsSimple(Stride.Rendering.MeshDraw)">
            <summary>
            Determines whether the specified mesh draw data is simple.
            A <see cref="!:MeshDrawData"/> is simple if:
            * It contains only one <see cref="!:VertexBufferBindingData"/>, which must be simple.
            * It contains either no <see cref="!:IndexBufferBindingData"/>, or a simple one.
            * StartLocation is 0.
            * DrawCount is IndexBuffer.Count if there is an index buffer, otherwise VertexBuffers[0].Count.
            </summary>
            <param name="meshDrawData">The mesh draw data.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Extensions.SplitExtensions.SplitMesh(Stride.Rendering.MeshDraw,System.Boolean)">
            <summary>
            Split the mesh if it has strictly more than 65535 vertices (max index = 65534) on a plaftorm that does not support 32 bits indices.
            </summary>
            <param name="meshDrawData">The mesh to analyze.</param>
            <param name="can32bitIndex">A flag stating if 32 bit indices are allowed.</param>
            <returns>A list of meshes.</returns>
        </member>
        <member name="M:Stride.Extensions.SplitExtensions.AddTriangle(Stride.Extensions.SplitExtensions.SplitInformation,System.UInt32,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Add the triangle to the split information.
            </summary>
            <param name="currentSplit">The current split information.</param>
            <param name="index0">The index of the first vertex.</param>
            <param name="index1">The index of the second vertex.</param>
            <param name="index2">The index of the third vertex.</param>
            <param name="triangleIndex">The original index of the triangle.</param>
        </member>
        <member name="M:Stride.Extensions.TNBExtensions.GenerateTangentBinormal(Stride.Rendering.MeshDraw)">
            <summary>
            Generates the tangents and binormals for this mesh data.
            Tangents and bitangents will be encoded as float4:
            float3 for tangent and an additional float for handedness (1 or -1),
            so that bitangent can be reconstructed.
            More info at http://www.terathon.com/code/tangent.html
            </summary>
            <param name="meshData">The mesh data.</param>
        </member>
        <member name="M:Stride.Extensions.TransformExtensions.TransformBuffer(Stride.Graphics.VertexBufferBinding,System.Byte[],Stride.Core.Mathematics.Matrix@)">
            <summary>
            Transform a vertex buffer positions, normals, tangents and bitangents using the given matrix.
            Using as source/destination data the provided bufferData byte array.
            </summary>
            <param name="vertexBufferBinding">The vertex container to transform</param>
            <param name="bufferData">The source/destination data array to transform</param>
            <param name="matrix">The matrix to use for the transform</param>
        </member>
        <member name="M:Stride.Extensions.TransformExtensions.TransformBuffer(Stride.Graphics.VertexBufferBinding,Stride.Core.Mathematics.Matrix@)">
            <summary>
            Transform a vertex buffer positions, normals, tangents and bitangents using the given matrix.
            </summary>
            <param name="vertexBufferBinding">The vertex container to transform</param>
            <param name="matrix">The matrix to use for the transform</param>
        </member>
        <member name="M:Stride.Extensions.VertexExtensions.GetVertexBufferData``1(Stride.Rendering.MeshDraw,System.String[])">
            <summary>
            Extracts a selection of vertices from a vertex buffer stored in this mesh data.
            </summary>
            <param name="meshData">The mesh data.</param>
            <param name="vertexElementToExtract">The declaration to extract (e.g. "POSITION0"...etc.) </param>
        </member>
        <member name="T:Stride.Rendering.BackToFrontSortMode">
            <summary>
            Sort elements according to the pattern: [RenderFeature Sort Key 8 bits] [Distance back to front 32 bits] [RenderObject states 24 bits]
            </summary>
        </member>
        <member name="T:Stride.Rendering.CameraCullingMode">
            <summary>
            Culling mode of a <see cref="T:Stride.Rendering.RenderView"/>.
            </summary>
        </member>
        <member name="F:Stride.Rendering.CameraCullingMode.None">
            <summary>
            No culling is applied to meshes.
            </summary>
            <userdoc>No specific culling</userdoc>
        </member>
        <member name="F:Stride.Rendering.CameraCullingMode.Frustum">
            <summary>
            Meshes outside of the camera's view frustum will be culled.
            </summary>
            <userdoc>Skip all entities out of the camera frustum.</userdoc>
        </member>
        <member name="T:Stride.Rendering.ClearRendererFlags">
            <summary>
            Flags used to clear a render frame.
            </summary>
        </member>
        <member name="F:Stride.Rendering.ClearRendererFlags.ColorAndDepth">
            <summary>
            Clears both the Color and DepthStencil buffer.
            </summary>
            <userdoc>Clears both the Color and DepthStencil buffers</userdoc>
        </member>
        <member name="F:Stride.Rendering.ClearRendererFlags.ColorOnly">
            <summary>
            Clears only the Color buffer.
            </summary>
            <userdoc>Clears only the Color buffer.</userdoc>
        </member>
        <member name="F:Stride.Rendering.ClearRendererFlags.DepthOnly">
            <summary>
            Clears only the depth.
            </summary>
            <userdoc>Clears only the DepthStencil buffer</userdoc>
        </member>
        <member name="T:Stride.Rendering.Colors.ColorRgbProvider">
            <summary>
            A light color described by a rgb color
            </summary>
        </member>
        <member name="M:Stride.Rendering.Colors.ColorRgbProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Colors.ColorRgbProvider"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Colors.ColorRgbProvider.#ctor(Stride.Core.Mathematics.Color3)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Colors.ColorRgbProvider"/> class.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Stride.Rendering.Colors.ColorRgbProvider.#ctor(Stride.Core.Mathematics.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Colors.ColorRgbProvider"/> class.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="P:Stride.Rendering.Colors.ColorRgbProvider.Value">
            <summary>
            Gets or sets the light color in rgb.
            </summary>
            <value>The color.</value>
        </member>
        <member name="T:Stride.Rendering.Colors.IColorProvider">
            <summary>
            Defines the interface for describing the color of a light.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Colors.IColorProvider.ComputeColor">
            <summary>
            Computes the color of the light (sRgb space).
            </summary>
            <returns>Color3.</returns>
        </member>
        <member name="T:Stride.Rendering.Compositing.ClearRenderer">
            <summary>
            A renderer to clear a render frame.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Compositing.ClearRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Compositing.ClearRenderer"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Compositing.ClearRenderer.ClearFlags">
            <summary>
            Gets or sets the clear flags.
            </summary>
            <value>The clear flags.</value>
            <userdoc>Flag indicating which buffers to clear.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Compositing.ClearRenderer.Color">
            <summary>
            Gets or sets the clear color.
            </summary>
            <value>The clear color.</value>
            <userdoc>The color value to use when clearing the render targets</userdoc>
        </member>
        <member name="P:Stride.Rendering.Compositing.ClearRenderer.Depth">
            <summary>
            Gets or sets the depth value used to clear the depth stencil buffer.
            </summary>
            <value>
            The depth value used to clear the depth stencil buffer.
            </value>
            <userdoc>The depth value to use when clearing the depth buffer</userdoc>
        </member>
        <member name="P:Stride.Rendering.Compositing.ClearRenderer.Stencil">
            <summary>
            Gets or sets the stencil value used to clear the depth stencil buffer.
            </summary>
            <value>
            The stencil value used to clear the depth stencil buffer.
            </value>
            <userdoc>The stencil value to use when clearing the stencil buffer</userdoc>
        </member>
        <member name="T:Stride.Rendering.Compositing.DelegateSceneRenderer">
            <summary>
            A renderer which can provide <see cref="M:Stride.Rendering.RendererBase.Draw(Stride.Rendering.RenderDrawContext)"/> implementation with a delegate.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Compositing.ForceAspectRatioSceneRenderer.FixedAspectRatio">
            <summary>
            Gets or sets the aspect ratio.
            </summary>
            <value>
            The aspect ratio.
            </value>
            <userdoc>The aspect ratio used if Add Letterbox/Pillarbox is checked.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Compositing.ForceAspectRatioSceneRenderer.ForceAspectRatio">
            <summary>
            Gets or sets a value wether to edit the Viewport to force the aspect ratio and add letterboxes or pillarboxes where needed
            </summary>
            <userdoc>If checked and the viewport will be modified to fit the aspect ratio of Default Back Buffer Width and Default Back Buffer Height and letterboxes/pillarboxes might be added.</userdoc>
        </member>
        <member name="M:Stride.Rendering.Compositing.ForceAspectRatioSceneRenderer.CollectCore(Stride.Rendering.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.Compositing.ForceAspectRatioSceneRenderer.DrawCore(Stride.Rendering.RenderContext,Stride.Rendering.RenderDrawContext)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Rendering.Compositing.IRenderTargetSemantic">
            <summary>
            The usage of a render target
            </summary>
        </member>
        <member name="P:Stride.Rendering.Compositing.IRenderTargetSemantic.ShaderClass">
            <summary>
            The shader class deriving from ComputeColor that is used as a composition to output to the render target
            </summary>
        </member>
        <member name="T:Stride.Rendering.Compositing.ISceneGraphicsCompositor">
            <summary>
            Defines the common interface for a graphics composer responsible to compose the scene to a final render target.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Compositing.MSAAResolver">
            <summary>
            A renderer to resolve MSAA textures.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Compositing.MSAAResolver.FilterTypes">
            <summary>
            MSAA resolve shader modes.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Compositing.MSAAResolver.FilterTypes.Default">
            <summary>
            Default filter
            </summary>
        </member>
        <member name="F:Stride.Rendering.Compositing.MSAAResolver.FilterTypes.Box">
            <summary>
            Box filter.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Compositing.MSAAResolver.FilterTypes.Triangle">
            <summary>
            Triangle filter.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Compositing.MSAAResolver.FilterTypes.Gaussian">
            <summary>
            Gaussian filter.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Compositing.MSAAResolver.FilterTypes.BlackmanHarris">
            <summary>
            Blackman Harris filter.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Compositing.MSAAResolver.FilterTypes.SmoothStep">
            <summary>
            Smoothstep function filter.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Compositing.MSAAResolver.FilterTypes.BSpline">
            <summary>
            B-Spline filter.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Compositing.MSAAResolver.FilterTypes.CatmullRom">
            <summary>
            Catmull Rom filter.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Compositing.MSAAResolver.FilterTypes.Mitchell">
            <summary>
            Mitchell filter.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Compositing.MSAAResolver.FilterTypes.Sinc">
            <summary>
            Sinus function filter.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Compositing.MSAAResolver.FilterType">
            <summary>
            MSAA resolve filter type.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Compositing.MSAAResolver.FilterRadius">
            <summary>
            MSAA resolve filter radius value.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Compositing.MSAAResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Compositing.MSAAResolver"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Compositing.MSAAResolver.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Compositing.MSAAResolver"/> class.
            </summary>
            <param name="msaaResolverShaderName">Name of the MSAA resolve pass shader.</param>
            <param name="msaaDepthResolverShaderName">Name of the MSAA depth resolve pass shader.</param>
        </member>
        <member name="M:Stride.Rendering.Compositing.MSAAResolver.Resolve(Stride.Rendering.RenderDrawContext,Stride.Graphics.Texture,Stride.Graphics.Texture)">
            <summary>
            Resolves the specified input multisampled texture.
            </summary>
            <param name="drawContext">The draw context.</param>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
        </member>
        <member name="T:Stride.Rendering.Compositing.RenderOutputValidator">
            <summary>
            Represents how we setup the graphics pipeline output targets.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Compositing.SceneRendererBase">
            <summary>
            Describes the code part of a <see cref="!:GraphicsCompositor"/>.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Compositing.SceneRendererBase.Id">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.Compositing.SceneRendererBase.Collect(Stride.Rendering.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.Compositing.SceneRendererBase.Draw(Stride.Rendering.RenderDrawContext)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.Compositing.SceneRendererBase.CollectCore(Stride.Rendering.RenderContext)">
            <summary>
            Main collect method.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Stride.Rendering.Compositing.SceneRendererBase.DrawCore(Stride.Rendering.RenderContext,Stride.Rendering.RenderDrawContext)">
            <summary>
            Main drawing method for this renderer that must be implemented. 
            </summary>
            <param name="context"></param>
            <param name="drawContext"></param>
        </member>
        <member name="T:Stride.Rendering.Compositing.SceneRendererCollection">
            <summary>
            A collection of <see cref="T:Stride.Rendering.Compositing.ISceneRenderer"/>.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Compositing.SingleStageRenderer">
            <summary>
            Renders a single stage with the current <see cref="T:Stride.Rendering.RenderView"/>.
            </summary>
        </member>
        <member name="T:Stride.Rendering.ComputeEffect.ComputeEffectShader">
            <summary>
            A compute effect based directly on a single compute shader.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ComputeEffect.ComputeEffectShader.EffectInstance">
            <summary>
            The current effect instance.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ComputeEffect.ComputeEffectShader.ThreadGroupCounts">
            <summary>
            Gets or sets the number of group counts the shader should be dispatched to.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ComputeEffect.ComputeEffectShader.ThreadNumbers">
            <summary>
            Gets or sets the number of threads desired by thread group.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ComputeEffect.ComputeEffectShader.ShaderSourceName">
            <summary>
            Gets or sets the name of the input compute shader file (.sdsl)
            </summary>
        </member>
        <member name="M:Stride.Rendering.ComputeEffect.ComputeEffectShader.SetDefaultParameters">
            <summary>
            Sets the default parameters (called at constructor time and if <see cref="M:Stride.Rendering.DrawEffect.Reset"/> is called)
            </summary>
        </member>
        <member name="M:Stride.Rendering.ComputeEffect.ComputeEffectShader.UpdateParameters">
            <summary>
            Updates the effect <see cref="!:ComputeEffectShader.Parameters" /> from properties defined in this instance. See remarks.
            </summary>
        </member>
        <member name="T:Stride.Rendering.ComputeEffect.GGXPrefiltering.RadiancePrefilteringGGX">
            <summary>
            A class for radiance pre-filtering using the GGX distribution function.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ComputeEffect.GGXPrefiltering.RadiancePrefilteringGGX.DoNotFilterHighestLevel">
            <summary>
            Gets or sets the boolean indicating if the highest level of mipmaps should be let as-is or pre-filtered.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ComputeEffect.GGXPrefiltering.RadiancePrefilteringGGX.RadianceMap">
            <summary>
            Gets or sets the input radiance map to pre-filter.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ComputeEffect.GGXPrefiltering.RadiancePrefilteringGGX.PrefilteredRadiance">
            <summary>
            Gets or sets the texture to use to store the result of the pre-filtering.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ComputeEffect.GGXPrefiltering.RadiancePrefilteringGGX.MipmapGenerationCount">
            <summary>
            Gets or sets the number of pre-filtered mipmap to generate.
            </summary>
        </member>
        <member name="M:Stride.Rendering.ComputeEffect.GGXPrefiltering.RadiancePrefilteringGGX.#ctor(Stride.Rendering.RenderContext)">
            <summary>
            Create a new instance of the class.
            </summary>
            <param name="context">the context</param>
        </member>
        <member name="P:Stride.Rendering.ComputeEffect.GGXPrefiltering.RadiancePrefilteringGGX.SamplingsCount">
            <summary>
            Gets or sets the number of sampling used during the importance sampling
            </summary>
            <remarks>Should be a power of 2 and maximum value is 1024</remarks>
        </member>
        <member name="T:Stride.Rendering.ComputeEffect.GGXPrefiltering.RadiancePrefilteringGGXNoCompute">
            <summary>
            A class for radiance pre-filtering using the GGX distribution function.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ComputeEffect.GGXPrefiltering.RadiancePrefilteringGGXNoCompute.DoNotFilterHighestLevel">
            <summary>
            Gets or sets the boolean indicating if the highest level of mipmaps should be let as-is or pre-filtered.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ComputeEffect.GGXPrefiltering.RadiancePrefilteringGGXNoCompute.RadianceMap">
            <summary>
            Gets or sets the input radiance map to pre-filter.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ComputeEffect.GGXPrefiltering.RadiancePrefilteringGGXNoCompute.PrefilteredRadiance">
            <summary>
            Gets or sets the texture to use to store the result of the pre-filtering.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ComputeEffect.GGXPrefiltering.RadiancePrefilteringGGXNoCompute.MipmapGenerationCount">
            <summary>
            Gets or sets the number of pre-filtered mipmap to generate.
            </summary>
        </member>
        <member name="M:Stride.Rendering.ComputeEffect.GGXPrefiltering.RadiancePrefilteringGGXNoCompute.#ctor(Stride.Rendering.RenderContext)">
            <summary>
            Create a new instance of the class.
            </summary>
            <param name="context">the context</param>
        </member>
        <member name="P:Stride.Rendering.ComputeEffect.GGXPrefiltering.RadiancePrefilteringGGXNoCompute.SamplingsCount">
            <summary>
            Gets or sets the number of sampling used during the importance sampling
            </summary>
            <remarks>Should be a power of 2 and maximum value is 1024</remarks>
        </member>
        <member name="T:Stride.Rendering.ComputeEffect.LambertianPrefiltering.LambertianPrefilteringSH">
            <summary>
            Performs Lambertian pre-filtering in the form of Spherical Harmonics.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ComputeEffect.LambertianPrefiltering.LambertianPrefilteringSH.HarmonicOrder">
            <summary>
            Gets or sets the level of precision desired when calculating the spherical harmonics.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ComputeEffect.LambertianPrefiltering.LambertianPrefilteringSH.PrefilteredLambertianSH">
            <summary>
            Gets the computed spherical harmonics corresponding to the pre-filtered lambertian.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ComputeEffect.LambertianPrefiltering.LambertianPrefilteringSH.RadianceMap">
            <summary>
            Gets or sets the input radiance map to pre-filter.
            </summary>
        </member>
        <member name="T:Stride.Rendering.ComputeEffect.LambertianPrefiltering.LambertianPrefilteringSHNoCompute">
            <summary>
            Performs Lambertian pre-filtering in the form of Spherical Harmonics.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ComputeEffect.LambertianPrefiltering.LambertianPrefilteringSHNoCompute.HarmonicOrder">
            <summary>
            Gets or sets the level of precision desired when calculating the spherical harmonics.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ComputeEffect.LambertianPrefiltering.LambertianPrefilteringSHNoCompute.PrefilteredLambertianSH">
            <summary>
            Gets the computed spherical harmonics corresponding to the pre-filtered lambertian.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ComputeEffect.LambertianPrefiltering.LambertianPrefilteringSHNoCompute.RadianceMap">
            <summary>
            Gets or sets the input radiance map to pre-filter.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.AmbientOcclusion">
            <summary>
            Applies an ambient occlusion effect to a scene. Ambient occlusion is a technique which fakes occlusion for objects close to other opaque objects.
            It takes as input a color-buffer where the scene was rendered, with its associated depth-buffer.
            You also need to provide the camera configuration you used when rendering the scene.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.AmbientOcclusion.NumberOfSamples">
            <userdoc>
            The number of pixels sampled to determine how occluded a point is. Higher values reduce noise, but affect performance.
            Use with "Blur count to find a balance between results and performance.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.AmbientOcclusion.ParamProjScale">
            <userdoc>
            Scales the sample radius. In most cases, 1 (no scaling) produces the most accurate result.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.AmbientOcclusion.ParamIntensity">
            <userdoc>
            The strength of the darkening effect in occluded areas
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.AmbientOcclusion.ParamBias">
            <userdoc>
            The angle at which Stride considers an area of geometry an occluder. At high values, only narrow joins and crevices are considered occluders.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.AmbientOcclusion.ParamRadius">
            <userdoc>
            Use with "projection scale" to control the radius of the occlusion effect
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.AmbientOcclusion.NumberOfBounces">
            <userdoc>
            The number of times the ambient occlusion image is blurred. Higher numbers reduce noise, but can produce artifacts.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.AmbientOcclusion.BlurScale">
            <userdoc>
            The blur radius in pixels
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.AmbientOcclusion.EdgeSharpness">
            <userdoc>
            How much the blur respects the depth differences of occluded areas. Lower numbers create more blur, but might blur unwanted areas (ie beyond occluded areas).
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.AmbientOcclusion.TempSize">
            <userdoc>
            The resolution the ambient occlusion is calculated at. The result is upscaled to the game resolution.
            Larger sizes produce better results but use more memory and affect performance.
            </userdoc>
        </member>
        <member name="M:Stride.Rendering.Images.AmbientOcclusion.SetColorDepthInput(Stride.Graphics.Texture,Stride.Graphics.Texture)">
            <summary>
            Provides a color buffer and a depth buffer to apply the depth-of-field to.
            </summary>
            <param name="colorBuffer">A color buffer to process.</param>
            <param name="depthBuffer">The depth buffer corresponding to the color buffer provided.</param>
        </member>
        <member name="T:Stride.Rendering.Images.AmbientOcclusionBlurKeys">
            <summary>
            Keys used by <see cref="!:AmbientOcclusionBlur"/> and AmbientOcclusionBlurEffect sdfx
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.FXAAEffect">
            <summary>
            A FXAA anti-aliasing pass.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.FXAAEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.FXAAEffect"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.FXAAEffect.Dither">
            <summary>
            The dithering type used (directly related to rendering style).
            </summary>
            <userdoc>The dithering type used (directly related to rendering style)</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.FXAAEffect.Quality">
            <summary>
            The quality of the FXAA (directly related to performance). From 0 to 5 with <see cref="F:Stride.Rendering.Images.FXAAEffect.DitherType.Medium"/>, from 0 to 9 with <see cref="F:Stride.Rendering.Images.FXAAEffect.DitherType.Low"/> and unavailable (should be 9) with <see cref="F:Stride.Rendering.Images.FXAAEffect.DitherType.None"/>.
            </summary>
            <userdoc>The quality of the FXAA (directly related to performance). From 0 to 5 with Medium dither, from 0 to 9 with Low dither and unavailable (should be 9) with no dither.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.FXAAEffect.InputLuminanceInAlpha">
            <summary>
            Gets or sets a value indicating whether the luminance will be retrieved from the alpha channel of the input color. Otherwise, the green component of the input color is used as a luminance.
            </summary>
            <value><c>true</c> the luminance will be retrieved from the alpha channel of the input color. Otherwise, the green component of the input color is used as a luminance.</value>
            <userdoc>Retrieve the luminance from the alpha channel of the input color. Otherwise, use the green component of the input color as an approximation of the luminance.</userdoc>
        </member>
        <member name="M:Stride.Rendering.Images.FXAAEffect.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.FXAAEffect"/> class.
            </summary>
            <param name="antialiasShaderName">Name of the antialias shader.</param>
            <exception cref="T:System.ArgumentNullException">antialiasShaderName</exception>
        </member>
        <member name="T:Stride.Rendering.Images.FXAAEffect.DitherType">
            <summary>
            The dithering level used by FXAA.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.IScreenSpaceAntiAliasingEffect">
            <summary>
            Common interface for a screen-space anti-aliasing effect
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.TemporalAntiAliasEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.TemporalAntiAliasEffect"/> class.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.Afterimage">
            <summary>
            Afterimage simulates the persistence of the bright areas on the retina. 
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.Afterimage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.Afterimage"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.Afterimage.FadeOutSpeed">
            <summary>
            How fast the persistent image fades out. 
            </summary>
            <userdoc>The factor specifying how much the persistence decreases at each frame (1 means infinite persistence, while 0 means no persistence at all)</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.Afterimage.Sensitivity">
            <summary>
            How sensitive we are to the bright light.
            </summary>
            <userdoc>The sensitiveness of the retina to bright light. This affects the time needed to produce persistence effect.</userdoc>
        </member>
        <member name="M:Stride.Rendering.Images.Bloom.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.Bloom"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.Bloom.Radius">
            <summary>
            Radius of the bloom.
            </summary>
            <userdoc>The range of the bloom effect around bright regions. Note that high values can affect performance</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.Bloom.Amount">
            <summary>
            Gets or sets the amount.
            </summary>
            <value>The amount.</value>
            <userdoc>The strength of the bloom effect</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.Bloom.SigmaRatio">
            <summary>
            Gets or sets the sigma ratio.
            </summary>
            <value>The ratio</value>
            <userdoc>The standard deviation used for the blur of the effect. This impact the fall-off of the bloom.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.Bloom.Distortion">
            <summary>
            Vertical or horizontal distortion to apply.
            (1, 2) means the bloom will be stretched twice longer horizontally than vertically.
            </summary>
            <userdoc>Apply vertical of horizontal distortion on the effect</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.Bloom.Afterimage">
            <summary>
            Gets the afterimage effect/>
            </summary>
            <userdoc>Simulate persistence effects of the light points (trails) on the next frames</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.Bloom.StableConvolution">
            <summary>
            Use the "stable bloom" rendering path.
            </summary>
            <userdoc>Reverse FXAA and bloom and use a richer convolution kernel during blurring, reducing temporal shimmering</userdoc>
        </member>
        <member name="T:Stride.Rendering.Images.BrightFilter">
            <summary>
            A bright pass filter.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.BrightFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.BrightFilter"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.BrightFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.BrightFilter"/> class.
            </summary>
            <param name="brightPassShaderName">Name of the bright pass shader.</param>
        </member>
        <member name="P:Stride.Rendering.Images.BrightFilter.Threshold">
            <summary>
            Gets or sets the threshold relative to the <see cref="!:WhitePoint"/>.
            </summary>
            <value>The threshold.</value>
            <userdoc>The value of the intensity threshold used to identify bright areas</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.BrightFilter.Steepness">
            <summary>
            Gets or sets the smoothstep steepness for bright pass filtering
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.BrightFilter.Color">
            <summary>
            Modulate the bloom by a certain color.
            </summary>
            <value>The color.</value>
            <userdoc>Modulates bright areas with the provided color. It affects the color of sub-sequent bloom, light-streak effects.</userdoc>
        </member>
        <member name="T:Stride.Rendering.Images.ColorCombiner">
            <summary>
            A texture combiner allows to mix up to 10 textures with different weights.
            </summary>
            <remarks> This effects takes from 1 to 10 textures in input and combine them to a single output.
            Before using this class, it is recommended to clear the inputs by using <see cref="M:Stride.Rendering.Images.ImageEffect.Reset"/>.
            </remarks>
        </member>
        <member name="M:Stride.Rendering.Images.ColorCombiner.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.ColorCombiner"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="colorCombinerShaderName">Name of the color combiner shader.</param>
        </member>
        <member name="P:Stride.Rendering.Images.ColorCombiner.Factors">
            <summary>
            Gets the factors used to multiply the colors.
            </summary>
            <value>The factors.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ColorCombiner.ModulateRGB">
            <summary>
            Gets the RGB modulation of each texture.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.ColorTransform">
            <summary>
            Base class for a <see cref="T:Stride.Rendering.Images.ColorTransformBase"/> to be used in a <see cref="T:Stride.Rendering.Images.ColorTransformGroup"/>.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.ColorTransformBase">
            <summary>
            Base class for a <see cref="T:Stride.Rendering.Images.ColorTransformBase"/> used by <see cref="T:Stride.Rendering.Images.ColorTransform"/> and <see cref="T:Stride.Rendering.Images.ToneMapOperator"/>.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.ColorTransformBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.ColorTransformBase" /> class.
            </summary>
            <param name="colorTransformShader">Name of the shader.</param>
            <exception cref="T:System.ArgumentNullException">shaderName</exception>
        </member>
        <member name="P:Stride.Rendering.Images.ColorTransformBase.Group">
            <summary>
            Gets the group this <see cref="T:Stride.Rendering.Images.ColorTransformBase" /> is associated with.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.ColorTransformBase.Shader">
            <summary>
            Gets or sets the name of the shader.
            </summary>
            <value>The name of the shader.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ColorTransformBase.GenericArguments">
            <summary>
            Gets or sets the generic arguments used by the shader. Default is null.
            </summary>
            <value>The generic arguments used by the shader. Default is null</value>
        </member>
        <member name="P:Stride.Rendering.Images.ColorTransformBase.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ColorTransformBase.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Stride.Rendering.Images.ColorTransformBase"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Stride.Rendering.Images.ColorTransformBase.PrepareParameters(Stride.Rendering.Images.ColorTransformContext,Stride.Rendering.ParameterCollection,System.String)">
            <summary>
            Prepare copy operations for parameters.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.ColorTransformBase.UpdateParameters(Stride.Rendering.Images.ColorTransformContext)">
            <summary>
            Updates the parameters for this transformation.
            </summary>
            <param name="context">The context.</param>
            <remarks>This method is called just before rendering the ColorTransformGroup that is holding this ColorTransformBase</remarks>
        </member>
        <member name="T:Stride.Rendering.Images.ColorTransformCollection">
            <summary>
            A collection of <see cref="T:Stride.Rendering.Images.ColorTransformBase"/>
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.ColorTransformGroup">
            <summary>
            An effect combining a list of <see cref="T:Stride.Rendering.Images.ColorTransform"/> sub-effects.
            </summary>
            <remarks>
            This effect and all <see cref="P:Stride.Rendering.Images.ColorTransformGroup.Transforms"/> are collected and compiled into a single shader.
            </remarks>
        </member>
        <member name="M:Stride.Rendering.Images.ColorTransformGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.ColorTransformGroup"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.ColorTransformGroup.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.ColorTransformGroup"/> class.
            </summary>
            <param name="colorTransformGroupEffect">The color transform group effect.</param>
        </member>
        <member name="M:Stride.Rendering.Images.ColorTransformGroup.InitializeCore">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Rendering.Images.ColorTransformGroup.PreTransforms">
            <summary>
            Gets the pre transforms applied before the standard <see cref="P:Stride.Rendering.Images.ColorTransformGroup.Transforms"/>.
            </summary>
            <value>The pre transforms.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ColorTransformGroup.Transforms">
            <summary>
            Gets the color transforms.
            </summary>
            <value>The transforms.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ColorTransformGroup.PostTransforms">
            <summary>
            Gets the post transforms applied after the standard <see cref="P:Stride.Rendering.Images.ColorTransformGroup.Transforms"/>.
            </summary>
            <value>The post transforms.</value>
        </member>
        <member name="T:Stride.Rendering.Images.ColorTransformGroup.ParameterCompositeKey">
            <summary>
            An internal key to cache {Key,TransformIndex} => CompositeKey
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.ColorTransformGroup.ParameterCompositeKey.#ctor(Stride.Rendering.ParameterKey,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.ColorTransformGroup.ParameterCompositeKey"/> struct.
            </summary>
            <param name="key">The key.</param>
            <param name="transformIndex">Index of the transform.</param>
        </member>
        <member name="T:Stride.Rendering.Images.ColorTransformGroupKeys">
            <summary>
            Keys used by <see cref="T:Stride.Rendering.Images.ToneMap"/> and ToneMapEffect sdfx
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.ColorTransformKeys">
            <summary>
            Parameter keys used by <see cref="T:Stride.Rendering.Images.ColorTransformBase"/>
            </summary>
        </member>
        <member name="F:Stride.Rendering.Images.ColorTransformKeys.Enabled">
            <summary>
            A boolean indicating wheter a <see cref="T:Stride.Rendering.Images.ColorTransformBase"/> is active or not.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Images.ColorTransformKeys.Shader">
            <summary>
            The shader used by <see cref="T:Stride.Rendering.Images.ColorTransformBase"/>.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Images.ColorTransformKeys.GenericArguments">
            <summary>
            The shader used by <see cref="T:Stride.Rendering.Images.ColorTransformBase"/>.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.LuminanceToChannelTransform">
            <summary>
            A color transform to output the luminance to a specific channel.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.LuminanceToChannelTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.LuminanceToChannelTransform"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.LuminanceToChannelTransform.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.LuminanceToChannelTransform" /> class.
            </summary>
            <param name="colorTransformShader">Name of the shader.</param>
        </member>
        <member name="P:Stride.Rendering.Images.LuminanceToChannelTransform.ColorChannel">
            <summary>
            Gets or sets the color channel to output the luminance. Default is alpha.
            </summary>
            <value>The color channel.</value>
        </member>
        <member name="M:Stride.Rendering.Images.FilmGrain.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.FilmGrain"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.FilmGrain.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.FilmGrain"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.FilmGrain.Amount">
            <summary>
            Amount of grain.
            </summary>
            <userdoc>The strength of the effect</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.FilmGrain.GrainSize">
            <summary>
            Grain size.
            </summary>
            <userdoc>The size of the grains (in pixels)</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.FilmGrain.Animate">
            <summary>
            Animates the film grain.
            </summary>
            <userdoc>When checked, the procedural pattern changes at each frame.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.FilmGrain.LuminanceFactor">
            <summary>
            How the luminance influences the amount of grain.
            </summary>
            <userdoc>Specifies how strongly the original pixel luminance is affected by the grain pattern.</userdoc>
        </member>
        <member name="T:Stride.Rendering.Images.ToneMap">
            <summary>
            A tonemap effect.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.ToneMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.ToneMap"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.ToneMap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.ToneMap" /> class.
            </summary>
            <param name="toneMapEffect">The tone map shader effect (default is <c>ToneMapEffect)</c>.</param>
            <exception cref="T:System.ArgumentNullException">toneMapEffect</exception>
        </member>
        <member name="P:Stride.Rendering.Images.ToneMap.Operator">
            <summary>
            Gets or sets the operator used for tonemap.
            </summary>
            <value>The operator.</value>
            <userdoc>The method used to perform the HDR to LDR tone mapping</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.ToneMap.AutoKeyValue">
            <summary>
            Gets or sets a value indicating whether the tonemap key is automatically calculated based on common perceptive behavior.
            </summary>
            <value><c>true</c> if [automatic key value]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ToneMap.KeyValue">
            <summary>
            Gets or sets the key value.
            </summary>
            <value>The key value.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ToneMap.AutoExposure">
            <summary>
            Gets or sets a value indicating whether the tonemap is calculating the exposure based on the average luminance of the image else <see cref="P:Stride.Rendering.Images.ToneMap.Exposure"/> is used.
            </summary>
            <value><c>true</c> if the tonemap is calculating the exposure based on the average luminance of the image; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ToneMap.Exposure">
            <summary>
            Gets or sets the manual exposure value if <see cref="P:Stride.Rendering.Images.ToneMap.AutoExposure"/> is <c>false</c>.
            </summary>
            <value>The exposure value.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ToneMap.TemporalAdaptation">
            <summary>
            Gets or sets a value indicating whether to update the luminance progressively based on the current time.
            </summary>
            <value><c>true</c> the luminance is updated progressively based on the current time; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ToneMap.AdaptationRate">
            <summary>
            Gets or sets the adaptation rate.
            </summary>
            <value>The adaptation rate.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ToneMap.UseLocalLuminance">
            <summary>
            Indicates if the luminance in the neighborhood of a pixel is used in addition to the overall luminance of the input.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.ToneMap.LuminanceLocalFactor">
            <summary>
            Gets or sets the luminance local factor. 0.0: No local influence, only global influence, 1.0: No global influence, Only local influence.
            </summary>
            <value>The luminance local factor.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ToneMap.Contrast">
            <summary>
            Gets or sets the contrast.
            </summary>
            <value>The contrast.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ToneMap.Brightness">
            <summary>
            Gets or sets the brightness.
            </summary>
            <value>The brightness.</value>
        </member>
        <member name="T:Stride.Rendering.Images.ToneMapCommonOperator">
            <summary>
            Base operator shared by Reinhard, Drago, Exponential and Logarithmic.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.ToneMapCommonOperator.LuminanceSaturation">
            <summary>
            Gets or sets the luminance saturation.
            </summary>
            <value>The luminance saturation.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ToneMapCommonOperator.WhiteLevel">
            <summary>
            Gets or sets the white level.
            </summary>
            <value>The white level.</value>
        </member>
        <member name="T:Stride.Rendering.Images.ToneMapDragoOperator">
            <summary>
            The tonemap Drago operator.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.ToneMapDragoOperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.ToneMapDragoOperator"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.ToneMapDragoOperator.Bias">
            <summary>
            Gets or sets the bias.
            </summary>
            <value>The bias.</value>
        </member>
        <member name="T:Stride.Rendering.Images.ToneMapExponentialOperator">
            <summary>
            The tonemap exponential operator.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.ToneMapExponentialOperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.ToneMapExponentialOperator"/> class.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.ToneMapHejl2Operator">
            <summary>
            The tonemap operator by Jim Hejl version 2 that does not include the gamma correction and has a whitepoint parameter.
            </summary>
            <remarks>
            https://twitter.com/jimhejl/status/633777619998130176
            </remarks>
        </member>
        <member name="M:Stride.Rendering.Images.ToneMapHejl2Operator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.ToneMapHejlDawsonOperator"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.ToneMapHejl2Operator.WhitePoint">
            <summary>
            Gets or sets the white point.
            </summary>
            <value>The white point.</value>
        </member>
        <member name="T:Stride.Rendering.Images.ToneMapHejlDawsonOperator">
            <summary>
            The tonemap operator by Jim Hejl and Richard Burgess-Dawson.
            </summary>
            <remarks>http://filmicgames.com/archives/75</remarks>
        </member>
        <member name="M:Stride.Rendering.Images.ToneMapHejlDawsonOperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.ToneMapHejlDawsonOperator"/> class.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.ToneMapLogarithmicOperator">
            <summary>
            The tonemap logarithmic operator.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.ToneMapLogarithmicOperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.ToneMapLogarithmicOperator"/> class.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.ToneMapMikeDayOperator">
            <summary>
            The tonemap operator by Mike Day, Insomniac Games.
            </summary>
            <remarks>
            https://d3cw3dd2w32x2b.cloudfront.net/wp-content/uploads/2012/09/an-efficient-and-user-friendly-tone-mapping-operator.pdf
            </remarks>
        </member>
        <member name="M:Stride.Rendering.Images.ToneMapMikeDayOperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.ToneMapMikeDayOperator"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.ToneMapMikeDayOperator.BlackPoint">
            <summary>
            Gets or sets the black point.
            </summary>
            <value>The black point.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ToneMapMikeDayOperator.CrossOver">
            <summary>
            Gets or sets the cross over.
            </summary>
            <value>The cross over.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ToneMapMikeDayOperator.WhitePoint">
            <summary>
            Gets or sets the white point.
            </summary>
            <value>The white point.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ToneMapMikeDayOperator.Toe">
            <summary>
            Gets or sets the toe.
            </summary>
            <value>The toe.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ToneMapMikeDayOperator.Shoulder">
            <summary>
            Gets or sets the shoulder.
            </summary>
            <value>The shoulder.</value>
        </member>
        <member name="T:Stride.Rendering.Images.ToneMapOperator">
            <summary>
            Base class for a tonemap operator.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.ToneMapOperator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.ToneMapOperator"/> class.
            </summary>
            <param name="effectName">Name of the effect.</param>
            <exception cref="T:System.ArgumentNullException">effectName</exception>
        </member>
        <member name="T:Stride.Rendering.Images.ToneMapReinhardOperator">
            <summary>
            The tonemap Reinhard operator.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.ToneMapReinhardOperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.ToneMapReinhardOperator"/> class.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.ToneMapU2FilmicOperator">
            <summary>
            The U2Filmic operator.
            </summary>
            <remarks>
            http://filmicgames.com/archives/75
            </remarks>
        </member>
        <member name="M:Stride.Rendering.Images.ToneMapU2FilmicOperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.ToneMapU2FilmicOperator"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.ToneMapU2FilmicOperator.ShoulderStrength">
            <summary>
            Gets or sets the shoulder strength.
            </summary>
            <value>The shoulder strength.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ToneMapU2FilmicOperator.LinearStrength">
            <summary>
            Gets or sets the linear strength.
            </summary>
            <value>The linear strength.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ToneMapU2FilmicOperator.LinearAngle">
            <summary>
            Gets or sets the linear angle.
            </summary>
            <value>The linear angle.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ToneMapU2FilmicOperator.ToeStrength">
            <summary>
            Gets or sets the toe strength.
            </summary>
            <value>The toe strength.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ToneMapU2FilmicOperator.ToeNumerator">
            <summary>
            Gets or sets the toe numerator.
            </summary>
            <value>The toe numerator.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ToneMapU2FilmicOperator.ToeDenominator">
            <summary>
            Gets or sets the toe denominator.
            </summary>
            <value>The toe denominator.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ToneMapU2FilmicOperator.LinearWhite">
            <summary>
            Gets or sets the linear white.
            </summary>
            <value>The linear white.</value>
        </member>
        <member name="M:Stride.Rendering.Images.Vignetting.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.Vignetting"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.Vignetting.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.Vignetting"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.Vignetting.Amount">
            <summary>
            Amount of vignetting (alpha of the halo).
            </summary>
            <userdoc>The strength of the effect</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.Vignetting.Radius">
            <summary>
            Radius from the center, from which vignetting begins. 
            </summary>
            <userdoc>The radius of the vignette from the center of the screen. This value is relative to the size of the screen (1 => half screen, 0 => null radius).</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.Vignetting.Color">
            <summary>
            Color of the vignetting halo.
            </summary>
            <userdoc>The color of the vignette.</userdoc>
        </member>
        <member name="T:Stride.Rendering.Images.BokehBlur">
            <summary>
            This class represents a blur to apply to a texture to create a bokeh effect. 
            It's not supposed to be used as-is, rather you should use subclasses like <see cref="T:Stride.Rendering.Images.GaussianBokeh"/>, 
            <see cref="T:Stride.Rendering.Images.McIntoshBokeh"/> or <see cref="T:Stride.Rendering.Images.TripleRhombiBokeh"/>... which do actually implement a blur technique leading to 
            a particular bokeh shape (circular, hexagonal).
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.BokehBlur.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.BokehBlur"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.BokehBlur.SetColorDepthInput(Stride.Graphics.Texture,Stride.Graphics.Texture)">
            <summary>
            Provides a color buffer and a depth buffer to apply the blur to.
            </summary>
            <param name="colorBuffer">A color buffer to process.</param>
            <param name="depthBuffer">The depth buffer corresponding to the color buffer provided.</param>
        </member>
        <member name="P:Stride.Rendering.Images.BokehBlur.Radius">
            <summary>
            Sets the radius of the blur.
            A child class can override it to do special processing when a new value is provided.
            </summary>
            <param name="value">The new value of the blur.</param>
        </member>
        <member name="T:Stride.Rendering.Images.BokehTechnique">
            <summary>
            Techniques available to perform a DoF effect on a level.
            The technique directly affects the visual result (bokeh shape) as well as the performance. 
            </summary>
        </member>
        <member name="F:Stride.Rendering.Images.BokehTechnique.CircularGaussian">
            <summary>
            Circular blur using a Gaussian. 
            </summary>
            <remarks>
            Fast and cheap technique but the final bokeh shapes are not very realistic.
            </remarks>
            <userdoc>Use circular Gaussian blur to render the bokehs. This technique produce circular bokehs.
            It is fast and cheap technique but not very realistic.</userdoc>
        </member>
        <member name="F:Stride.Rendering.Images.BokehTechnique.HexagonalMcIntosh">
            <summary>
            Hexagonal blur using the McIntosh technique.
            </summary>
            <userdoc>Use the McIntosh hexagonal blur to render the bokehs. This technique produce hexagonal bokehs</userdoc>
        </member>
        <member name="F:Stride.Rendering.Images.BokehTechnique.HexagonalTripleRhombi">
            <summary>
            Hexagonal blur using a combination of 3 rhombi blurs. 
            </summary>
            <userdoc>Use a combination of 3 rhombi blurs to render the bokehs. This technique produce hexagonal bokehs</userdoc>
        </member>
        <member name="M:Stride.Rendering.Images.BokehTechniqueExtensions.ToBlurInstance(Stride.Rendering.Images.BokehTechnique)">
            <summary>
            Instantiates a new <see cref="T:Stride.Rendering.Images.BokehBlur"/> from a technique name.
            </summary>
            <param name="name"></param>
            <returns>A Bokeh blur corresponding to the tehcnique specified.</returns>
        </member>
        <member name="T:Stride.Rendering.Images.GaussianBokeh">
            <summary>
            Applies a depth-aware gaussian blur to a texture. 
            </summary>
            <remarks>
            This does not produce beautiful bokeh shapes, but it is quite light-weight 
            and performance-friendly.
            </remarks>
        </member>
        <member name="M:Stride.Rendering.Images.GaussianBokeh.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.GaussianBokeh"/> class.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.McIntoshBokeh">
            <summary>
            Applies a McIntosh blur to a texture. (Hexagonal bokeh)
            </summary>
            <remarks>
            This is a 3-pass (+1 final gathering) technique based on the paper of McIntosh from the Simon Fraser University. (2012)
            http://ivizlab.sfu.ca/papers/cgf2012.pdf
            </remarks>
        </member>
        <member name="P:Stride.Rendering.Images.McIntoshBokeh.Phase">
            <summary>
            Phase of the bokeh effect. (rotation angle in radian)
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.McIntoshBokeh.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.McIntoshBokeh"/> class.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.TripleRhombiBokeh">
            <summary>
            Applies a TripleRhombi blur to a texture. (Hexagonal bokeh)
            </summary>
            <remarks>
            This is a technique based on DICE's presentation at Siggraph 2011. 
            http://advances.realtimerendering.com/s2011/White,%20BarreBrisebois-%20Rendering%20in%20BF3%20%28Siggraph%202011%20Advances%20in%20Real-Time%20Rendering%20Course%29.pdf
            </remarks>
        </member>
        <member name="P:Stride.Rendering.Images.TripleRhombiBokeh.Phase">
            <summary>
            Phase of the bokeh effect. (rotation angle in radian)
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.TripleRhombiBokeh.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.TripleRhombiBokeh"/> class.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.CoCMapBlur">
            <summary>
            Blurs a Circle of Confusion map.
            </summary>
            <remarks>
            This is useful to avoid strong CoC changes leading to out-of-focus silhouette outline appearing in 
            front of another out-of-focus object.
            Internally it uses a special gaussian blur aware of the depth.
            </remarks>
        </member>
        <member name="M:Stride.Rendering.Images.CoCMapBlur.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.CoCMapBlur"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.CoCMapBlur.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
            <value>The radius.</value>
        </member>
        <member name="T:Stride.Rendering.Images.CombineLevelsFromCoCKeys">
            <summary>
            Keys used by the CombineLevelsFromCoCffect
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.DepthAwareDirectionalBlurKeys">
            <summary>
            Keys used by the DepthAwareDirectionalBlurEffect
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.DepthOfField">
            <summary>
            Applies a depth-of-field effect to a scene.
            It takes as input a color-buffer where the scene was rendered, with its associated depth-buffer.
            You also need to provide the camera configuration you used when rendering the scene.
            You can optionally specify which bokeh technique should be used, the number of LOD levels with 
            their Circle-of-Confusion strengths and their resolution.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.DepthOfField.MaxBokehSize">
            <summary>
            Maximum size of the bokeh (ie. when the circle of confusion is 1.0).
            This is resolution-independent, it is a ratio proportional to the screen width in percentage.
            </summary>
            <remarks>
            This property is not supposed to be modified at each frame since it generates garbage. 
            Instead you should set it once for your scene and play with the DOF areas / lens parameters 
            to make out-of-focus objects create bigger bokeh shapes.
            </remarks>
            <userdoc>Specify the maximum size of the bokehs. This value is resolution-independent (proportional to the screen width in percentage).</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.DepthOfField.DOFAreas">
            <summary>
            Areas of the depth of field: [nearStart, nearEnd, farStart, farEnd] expressed as a 
            distance from the camera.
            </summary>
            <userdoc>Specify the area focused by the depth of field (eg. the not blurred area). 
            It is expressed as distances from the camera: [nearStart, nearEnd, farStart, farEnd].</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.DepthOfField.QualityPreset">
            <summary>
            Affects a preset quality setting, between 0 (lowest quality) and 1 (highest quality).
            This auto-configures <cref name="LevelCoCValues"/> and <cref name="LevelDownscaleFactors"/>.
            </summary>
            <userdoc>The quality of the effect where 0 represents the worst quality and 1 the best one.
            Note that increase the quality of the effect significantly increase the rendering time.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.DepthOfField.Technique">
            <summary>
            Bokeh technique used to blur each level.
            </summary>
            <remarks>
            This influences the bokeh shape (circular, hexagonal...) as well as the performance.
            </remarks>
            <userdoc>Specify the technique used to calculate the bokehs.
            This influences both the shape of the bokehs and the performances of the effect.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.DepthOfField.AutoFocus">
            <summary>
            Auto-focus on the pixel at the center of the screen. 
            </summary>
            <userdoc>If checked, the depth of field area is automatically adjusted to the pixel at the center of the screen.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.DepthOfField.LevelCoCValues">
            <summary>
            The number of layers with their own CoC strength. Note that you need to define 
            at least 1 level of blur, each level of blur should have a CoC stronger than its predecessor and the last
            level should always have a CoC of 1.0. Example: { 0.25f, 0.5f, 1.0f }
            The higher the number of levels is, the smoother the transition between 2 levels is, but at a performance cost.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.DepthOfField.LevelDownscaleFactors">
            <summary>
            For each level defined in <cref name="LevelCoCValues"/> you can define a downscale factor (a power of 2) 
            at which to operate. 
            When not specified, the levels are treated by default at half the resolution of the original image.
            Example: for { 1, 2 }, the first level will be processed at half the original resolution, and the second level at 1/4.
            The array provided must be of the same size as the <cref name="LevelCoCValues"/> array.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.DepthOfField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.DepthOfField"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.DepthOfField.SetColorDepthInput(Stride.Graphics.Texture,Stride.Graphics.Texture)">
            <summary>
            Provides a color buffer and a depth buffer to apply the depth-of-field to.
            </summary>
            <param name="colorBuffer">A color buffer to process.</param>
            <param name="depthBuffer">The depth buffer corresponding to the color buffer provided.</param>
        </member>
        <member name="M:Stride.Rendering.Images.DepthOfField.SetupTechnique">
            <summary>
            Caches the current configuration and re-generates the filter effect of each LOD level to avoid 
            generating garbage a each frame.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.DoFUtil">
            <summary>
            Some util function relevant to the depth-of-field effect.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.DoFUtil.GetUniformWeightBlurArray(System.Int32)">
            <summary>
            Creates an array with uniform weight along one direction of the blur. 
            </summary>
            <param name="count">Number of taps from the center (included) along one direction.</param>
            <returns>The array with uniform weights.</returns>
        </member>
        <member name="T:Stride.Rendering.Images.GaussianBlur">
            <summary>
            Provides a gaussian blur effect.
            </summary>
            <remarks>
            To improve performance of this gaussian blur is using:
            - a separable 1D horizontal and vertical blur
            - linear filtering to reduce the number of taps
            </remarks>
        </member>
        <member name="M:Stride.Rendering.Images.GaussianBlur.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.GaussianBlur"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.GaussianBlur.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
            <value>The radius.</value>
            <userdoc>The radius of the Gaussian in pixels</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.GaussianBlur.SigmaRatio">
            <summary>
            Gets or sets the sigma ratio. The sigma ratio is used to calculate the sigma based on the radius: The actual
            formula is <c>sigma = radius / SigmaRatio</c>. The default value is 2.0f.
            </summary>
            <value>The sigma ratio.</value>
            <userdoc>The sigma ratio of the Gaussian. The sigma ratio is used to calculate the sigma of the Gaussian. 
            The actual formula is <c>sigma = radius / SigmaRatio</c></userdoc>
        </member>
        <member name="T:Stride.Rendering.Images.GaussianBlur.GaussianBlurShader">
            <summary>
            Store a Gaussian Blur shader pair. If we didn't do so, it might trigger a LoadEffect every time the radius changes.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.GaussianBlurKeys">
            <summary>
            Keys used by <see cref="T:Stride.Rendering.Images.GaussianBlur"/> and GaussianBlurEffect sdfx
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.GaussianUtil">
            <summary>
            Utility class to calculate 1D Gaussian filter used for separable 2D Gaussian filters.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.GaussianUtil.Calculate1D(System.Int32,System.Single,System.Boolean)">
            <summary>
            Calculate a 1D gaussian filter.
            </summary>
            <param name="radius">The radius.</param>
            <param name="sigmaRatio">The sigma ratio. Default is ratio is 2.0f. Sigma = radius / SigmaRatio</param>
            <param name="disableBilinear">if set to <c>true</c> to disable bilinear offsets/weights.</param>
            <returns>An array of offsets (<see cref="F:Stride.Core.Mathematics.Vector2.X" />) and weights (<see cref="F:Stride.Core.Mathematics.Vector2.Y" />).</returns>
        </member>
        <member name="M:Stride.Rendering.Images.IImageEffect.SetInput(System.Int32,Stride.Graphics.Texture)">
            <summary>
            Sets an input texture
            </summary>
            <param name="slot">The slot.</param>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:Stride.Rendering.Images.IImageEffect.SetViewport(System.Nullable{Stride.Graphics.Viewport})">
            <summary>
            Sets the viewport.
            </summary>
            <param name="viewport">The viewport.</param>
        </member>
        <member name="M:Stride.Rendering.Images.IImageEffect.SetOutput(Stride.Graphics.Texture)">
            <summary>
            Sets the render target output.
            </summary>
            <param name="view">The render target output view.</param>
            <exception cref="T:System.ArgumentNullException">view</exception>
        </member>
        <member name="M:Stride.Rendering.Images.IImageEffect.SetOutput(Stride.Graphics.Texture[])">
            <summary>
            Sets the render target outputs.
            </summary>
            <param name="views">The render target output views.</param>
        </member>
        <member name="T:Stride.Rendering.Images.ImageEffect">
            <summary>
            Post effect base class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.ImageEffect.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.ImageEffect" /> class.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException">context</exception>
        </member>
        <member name="M:Stride.Rendering.Images.ImageEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.ImageEffect" /> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.ImageEffect.#ctor(Stride.Rendering.RenderContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.ImageEffect" /> class.
            </summary>
            <param name="context">The context.</param>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException">context</exception>
        </member>
        <member name="P:Stride.Rendering.Images.ImageEffect.EnableSetRenderTargets">
            <summary>
            Gets or sets a boolean to enable GraphicsDevice.SetDepthAndRenderTargets from output. Default is <c>true</c>.
            </summary>
            <value>A boolean to enable GraphicsDevice.SetDepthAndRenderTargets from output. Default is <c>true</c></value>
        </member>
        <member name="M:Stride.Rendering.Images.ImageEffect.SetInput(System.Int32,Stride.Graphics.Texture)">
            <summary>
            Sets an input texture
            </summary>
            <param name="slot">The slot.</param>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:Stride.Rendering.Images.ImageEffect.Reset">
            <summary>
            Resets the state of this effect.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.ImageEffect.SetOutput(Stride.Graphics.Texture)">
            <summary>
            Sets the render target output.
            </summary>
            <param name="view">The render target output view.</param>
            <exception cref="T:System.ArgumentNullException">view</exception>
        </member>
        <member name="M:Stride.Rendering.Images.ImageEffect.SetOutput(Stride.Graphics.Texture[])">
            <summary>
            Sets the render target outputs.
            </summary>
            <param name="views">The render target output views.</param>
        </member>
        <member name="M:Stride.Rendering.Images.ImageEffect.SetDepthOutput(Stride.Graphics.Texture,Stride.Graphics.Texture)">
            <summary>
            Sets the render target output.
            </summary>
            <param name="depthStencilView">The depth stencil output view.</param>
            <param name="renderTargetView">The render target output view.</param>
        </member>
        <member name="M:Stride.Rendering.Images.ImageEffect.SetDepthOutput(Stride.Graphics.Texture,Stride.Graphics.Texture[])">
            <summary>
            Sets the render target outputs.
            </summary>
            <param name="depthStencilView">The depth stencil output view.</param>
            <param name="renderTargetViews">The render target output views.</param>
        </member>
        <member name="M:Stride.Rendering.Images.ImageEffect.SetViewport(System.Nullable{Stride.Graphics.Viewport})">
            <summary>
            Sets the viewport to use .
            </summary>
            <param name="viewport">The viewport.</param>
        </member>
        <member name="M:Stride.Rendering.Images.ImageEffect.SetRenderTargets(Stride.Rendering.RenderDrawContext)">
            <summary>
            Set the render targets for the image effect.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Stride.Rendering.Images.ImageEffect.DisposeCreatedRenderTargetViews(Stride.Rendering.RenderDrawContext)">
            <summary>
            Dispose the render target views that have been created.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.ImageEffect.InputCount">
            <summary>
            Gets the number of input textures.
            </summary>
            <value>The input count.</value>
        </member>
        <member name="M:Stride.Rendering.Images.ImageEffect.GetInput(System.Int32)">
            <summary>
            Gets an input texture by the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>Texture.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index</exception>
        </member>
        <member name="M:Stride.Rendering.Images.ImageEffect.GetSafeInput(System.Int32)">
            <summary>
            Gets a non-null input texture by the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>Texture.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:Stride.Rendering.Images.ImageEffect.DepthStencil">
            <summary>
            Gets the output depth stencil texture.
            </summary>
            <value>
            The depth stencil output.
            </value>
        </member>
        <member name="P:Stride.Rendering.Images.ImageEffect.HasDepthStencilOutput">
            <summary>
            Gets a value indicating whether this effect has depth stencil output texture binded.
            </summary>
            <value>
              <c>true</c> if this instance has depth stencil output; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Stride.Rendering.Images.ImageEffect.OutputCount">
            <summary>
            Gets the number of output render target.
            </summary>
            <value>The output count.</value>
        </member>
        <member name="M:Stride.Rendering.Images.ImageEffect.GetOutput(System.Int32)">
            <summary>
            Gets an output render target for the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>RenderTarget.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index</exception>
        </member>
        <member name="M:Stride.Rendering.Images.ImageEffect.GetSafeOutput(System.Int32)">
            <summary>
            Gets an non-null output render target for the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>RenderTarget.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Stride.Rendering.Images.ImageEffect.NewScopedRenderTarget2D(Stride.Graphics.TextureDescription)">
            <summary>
            Gets a render target with the specified description, scoped for the duration of the <see cref="!:DrawEffect.DrawCore"/>.
            </summary>
            <returns>A new instance of texture.</returns>
        </member>
        <member name="M:Stride.Rendering.Images.ImageEffect.NewScopedRenderTarget2D(System.Int32,System.Int32,Stride.Graphics.PixelFormat,Stride.Graphics.TextureFlags,System.Int32)">
            <summary>
            Gets a render target output for the specified description with a single mipmap, scoped for the duration of the <see cref="!:DrawEffect.DrawCore"/>.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <returns>A new instance of texture class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="M:Stride.Rendering.Images.ImageEffect.NewScopedRenderTarget2D(System.Int32,System.Int32,Stride.Graphics.PixelFormat,Stride.Graphics.MipMapCount,Stride.Graphics.TextureFlags,System.Int32)">
            <summary>
            Gets a render target output for the specified description, scoped for the duration of the <see cref="!:DrawEffect.DrawCore"/>.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int &gt;=1 for a particular mipmap count.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <returns>A new instance of texture class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="T:Stride.Rendering.Images.ImageEffectExtensions">
            <summary>
            Extensions for <see cref="T:Stride.Rendering.Images.ImageEffect"/>.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.ImageEffectExtensions.SetInput(Stride.Rendering.Images.IImageEffect,Stride.Graphics.Texture)">
            <summary>
            Sets an input texture
            </summary>
            <param name="imageEffect">The post effect.</param>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:Stride.Rendering.Images.ImageEffectExtensions.SetInput(Stride.Rendering.Images.IImageEffect,Stride.Graphics.Texture,Stride.Graphics.Texture)">
            <summary>
            Sets two input textures
            </summary>
            <param name="imageEffect">The post effect.</param>
            <param name="texture">The texture.</param>
            <param name="texture2">The texture2.</param>
        </member>
        <member name="M:Stride.Rendering.Images.ImageEffectExtensions.SetInput(Stride.Rendering.Images.IImageEffect,Stride.Graphics.Texture,Stride.Graphics.Texture,Stride.Graphics.Texture)">
            <summary>
            Sets two input textures
            </summary>
            <param name="imageEffect">The post effect.</param>
            <param name="texture">The texture.</param>
            <param name="texture2">The texture2.</param>
            <param name="texture3">The texture3.</param>
        </member>
        <member name="T:Stride.Rendering.Images.ImageEffectShader">
            <summary>
            Post effect using an <see cref="T:Stride.Graphics.Effect"/> (either sdfx or sdsl).
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.ImageEffectShader.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.ImageEffectShader" /> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.ImageEffectShader.InitializeCore">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Rendering.Images.ImageEffectShader.EffectInstance">
            <summary>
            The current effect instance.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.ImageEffectShader.EffectName">
            <summary>
            Effect name.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.ImageEffectShader.SetDefaultParameters">
            <summary>
            Sets the default parameters (called at constructor time and if <see cref="!:Reset"/> is called)
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.ImageEffectShader.UpdateParameters">
            <summary>
            Updates the effect <see cref="!:ImageEffectShader.Parameters" /> from properties defined in this instance. See remarks.
            </summary>
            <exception cref="T:System.InvalidOperationException">Expecting less than 10 textures in input</exception>
            <remarks>By default, all the input textures will be remapped to <see cref="F:Stride.Rendering.TexturingKeys.Texture0" />...etc.</remarks>
        </member>
        <member name="T:Stride.Rendering.Images.ImageReadback`1">
            <summary>
            Allow readback a Texture from GPU to CPU with a frame delay count to avoid blocking read.
            </summary>
            <typeparam name="T">Pixel struct that should match the input texture format</typeparam>
            <remarks>The input texture should be small enough to avoid CPU/GPU readback stalling</remarks>
        </member>
        <member name="M:Stride.Rendering.Images.ImageReadback`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.ImageReadback`1"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.ImageReadback`1.FrameDelayCount">
            <summary>
            Gets or sets the number of frame to store before reading back. Default is <c>16</c>.
            </summary>
            <value>The frame delay count.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ImageReadback`1.IsResultAvailable">
            <summary>
            Gets a boolean indicating whether a result is available from <see cref="P:Stride.Rendering.Images.ImageReadback`1.Result"/>.
            </summary>
            <value>A result available.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ImageReadback`1.IsSlow">
            <summary>
            Gets a boolean indicating whether the readback is slow and may be stalling, indicating a <see cref="P:Stride.Rendering.Images.ImageReadback`1.FrameDelayCount"/> to low or
            an input texture too large for an efficient non-blocking readback.
            </summary>
            <value>The readback is slow and stalling.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ImageReadback`1.ForceGetLatestBlocking">
            <summary>
            Gets or sets a value indicating whether [force get latest blocking].
            </summary>
            <value><c>true</c> if [force get latest blocking]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ImageReadback`1.ElapsedTime">
            <summary>
            Gets the elapsed time to query the result.
            </summary>
            <value>The elapsed time.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ImageReadback`1.Result">
            <summary>
            Gets the result pixels, only valid if <see cref="P:Stride.Rendering.Images.ImageReadback`1.IsResultAvailable"/>
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:Stride.Rendering.Images.ImageMultiScaler">
            <summary>
            Allow to up-scale or down-scale a texture (input) multiple times while capturing intermediate mipmap results (outputs).
            </summary>
            <remarks>
            Based on the input texture and output texture, this class automatically downscale or upscale the input texture to the different output textures. 
            The requirement for the output textures are:
            <ul>
            <li>They must have a mipsize compatible with input texture (multiple of 2).</li>
            <li>They must share the same pixel format.</li>
            <li>They must be a different size from input texture.</li>
            <li>They must scale to a single direction (either down or up scale, but not both).</li>
            </ul>
            </remarks>
        </member>
        <member name="M:Stride.Rendering.Images.ImageMultiScaler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.ImageMultiScaler"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.ImageMultiScaler.PrepareScaling(Stride.Graphics.Texture,System.Int32@,Stride.Graphics.PixelFormat@)">
            <summary>
            Prepares the scaling.
            </summary>
            <param name="inputTexture">The input texture.</param>
            <param name="scalingDirection">The scaling direction.</param>
            <param name="outputPixelFormat">The output pixel format.</param>
            <returns><c>true</c> if we have some output to process; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Stride.Rendering.Images.ImageScaler">
            <summary>
            Scales an input texture to an output texture (down or up, depending on the relative size between input and output)
            </summary>
            <remarks>This effect can be used for downscaling or upscaling if the output rendertarget is smaller/larger than
            the input texture</remarks>
        </member>
        <member name="M:Stride.Rendering.Images.ImageScaler.#ctor(Stride.Rendering.Images.SamplingPattern,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.ImageScaler"/> class.
            </summary>
            <param name="samplingPattern">9 taps multi-sampler (Expanded) or 1-tap Point sampling (Linear)</param>
        </member>
        <member name="P:Stride.Rendering.Images.ImageScaler.Color">
            <summary>
            Gets or sets the color multiplier. Default is <see cref="F:Stride.Core.Mathematics.Color.White"/>
            </summary>
            <value>The color multiplier.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ImageScaler.IsOnlyChannelRed">
            <summary>
            Copy only the red channel. Default is <c>false</c>
            </summary>
            <value><c>true</c> if this instance is only channel red; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Rendering.Images.ImageScaler.Sampler">
            <summary>
            Gets or sets the sampler used to sample the input texture. Default is <see cref="F:Stride.Graphics.SamplerStateFactory.LinearClamp"/>
            </summary>
            <value>The sampler.</value>
        </member>
        <member name="T:Stride.Rendering.Images.ImageScalerShaderKeys">
            <summary>
            Defines default values.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.SamplingPattern">
            <summary>
            How samples are fetched from the source texture when scaling
            </summary>
        </member>
        <member name="F:Stride.Rendering.Images.SamplingPattern.Expanded">
            <summary>
            tilted pyramid gather, 9 taps, weights inverse to distance to center. (inspired by "Next Generation Post Processing in Call of Duty Advanced Warfare")
            </summary>
        </member>
        <member name="F:Stride.Rendering.Images.SamplingPattern.Linear">
            <summary>
            simple unique sampling at the center (the hardware sampler creates the 4 neighbor gathering).
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.FlareArtifactKeys">
            <summary>
            Keys used by <see cref="!:FlareArtifact"/> and FlareArtifactEffect sdfx.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.LensFlare">
            <summary>
            Applies some lens-flare effect to an image. 
            This takes in input a bright-pass buffer, calculates the lens-flares and blends them 
            additively to the specified output.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.LensFlare.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.LensFlare"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.LensFlare.Amount">
            <summary>
            Amount of light streak (intensity).
            </summary>
            <userdoc>The strength of the effect</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.LensFlare.ColorAberrationStrength">
            <summary>
            Strength of the color aberration.
            </summary>
            <userdoc>The strength of the color aberrations along the streaks and halo</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.LensFlare.ZoomOffsetsDistortions">
            <summary>
            Defines the offsets (through zooming), and the distortion factor of each tap.
            A distortion factor > 0 will stretch in a circular way around the center (fisheye-like); 
            in [-1, 0] it will stretch the texture towards the center. 
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.LensFlare.ColorAberrations">
            <summary>
            Modulate the RGB color of each tap.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.LensFlare.HaloFactor">
            <summary>
            Halo factor when the camera is pointing exactly at a light source.
            </summary>
            <userdoc>Specifies the intensity of halo effect.</userdoc>
        </member>
        <member name="F:Stride.Rendering.Images.LightShafts.CurrentLightShafts">
            <summary>
            Property key to access the current collection of <see cref="T:System.Collections.Generic.List`1"/> from <see cref="F:Stride.Rendering.VisibilityGroup.Tags"/>.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.LightShafts.LightBufferDownsampleLevel">
            <summary>
            The number of times the resolution is lowered for the light buffer
            </summary>
            <userdoc>
            Lower values produce more precise volume buffer areas, but use more GPU
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.LightShafts.BoundingVolumeBufferDownsampleLevel">
            <summary>
            The amount of time the resolution is lowered for the bounding volume buffer
            </summary>
            <userdoc>
            Lower values produce sharper light shafts, but use more GPU
            </userdoc>
        </member>
        <member name="F:Stride.Rendering.Images.LightShafts.BackSideOrthographicSize">
            <summary>
            Size of the orthographic projection used to find minimum bounding volume distance behind the camera
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.LightStreak">
            <summary>
            Applies some light-streaks effect to an image.
            This takes in input a bright-pass buffer, calculates the light-streaks and blends them 
            additively to the specified output.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.LightStreak.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.LightStreak"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.LightStreak.Amount">
            <summary>
            Amount of light streak (intensity).
            </summary>
            <userdoc>The strength of the bleeding</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.LightStreak.StreakCount">
            <summary>
            Number of light streaks.
            </summary>
            <userdoc>The number of streaks emitted by each bright point</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.LightStreak.IterationCount">
            <summary>
            Number of stretching iterations to apply. 
            </summary>
            <remarks>
            Each iteration rises the length of the light streak to the next power of <see cref="P:Stride.Rendering.Images.LightStreak.TapsPerIteration"/>.
            </remarks>
        </member>
        <member name="P:Stride.Rendering.Images.LightStreak.TapsPerIteration">
            <summary>
            Number of texture taps for each iteration of light streak extension.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.LightStreak.Attenuation">
            <summary>
            How fast the attenuation is along a streak. (Affects the streak length.)
            </summary>
            <userdoc>Specifies how fast the light attenuates along a streak. (0 for immediate attenuation, 1 for no attenuation)</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.LightStreak.Phase">
            <summary>
            Phase angle for the streaks, in degrees.
            </summary>
            <userdoc>The angle (rotation) of the star pattern</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.LightStreak.ColorAberrationCoefficients">
            <summary>
            RGB coefficients to apply for color aberration along a streak.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.LightStreak.ColorAberrationStrength">
            <summary>
            Strength of the color aberration.
            </summary>
            <userdoc>The strength of the color aberrations visible along the streak</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.LightStreak.IsAnamorphic">
            <summary>
            Applies an anamorphic effect to the streak.
            </summary>
            <userdoc>Simulate the behavior of anamorphic camera lenses</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.LightStreak.AnamorphicOffsetsWeights">
            <summary>
            For each light streak, you can define some sub-light-streaks drawn at a certain 
            offset of the original streak, with a certain weight.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.LightStreakKeys">
            <summary>
            Keys used by <see cref="T:Stride.Rendering.Images.LightStreak"/> and LightStreakEffect sdfx.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.LocalReflections">
            <summary>
            Compute screen space reflections as a post effect.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Images.LocalReflections.ResolutionMode.Full">
            <summary>
            Use full resolution.
            </summary>
            <userodc>Full resolution.</userodc>
        </member>
        <member name="F:Stride.Rendering.Images.LocalReflections.ResolutionMode.Half">
            <summary>
            Use half resolution.
            </summary>
            <userodc>Half resolution.</userodc>
        </member>
        <member name="P:Stride.Rendering.Images.LocalReflections.DepthResolution">
            <summary>
            Gets or sets the input depth resolution mode.
            </summary>
            <userdoc>Downscale the depth buffer to optimize raycast performance. Full gives better quality, but half improves performance. The default value is half.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.LocalReflections.RayTracePassResolution">
            <summary>
            Gets or sets the ray trace pass resolution mode.
            </summary>
            <userdoc>The raycast resolution. Full gives better quality, but half improves performance. The default value is half.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.LocalReflections.MaxSteps">
            <summary>
            Maximum allowed amount of dynamic iterations in the ray trace pass.
            Higher value provides better ray tracing quality but decreases the performance.
            Default value is 60.
            </summary>
            <userdoc>The maximum number of raycast steps allowed per pixel. Higher values produce better results, but worse performance. The default value is 60.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.LocalReflections.BRDFBias">
            <summary>
            Gets or sets the BRDF bias. This value controlls source roughness effect on reflections blur.
            Smaller values produce wider reflections spread but also introduce more noise.
            Higher values provide more mirror-like reflections. Default value is 0.8.
            </summary>
            <value>
            The BRDF bias.
            </value>
            <userdoc>The reflection spread. Higher values provide finer, more mirror-like reflections. This setting has no effect on performance. The default value is 0.82.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.LocalReflections.GlossinessThreshold">
            <summary>
            Minimum allowed surface glossiness value to use local reflections.
            Pixels with lower values won't be affected by the effect.
            </summary>
            <userdoc>The amount of gloss a material must have to reflect the scene. For example, if this value is set to 0.4, only materials with a gloss map value of 0.4 or above reflect the scene. The default value is 0.55.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.LocalReflections.WorldAntiSelfOcclusionBias">
            <summary>
            Ray tracing starting position is offseted by a percent of the normal in world space to avoid self occlusions.
            </summary>
            <userdoc>The offset of the raycast origin. Lower values produce more correct reflection placement, but produce more artefacts. We recommend values of 0.03 or lower. The default value is 0.01.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.LocalReflections.ResolvePassResolution">
            <summary>
            Gets or sets the resolve pass resolution mode.
            </summary>
            <userdoc>The raycast resolution. Full gives better quality, but half improves performance. The default value is half.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.LocalReflections.ResolveSamples">
            <summary>
            Gets or sets the resolve pass samples amount. Higher values provide better quality but reduce effect performance.
            Default value is 4. Use 1 for the highest speed.
            </summary>
            <value>
            The resolve samples amount.
            </value>
            <userdoc>The number of rays used to resolve the reflection color. Higher values produce less noise, but worse performance. The default value is 4.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.LocalReflections.ReduceHighlights">
            <summary>
            Gets or sets a value indicating whether reduce reflection highlights during resolve pass.
            Performs filtering on sampled pixels to smooth luminance bursts.
            It helps to provide softer image with reduced amount of highlights.
            </summary>
            <value>
              <c>true</c> if reduce fireflies; otherwise, <c>false</c>.
            </value>
            <userdoc>Reduces the brightness of particularly bright areas of reflections. Has no effect on performance.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.LocalReflections.EdgeFadeFactor">
            <summary>
            Gets or sets the edge fade factor. It's used to fade off effect on screen edges to provide smoother image.
            </summary>
            <value>
            The edge fade factor.
            </value>
            <userdoc>The point at which the far edges of the reflection begin to fade. Has no effect on performance. The default value is 0.1.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.LocalReflections.UseColorBufferMips">
            <summary>
            Gets or sets a value indicating whether use color buffer mipsmaps chain; otherwise will use raw input color buffer to sample reflections color.
            Using mipmaps improves resolve pass performance and reduces GPU cache misses.
            </summary>
            <value>
              <c>true</c> if use color buffer mips; otherwise, <c>false</c>.
            </value>
            <userdoc>Downscale the input color buffer and uses blurred mipmaps when resolving the reflection color. Produces more realistic results by blurring distant parts of reflections in rough (low-gloss) materials. It also improves performance on most platforms but uses more memory.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.LocalReflections.TemporalEffect">
            <summary>
            Gets or sets a value indicating whether use temporal effect to smooth reflections.
            </summary>
            <value>
              <c>true</c> if use temporal effect to smooth reflections; otherwise, <c>false</c>.
            </value>
            <userdoc>Enables the temporal pass. Reduces noise, but produces an animated "jittering" effect that's sometimes noticeable. If disabled, the properties below have no effect.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.LocalReflections.TemporalScale">
            <summary>
            Gets or sets the temporal effect scale. Default is 2.
            </summary>
            <value>
            The temporal effect scale.
            </value>
            <userdoc>The intensity of the temporal effect. Lower values produce reflections faster, but more noise. The default value is 4.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.LocalReflections.TemporalResponse">
            <summary>
            Gets or sets the temporal response. Default is 0.9.
            </summary>
            <value>
            The temporal response.
            </value>
            <userdoc><userdoc>How quickly reflections blend between the reflection in the current frame and the history buffer. Lower values produce reflections faster, but with more jittering. If the camera in your game doesn't move much, we recommend values closer to 1. The default value is 0.9.</userdoc></userdoc>
        </member>
        <member name="T:Stride.Rendering.Images.LocalReflections.TemporalFrameCache">
            <summary>
            Helper structure with data for temporal reprojection done per camera.
            Note: we may use the same camera for a few times per frame so every rendering pass should pick a proper data.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.LocalReflections.SetInputSurfaces(Stride.Graphics.Texture,Stride.Graphics.Texture,Stride.Graphics.Texture,Stride.Graphics.Texture)">
            <summary>
            Provides a color buffer and a depth buffer to apply the depth-of-field to.
            </summary>
            <param name="colorBuffer">Single view of the scene</param>
            <param name="depthBuffer">The depth buffer corresponding to the color buffer provided.</param>
            <param name="normalsBuffer">The buffer which contains surface packed world space normal vectors.</param>
            <param name="specularRoughnessBuffer">The buffer which contains surface specular color and roughness.</param>
        </member>
        <member name="T:Stride.Rendering.Images.SSLRKeys">
            <summary>
            Keys used by the SSLRResolvePass
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.LuminanceEffect">
            <summary>
            Luminance effect.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.LuminanceEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.LuminanceEffect" /> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.LuminanceEffect.LuminanceFormat">
            <summary>
            Luminance texture format.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.LuminanceEffect.LuminanceLogEffect">
            <summary>
            Luminance log effect.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.LuminanceEffect.DownscaleCount">
            <summary>
            Gets or sets down scale count used to downscale the input intermediate texture used for local luminance (if no 
            output is given). By default 1/64 of the input texture size.
            </summary>
            <value>Down scale count.</value>
        </member>
        <member name="P:Stride.Rendering.Images.LuminanceEffect.UpscaleCount">
            <summary>
            Gets or sets the upscale count used to upscale the downscaled input local luminance texture. By default x16 of the 
            input texture size.
            </summary>
            <value>The upscale count.</value>
        </member>
        <member name="P:Stride.Rendering.Images.LuminanceEffect.EnableAverageLuminanceReadback">
            <summary>
            Gets or sets a value indicating whether to enable calculation of <see cref="P:Stride.Rendering.Images.LuminanceEffect.AverageLuminance"/> (default is true).
            </summary>
            <value><c>true</c> if to enable calculation of <see cref="P:Stride.Rendering.Images.LuminanceEffect.AverageLuminance"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Rendering.Images.LuminanceEffect.AverageLuminance">
            <summary>
            Gets the average luminance calculated on the GPU. See remarks.
            </summary>
            <value>The average luminance.</value>
            <remarks>
            The average luminance is calculated on the GPU and readback with a few frames of delay, depending on the number of 
            frames in advance between command scheduling and actual execution on GPU.
            </remarks>
        </member>
        <member name="P:Stride.Rendering.Images.LuminanceEffect.AverageLuminanceTexture">
            <summary>
            Gets the average luminance 1x1 texture available after drawing this effect.
            </summary>
            <value>The average luminance texture.</value>
        </member>
        <member name="P:Stride.Rendering.Images.LuminanceEffect.EnableLocalLuminanceCalculation">
            <summary>
            Indicated if the local luminance should be rendered to the output texture.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.LuminanceLogEffect">
            <summary>
            Class LuminanceLogEffect.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.LuminanceResult">
            <summary>
            Struct LuminanceResult
            </summary>
        </member>
        <member name="T:Stride.Rendering.Images.PostProcessingEffects">
            <summary>
            A default bundle of <see cref="T:Stride.Rendering.Images.ImageEffect"/>.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.PostProcessingEffects.#ctor(Stride.Core.IServiceRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.PostProcessingEffects" /> class.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="M:Stride.Rendering.Images.PostProcessingEffects.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.PostProcessingEffects"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Images.PostProcessingEffects.#ctor(Stride.Rendering.RenderContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Images.PostProcessingEffects"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Stride.Rendering.Images.PostProcessingEffects.Id">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Rendering.Images.PostProcessingEffects.AmbientOcclusion">
            <summary>
            Gets the ambient occlusion effect.
            </summary>
            <userdoc>
            Darkens areas where light is occluded by opaque objects, such as corners and crevices
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.PostProcessingEffects.LocalReflections">
            <summary>
            Gets the local reflections effect.
            </summary>
            <value>The local reflection technique.</value>
            <userdoc>Reflect the scene in glossy materials</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.PostProcessingEffects.DepthOfField">
            <summary>
            Gets the depth of field effect.
            </summary>
            <value>The depth of field.</value>
            <userdoc>Accentuate regions of the image by blurring objects in the foreground or background</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.PostProcessingEffects.BrightFilter">
            <summary>
            Gets the bright pass-filter.
            </summary>
            <value>The bright filter.</value>
            <userdoc>The bright filter isn't an effect by itself; 
            it extracts the brightest areas of the image and gives it to effects that use it (eg bloom, light streaks, lens flares).</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.PostProcessingEffects.Bloom">
            <summary>
            Gets the bloom effect.
            </summary>
            <value>The bloom.</value>
            <userdoc>Bleed bright areas into surrounding areas</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.PostProcessingEffects.LightStreak">
            <summary>
            Gets the light streak effect.
            </summary>
            <value>The light streak.</value>
            <userdoc>Bleed bright points along streaks</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.PostProcessingEffects.LensFlare">
            <summary>
            Gets the lens flare effect.
            </summary>
            <value>The lens flare.</value>
            <userdoc>Simulate artifacts produced by the internal reflection or scattering of light within camera lenses</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.PostProcessingEffects.ColorTransforms">
            <summary>
            Gets the final color transforms.
            </summary>
            <value>The color transforms.</value>
            <userdoc>Perform a transformation onto the image colors</userdoc>
        </member>
        <member name="P:Stride.Rendering.Images.PostProcessingEffects.Antialiasing">
            <summary>
            Gets the antialiasing effect.
            </summary>
            <value>The antialiasing.</value>
            <userdoc>Perform anti-aliasing filtering, smoothing the jagged edges of models</userdoc>
        </member>
        <member name="M:Stride.Rendering.Images.PostProcessingEffects.DisableAll">
            <summary>
            Disables all post processing effects.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Images.SphericalHarmonics.SphericalHarmonicsRendererEffect.InputSH">
            <summary>
            Gets or sets the harmonic order to use during the filtering.
            </summary>
        </member>
        <member name="T:Stride.Rendering.ConstantBufferOffsetReference">
            <summary>
            Handle used to query what's the actual offset of a given variable in a constant buffer, through <see cref="!:ResourceGroupLayout.GetConstantBufferOffset"/>.
            </summary>
        </member>
        <member name="T:Stride.Rendering.DrawEffect">
            <summary>
            The base class in charge of applying and drawing an effect.
            </summary>
        </member>
        <member name="M:Stride.Rendering.DrawEffect.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.DrawEffect"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.DrawEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.DrawEffect"/> class with the given <see cref="T:Stride.Rendering.RenderContext"/>.
            </summary>
        </member>
        <member name="M:Stride.Rendering.DrawEffect.#ctor(Stride.Rendering.RenderContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.DrawEffect" /> class.
            </summary>
            <param name="context">The context.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:Stride.Rendering.DrawEffect.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Stride.Rendering.DrawEffect.Scaler">
            <summary>
            Gets a shared <see cref="T:Stride.Rendering.Images.ImageScaler"/>.
            </summary>
        </member>
        <member name="M:Stride.Rendering.DrawEffect.Reset">
            <summary>
            Resets the state of this effect.
            </summary>
        </member>
        <member name="M:Stride.Rendering.DrawEffect.SetDefaultParameters">
            <summary>
            Sets the default parameters (called at constructor time and if <see cref="M:Stride.Rendering.DrawEffect.Reset"/> is called)
            </summary>
        </member>
        <member name="M:Stride.Rendering.DrawEffect.Draw(Stride.Rendering.RenderDrawContext,System.String)">
            <summary>
            Draws a full screen quad using iterating on each pass of this effect.
            </summary>
        </member>
        <member name="M:Stride.Rendering.DrawEffect.Draw(Stride.Rendering.RenderDrawContext,System.String,System.Object[])">
            <summary>
            Draws a full screen quad using iterating on each pass of this effect.
            </summary>
        </member>
        <member name="M:Stride.Rendering.DrawEffect.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="F:Stride.Rendering.DynamicEffectInstance.EffectCompilerParameters">
            <summary>
            Defines the effect parameters used when compiling this effect.
            </summary>
        </member>
        <member name="T:Stride.Rendering.EffectDescriptorSetReference">
            <summary>
            Handle used to query what's the actual offset of a given variable in a constant buffer, through <see cref="!:ResourceGroupLayout.GetConstantBufferOffset"/>.
            </summary>
        </member>
        <member name="T:Stride.Rendering.EffectPermutationSlot">
            <summary>
            Defines an effect permutation slot for a <see cref="T:Stride.Rendering.RootRenderFeature"/>.
            </summary>
            Each time an object is added to the render system, multiple effect instantiations might live concurrently. This define one such instantiation.
            To give a concrete example, a typical <see cref="T:Stride.Rendering.MeshRenderFeature"/> might define a slot for main effect, one for gbuffer effect and one for shadow mapping effect.
        </member>
        <member name="F:Stride.Rendering.EffectPermutationSlot.Invalid">
            <summary>
            Invalid slot.
            </summary>
        </member>
        <member name="T:Stride.Rendering.EffectSystem">
            <summary>
            The effect system.
            </summary>
        </member>
        <member name="F:Stride.Rendering.EffectSystem.EffectUsed">
            <summary>
            Called each time a non-cached effect is requested.
            </summary>
        </member>
        <member name="P:Stride.Rendering.EffectSystem.FileProvider">
            <summary>
            Gets or sets the database file provider, to use for loading effects and shader sources.
            </summary>
            <value>
            The database file provider.
            </value>
        </member>
        <member name="M:Stride.Rendering.EffectSystem.#ctor(Stride.Core.IServiceRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.EffectSystem"/> class.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="M:Stride.Rendering.EffectSystem.LoadEffect(System.String,Stride.Shaders.Compiler.CompilerParameters)">
            <summary>
            Loads the effect.
            </summary>
            <param name="effectName">Name of the effect.</param>
            <param name="compilerParameters">The compiler parameters.</param>
            <param name="usedParameters">The used parameters.</param>
            <returns>A new instance of an effect.</returns>
            <exception cref="T:System.InvalidOperationException">Could not compile shader. Need fallback.</exception>
        </member>
        <member name="M:Stride.Rendering.EffectSystem.GetShaderFromParameters(System.String,Stride.Shaders.Compiler.CompilerParameters)">
            <summary>
            Get the shader from the database based on the parameters used for its compilation.
            </summary>
            <param name="effectName">Name of the effect.</param>
            <param name="parameters">The parameters.</param>
            <returns>The EffectBytecode if found.</returns>
        </member>
        <member name="T:Stride.Rendering.EffectSystemExtensions">
            <summary>
            Extensions for <see cref="T:Stride.Rendering.EffectSystem"/>
            </summary>
        </member>
        <member name="M:Stride.Rendering.EffectSystemExtensions.LoadEffect(Stride.Rendering.EffectSystem,System.String)">
            <summary>
            Creates an effect.
            </summary>
            <param name="effectSystem">The effect system.</param>
            <param name="effectName">Name of the effect.</param>
            <returns>A new instance of an effect.</returns>
        </member>
        <member name="T:Stride.Rendering.EffectValidator">
            <summary>
            How to use:
            BeginEffectValidation();
            ValidateParameter(key1, value1);
            ValidateParameter(key2, value2);
            ...
            EndEffectValidation(); //returns true if same as last time, false if something changed
            You can use EffectValues to actually compile the effect.
            </summary>
        </member>
        <member name="P:Stride.Rendering.EffectValidator.ShouldSkip">
            <summary>
            Sets this property to <c>true</c> to skip this effect.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Fonts.GameFontSystem">
            <summary>
            The game system in charge of calling <see cref="P:Stride.Rendering.Fonts.GameFontSystem.FontSystem"/>.
            </summary>
        </member>
        <member name="T:Stride.Rendering.FrameResourceGroupLayout">
            <summary>
            Implementation of <see cref="!:ResourceGroupLayout"/> specifically for PerFrame cbuffer of <see cref="T:Stride.Rendering.RenderSystem"/>.
            </summary>
        </member>
        <member name="T:Stride.Rendering.FrontToBackSortMode">
            <summary>
            Sort elements according to the pattern: [RenderFeature Sort Key 8 bits] [Distance front to back 16 bits] [RenderObject states 32 bits]
            </summary>
        </member>
        <member name="T:Stride.Rendering.GraphicsRendererCollection`1">
            <summary>
            A collection of <see cref="T:Stride.Rendering.IGraphicsRenderer"/> that is itself a <see cref="T:Stride.Rendering.IGraphicsRenderer"/> handling automatically
            <see cref="!:IGraphicsRenderer.Initialize"/> and <see cref="!:IGraphicsRenderer.Unload"/>.
            </summary>
            <typeparam name="T">Type of the <see cref="T:Stride.Rendering.IGraphicsRenderer"/></typeparam>.
        </member>
        <member name="T:Stride.Rendering.GraphicsRendererCollectionBase`1">
            <summary>
            A collection of <see cref="T:Stride.Rendering.IGraphicsRenderer"/> that is itself a <see cref="T:Stride.Rendering.IGraphicsRenderer"/> handling automatically
            <see cref="!:IGraphicsRenderer.Initialize"/> and <see cref="!:IGraphicsRenderer.Unload"/>.
            </summary>
            <typeparam name="T">Type of the <see cref="T:Stride.Rendering.IGraphicsRenderer"/></typeparam>.
        </member>
        <member name="M:Stride.Rendering.GraphicsRendererCollectionBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.GraphicsRendererCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.GraphicsRendererCollectionBase`1.Draw(Stride.Rendering.RenderDrawContext)">
            <summary>
            Draws this renderer with the specified context.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">context</exception>
            <exception cref="T:System.InvalidOperationException">Cannot use a different context between Load and Draw</exception>
        </member>
        <member name="T:Stride.Rendering.IEffectMixinProvider">
            <summary>
            Defines the interface to provide an effect mixin for a <see cref="!:CameraRendererMode"/>.
            </summary>
        </member>
        <member name="M:Stride.Rendering.IEffectMixinProvider.GenerateShaderSource">
            <summary>
            Generates the shader source used for rendering.
            </summary>
            <returns>ShaderSource.</returns>
        </member>
        <member name="T:Stride.Rendering.IGraphicsRenderer">
            <summary>
            A graphics renderer.
            </summary>
        </member>
        <member name="M:Stride.Rendering.IGraphicsRendererBase.Draw(Stride.Rendering.RenderDrawContext)">
            <summary>
            Draws this renderer with the specified context. See remarks.
            </summary>
            <param name="context">The context.</param>
            <remarks>The method <see cref="M:Stride.Rendering.IGraphicsRendererCore.Initialize(Stride.Rendering.RenderContext)"/> should be called automatically by the implementation if it was not done before the first draw.</remarks>
        </member>
        <member name="T:Stride.Rendering.IGraphicsRendererCore">
            <summary>
            The core interface of a renderer.
            </summary>
        </member>
        <member name="P:Stride.Rendering.IGraphicsRendererCore.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Stride.Rendering.IGraphicsRenderer"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Rendering.IGraphicsRendererCore.Initialized">
            <summary>
            Gets a value indicating whether this renderer is initialized.
            </summary>
        </member>
        <member name="M:Stride.Rendering.IGraphicsRendererCore.Initialize(Stride.Rendering.RenderContext)">
            <summary>
            Loads this renderer. See remarks.
            </summary>
            <param name="context">The context.</param>
            <remarks>This method allow a renderer to prepare for rendering. This method should be called once to initialize a renderer.</remarks>
        </member>
        <member name="T:Stride.Rendering.IImageEffectRenderer">
            <summary>
            Renderer interface for a end-user <see cref="T:Stride.Rendering.Images.ImageEffect"/> accessible from <see cref="!:SceneEffectRenderer"/>. See remarks.
            </summary>
            <remarks>
            An <see cref="T:Stride.Rendering.IImageEffectRenderer"/> expect an input texture on slot 0, possibly a depth texture on slot 1 and a single
            output.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Stride.Rendering.SubsurfaceScattering.SubsurfaceScatteringBlur.RenderMode" -->
        <member name="F:Stride.Rendering.SubsurfaceScattering.SubsurfaceScatteringBlur.RenderMode.Default">
            <userdoc>
            Renders the scene as usual.
            </userdoc>
        </member>
        <member name="F:Stride.Rendering.SubsurfaceScattering.SubsurfaceScatteringBlur.RenderMode.ShowScatteringObjects">
            <userdoc>
            Shows all scattering objects in white and all other objects in black.
            </userdoc>
        </member>
        <member name="F:Stride.Rendering.SubsurfaceScattering.SubsurfaceScatteringBlur.RenderMode.ShowMaterialIndex">
            <userdoc>
            Shows the material index of scattering objects as a color.
            </userdoc>
        </member>
        <member name="F:Stride.Rendering.SubsurfaceScattering.SubsurfaceScatteringBlur.RenderMode.ShowScatteringWidth">
            <userdoc>
            Shows the width of the scattering kernel as a brightness value (High values will be wrapped around).
            Use this to debug if each material gets its own scattering width and doesn't fluctuate.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.SubsurfaceScattering.SubsurfaceScatteringBlur.FollowSurface">
            <userdoc>
            If active, the the light won't scatter across large depth differences.
            The depth falloff can be configured using "Depth falloff strength".
            Attention: Enabling this increases the performance hit of the effect.
            </userdoc>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Stride.Rendering.SubsurfaceScattering.SubsurfaceScatteringBlur.NumberOfPasses" -->
        <!-- Badly formed XML comment ignored for member "P:Stride.Rendering.SubsurfaceScattering.SubsurfaceScatteringBlur.JitterKernelSize" -->
        <!-- Badly formed XML comment ignored for member "P:Stride.Rendering.SubsurfaceScattering.SubsurfaceScatteringBlur.ActiveRenderMode" -->
        <member name="P:Stride.Rendering.SubsurfaceScattering.SubsurfaceScatteringBlur.Id">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Rendering.Materials.SubsurfaceScatteringRenderFeature">
            <summary>
            Custom render feature, that prepares constants needed by SubsurfaceScatteringBlurEffect.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.SubsurfaceScatteringRenderFeature.DeduplicateMaterialParameters">
            <summary>
            Turns material parameter deduplication on or off.
            </summary>
            <userdoc>
            When enabled, SSS material parameters are deduplicated every frame and therefore more unique materials can be rendered at once but it comes at a CPU performance hit.
            The maximum number of unique SSS materials that can be rendered per frame is defined in SubsurfaceScatteringBlur (because it depends on the bit depth of the material index framebuffer).
            </userdoc>
        </member>
        <member name="M:Stride.Rendering.Materials.SubsurfaceScatteringRenderFeature.InitializeCore">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.Materials.SubsurfaceScatteringRenderFeature.Prepare(Stride.Rendering.RenderDrawContext)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialCelShadingLightFunction">
            <summary>
            Common interface for the Cel Light part of a cel shading model.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.IMaterialCelShadingLightFunction.Generate(Stride.Rendering.Materials.MaterialGeneratorContext)">
            <summary>
            Generates the shader class source used for the shader composition.
            </summary>
            <returns>ShaderSource.</returns>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialCelShadingLightDefault">
            <summary>
            Default Cel Shading ramp function applied
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialCelShadingLightRamp">
            <summary>
            Default Cel Shading ramp function applied
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialCelShadingLightRamp.RampTexture">
            <summary>
            The texture Reference.
            </summary>
            <userdoc>
            The reference to the texture asset to use.
            </userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialDiffuseCelShadingModelFeature">
            <summary>
            The diffuse Cel Shading for the diffuse material model attribute.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialDiffuseCelShadingModelFeature.FakeNDotL">
            <summary>
            When positive, the dot product between N and L will be modified to account for light intensity with the specified value as a factor
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialSpecularCelShadingModelFeature">
            <summary>
            The Cel Shading specular shading model.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.ColorChannel">
            <summary>
            A RGBA channel selected when performing texture sampling.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ColorChannel.R">
            <summary>
            The sampled color is returned as a float4(R, R, R, R)
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ColorChannel.G">
            <summary>
            The sampled color is returned as a float4(G, G, G, G)
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ColorChannel.B">
            <summary>
            The sampled color is returned as a float4(B, B, B, B)
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ColorChannel.A">
            <summary>
            The sampled color is returned as a float4(A, A, A, A)
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.ComputeColors.BinaryOperator">
            <summary>
            Operands of the MaterialNode.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.Add">
            <summary>
            Add of the two textures.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.Average">
            <summary>
            Average of the two textures.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.Color">
            <summary>
            Color effect from the two textures.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.ColorBurn">
            <summary>
            Color burn effect from the two textures.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.ColorDodge">
            <summary>
            Color dodge effect from the two textures.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.Darken">
            <summary>
            Darken effect from the two textures.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.Desaturate">
            <summary>
            Desaturate effect from the two textures.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.Difference">
            <summary>
            Difference of the two textures.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.Divide">
            <summary>
            Divide first texture with the second one.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.Exclusion">
            <summary>
            Exclusion effect from the two textures.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.HardLight">
            <summary>
            Hard light effect from the two textures.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.HardMix">
            <summary>
            hard mix effect from the two textures.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.Hue">
            <summary>
            Hue effect from the two textures.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.Illuminate">
            <summary>
            Illuminate effect from the two textures.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.In">
            <summary>
            In effect from the two textures.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.Lighten">
            <summary>
            Lighten effect from the two textures.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.LinearBurn">
            <summary>
            Linear burn effect from the two textures.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.LinearDodge">
            <summary>
            Linear dodge effect from the two textures.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.Mask">
            <summary>
            Apply mask from second texture to the first one.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.Multiply">
            <summary>
            Multiply the two textures.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.Out">
            <summary>
            Out effect from the two textures.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.Over">
            <summary>
            Over effect from the two textures.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.Overlay">
            <summary>
            Overlay effect from the two textures.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.PinLight">
            <summary>
            Pin light effect from the two textures.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.Saturate">
            <summary>
            Saturate effect from the two textures.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.Saturation">
            <summary>
            Saturation effect from the two textures.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.Screen">
            <summary>
            Screen effect from the two textures.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.SoftLight">
            <summary>
            Soft light effect from the two textures.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.Subtract">
            <summary>
            Subtract the two textures.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.SubstituteAlpha">
            <summary>
            Take color for the first texture but alpha from the second
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.ComputeColors.BinaryOperator.Threshold">
            <summary>
            Threshold, resulting in a black-white texture for grayscale against a set threshold
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.ComputeColors.ColorVertexStreamDefinition">
            <summary>
            A color coming from a vertex stream
            </summary>
            <userdoc>A color coming from a vertex stream.</userdoc>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ColorVertexStreamDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.ComputeColors.ColorVertexStreamDefinition"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ColorVertexStreamDefinition.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.ComputeColors.ColorVertexStreamDefinition"/> class.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="T:Stride.Rendering.Materials.ComputeColors.ComputeBinaryBase`1">
            <summary>
            A node that describe a binary operation between two <see cref="T:Stride.Rendering.Materials.IComputeNode"/>
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeBinaryBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.ComputeColors.ComputeBinaryBase`1"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeBinaryBase`1.#ctor(`0,`0,Stride.Rendering.Materials.ComputeColors.BinaryOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.ComputeColors.ComputeBinaryBase`1"/> class.
            </summary>
            <param name="leftChild">The left child.</param>
            <param name="rightChild">The right child.</param>
            <param name="binaryOperator">The material binary operand.</param>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeBinaryBase`1.Operator">
            <summary>
            The operation to blend the nodes.
            </summary>
            <userdoc>
            The operation between the left (background) and the right (foreground) sub-nodes.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeBinaryBase`1.LeftChild">
            <summary>
            The left (background) child node.
            </summary>
            <userdoc>
            The map used for the left (background) node.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeBinaryBase`1.RightChild">
            <summary>
            The right (foreground) child node.
            </summary>
            <userdoc>
            The map used for the right (foreground) node.
            </userdoc>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeBinaryBase`1.GetChildren(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeBinaryBase`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeBinaryBase`1.GetCorrespondingShaderSourceName(Stride.Rendering.Materials.ComputeColors.BinaryOperator)">
            <summary>
            Get the name of the ShaderClassSource corresponding to the operation
            </summary>
            <param name="binaryOperand">The operand.</param>
            <returns>The name of the ShaderClassSource.</returns>
        </member>
        <member name="T:Stride.Rendering.Materials.ComputeColors.ComputeBinaryColor">
            <summary>
            A node that describe a binary operation between two <see cref="T:Stride.Rendering.Materials.IComputeColor"/>
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeBinaryColor.HasChanged">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Rendering.Materials.ComputeColors.ComputeBinaryScalar">
            <summary>
            A node that describe a binary operation between two <see cref="T:Stride.Rendering.Materials.IComputeScalar"/>
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeBinaryScalar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.ComputeColors.ComputeBinaryScalar"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeBinaryScalar.#ctor(Stride.Rendering.Materials.IComputeScalar,Stride.Rendering.Materials.IComputeScalar,Stride.Rendering.Materials.ComputeColors.BinaryOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.ComputeColors.ComputeBinaryScalar"/> class.
            </summary>
            <param name="leftChild">The left child.</param>
            <param name="rightChild">The right child.</param>
            <param name="binaryOperator">The material binary operand.</param>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeColor.PremultiplyAlpha">
            <summary>
            Gets or sets a value indicating whether to convert the texture in pre-multiplied alpha.
            </summary>
            <value><c>true</c> to convert the texture in pre-multiplied alpha.; otherwise, <c>false</c>.</value>
            <userdoc>
            Pre-multiply the color values by the alpha value
            </userdoc>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeColor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.ComputeColors.ComputeColor"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeColor.#ctor(Stride.Core.Mathematics.Color4)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.ComputeColors.ComputeColor"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeColor.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeColor.HasChanged">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Rendering.Materials.ComputeColors.ComputeColorParameter">
            <summary>
            Base class for a Color compute color parameter.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeColorParameterSampler.Filtering">
            <summary>
            The texture filtering mode.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeColorParameterSampler.AddressModeU">
            <summary>
            The texture address mode.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeColorParameterSampler.AddressModeV">
            <summary>
            The texture address mode.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.ComputeColors.ComputeColorParameters">
            <summary>
            A custom dictionary to keep track of the order the elements were inserted.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeColorParameters.Serializer.Initialize(Stride.Core.Serialization.SerializerSelector)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeColorParameters.Serializer.Serialize(Stride.Rendering.Materials.ComputeColors.ComputeColorParameters@,Stride.Core.Serialization.ArchiveMode,Stride.Core.Serialization.SerializationStream)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Rendering.Materials.ComputeColors.ComputeFloat">
            <summary>
            A float compute color.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeFloat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.ComputeColors.ComputeFloat"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeFloat.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.ComputeColors.ComputeFloat"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeFloat4.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.ComputeColors.ComputeFloat4"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeFloat4.#ctor(Stride.Core.Mathematics.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.ComputeColors.ComputeFloat4"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeFloat4.HasChanged">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeFloat4.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Rendering.Materials.ComputeColors.ComputeKeyedBase">
            <summary>
            Base interface for all computer color nodes.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeKeyedBase.Key">
            <summary>
            Gets or sets a custom key associated to this node.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeKeyedBase.UsedKey">
            <summary>
            Gets or sets the used key.
            </summary>
            <value>The used key.</value>
        </member>
        <member name="T:Stride.Rendering.Materials.ComputeColors.ComputeNode">
            <summary>
            Base interface for all computer color nodes.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.ComputeColors.ComputeNode"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeNode.GetChildren(System.Object)">
            <summary>
            Gets the children.
            </summary>
            <param name="context">The context to get the children.</param>
            <returns>The list of children.</returns>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeNode.GenerateShaderSource(Stride.Rendering.Materials.ShaderGeneratorContext,Stride.Rendering.Materials.MaterialComputeColorKeys)">
            <summary>
            Generates the shader source equivalent for this node
            </summary>
            <returns>ShaderSource.</returns>
        </member>
        <member name="T:Stride.Rendering.Materials.ComputeColors.ComputeShaderClassBase`1">
            <summary>
            Base class for shader class node.
            </summary>
            <typeparam name="T">Type of the node (scalar or color)</typeparam>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeShaderClassBase`1.MixinReference">
            <summary>
            The shader.
            </summary>
            <userdoc>
            The shader used in this node. It should be a ComputeColor.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeShaderClassBase`1.Generics">
            <summary>
            The generics of this class.
            </summary>
            <userdoc>
            The generics of the shader. There is no need to edit the list, it is automatically filled when the shader is loaded.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeShaderClassBase`1.CompositionNodes">
            <summary>
            The compositions of this class.
            </summary>
            <userdoc>
            The compositions of the shader where material nodes can be attached. There is no need to edit the list, it is automatically filled when the shader is loaded.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeShaderClassBase`1.Members">
            <summary>
            The members of this class.
            </summary>
            <userdoc>
            The editables values of this shader. There is no need to edit the list, it is automatically filled when the shader is loaded.
            </userdoc>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeShaderClassBase`1.GetChildren(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeShaderClassBase`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Rendering.Materials.ComputeColors.ComputeShaderClassColor">
            <summary>
            A shader outputing a color/vector value.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeShaderClassColor.HasChanged">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Rendering.Materials.ComputeColors.ComputeShaderClassScalar">
            <summary>
            A shader outputing a single scalar value.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.ComputeColors.ComputeTextureBase">
            <summary>
            Base class for texture nodes
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeTextureBase.#ctor(Stride.Graphics.Texture,Stride.Rendering.Materials.TextureCoordinate,Stride.Core.Mathematics.Vector2,Stride.Core.Mathematics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.ComputeColors.ComputeTextureColor" /> class.
            </summary>
            <param name="texture">The texture.</param>
            <param name="texcoordIndex">Index of the texcoord.</param>
            <param name="scale">The scale.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeTextureBase.Enabled">
            <summary>
            Gets or sets the enable state of the texture.
            </summary>
            <userdoc>If unchecked, ignore the texture value and use the fallback value instead</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeTextureBase.Texture">
            <summary>
            The texture Reference.
            </summary>
            <userdoc>
            The reference to the texture asset
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeTextureBase.TexcoordIndex">
            <summary>
            The texture coordinate used to sample the texture.
            </summary>
            <userdoc>
            The coordinates used to sample the texture
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeTextureBase.Sampler">
            <summary>
            The sampler of the texture.
            </summary>
            <userdoc>
            The texture sampler
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeTextureBase.Filtering">
            <summary>
            The texture filtering mode.
            </summary>
            <userdoc>
            The texture filtering method
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeTextureBase.AddressModeU">
            <summary>
            The texture address mode.
            </summary>
            <userdoc>
            How to wrap the texture along the U (horizontal) axis
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeTextureBase.AddressModeV">
            <summary>
            The texture address mode.
            </summary>
            <userdoc>
            How to wrap the texture along the V (vertical) axis
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeTextureBase.Scale">
            <summary>
            The scale of the texture coordinates.
            </summary>
            <userdoc>
            The scale to apply to the texture coordinates. Values lower than 1 zoom the texture in; values greater than 1 tile it.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeTextureBase.Offset">
            <summary>
            The offset in the texture coordinates.
            </summary>
            <userdoc>
            The offset to apply to the model's texture coordinates
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeTextureBase.UseRandomTextureCoordinates">
            <summary>
            Uses random texture coordinates.
            </summary>
            <userdoc>
            Sample the input texture with random texture coordinates. This reduces tiling effects produced by high UV scales, but is costly.
            </userdoc>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeTextureBase.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Rendering.Materials.ComputeColors.ComputeTextureColor">
            <summary>
            A color texture node.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeTextureColor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeTextureColor.#ctor(Stride.Graphics.Texture)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.ComputeColors.ComputeTextureColor"/> class.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeTextureColor.#ctor(Stride.Graphics.Texture,Stride.Rendering.Materials.TextureCoordinate,Stride.Core.Mathematics.Vector2,Stride.Core.Mathematics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.ComputeColors.ComputeTextureColor" /> class.
            </summary>
            <param name="texture">The texture.</param>
            <param name="texcoordIndex">Index of the texcoord.</param>
            <param name="scale">The scale.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeTextureColor.HasChanged">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeTextureColor.Swizzle">
            <summary>
            Sets the channel swizzling for texture sampling.
            </summary>
            <userdoc>The default value is `rgba`.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeTextureColor.FallbackValue">
            <summary>
            Gets or sets the default value used when no texture is set.
            </summary>
            <userdoc>The fallback value used when no texture is set.</userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.ComputeColors.ComputeTextureScalar">
            <summary>
            A scalar texture node.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeTextureScalar.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeTextureScalar.#ctor(Stride.Graphics.Texture,Stride.Rendering.Materials.TextureCoordinate,Stride.Core.Mathematics.Vector2,Stride.Core.Mathematics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.ComputeColors.ComputeTextureColor" /> class.
            </summary>
            <param name="texture">The texture.</param>
            <param name="texcoordIndex">Index of the texcoord.</param>
            <param name="scale">The scale.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeTextureScalar.FallbackValue">
            <summary>
            Gets or sets the default value used when no texture is set.
            </summary>
            <userdoc>The fallback value used when no texture is set.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeTextureScalar.Channel">
            <summary>
            Gets or sets the channel.
            </summary>
            <value>The channel.</value>
            <userdoc>Selects the RGBA channel to sample from the texture.</userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.ComputeColors.ComputeValueBase`1">
            <summary>
            Base class for a constant value for <see cref="T:Stride.Rendering.Materials.ComputeColors.ComputeNode"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeValueBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.ComputeColors.ComputeValueBase`1"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeValueBase`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.ComputeColors.ComputeValueBase`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeValueBase`1.Value">
            <summary>
            The property to access the internal value
            </summary>
            <userdoc>
            The value.
            </userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.ComputeColors.ComputeVertexStreamBase">
            <summary>
            Class ComputeVertexStreamBase.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.ComputeColors.ComputeVertexStreamColor">
            <summary>
            A compute color producing a color from a stream.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeVertexStreamColor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.ComputeColors.ComputeVertexStreamColor"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeVertexStreamColor.HasChanged">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Rendering.Materials.ComputeColors.ComputeVertexStreamScalar">
            <summary>
            A compute scalar producing a scalar from a stream.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.ComputeVertexStreamScalar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.ComputeColors.ComputeVertexStreamScalar"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.ComputeVertexStreamScalar.Channel">
            <summary>
            Gets or sets the channel.
            </summary>
            <value>The channel.</value>
            <userdoc>Selects the RGBA channel to sample from the texture.</userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.ComputeColors.IComputeColorParameter">
            <summary>
            Interface defining a parameter for a <see cref="T:Stride.Rendering.Materials.ComputeColors.ComputeNode"/>
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.ComputeColors.IComputeVertexStream">
            <summary>
            A compute node that retrieve values from the stream.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.IComputeVertexStream.Stream">
            <summary>
            Gets or sets the stream.
            </summary>
            <value>The stream.</value>
        </member>
        <member name="T:Stride.Rendering.Materials.ComputeColors.IndexedVertexStreamDefinition">
            <summary>
            An indexed stream. 
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.IndexedVertexStreamDefinition.Index">
            <summary>
            Gets or sets the index.
            </summary>
            <value>The index.</value>
            <userdoc>The index in the named stream</userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.ComputeColors.IVertexStreamDefinition">
            <summary>
            Definition of a stream. e.g COLOR0, COLOR1...etc.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.IVertexStreamDefinition.GetSemanticName">
            <summary>
            Gets the name of the semantic.
            </summary>
            <returns>A string with the name of the stream semantic.</returns>
        </member>
        <member name="M:Stride.Rendering.Materials.ComputeColors.IVertexStreamDefinition.GetSemanticNameHash">
            <summary>
            Gets the hash code of the semantic name.
            </summary>
            <returns>An int with the hash code of the semantic name.</returns>
        </member>
        <member name="T:Stride.Rendering.Materials.ComputeColors.VertexStreamDefinitionBase">
            <summary>
            Base implementation for <see cref="T:Stride.Rendering.Materials.ComputeColors.IVertexStreamDefinition"/>
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.ComputeColors.VertexUserStreamDefinition">
            <summary>
            A user defined stream.
            </summary>
            <userdoc>
            A user defined stream.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.ComputeColors.VertexUserStreamDefinition.Name">
            <summary>
            Name of the semantic of the stream to read data from.
            </summary>
            <userdoc>
            Semantic name of the stream to read data from.
            </userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.DisplacementMapStage">
            <summary>
            Enumerates the different shader stages in which a displacement map can be applied.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.DisplacementMapStage.Vertex">
            <summary>
            The vertex shader
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.DisplacementMapStage.Domain">
            <summary>
            The domain shader
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialHairDirectionFunction">
            <summary>
            Common interface for calculating the hair direction vector for the hair shading model.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.IMaterialHairDirectionFunction.Generate(Stride.Rendering.Materials.MaterialGeneratorContext)">
            <summary>
            Generates the shader class source used for the shader composition.
            </summary>
            <returns>ShaderSource.</returns>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialHairDirectionFunctionBitangent">
            <summary>
            Uses the tangent vector as the hair direction.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialHairDirectionFunctionTangent">
            <summary>
            Uses the tangent vector as the hair direction.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialHairDiscardFunction">
            <summary>
            Common interface for discarding pixels for the hair shading model.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.IMaterialHairDiscardFunction.Generate(Stride.Rendering.Materials.MaterialGeneratorContext,Stride.Rendering.ValueParameterKey{System.Single})">
            <summary>
            Generates the shader class source used for the shader composition.
            </summary>
            <returns>ShaderSource.</returns>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialHairDiscardFunctionOpaquePass">
            <summary>
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialHairDiscardFunctionTransparentPass">
            <summary>
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialHairLightAttenuationFunction">
            <summary>
            Common interface for calculating the light attenuation for the hair shading model.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.IMaterialHairLightAttenuationFunction.Generate(Stride.Rendering.Materials.MaterialGeneratorContext)">
            <summary>
            Generates the shader class source used for the shader composition.
            </summary>
            <returns>ShaderSource.</returns>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialHairLightAttenuationFunctionDirectional">
            <summary>
            Applies light attenuation with configurable hardness.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialHairLightAttenuationFunctionDirectional.Hardness">
            <summary>
            Defines the exponent used in the shader.
            </summary>
            <userdoc>
            Defines the hardness of the transition from shadowed to unshadowed areas.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialHairLightAttenuationFunctionDirectional.BoundaryShift">
            <summary>
            The interpolation factor used for shifting the boundary between lit and unlit areas.
            </summary>
            <userdoc>
            Use this parameter to shift the boundary between lit and unlit areas in order to mitigate shadow mapping artifacts.
            </userdoc>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Stride.Rendering.Materials.MaterialHairLightAttenuationFunctionDirectional.SelectedNormalMode" -->
        <member name="T:Stride.Rendering.Materials.MaterialHairLightAttenuationFunctionNone">
            <summary>
            Applies no light attenuation.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialDiffuseHairModelFeature">
            <summary>
            The diffuse subsurface scattering for the diffuse material model attribute.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialDiffuseHairModelFeature.DebugRenderPasses">
            <summary>
            Enables/disables color coding of each render pass.
            </summary>
            <userdoc>
            Enables/disables color coding of each render pass.
            The opaque pixels get colored in red.
            The transparent back-face pixels get colored in green.
            The transparent front-face pixels get colored in blue.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialDiffuseHairModelFeature.ShadingModel">
            <summary>
            The shading model to use for the hair shading.
            </summary>
            <userdoc>
            The shading model to use for the hair shading.
            "Scheuermann approximation" offsers the best performance, but worst quality.
            "Scheuermann improved" offers better quality at slightly worse performance.
            "Kajiya-Kay shifted" offers the best quality at the lowest performance.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialDiffuseHairModelFeature.HairDirectionFunction">
            <summary>
            Defines whether the tangent or bitangent vectors represent the hair strands direction.
            </summary>
            <userdoc>
            This option depends on how the 3D model was authored.
            If your 3D model's tangent vectors are aligned with the direction of hair flow, select "Tangent".
            If the binormal/bitangent vectors are aligned with the hair flow instead, select "Bitangent".
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialDiffuseHairModelFeature.HairShadowingFunction">
            <summary>
            Defines whether to use traditional shadow mapping or subsurface scattering for shadowing the hair.
            </summary>
            <userdoc>
            Defines whether to use traditional shadow mapping or subsurface scattering for shadowing the hair.
            Subsurface scattering makes the hair partially translucent, allowing light to pass through the hair mesh.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialDiffuseHairModelFeature.LightAttenuationFunction">
            <summary>
            Additional light attenuation.
            </summary>
            <userdoc>
            Additional light attenuation.
            Select "Directional" for attenuation based on the surface normals.
            Select "None" for no attenuation.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialDiffuseHairModelFeature.AlphaThreshold">
            <summary>
            Defines the value used in the alpha test.
            </summary>
            <userdoc>
            Any alpha value above this value is considered opaque.
            ATTENTION: Make sure that the value defined in the specular hair shading model is the same as this one!
            </userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialSpecularHairModelFeature">
            <summary>
            The microfacet specular shading model.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.DebugRenderPasses">
            <summary>
            Enables/disables color coding of each render pass.
            </summary>
            <userdoc>
            Enables/disables color coding of each render pass.
            The opaque pixels get colored in red.
            The transparent back-face pixels get colored in green.
            The transparent front-face pixels get colored in blue.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.ShadingModel">
            <summary>
            The shading model to use for the hair shading.
            </summary>
            <userdoc>
            The shading model to use for the hair shading.
            "Scheuermann approximation" offsers the best performance, but worst quality.
            "Scheuermann improved" offers better quality at slightly worse performance.
            "Kajiya-Kay shifted" offers the best quality at the lowest performance.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.SpecularExponent1">
            <summary>
            Exponent of the primary specular highlight.
            </summary>
            <userdoc>
            You can use this parameter to control the size and hardness of the primary specular highlight.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.SpecularColor1">
            <summary>
            Color of the primary specular reflecton.
            </summary>
            <userdoc>
            Even though the primary specular highlight is theoretically white, you can modify its color for artistic purposes.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.SpecularScale1">
            <summary>
            Strength of the primary specular reflection.
            </summary>
            <userdoc>
            You can use this parameter to control the strength of the primary specular highlight.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.SpecularExponent2">
            <summary>
            Exponent of the secondary specular highlight.
            </summary>
            <userdoc>
            You can use this parameter to control the size and hardness of the secondary specular highlight.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.SpecularColor2">
            <summary>
            Color of the secondary specular reflecton.
            </summary>
            <userdoc>
            The secondary specular highlight has a color that should depend on the hair color.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.SpecularScale2">
            <summary>
            Strength of the secondary specular reflection.
            </summary>
            <userdoc>
            You can use this parameter to control the strength of the secondary specular highlight.
            </userdoc>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.SpecularShiftRatio" -->
        <member name="P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.ScalesAngle">
            <summary>
            Controls the shift of the primary and secondary specular reflections.
            </summary>
            <userdoc>
            The highlights are shifted because of the angle of the hair scales. You can control this angle (real-life values are between 5~10 degrees) to vary the position of the highlights.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.ShiftNoiseScale">
            <summary>
            Scale that gets multiplied with the noise value produced by HairSpecularHighlightsShiftNoise.
            </summary>
            <userdoc>
            Use this to control how much the specular shift texture should shift the specular reflections. 
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.GlintsNoiseStrength">
            <summary>
            </summary>
            <userdoc>
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.AlphaThreshold">
            <summary>
            Defines the value used in the alpha test.
            </summary>
            <userdoc>
            Any alpha value above this value is considered opaque.
            ATTENTION: Make sure that the value defined in the diffuse hair shading model is the same as this one!
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.HairSpecularHighlightsShiftNoise">
            <summary>
            This texture is used to shift the two specular highlights to break the uniform look of the hair.
            </summary>
            <userdoc>
            This texture is used to shift the two specular highlights to break the uniform look of the hair.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.HairSecondarySpecularGlintsNoise">
            <summary>
            The texure that is multiplied with the secondary specular reflections to give them a sparkling look.
            </summary>
            <userdoc>
            The texure that is multiplied with the secondary specular reflections to give them a sparkling look.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.HairDirectionFunction">
            <summary>
            Defines whether the tangent or bitangent vectors represent the hair strands direction.
            </summary>
            <userdoc>
            This option depends on how the 3D model was authored.
            If your 3D model's tangent vectors are aligned with the direction of hair flow, select "Tangent".
            If the binormal/bitangent vectors are aligned with the hair flow instead, select "Bitangent".
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.HairShadowingFunction">
            <summary>
            Defines whether to use traditional shadow mapping or subsurface scattering for shadowing the hair.
            </summary>
            <userdoc>
            Defines whether to use traditional shadow mapping or subsurface scattering for shadowing the hair.
            Subsurface scattering makes the hair partially translucent, allowing light to pass through the hair mesh.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.LightAttenuationFunction">
            <summary>
            Additional light attenuation.
            </summary>
            <userdoc>
            Additional light attenuation.
            Select "Directional" for attenuation based on the surface normals.
            Select "None" for no attenuation.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.Environment">
            <userdoc>
            Specifies the function to use to calculate the environment DFG term in the micro-facet lighting equation. 
            This defines how the material reflects specular cubemaps.
            </userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialHairShadowingFunction">
            <summary>
            Common interface for calculating the shadowing (light occlusion) for the hair shading model.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.IMaterialHairShadowingFunction.Generate(Stride.Rendering.Materials.MaterialGeneratorContext)">
            <summary>
            Generates the shader class source used for the shader composition.
            </summary>
            <returns>ShaderSource.</returns>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialHairShadowingFunctionScattering">
            <summary>
            Trades traditional shadow mapping for thickness attenuated shadowing to fake scattering.
            </summary>
            <userdoc>
            Light will be scattered in the hair. 
            You can control the scattering falloff with the "Extinction strength" parameter.
            Keep in mind that any shadow will create partial occlusion, even shadows cast from opaque objects onto the hair.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialHairShadowingFunctionScattering.ExtinctionStrength">
            <summary>
            Controls how strong the scattering falloff is.
            </summary>
            <userdoc>
            Controls how strong the material absorbs the light.
            A higher value results in a "faster" falloff.
            </userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialHairShadowingFunctionShadowing">
            <summary>
            Shadows the hair using traditional shadow mapping.
            The hair will be treated as an opaque surface.
            </summary>
            <userdoc>
            Shadows the hair using traditional shadow mapping.
            The hair will be treated as an opaque surface.
            </userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.IComputeColor">
            <summary>
            Base interface for vector/color based compute color nodes.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.IComputeColor.HasChanged">
            <summary>
            Indicates if the IComputeColor has changed since the last time it was checked, which might require recompilation of the shader mixins.
            Once polled, it will reset all cached states and revert to false until other changes have been triggered.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.IComputeNode">
            <summary>
            Base interface for all <see cref="T:Stride.Rendering.Materials.IComputeNode"/>
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.IComputeNode.GetChildren(System.Object)">
            <summary>
            Gets the children.
            </summary>
            <param name="context">The context to get the children.</param>
            <returns>The list of children.</returns>
        </member>
        <member name="M:Stride.Rendering.Materials.IComputeNode.GenerateShaderSource(Stride.Rendering.Materials.ShaderGeneratorContext,Stride.Rendering.Materials.MaterialComputeColorKeys)">
            <summary>
            Generates the shader source equivalent for this node
            </summary>
            <returns>ShaderSource.</returns>
        </member>
        <member name="T:Stride.Rendering.Materials.IComputeScalar">
            <summary>
            Base interface for scalar compute color nodes.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.IEnergyConservativeDiffuseModelFeature">
            <summary>
            Base interface for specular models supporting energy conservation.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.IEnergyConservativeDiffuseModelFeature.IsEnergyConservative">
            <summary>
            A value indicating whether this instance is energy conservative.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialAttributes">
            <summary>
            Base interface for material attributes
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialDescriptor">
            <summary>
            Common interface for the description of a material.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.IMaterialDescriptor.MaterialId">
            <summary>
            Gets the material identifier used only internaly to match material instance by id (when cloning an asset for example)
            to provide an error when defining a material that is recursively referencing itself.
            </summary>
            <value>The material identifier.</value>
        </member>
        <member name="P:Stride.Rendering.Materials.IMaterialDescriptor.Attributes">
            <summary>
            Gets or sets the material attributes.
            </summary>
            <value>The material attributes.</value>
        </member>
        <member name="P:Stride.Rendering.Materials.IMaterialDescriptor.Layers">
            <summary>
            Gets or sets the material compositor.
            </summary>
            <value>The material compositor.</value>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialDiffuseFeature">
            <summary>
            Base interface for a diffuse material feature.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialDiffuseModelFeature">
            <summary>
            Base interface for the diffuse model material feature.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialDisplacementFeature">
            <summary>
            Base interface for a displacement material feature.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialEmissiveFeature">
            <summary>
            Base interface for the emissive model material feature.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialFeature">
            <summary>
            Base interface for a material feature.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.IMaterialFeature.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Stride.Rendering.Materials.IMaterialFeature"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialLayers">
            <summary>
            An interface for defining layers of material.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialMicroSurfaceFeature">
            <summary>
            Base interface for a micro-surface material feature.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialOcclusionFeature">
            <summary>
            Base interface for the occlusion material feature.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialShaderGenerator">
            <summary>
            Defines the interface to generate the shaders for a <see cref="T:Stride.Rendering.Materials.IMaterialFeature"/>
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.IMaterialShaderGenerator.Visit(Stride.Rendering.Materials.MaterialGeneratorContext)">
            <summary>
            Generates the shader.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialShadingModelFeature">
            <summary>
            Base interface for a shading light dependent model material feature.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialSpecularFeature">
            <summary>
            Base interface for a specular material feature.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialSpecularMicrofacetEnvironmentFunction">
            <summary>
            Common interface for the environment (DFG) Function of a microfacet shading model.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialSpecularMicrofacetFresnelFunction">
            <summary>
            Common interface for the Fresnel part of a microfacet shading model.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialSpecularMicrofacetFunction">
            <summary>
            Common interface for a microfacet function.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.IMaterialSpecularMicrofacetFunction.Generate(Stride.Rendering.Materials.MaterialGeneratorContext)">
            <summary>
            Generates the shader class source used for the shader composition.
            </summary>
            <param name="context"></param>
            <returns>ShaderSource.</returns>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialSpecularMicrofacetNormalDistributionFunction">
            <summary>
            Common interface for the Normal Distribution Function of a microfacet shading model.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialSpecularMicrofacetVisibilityFunction">
            <summary>
            Common interface for the Geometric Shadowing Function of a microfacet shading model.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialSpecularModelFeature">
            <summary>
            Base interface for the specular model material feature.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialSubsurfaceScatteringFeature">
            <summary>
            Base interface for the subsurface scattering model material feature.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialSurfaceFeature">
            <summary>
            Base interface for the surface material feature (normals...etc.)
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialTessellationFeature">
            <summary>
            Base interface for a tessellation material feature.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialTransparencyFeature">
            <summary>
            Base interface for the transparency material feature.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialAttributes">
            <summary>
            Common material attributes.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.MaterialAttributes"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialAttributes.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Stride.Rendering.Materials.MaterialAttributes"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialAttributes.Tessellation">
            <summary>
            Gets or sets the tessellation.
            </summary>
            <value>The tessellation.</value>
            <userdoc>The method used for tessellation (subdividing model poligons to increase realism)</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialAttributes.Displacement">
            <summary>
            Gets or sets the displacement.
            </summary>
            <value>The displacement.</value>
            <userdoc>The method used for displacement (altering vertex positions by adding offsets)</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialAttributes.Surface">
            <summary>
            Gets or sets the surface.
            </summary>
            <value>The surface.</value>
            <userdoc>The method used to alter macrosurface aspects (eg perturbing the normals of the model)</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialAttributes.MicroSurface">
            <summary>
            Gets or sets the micro surface.
            </summary>
            <value>The micro surface.</value>
            <userdoc>The method used to alter the material microsurface</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialAttributes.Diffuse">
            <summary>
            Gets or sets the diffuse.
            </summary>
            <value>The diffuse.</value>
            <userdoc>The method used to determine the diffuse color of the material. 
            The diffuse color is the essential (pure) color of the object without reflections.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialAttributes.DiffuseModel">
            <summary>
            Gets or sets the diffuse model.
            </summary>
            <value>The diffuse model.</value>
            <userdoc>The shading model used to render the diffuse color.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialAttributes.Specular">
            <summary>
            Gets or sets the specular.
            </summary>
            <value>The specular.</value>
            <userdoc>The method used to determine the specular color. 
            This is the color produced by the reflection of a white light on the object.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialAttributes.SpecularModel">
            <summary>
            Gets or sets the specular model.
            </summary>
            <value>The specular model.</value>
            <userdoc>The shading model used to render the material specular color</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialAttributes.Occlusion">
            <summary>
            Gets or sets the occlusion.
            </summary>
            <value>The occlusion.</value>
            <userdoc>The occlusion method. Occlusions modulate the ambient and direct lighting of the material to simulate shadows or cavity artifacts.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialAttributes.Emissive">
            <summary>
            Gets or sets the emissive.
            </summary>
            <value>The emissive.</value>
            <userdoc>The method used to determine the emissive color (the color emitted by the object)
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialAttributes.Transparency">
            <summary>
            Gets or sets the transparency.
            </summary>
            <value>The transparency.</value>
            <userdoc>The method used to determine the transparency</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialAttributes.Overrides">
            <summary>
            Gets or sets the overrides.
            </summary>
            <value>The overrides.</value>
            <userdoc>Override properties of the current material</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialAttributes.CullMode">
            <summary>
            Gets or sets the cull mode used for the material.
            </summary>
            <userdoc>Cull some faces of the model depending on orientation</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialAttributes.ClearCoat">
            <summary>
            Gets or sets the clear coat shading features for the material.
            </summary>
            <userdoc>Use clear-coat shading to simulate vehicle paint</userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialBlendLayer">
            <summary>
            A material blend layer
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialBlendLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.MaterialBlendLayer"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialBlendLayer.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Stride.Rendering.Materials.MaterialBlendLayer"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
            <userdoc>Take the layer into account; otherwise ignore it</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialBlendLayer.Name">
            <summary>
            Gets or sets the name of this blend layer.
            </summary>
            <value>The name.</value>
            <userdoc>The name of the material layer</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialBlendLayer.Material">
            <summary>
            Gets or sets the material.
            </summary>
            <value>The material.</value>
            <userdoc>The reference to the material asset to layer.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialBlendLayer.BlendMap">
            <summary>
            Gets or sets the blend map.
            </summary>
            <value>The blend map.</value>
            <userdoc>The blend map specifying how to blend the material with the previous layer.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialBlendLayer.Overrides">
            <summary>
            Gets or sets the material overrides.
            </summary>
            <value>The overrides.</value>
            <userdoc>Can be used to override properties of the referenced material.</userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialBlendLayerContext">
            <summary>
            Context used by a layer to store intermediate information (streams used, shading models...etc.)
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialBlendLayerContext.#ctor(Stride.Rendering.Materials.MaterialGeneratorContext,Stride.Rendering.Materials.MaterialBlendLayerContext,Stride.Rendering.Materials.IComputeScalar)">
            <summary>
            Initializes a new instance of <see cref="T:Stride.Rendering.Materials.MaterialBlendLayerContext"/>.
            </summary>
            <param name="context">The material generator context</param>
            <param name="parentLayerContext">The parent layer context</param>
            <param name="blendMap">The blend map used for this layer</param>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialBlendLayerPerStageContext">
            <summary>
            Defines the context used by a stage for a layer.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialBlendLayerPerStageContext.ComputeShaderSource">
            <summary>
            Squash <see cref="P:Stride.Rendering.Materials.MaterialBlendLayerPerStageContext.ShaderSources"/> to a single ShaderSource (compatible with IComputeColor)
            </summary>
            <returns>The squashed <see cref="T:Stride.Shaders.ShaderSource"/> or null if nothing to squash</returns>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialBlendLayers">
            <summary>
            A composition material to blend different materials in a stack based manner.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialBlendLayers.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.MaterialBlendLayers"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialClearCoatFeature.LODDistance">
            <summary>
            Gets or sets the distance at which the base paint layer should transition to the metal flakes layer.
            </summary>
            <value>The transition distance.</value>
            <userdoc>
            The distance (in world units) at which the base paint layer transitions to the metal flake layer
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialClearCoatFeature.BasePaintDiffuseMap">
            <summary>
            Gets or sets the base paint layer diffuse map.
            </summary>
            <value>The diffuse map.</value>
            <userdoc>
            The diffuse map used by the base paint layer (the lowest  layer). This determines the color of the layer.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialClearCoatFeature.BasePaintGlossinessMap">
            <summary>
            Gets or sets the base paint smoothness map.
            </summary>
            <value>The smoothness map.</value>
            <userdoc>
            The gloss map used by the base paint layer. For a coherent result, use the metal flake normal map as a mask.   
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialClearCoatFeature.BasePaintGlossinessInvert">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:Stride.Rendering.Materials.MaterialClearCoatFeature.BasePaintGlossinessMap"/> is invert.
            </summary>
            <value><c>true</c> if invert; otherwise, <c>false</c>.</value>
            <userdoc>Inverts the gloss value (eg a value of 1.0 produces zero gloss instead of maximum). This effectively turns the gloss attribute into a roughness attribute
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialClearCoatFeature.MetalFlakesDiffuseMap">
            <summary>
            Gets or sets the metal flakes diffuse map.
            </summary>
            <value>The diffuse map.</value>
            <userdoc>
            The diffuse map used by the metal flakes layer (the layer above the base paint). For a coherent result, use a value close to the base paint value.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialClearCoatFeature.MetalFlakesGlossinessMap">
            <summary>
            Gets or sets the metal flakes smoothness map.
            </summary>
            <value>The smoothness map.</value>
            <userdoc>
            The gloss map used by the metal flakes layer. For a coherent result, use the metal flakes normal map as a mask.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialClearCoatFeature.MetalFlakesGlossinessInvert">
            <summary>
            Gets or sets a value indicating whether this <see cref="P:Stride.Rendering.Materials.MaterialClearCoatFeature.MetalFlakesGlossinessMap"/> is invert.
            </summary>
            <value><c>true</c> if invert; otherwise, <c>false</c>.</value>
            <userdoc>Inverts the gloss value (eg a value of 1.0 produces zero gloss instead of maximum). This effectively turns the gloss attribute into a roughness attribute.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialClearCoatFeature.MetalFlakesMetalnessMap">
            <summary>
            Gets or sets the metal flakes metalness map.
            </summary>
            <userdoc>
            The metalness map used by the metal flakes layer. For best results, use high values.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialClearCoatFeature.MetalFlakesNormalMap">
            <summary>
            Gets or sets the normal map used for the metal flakes layer.
            </summary>
            <value>The normal map.</value>
            <userdoc>
            The normal map used by the metal flakes layer. This shapes the flake geometry. If the texture has a high UV scale, enable "Use random texture coordinates" below to reduce tiling effects.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialClearCoatFeature.MetalFlakesScaleAndBias">
            <summary>
            Gets or sets a value indicating whether to scale by (2,2) and offset by (-1,-1) the normal map.
            </summary>
            <value><c>true</c> if scale and offset this normal map; otherwise, <c>false</c>.</value>
            <userdoc>
            Scale the XY by (2,2) and offset by (-1,-1). Required to unpack unsigned values of [0..1] to signed coordinates of [-1..+1].
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialClearCoatFeature.MetalFlakeslIsXYNormal">
            <summary>
            Gets or sets a value indicating whether the normal is only stored in XY components and Z is assumed to be sqrt(1 - x*x - y*y).
            </summary>
            <value><c>true</c> if this instance is xy normal; otherwise, <c>false</c>.</value>
            <userdoc>
            Calculate the Z component of the normal vector from X and Y, assuming Z = sqrt(1 - x*x - y*y).
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialClearCoatFeature.ClearCoatGlossinessMap">
            <summary>
            Gets or sets the clear coat smoothness map.
            </summary>
            <value>The smoothness map.</value>
            <userdoc>
            The gloss map used by the clear coat layer. Change this value to simulate different kinds of paint (eg matte).
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialClearCoatFeature.ClearCoatGlossinessInvert">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:Stride.Rendering.Materials.MaterialClearCoatFeature.ClearCoatGlossinessMap"/> is invert.
            </summary>
            <value><c>true</c> if invert; otherwise, <c>false</c>.</value>
            <userdoc>Inverts the gloss value (eg a value of 1.0 produces zero gloss instead of maximum). This effectively turns the gloss attribute into a roughness attribute.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialClearCoatFeature.ClearCoatMetalnessMap">
            <summary>
            Gets or sets the clear coat metalness map.
            </summary>
            <userdoc>
            The metalness map used by the clear coat layer
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialClearCoatFeature.OrangePeelNormalMap">
            <summary>
            Gets or sets the normal map used for the clear coat layer.
            </summary>
            <value>The normal map.</value>
            <userdoc>
            The normal map used by the clear coat layer to create an "orange peel" effect. This reflects light in different angles, simulating paint imperfections whereby the texture appears bumpy, like the skin of an orange.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialClearCoatFeature.OrangePeelScaleAndBias">
            <summary>
            Gets or sets a value indicating whether to scale by (2,2) and offset by (-1,-1) the normal map.
            </summary>
            <value><c>true</c> if scale and offset this normal map; otherwise, <c>false</c>.</value>
            <userdoc>
            Scale the XY by (2,2) and offset by (-1,-1). Required to unpack unsigned values of [0..1] to signed coordinates of [-1..+1].
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialClearCoatFeature.OrangePeelIsXYNormal">
            <summary>
            Gets or sets a value indicating whether the normal is only stored in XY components and Z is assumed to be sqrt(1 - x*x - y*y).
            </summary>
            <value><c>true</c> if this instance is xy normal; otherwise, <c>false</c>.</value>
            <userdoc>
            If there's no Z component in the texture, reconstruct it from the X and Y components. This assumes that Z = sqrt(1 - x*x - y*y) and that Z is always positive, so no normal vector can point to the back side of the surface. We recommend you enable this option, as Stride might remove the Z component when you compress normal maps.
            </userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialDescriptor">
            <summary>
            A descriptor of a <see cref="T:Stride.Rendering.Material"/>.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.MaterialDescriptor"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialDescriptor.Attributes">
            <summary>
            Gets or sets the material attributes.
            </summary>
            <value>The material attributes.</value>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialDescriptor.Layers">
            <summary>
            Gets or sets the material compositor.
            </summary>
            <value>The material compositor.</value>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialDiffuseLambertModelFeature">
            <summary>
            The diffuse Lambertian for the diffuse material model attribute.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialDiffuseMapFeature">
            <summary>
            A Diffuse map for the diffuse material feature.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialDiffuseMapFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.MaterialDiffuseMapFeature"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialDiffuseMapFeature.#ctor(Stride.Rendering.Materials.IComputeColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.MaterialDiffuseMapFeature"/> class.
            </summary>
            <param name="diffuseMap">The diffuse map.</param>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialDiffuseMapFeature.DiffuseMap">
            <summary>
            Gets or sets the diffuse map.
            </summary>
            <value>The diffuse map.</value>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialDisplacementMapFeature">
            <summary>
            The displacement map for a surface material feature.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialDisplacementMapFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.MaterialDisplacementMapFeature"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialDisplacementMapFeature.#ctor(Stride.Rendering.Materials.IComputeScalar)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.MaterialDisplacementMapFeature"/> class.
            </summary>
            <param name="displacementMap">The displacement map.</param>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialDisplacementMapFeature.DisplacementMap">
            <summary>
            Gets or sets the displacement map.
            </summary>
            <value>The displacement map.</value>
            <userdoc>
            The map containing the displacement offsets to apply onto the model vertex positions.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialDisplacementMapFeature.Intensity">
            <summary>
            Gets or sets the displacement map.
            </summary>
            <value>The displacement map.</value>
            <userdoc>
            The intensity factor of the displacement. This scales the offset introduced by displacement map.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialDisplacementMapFeature.ScaleAndBias">
            <summary>
            Gets or sets a value indicating whether to scale by (2,2,2) and bias by (-1,-1,-1) the displacement map.
            </summary>
            <value><c>true</c> if scale and bias this displacement map; otherwise, <c>false</c>.</value>
            <userdoc>
            Scale by (2,2,2) and bias by (-1,-1,-1) this displacement map.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialDisplacementMapFeature.Stage">
            <summary>
            Gets or sets a value indicating in which stage the displacement should occur.
            </summary>
            <userdoc>
            The value indicating in which stage the displacement will occur.
            </userdoc>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialEmissiveMapFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.MaterialEmissiveMapFeature"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialEmissiveMapFeature.#ctor(Stride.Rendering.Materials.IComputeColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.MaterialEmissiveMapFeature"/> class.
            </summary>
            <param name="emissiveMap">The emissive map.</param>
            <exception cref="T:System.ArgumentNullException">emissiveMap</exception>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialEmissiveMapFeature.EmissiveMap">
            <summary>
            Gets or sets the diffuse map.
            </summary>
            <value>The diffuse map.</value>
            <userdoc>The map specifying the color emitted by the material.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialEmissiveMapFeature.Intensity">
            <summary>
            Gets or sets the intensity.
            </summary>
            <value>The intensity.</value>
            <userdoc>The map specifying the intensity of the light emitted by the material. This scales the color value specified by emissive map.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialEmissiveMapFeature.UseAlpha">
            <summary>
            Gets or sets a value indicating whether to use the alpha component of the emissive map as main alpha color for the material.
            </summary>
            <value><c>true</c> if [use alpha]; otherwise, <c>false</c>.</value>
            <userdoc>Use the emissive map alpha component as main alpha color for the material. Otherwise, use the diffuse alpha color.</userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialFeature">
            <summary>
            A material feature
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialFeature.MultipassGeneration(Stride.Rendering.Materials.MaterialGeneratorContext)">
            <summary>
            Called during prepass, used to enumerate extra passes.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialFeature.GenerateShader(Stride.Rendering.Materials.MaterialGeneratorContext)">
            <summary>
            Generates the shader for the feature.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="F:Stride.Rendering.Materials.MaterialGeneratorStep.PassesEvaluation">
            <summary>
            Generates multipass materials.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.MaterialGeneratorStep.GenerateShader">
            <summary>
            Generates shader.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialGeneratorContext">
            <summary>
            Main entry point class for generating shaders from a <see cref="T:Stride.Rendering.Materials.MaterialDescriptor"/>
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialGeneratorContext.#ctor(Stride.Rendering.Material,Stride.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of <see cref="T:Stride.Rendering.Materials.MaterialGeneratorContext"/>.
            </summary>
            <param name="material"></param>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialGeneratorContext.GraphicsProfile">
            <summary>
            The graphics profile this material will be compatiable with.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialGeneratorContext.Material">
            <summary>
            Gets the compiled <see cref="P:Stride.Rendering.Materials.MaterialGeneratorContext.Material"/>.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialGeneratorContext.MaterialPass">
            <summary>
            Gets the compiled <see cref="P:Stride.Rendering.Materials.MaterialGeneratorContext.MaterialPass"/>. Only valid during <see cref="F:Stride.Rendering.Materials.MaterialGeneratorStep.GenerateShader"/>.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialGeneratorContext.Step">
            <summary>
            The current step of material generation.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialGeneratorContext.PassIndex">
            <summary>
            The current pass (used by multipass materials). Only valid during <see cref="F:Stride.Rendering.Materials.MaterialGeneratorStep.GenerateShader"/>.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialGeneratorContext.PassCount">
            <summary>
            In case of multi pass materials, this describe the number of passes.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialGeneratorContext.CurrentMaterialDescriptor">
            <summary>
            The current material descriptor on the material stack
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialGeneratorContext.SetMultiplePasses(System.String,System.Int32)">
            <summary>
            Register this material with multiple passes. This is only possible once.
            </summary>
            <param name="module">The module</param>
            <param name="passCount"></param>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialGeneratorContext.PushMaterial(Stride.Rendering.Materials.IMaterialDescriptor,System.String)">
            <summary>
            Push a material for processing.
            </summary>
            <param name="materialDescriptor">The material descriptor.</param>
            <param name="materialName">Friendly name of the material.</param>
            <returns><c>true</c> if the material is valid and can be visited, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">materialDescriptor</exception>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialGeneratorContext.PushLayer(Stride.Rendering.Materials.IComputeScalar)">
            <summary>
            Pushes a new layer with the specified blend map.
            </summary>
            <param name="blendMap">The blend map used by this layer.</param>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialGeneratorContext.PopLayer">
            <summary>
            Pops the current layer.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialGeneratorContext.ProcessIntermediateLayer(Stride.Rendering.Materials.MaterialBlendLayerContext,System.Boolean)">
            <summary>
            Processes the intermediate layer.
            </summary>
            <param name="layer">The layer.</param>
            <param name="isLastLayer">if set to <c>true</c> the layer is the last children of the parent layer.</param>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialGlossinessMapFeature">
            <summary>
            A smoothness map for the micro-surface material feature.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialGlossinessMapFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.MaterialGlossinessMapFeature"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialGlossinessMapFeature.#ctor(Stride.Rendering.Materials.IComputeScalar)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.MaterialGlossinessMapFeature"/> class.
            </summary>
            <param name="glossinessMap">The glossiness map.</param>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialGlossinessMapFeature.GlossinessMap">
            <summary>
            Gets or sets the smoothness map.
            </summary>
            <value>The smoothness map.</value>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialGlossinessMapFeature.Invert">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Stride.Rendering.Materials.MaterialGlossinessMapFeature"/> is invert.
            </summary>
            <value><c>true</c> if invert; otherwise, <c>false</c>.</value>
            <userdoc>Consider the map as a roughness map instead of a gloss map. 
            A roughness value of 1.0 corresponds to a gloss value of 0.0 and vice-versa.</userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialMetalnessMapFeature">
            <summary>
            A Metalness map for the specular material feature.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialMetalnessMapFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.MaterialMetalnessMapFeature"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialMetalnessMapFeature.#ctor(Stride.Rendering.Materials.IComputeScalar)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.MaterialMetalnessMapFeature"/> class.
            </summary>
            <param name="metalnessMap">The metalness map.</param>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialMetalnessMapFeature.MetalnessMap">
            <summary>
            Gets or sets the metalness map.
            </summary>
            <value>The metalness map.</value>
            <userdoc>The map specifying the metalness of the material.</userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialNormalMapFeature">
            <summary>
            The normal map for a surface material feature.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialNormalMapFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.MaterialNormalMapFeature"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialNormalMapFeature.#ctor(Stride.Rendering.Materials.IComputeColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.MaterialNormalMapFeature"/> class.
            </summary>
            <param name="normalMap">The normal map.</param>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialNormalMapFeature.NormalMap">
            <summary>
            Gets or sets the normal map.
            </summary>
            <value>The normal map.</value>
            <userdoc>
            The normal map.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialNormalMapFeature.ScaleAndBias">
            <summary>
            Gets or sets a value indicating whether to scale by (2,2) and offset by (-1,-1) the normal map.
            </summary>
            <value><c>true</c> if scale and offset this normal map; otherwise, <c>false</c>.</value>
            <userdoc>
            Scale the XY by (2,2) and offset by (-1,-1). Required to unpack unsigned values of [0..1] to signed coordinates of [-1..+1].
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialNormalMapFeature.IsXYNormal">
            <summary>
            Gets or sets a value indicating whether the normal is only stored in XY components and Z is assumed to be sqrt(1 - x*x - y*y).
            </summary>
            <value><c>true</c> if this instance is xy normal; otherwise, <c>false</c>.</value>
            <userdoc>
            If there's no Z component in the texture, reconstruct it from the X and Y components. This assumes that Z = sqrt(1 - x*x - y*y) and that Z is always positive, so no normal vector can point to the back side of the surface. We recommend you enable this option, as Stride might remove the Z component when you compress normal maps.
            </userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialOcclusionMapFeature">
            <summary>
            An occlusion map for the occlusion material feature.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialOcclusionMapFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.MaterialOcclusionMapFeature"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialOcclusionMapFeature.AmbientOcclusionMap">
            <summary>
            Gets or sets the occlusion map.
            </summary>
            <value>The occlusion map.</value>
            <userdoc>The map specifying the ambient occlusion of the material. This modulates the amount of incoming ambient light to the material (0 => no ambient, 1 => full ambient).
            Ambient occlusions are generally used to produce coarse occlusions on the material (shadows, etc...). It is geometry related and thus ignores possible UV scale overrides.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialOcclusionMapFeature.DirectLightingFactor">
            <summary>
            Gets or sets how much the occlusion map can influence direct lighting (default: 0).
            </summary>
            <value>The direct lighting factor.</value>
            <userdoc>Specify how much the occlusion map should influence the direct lighting (non ambient lightings). 
            Usually the occlusion maps are used only to affect ambient lighting, but using this parameter one can also have it partially affecting the direct lighting.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialOcclusionMapFeature.CavityMap">
            <summary>
            Gets or sets the cavity map.
            </summary>
            <value>The cavity map.</value>
            <userdoc>The map specifying the cavity occlusions of the material. This modulates the amount of incoming direct (non-ambient) light to the material (0 => no light, 1 => full light).
            Cavity occlusions are generally used to produce fine grained artifacts on the material.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialOcclusionMapFeature.DiffuseCavity">
            <summary>
            Gets or sets the diffuse cavity influence.
            </summary>
            <value>The diffuse cavity.</value>
            <userdoc>Specify the influence of the cavity map on the diffuse lighting (0 => no influence, 1 => full influence).</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialOcclusionMapFeature.SpecularCavity">
            <summary>
            Gets or sets the specular cavity.
            </summary>
            <value>The specular cavity.</value>
            <userdoc>Specify the influence of the cavity map on the specular lighting (0 => no influence, 1 => full influence).</userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialOverrides">
            <summary>
            Material overrides used in a <see cref="T:Stride.Rendering.Materials.MaterialBlendLayer"/>
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialOverrides.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.MaterialOverrides"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialOverrides.UVScale">
            <summary>
            Gets or sets the scale u and v.
            </summary>
            <value>The scale u.</value>
            <userdoc>The scales to apply on the layered material texture coordinates.</userdoc>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialOverrides.op_Multiply(Stride.Rendering.Materials.MaterialOverrides,Stride.Rendering.Materials.MaterialOverrides)">
            <summary>
            Implements the multiply operator in order to support correct calculation of overrides for a particular layer.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialRenderFeature">
            <summary>
            Handles material by permuting shaders and uploading material data.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.MaterialRenderFeature.MaterialInfoBase.ParametersChanged">
            <summary>
            <c>true</c> if MaterialParameters instance was changed
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialRenderFeature.MaterialInfo">
            <summary>
            Custom extra info that we want to store per material.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.MaterialRenderFeature.MaterialInfo.UsePixelShaderWithDepthPass">
            <summary>
            Indicates that material requries using pixel shader stage during depth-only pass (Z prepass or shadow map rendering).
            Used by transparent and cut off materials.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialRenderFeature.InitializeCore">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialRenderFeature.PrepareEffectPermutations(Stride.Rendering.RenderDrawContext)">
            <param name="context"></param>
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialRenderFeature.Prepare(Stride.Rendering.RenderDrawContext)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialShaderStage">
            <summary>
            Enumerates the different possible material shader stages.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.MaterialShaderStage.Vertex">
            <summary>
            The vertex shader
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.MaterialShaderStage.Domain">
            <summary>
            The domain shader
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.MaterialShaderStage.Pixel">
            <summary>
            The pixel shader
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialShadingModelCollection">
            <summary>
            Stores a collection of shading model used by a layer and allow to compare if a layer can be blend by attributes (if
            shading model doesn't change) or by shading (if shading model is different).
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialShadingModelCollection.Add``1(``0)">
            <summary>
            Adds the specified shading model associated with source to this collection.
            </summary>
            <typeparam name="T">Type of the shading model</typeparam>
            <param name="shadingModel">The shading model</param>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialShadingModelCollection.CopyTo(Stride.Rendering.Materials.MaterialShadingModelCollection)">
            <summary>
            Copies the shading models of this instance to the destination instance.
            </summary>
            <param name="node">The destination collection</param>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialShadingModelCollection.Equals(Stride.Rendering.Materials.MaterialShadingModelCollection)">
            <summary>
            Compares the shading models of this instance against the specified instance.
            </summary>
            <param name="node">The shading model</param>
            <returns><c>true</c> if shading models are equvalent; <c>false</c> otherwise</returns>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialShadingModelCollection.Generate(Stride.Rendering.Materials.MaterialGeneratorContext)">
            <summary>
            Generates the shader for the shading models of this instance.
            </summary>
            <param name="context">The material generator context</param>
            <returns>An enumeration of shader sources</returns>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialSpecularMapFeature">
            <summary>
            A Specular map for the specular material feature.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialSpecularMapFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.MaterialSpecularMapFeature"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSpecularMapFeature.SpecularMap">
            <summary>
            Gets or sets the specular map.
            </summary>
            <value>The specular map.</value>
            <userdoc>The map specifying the color of the specular reflection.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSpecularMapFeature.Intensity">
            <summary>
            Gets or sets the specular intensity.
            </summary>
            <value>The map specifying the intensity of the specular reflection. An intensity of 0 means no reflection. An intensity of 1 means full reflection.</value>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSpecularMapFeature.IsEnergyConservative">
            <summary>
            Gets or sets a value indicating whether this instance is energy conservative.
            </summary>
            <value><c>true</c> if this instance is energy conservative; otherwise, <c>false</c>.</value>
            <value>Conserve energy between the diffuse and specular colors</value>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialSpecularMicrofacetEnvironmentGGXLUT">
            <summary>
            Environment function for Schlick fresnel, Smith-Schlick GGX visibility and GGX normal distribution.
            </summary>
            <remarks>
            Based on https://knarkowicz.wordpress.com/2014/12/27/analytical-dfg-term-for-ibl/.
            Note: their glossiness-roughness conversion formula is not same as ours, this will need to be recomputed.
            </remarks>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialSpecularMicrofacetEnvironmentGGXPolynomial">
            <summary>
            Environment function for Schlick fresnel, Smith-Schlick GGX visibility and GGX normal distribution.
            </summary>
            <remarks>
            Based on https://knarkowicz.wordpress.com/2014/12/27/analytical-dfg-term-for-ibl/.
            Note: their glossiness-roughness conversion formula is not same as ours, this will need to be recomputed.
            </remarks>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialSpecularMicrofacetEnvironmentThinGlass">
            <summary>
            Environment function for Schlick fresnel, Smith-Schlick GGX visibility and GGX normal distribution.
            </summary>
            <remarks>
            Based on https://knarkowicz.wordpress.com/2014/12/27/analytical-dfg-term-for-ibl/.
            Note: their glossiness-roughness conversion formula is not same as ours, this will need to be recomputed.
            </remarks>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialSpecularMicrofacetFresnelNone">
            <summary>
            No Fresnel applied.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialSpecularMicrofacetFresnelSchlick">
            <summary>
            Fresnel using Schlick approximation.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialSpecularMicrofacetFresnelThinGlass">
            <summary>
            Fresnel for glass materials.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialSpecularMicrofacetModelFeature">
            <summary>
            The microfacet specular shading model.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSpecularMicrofacetModelFeature.Fresnel">
            <userdoc>Specify the function to use to calculate the Fresnel component of the micro-facet lighting equation. 
            This defines the amount of the incoming light that is reflected.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSpecularMicrofacetModelFeature.Visibility">
            <userdoc>Specify the function to use to calculate the visibility component of the micro-facet lighting equation.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSpecularMicrofacetModelFeature.NormalDistribution">
            <userdoc>Specify the function to use to calculate the normal distribution in the micro-facet lighting equation. 
            This defines how the normal is distributed.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSpecularMicrofacetModelFeature.Environment">
            <userdoc>Specify the function to use to calculate the environment DFG term in the micro-facet lighting equation. 
            This defines how the material reflects specular cubemaps.</userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialSpecularMicrofacetNormalDistributionBeckmann">
            <summary>
            The Beckmann Normal Distribution.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialSpecularMicrofacetNormalDistributionBlinnPhong">
            <summary>
            The Blinn-Phong Normal Distribution.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialSpecularMicrofacetNormalDistributionGGX">
            <summary>
            The GGX Normal Distribution.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialSpecularMicrofacetVisibilityCookTorrance">
            <summary>
            Cook-Torrance Geometric Shadowing.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialSpecularMicrofacetVisibilityImplicit">
            <summary>
            Implicit Geometric Shadowing.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialSpecularMicrofacetVisibilityKelemen">
            <summary>
            Kelemen Geometric Shadowing.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialSpecularMicrofacetVisibilityNeumann">
            <summary>
            Neumann Geometric Shadowing.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialSpecularMicrofacetVisibilitySmithBeckmann">
            <summary>
            Smith-Beckmann Geometric Shadowing.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialSpecularMicrofacetVisibilitySmithGGXCorrelated">
            <summary>
            Smith-GGX Geometric Shadowing.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialSpecularMicrofacetVisibilitySmithSchlickBeckmann">
            <summary>
            Schlick-Beckmann Geometric Shadowing.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialSpecularMicrofacetVisibilitySmithSchlickGGX">
            <summary>
            Schlick-GGX Geometric Shadowing.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialSpecularThinGlassModelFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.MaterialSpecularThinGlassModelFeature"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSpecularThinGlassModelFeature.RefractiveIndex">
            <summary>
            Gets or sets the refractive index of the material.
            </summary>
            <value>The alpha.</value>
            <userdoc>An additional factor that can be used to modulate original alpha of the material.</userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialStreamType">
            <summary>
            Type of a stream used by <see cref="!:MaterialStreamAttribute"/>
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialTessellationBaseFeature">
            <summary>
            The displacement map for a surface material feature.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialTessellationBaseFeature.TriangleSize">
            <summary>
            Gets or sets the desired triangle size.
            </summary>
            <userdoc>
            The desired triangles' size in pixels. This drives the tessellation factor.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialTessellationBaseFeature.AdjacentEdgeAverage">
            <summary>
            Gets or sets the adjacent edges average activation state.
            </summary>
            <userdoc>
            Indicate if average should be performed on adjacent edges to prevent tessellation cracks.
            </userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialTessellationFlatFeature">
            <summary>
            Material for flat (dicing) tessellation.    
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialTessellationPNFeature">
            <summary>
            Material for Point-Normal tessellation.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialTransparencyAdditiveFeature">
            <summary>
            A transparent additive material.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialTransparencyAdditiveFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.MaterialTransparencyAdditiveFeature"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialTransparencyAdditiveFeature.Alpha">
            <summary>
            Gets or sets the alpha.
            </summary>
            <value>The alpha.</value>
            <userdoc>The factor used to modulate alpha of the material. See documentation for more details.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialTransparencyAdditiveFeature.Tint">
            <summary>
            Gets or sets the tint color.
            </summary>
            <value>The tint.</value>
            <userdoc>The tint color to apply on the material during the blend.</userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialTransparencyBlendFeature">
            <summary>
            A transparent blend material.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialTransparencyBlendFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.MaterialTransparencyBlendFeature"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialTransparencyBlendFeature.Alpha">
            <summary>
            Gets or sets the alpha.
            </summary>
            <value>The alpha.</value>
            <userdoc>An additional factor that can be used to modulate original alpha of the material.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialTransparencyBlendFeature.Tint">
            <summary>
            Gets or sets the tint color.
            </summary>
            <value>The tint.</value>
            <userdoc>The tint color to apply on the material during the blend.</userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialTransparencyCutoffFeature">
            <summary>
            A transparent cutoff material.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialTransparencyCutoffFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.MaterialTransparencyCutoffFeature"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialTransparencyCutoffFeature.Alpha">
            <summary>
            Gets or sets the alpha.
            </summary>
            <value>The alpha.</value>
            <userdoc>The alpha threshold of the cutoff. All alpha values above this threshold are considered as fully transparent.
            All alpha values under this threshold are considered as fully opaque.</userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialUtility">
            <summary>
            Class MaterialUtility.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialUtility.GetShaderMixinSource(Stride.Shaders.ShaderSource)">
            <summary>
            Build a encapsulating ShaderMixinSource if necessary.
            </summary>
            <param name="shaderSource">The input ShaderSource.</param>
            <returns>A ShaderMixinSource</returns>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialUtility.GetDefaultSamplerKey(System.Int32)">
            <summary>
            Get the ParameterKey of generic sampler.
            </summary>
            <param name="i">The id of the texture.</param>
            <returns>The corresponding ParameterKey.</returns>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialUtility.ClampFloat(Stride.Rendering.Materials.IComputeScalar,System.Single,System.Single)">
            <summary>
            Clamps <see cref="T:Stride.Rendering.Materials.ComputeColors.ComputeFloat"/> value within a specified range [min; max].
            </summary>
            <param name="key">Input scalar.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialUtility.ClampFloat4(Stride.Rendering.Materials.IComputeColor,Stride.Core.Mathematics.Vector4@,Stride.Core.Mathematics.Vector4@)">
            <summary>
            Clamps <see cref="T:Stride.Rendering.Materials.ComputeColors.ComputeFloat4"/> value within a specified range [min; max].
            </summary>
            <param name="key">Input scalar.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="T:Stride.Rendering.Materials.ShaderGeneratorContext">
            <summary>
            Base class for generating shader class source with associated parameters.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.ShaderGeneratorContext.Content">
            <summary>
            Gets or sets the asset manager.
            </summary>
            <value>
            The asset manager.
            </value>
        </member>
        <member name="P:Stride.Rendering.Materials.ShaderGeneratorContext.OptimizeMaterials">
            <summary>
            Gets or sets a value indicating whether materials will be optimized (textures blended together, generate optimized shader permutations, etc...).
            </summary>
            <value>
              <c>true</c> if [materials are optimized]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialStreamProvider">
            <summary>
            An interface to query streams used by materials. 
            </summary>
            <remarks>
            This is not an exhaustive list but is used to allow to display a specific map in the editor.
            </remarks>
        </member>
        <member name="M:Stride.Rendering.Materials.IMaterialStreamProvider.GetStreams">
            <summary>
            Gets the streams used by a material
            </summary>
            <returns>IEnumerable&lt;MaterialStream&gt;.</returns>
        </member>
        <member name="F:Stride.Rendering.Materials.MaterialKeys.GenericTexture">
            <summary>
            Generic texture key used by a material
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.MaterialKeys.GenericValueColor3">
            <summary>
            Generic texture key used by a material
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.MaterialKeys.GenericValueColor4">
            <summary>
            Generic texture key used by a material
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.MaterialKeys.GenericValueVector4">
            <summary>
            Generic texture key used by a material
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.MaterialKeys.TextureScale">
            <summary>
            Texture UV scaling
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.MaterialKeys.TextureOffset">
            <summary>
            Texture UV offset
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.MaterialKeys.GenericValueFloat">
            <summary>
            Generic texture key used by a material
            </summary>
        </member>
        <member name="F:Stride.Rendering.Materials.MaterialKeys.Sampler">
            <summary>
            Generic sampler key used by a material
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialStreamDescriptor">
            <summary>
            A Material Stream.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialStreamDescriptor.#ctor(System.String,System.String,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.MaterialStreamDescriptor"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="stream">The stream.</param>
            <param name="colorType">Type of the color.</param>
        </member>
        <member name="M:Stride.Rendering.Materials.MaterialStreamDescriptor.#ctor(System.String,System.String,Stride.Shaders.ShaderSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Materials.MaterialStreamDescriptor"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="stream">The stream.</param>
            <param name="filter">The filter.</param>
            <exception cref="T:System.ArgumentNullException">
            name
            or
            stream
            </exception>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialStreamDescriptor.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialStreamDescriptor.Stream">
            <summary>
            Gets the stream name.
            </summary>
            <value>The stream.</value>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialStreamDescriptor.Filter">
            <summary>
            Gets the filter to modify the shader.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="T:Stride.Rendering.Materials.ShadingModelShaderBuilder">
            <summary>
            Helper class to build the <see cref="T:Stride.Shaders.ShaderSource"/> for the shading model of a <see cref="T:Stride.Rendering.Materials.IMaterialShadingModelFeature"/>.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.ShadingModelShaderBuilder.LightDependentExtraModels">
            <summary>
            Shaders that needs to be mixed on top of MaterialSurfaceLightingAndShading.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSubsurfaceScatteringFeature.IsLightDependent">
            <summary>
            Gets the services.
            </summary>
            <value>The services.</value>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSubsurfaceScatteringFeature.ScatteringWidth">
            <summary>
            Width of the scattering kernel in world space.
            </summary>
            <userdoc>
            This parameter controls how far the light should scatter (in meters).
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSubsurfaceScatteringFeature.Translucency">
            <summary>
            Translucency of the material.
            </summary>
            <userdoc>
            This parameter controls how translucent the material is.
            "0.0" stands for no translucency and "1.0" stands for maximum translucency.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSubsurfaceScatteringFeature.TranslucencyMap">
            <summary>
            Controls the thickness of the object. This value gets multiplied with the "Translucency" parameter.
            </summary>
            <userdoc>
            This grayscale map controls how translucent different regions of the model are.
            A brighter value results in more, and a darker one in less scattering.
            For example the ears of a person should scatter more than the top of the head, because they are thinner and therefore light passes through them more easily.
            This texture is multiplied with the "Translucency" parameter.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSubsurfaceScatteringFeature.ProfileFunction">
            <summary>
            The profile mixin to use for the scattering calculations.
            </summary>
            <userdoc>
            The scattering profile to use during the forward render pass.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSubsurfaceScatteringFeature.KernelFunction">
            <summary>
            Generates the scattering kernel.
            </summary>
            <userdoc>
            The scattering kernel to use in the SSS post-process.
            </userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialSubsurfaceScatteringScatteringKernel">
            <summary>
            Common interface for calculating the scattering profile applied during the forward pass using the subsurface scattering shading model.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.IMaterialSubsurfaceScatteringScatteringKernel.Generate">
            <summary>
            Generates the scattering kernel that is fed into the SSS post-process.
            </summary>
            <returns>ShaderSource.</returns>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialSubsurfaceScatteringScatteringKernelSkin">
            <summary>
            Calculates the scattering profile for skin, which is applied during
            the forward pass using the subsurface scattering shading model.
            It also calculates a scattering kernel based on the "Falloff" and "Strength" parameters.
            
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSubsurfaceScatteringScatteringKernelSkin.Falloff">
            <summary>
            This parameter defines the per-channel falloff of the gradients produced by the subsurface scattering events.
            It can be used to fine tune the color of the gradients.
            </summary>
            <userdoc>
            Attention: This parameter only affects the SSS post-process. If you want to change the shading, use a different scattering profile. 
            This parameter defines the per-channel falloff of the gradients produced by the subsurface scattering events.
            It can be used to fine tune the color of the gradients.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSubsurfaceScatteringScatteringKernelSkin.Strength">
            <summary>
            This parameter specifies the how much of the diffuse light gets into the material, and thus gets modified by the SSS mechanism.
            It can be seen as a per-channel mix factor between the original image, and the SSS-filtered image.
            </summary>
            <userdoc>
            Attention: This parameter only affects the SSS post-process. If you want to change the shading, use a different scattering profile. 
            This parameter specifies the how much of the diffuse light gets into the material, and thus gets modified by the SSS mechanism.
            It can be seen as a per-channel mix factor between the original image, and the SSS-filtered image.
            </userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.IMaterialSubsurfaceScatteringScatteringProfile">
            <summary>
            Common interface for calculating the scattering profile applied during the forward pass using the subsurface scattering shading model.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Materials.IMaterialSubsurfaceScatteringScatteringProfile.Generate(Stride.Rendering.Materials.MaterialGeneratorContext)">
            <summary>
            Generates the shader class source used for the shader composition.
            </summary>
            <returns>ShaderSource.</returns>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialSubsurfaceScatteringScatteringProfileCustom">
            <summary>
            Calculates a custom scattering profile, which is applied during the forward pass using the subsurface scattering shading model.
            
            ATTENTION: This class is subject to change because it does not yet give you full control over generating scattering kernels and profiles.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Materials.MaterialSubsurfaceScatteringScatteringProfileCustom.FalloffMap">
            <summary>
            This parameter defines the per-channel falloff of the gradients produced by the subsurface scattering events.
            It can be used to fine tune the color of the gradients.
            </summary>
            <userdoc>
            Attention: This parameter only affects the SSS post-process. If you want to change the shading, use a different scattering profile. 
            This parameter defines the per-channel falloff of the gradients produced by the subsurface scattering events.
            It can be used to fine tune the color of the gradients.
            
            Note: The alpha channel is ignored.
            </userdoc>
        </member>
        <member name="T:Stride.Rendering.Materials.MaterialSubsurfaceScatteringScatteringProfileSkin">
            <summary>
            Calculates the scattering profile for skin, which is applied during
            the forward pass using the subsurface scattering shading model.
            It also calculates a scattering kernel based on the "Falloff" and "Strength" parameters.
            
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.SubsurfaceScatteringKernelGenerator">
            <summary>
            This class generates transmittance profiles and screen space scattering kernels for Separable Subsurface Scattering.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Materials.TextureCoordinate">
            <summary>
            The texture coordinate.
            </summary>
        </member>
        <member name="T:Stride.Rendering.IModelInstance">
            <summary>
            Instance of a model with its parameters.
            </summary>
        </member>
        <member name="P:Stride.Rendering.IModelInstance.Model">
            <summary>
            Gets the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:Stride.Rendering.IModelInstance.Materials">
            <summary>
            Gets the materials.
            </summary>
            <value>
            The materials.
            </value>
        </member>
        <member name="M:Stride.Rendering.InstancingRenderFeature.InitializeCore">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.InstancingRenderFeature.Extract">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.InstancingRenderFeature.Prepare(Stride.Rendering.RenderDrawContext)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.IRenderCollector.Collect(Stride.Rendering.RenderContext)">
            <summary>
            Executed before extract. Should create views, update RenderStages, etc...
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Stride.Rendering.LightProbes.BowyerWatsonTetrahedralization">
            <summary>
            Bowyer-Watson tetrahedralization algorithm. More details at http://en.wikipedia.org/wiki/Bowyer%E2%80%93Watson_algorithm.
            </summary>
        </member>
        <member name="F:Stride.Rendering.LightProbes.BowyerWatsonTetrahedralization.Result.UserVertexCount">
            <summary>
            Any vertex in <see cref="F:Stride.Rendering.LightProbes.BowyerWatsonTetrahedralization.Result.Vertices"/> after this index are added automatically for boundaries.
            </summary>
        </member>
        <member name="T:Stride.Rendering.LightProbes.BowyerWatsonTetrahedralization.Tetrahedron">
            <summary>
            Represents a tetrahedron output as created by the <see cref="T:Stride.Rendering.LightProbes.BowyerWatsonTetrahedralization"/> algorithm.
            </summary>
        </member>
        <member name="F:Stride.Rendering.LightProbes.BowyerWatsonTetrahedralization.Tetrahedron.Vertices">
            <summary>
            The vertices (as indices).
            </summary>
        </member>
        <member name="F:Stride.Rendering.LightProbes.BowyerWatsonTetrahedralization.Tetrahedron.Neighbours">
            <summary>
            The tetrahedron neighbours (as indices). They match opposite face of <see cref="F:Stride.Rendering.LightProbes.BowyerWatsonTetrahedralization.Tetrahedron.Vertices"/> with same index.
            </summary>
        </member>
        <member name="F:Stride.Rendering.LightProbes.BowyerWatsonTetrahedralization.Tetrahedron.Faces">
            <summary>
            The tetrahedron faces (as indices). If using bitwise complement (negative), it means the normal is reversed.
            </summary>
        </member>
        <member name="M:Stride.Rendering.LightProbes.BowyerWatsonTetrahedralization.GenerateFaces">
            <summary>
            Generate faces info and normal.
            </summary>
        </member>
        <member name="M:Stride.Rendering.LightProbes.BowyerWatsonTetrahedralization.CleanupUnusedTetrahedra">
            <summary>
            Cleanups the unused tetrahedra.
            </summary>
        </member>
        <member name="M:Stride.Rendering.LightProbes.BowyerWatsonTetrahedralization.RemoveSuperTetrahedron(System.Int32,System.Int32)">
            <summary>
            Removes the super tetrahedra, and any tetrahedra sharing its vertices.
            </summary>
        </member>
        <member name="M:Stride.Rendering.LightProbes.BowyerWatsonTetrahedralization.AddSuperTetrahedron">
            <summary>
            Adds the super tetrahedron, which encompass every vertices.
            </summary>
        </member>
        <member name="M:Stride.Rendering.LightProbes.BowyerWatsonTetrahedralization.IsPointInCircumsphere(Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Vector3[],Stride.Rendering.LightProbes.BowyerWatsonTetrahedralization.Tetrahedron@)">
            <summary>
            Determines whether the given point is in the tetraedra.
            </summary>
            <param name="p">The p.</param>
            <param name="tetrahedron">The tetrahedron.</param>
            <returns></returns>
        </member>
        <member name="T:Stride.Rendering.LightProbes.BowyerWatsonTetrahedralization.HoleFace">
            <summary>
            Internal structure used when adding vertex.
            </summary>
        </member>
        <member name="T:Stride.Rendering.LightProbes.BowyerWatsonTetrahedralization.HoleEdge">
            <summary>
            Internal structure used when adding vertex.
            </summary>
        </member>
        <member name="T:Stride.Rendering.LightProbes.LightProbeRenderer">
            <summary>
            Light probe renderer.
            </summary>
        </member>
        <member name="F:Stride.Rendering.LightProbes.LightProbeRenderer.CurrentLightProbes">
            <summary>
            Property key to access the current collection of <see cref="T:Stride.Rendering.LightProbes.LightProbeRuntimeData"/> from <see cref="F:Stride.Rendering.VisibilityGroup.Tags"/>.
            </summary>
        </member>
        <member name="F:Stride.Rendering.LightProbes.LightProbeRuntimeData.LightProbes">
            <summary>
            Can be used to setup a link to a source.
            Typically, this might be a lightprobe component.
            </summary>
        </member>
        <member name="M:Stride.Rendering.LightProbes.LightProbeVertex.#ctor(Stride.Core.Mathematics.Vector3,System.UInt32)">
            <summary>
            Initializes a new <see cref="T:Stride.Rendering.LightProbes.LightProbeVertex"/> instance.
            </summary>
            <param name="position">The position of this vertex.</param>
            <param name="lightprobeId">The lightprobe ID.</param>
        </member>
        <member name="F:Stride.Rendering.LightProbes.LightProbeVertex.Position">
            <summary>
            XYZ position.
            </summary>
        </member>
        <member name="F:Stride.Rendering.LightProbes.LightProbeVertex.LightProbeId">
            <summary>
            The lightprobe index.
            </summary>
        </member>
        <member name="F:Stride.Rendering.LightProbes.LightProbeVertex.Size">
            <summary>
            Defines structure byte size.
            </summary>
        </member>
        <member name="F:Stride.Rendering.LightProbes.LightProbeVertex.Layout">
            <summary>
            The vertex layout of this struct.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Lights.ColorLightBase">
            <summary>
            Base implementation of <see cref="T:Stride.Rendering.Lights.IColorLight"/>
            </summary>
        </member>
        <member name="P:Stride.Rendering.Lights.ColorLightBase.Color">
            <summary>
            Gets or sets the light color.
            </summary>
            <value>The color.</value>
            <userdoc>The color emitted by the light.</userdoc>
        </member>
        <member name="M:Stride.Rendering.Lights.ColorLightBase.ComputeColor(Stride.Graphics.ColorSpace,System.Single)">
            <summary>
            Computes the color with intensity, result is in linear space.
            </summary>
            <returns>Gets the color of this light in linear space.</returns>
        </member>
        <member name="T:Stride.Rendering.Lights.DirectLightBase">
            <summary>
            Base implementation of <see cref="T:Stride.Rendering.Lights.IDirectLight"/>.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Lights.DirectLightBase.Shadow">
            <summary>
            Gets or sets the shadow.
            </summary>
            <value>The shadow.</value>
            <userdoc>The settings of the light shadow</userdoc>
        </member>
        <member name="T:Stride.Rendering.Lights.ForwardLightingRenderFeature">
            <summary>
            Compute lighting shaders and data.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Lights.ForwardLightingRenderFeature.CurrentLights">
            <summary>
            Property key to access the current collection of <see cref="!:CameraComponent"/> from <see cref="!:RenderContext.Tags"/>.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Lights.ForwardLightingRenderFeature.RenderViewLightData.ActiveLightGroups">
            <summary>
            Gets the lights without shadow per light type.
            </summary>
            <value>The lights.</value>
        </member>
        <member name="F:Stride.Rendering.Lights.ForwardLightingRenderFeature.lightRenderersByType">
            <summary>
            List of renderers that can handle a specific light type by light type
            </summary>
        </member>
        <member name="M:Stride.Rendering.Lights.ForwardLightingRenderFeature.Extract">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.Lights.ForwardLightingRenderFeature.PrepareEffectPermutations(Stride.Rendering.RenderDrawContext)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.Lights.ForwardLightingRenderFeature.GetReadonlyShaderSources(Stride.Shaders.ShaderSourceCollection)">
            <summary>
            Create a read-only copy of the given shader sources.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Lights.ForwardLightingRenderFeature.Prepare(Stride.Rendering.RenderDrawContext)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.Lights.ForwardLightingRenderFeature.Flush(Stride.Rendering.RenderDrawContext)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.Lights.ForwardLightingRenderFeature.CollectVisibleLights">
            <summary>
            Collects the visible lights by intersecting them with the frustum.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Lights.ForwardLightingRenderFeature.LightShaderPermutationEntry.PermutationLightGroups">
            <summary>
            Light groups that have <see cref="P:Stride.Rendering.Lights.LightShaderGroup.HasEffectPermutations"/>.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Lights.ForwardLightingRenderFeature.ActiveLightGroupRenderer.Renderers">
            <summary>
            List of renderers that can render lights in this group
            </summary>
        </member>
        <member name="T:Stride.Rendering.Lights.IColorLight">
            <summary>
            Base interface for a light with a color
            </summary>
        </member>
        <member name="P:Stride.Rendering.Lights.IColorLight.Color">
            <summary>
            Gets or sets the light color.
            </summary>
            <value>The color.</value>
        </member>
        <member name="M:Stride.Rendering.Lights.IColorLight.ComputeColor(Stride.Graphics.ColorSpace,System.Single)">
            <summary>
            Computes the color to the proper <see cref="T:Stride.Graphics.ColorSpace"/> with the specified intensity.
            </summary>
            <param name="colorSpace"></param>
            <param name="intensity">The intensity.</param>
            <returns>Color3.</returns>
        </member>
        <member name="T:Stride.Rendering.Lights.IDirectLight">
            <summary>
            Base interface for all direct lights.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Lights.IDirectLight.Shadow">
            <summary>
            Gets or sets the shadow.
            </summary>
            <value>The shadow.</value>
        </member>
        <member name="P:Stride.Rendering.Lights.IDirectLight.HasBoundingBox">
            <summary>
            Gets a value indicating whether this instance has a bounding box.
            </summary>
            <value><c>true</c> if this instance has a bounding box; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Stride.Rendering.Lights.IDirectLight.ComputeBounds(Stride.Core.Mathematics.Vector3,Stride.Core.Mathematics.Vector3)">
            <summary>
            Computes the bounds of this light..
            </summary>
            <param name="position">The position.</param>
            <param name="direction">The direction.</param>
            <returns>BoundingBox.</returns>
        </member>
        <member name="M:Stride.Rendering.Lights.IDirectLight.ComputeScreenCoverage(Stride.Rendering.RenderView,Stride.Core.Mathematics.Vector3,Stride.Core.Mathematics.Vector3)">
            <summary>
            Computes the screen coverage of this light in pixel.
            </summary>
            <param name="renderView">The render view.</param>
            <param name="position">The position of the light in world space.</param>
            <param name="direction">The direction of the light in world space.</param>
            <returns>The largest screen coverage width or height size in pixels of this light.</returns>
        </member>
        <member name="T:Stride.Rendering.Lights.IEnvironmentLight">
            <summary>
            Base interface for all environment lights.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Lights.ILight">
            <summary>
            Base interface for all lights.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Lights.ILightShadow">
            <summary>
            Interface for the shadow of a light.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Lights.ILightShadow.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Stride.Rendering.Lights.ILightShadow"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Stride.Rendering.Lights.ILightShadowMapFilterType">
            <summary>
            Common interface of a shadowmap filter.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Lights.LightAmbient">
            <summary>
            An ambient light.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Lights.LightAmbientRenderer">
            <summary>
            Light renderer for <see cref="T:Stride.Rendering.Lights.LightAmbient"/>.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Lights.LightClusteredPointSpotGroupRenderer">
            <summary>
            Light renderer for clustered shading.
            </summary>
            <remarks>
            Due to the fact that it handles both Point and Spot with a single logic, it doesn't fit perfectly the current logic of one "direct light groups" per renderer.
            </remarks>
        </member>
        <member name="M:Stride.Rendering.Lights.LightClusteredPointSpotGroupRenderer.PointLightShaderGroupData.ComputeLightCount(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.Lights.LightClusteredPointSpotGroupRenderer.PointLightShaderGroupData.SetViews(Stride.Core.Collections.FastList{Stride.Rendering.RenderView})">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.Lights.LightClusteredPointSpotGroupRenderer.PointLightShaderGroupData.AddView(System.Int32,Stride.Rendering.RenderView,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.Lights.LightClusteredPointSpotGroupRenderer.PointLightShaderGroupData.ApplyViewParameters(Stride.Rendering.RenderDrawContext,System.Int32,Stride.Rendering.ParameterCollection)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.Lights.LightClusteredPointSpotGroupRenderer.PointLightShaderGroupData.UpdateViewResources(Stride.Rendering.RenderDrawContext,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Rendering.Lights.LightDirectional">
            <summary>
            A directional light.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Lights.LightDirectionalGroupRenderer">
            <summary>
            Light renderer for <see cref="T:Stride.Rendering.Lights.LightDirectional"/>.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Lights.LightDirectionalShadowMap">
            <summary>
            A directional shadow map.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Lights.LightDirectionalShadowMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Lights.LightShadowMap"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Lights.LightDirectionalShadowMap.CascadeCount">
            <summary>
            Gets or Sets the number of cascades for this shadow (valid only for directional lights)
            </summary>
            <value>The number of cascades for this shadow.</value>
            <userdoc>The number of cascades for the shadows.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Lights.LightDirectionalShadowMap.StabilizationMode">
            <summary>
            Gets or Sets the stabilization mode of the shadow map
            </summary>
            <userdoc>The technique used to stabilize the shadow map</userdoc>
        </member>
        <member name="P:Stride.Rendering.Lights.LightDirectionalShadowMap.DepthRange">
            <summary>
            Gets or sets the depth range mode.
            </summary>
            <value>The depth range mode.</value>
        </member>
        <member name="P:Stride.Rendering.Lights.LightDirectionalShadowMap.PartitionMode">
            <summary>
            Gets or sets the partition mode.
            </summary>
            <value>The partition mode.</value>
        </member>
        <member name="P:Stride.Rendering.Lights.LightDirectionalShadowMap.ComputeTransmittance">
            <summary>
            Specifies if transmittance should be computed (necessary for hair and skin rendering).
            </summary>
            <userdoc>Specifies if transmittance should be computed (necessary for hair and skin rendering).</userdoc>
        </member>
        <member name="T:Stride.Rendering.Lights.LightDirectionalShadowMap.PartitionModeBase">
            <summary>
            Base class for the partition mode.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Lights.LightDirectionalShadowMap.PartitionManual">
            <summary>
            Manual partition. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Lights.LightDirectionalShadowMap.PartitionManual.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:LightDirectionalManualPartitionMode"/> class.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Lights.LightDirectionalShadowMap.PartitionLogarithmic">
            <summary>
            Logarithmic and PSSM partition. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Lights.LightDirectionalShadowMap.PartitionLogarithmic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Lights.LightDirectionalShadowMap.PartitionLogarithmic"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Lights.LightDirectionalShadowMap.PartitionLogarithmic.PSSMFactor">
            <summary>
            Gets or sets the PSSM factor (0.0f is full logarithmic, 1.0f is full PSSM).
            </summary>
            <value>The PSSM factor.</value>
        </member>
        <member name="T:Stride.Rendering.Lights.LightDirectionalShadowMap.DepthRangeParameters">
            <summary>
            The depth range is set manually. This class cannot be inherited.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Lights.LightDirectionalShadowMap.DepthRangeParameters.DefaultMinDistance">
            <summary>
            The default minimum distance
            </summary>
        </member>
        <member name="F:Stride.Rendering.Lights.LightDirectionalShadowMap.DepthRangeParameters.DefaultGuardDistance">
            <summary>
            The default guard distance for the auto mode.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Lights.LightDirectionalShadowMap.DepthRangeParameters.DefaultMaxDistance">
            <summary>
            The default maximum distance
            </summary>
        </member>
        <member name="M:Stride.Rendering.Lights.LightDirectionalShadowMap.DepthRangeParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Lights.LightDirectionalShadowMap.DepthRangeParameters"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Lights.LightDirectionalShadowMap.DepthRangeParameters.IsAutomatic">
            <summary>
            Gets or sets a value indicating whether this instance is automatic.
            </summary>
            <value><c>true</c> if this instance is automatic; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Rendering.Lights.LightDirectionalShadowMap.DepthRangeParameters.ManualMinDistance">
            <summary>
            Gets or sets the minimum distance in world space unit.
            </summary>
            <value>The minimum distance.</value>
        </member>
        <member name="P:Stride.Rendering.Lights.LightDirectionalShadowMap.DepthRangeParameters.ManualMaxDistance">
            <summary>
            Gets or sets the maximum distance in world space unit.
            </summary>
            <value>The maximum distance.</value>
        </member>
        <member name="P:Stride.Rendering.Lights.LightDirectionalShadowMap.DepthRangeParameters.IsBlendingCascades">
            <summary>
            Gets or sets a value indicating whether this instance is filtering accross cascades.
            </summary>
            <value><c>true</c> if this instance is filtering accross cascades; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Stride.Rendering.Lights.LightGroupRendererBase">
            <summary>
            Base class for light renderers.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Lights.LightGroupRendererDynamic">
            <summary>
            A light group renderer that can handle a varying number of lights, i.e. point, spots, directional.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Lights.LightGroupRendererShadow">
            <summary>
            Base class for light renderers that use shadow maps.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Lights.LightPoint">
            <summary>
            A point light.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Lights.LightPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Lights.LightPoint"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Lights.LightPoint.Radius">
            <summary>
            Gets or sets the radius of influence of this light.
            </summary>
            <value>The range.</value>
            <userdoc>The radius range of the point light in scene units.</userdoc>
        </member>
        <member name="T:Stride.Rendering.Lights.LightPointGroupRenderer">
            <summary>
            Light renderer for <see cref="T:Stride.Rendering.Lights.LightPoint"/>.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Lights.LightPointGroupRenderer.PointLightShaderGroup.AddView(System.Int32,Stride.Rendering.RenderView,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Rendering.Lights.LightPointShadowMap">
            <summary>
            A standard shadow map.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Lights.LightPointShadowMap.Type">
            <summary>
            The type of shadow mapping technique to use for this point light
            </summary>
        </member>
        <member name="T:Stride.Rendering.Lights.LightPointShadowMapType">
            <summary>
            Possible types of shadow mapping for point lights
            </summary>
        </member>
        <member name="F:Stride.Rendering.Lights.LightPointShadowMapType.DualParaboloid">
            <summary>
            Renders the scene only twice to 2 hemisphere textures, might look distorted or generate artifacts with low-poly shadow casters
            </summary>
        </member>
        <member name="F:Stride.Rendering.Lights.LightPointShadowMapType.CubeMap">
            <summary>
            Renders the scene to 6 faces of a cube, provides more stable shadow maps with the tradoff of having to render the scene 6 times
            </summary>
        </member>
        <member name="T:Stride.Rendering.Lights.LightShaderGroup">
            <summary>
            A group of lights of the same type (single loop in the shader).
            </summary>
        </member>
        <member name="M:Stride.Rendering.Lights.LightShaderGroup.UpdateLayout(System.String)">
            <summary>
            Called when layout is updated, so that parameter keys can be recomputed.
            </summary>
            <param name="compositionName"></param>
        </member>
        <member name="M:Stride.Rendering.Lights.LightShaderGroup.Reset">
            <summary>
            Resets states.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Lights.LightShaderGroup.ApplyEffectPermutations(Stride.Rendering.RenderEffect)">
            <summary>
            Applies effect permutations.
            </summary>
            <param name="renderEffect"></param>
        </member>
        <member name="M:Stride.Rendering.Lights.LightShaderGroup.ApplyViewParameters(Stride.Rendering.RenderDrawContext,System.Int32,Stride.Rendering.ParameterCollection)">
            <summary>
            Applies PerView lighting parameters.
            </summary>
            <param name="context"></param>
            <param name="viewIndex"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Stride.Rendering.Lights.LightShaderGroup.ApplyDrawParameters(Stride.Rendering.RenderDrawContext,System.Int32,Stride.Rendering.ParameterCollection,Stride.Core.Mathematics.BoundingBoxExt@)">
            <summary>
            Applies PerDraw lighting parameters.
            </summary>
            <param name="context"></param>
            <param name="viewIndex"></param>
            <param name="parameters"></param>
            <param name="boundingBox"></param>
        </member>
        <member name="M:Stride.Rendering.Lights.LightShaderGroup.UpdateViewResources(Stride.Rendering.RenderDrawContext,System.Int32)">
            <summary>
            Prepares PerView lighting parameters.
            </summary>
            <param name="context"></param>
            <param name="viewIndex"></param>
        </member>
        <member name="T:Stride.Rendering.Lights.LightShaderGroupDynamic">
            <summary>
            Base class to build light shader groups with <see cref="T:Stride.Rendering.Lights.LightGroupRendererDynamic"/>.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Lights.LightShaderGroupDynamic.lights">
            <summary>
            List of all available lights.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Lights.LightShaderGroupDynamic.currentLights">
            <summary>
            List of lights selected for this rendering.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Lights.LightShaderGroupDynamic.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.Lights.LightShaderGroupDynamic.AddView(System.Int32,Stride.Rendering.RenderView,System.Int32)">
            <summary>
            
            </summary>
            <param name="viewIndex"></param>
            <param name="renderView"></param>
            <param name="lightCount"></param>
            <returns>The number of lights accepted in <see cref="F:Stride.Rendering.Lights.LightShaderGroupDynamic.currentLights"/>.</returns>
        </member>
        <member name="M:Stride.Rendering.Lights.LightShaderGroupDynamic.ComputeLightCount(System.Int32)">
            <summary>
            Compute the number of light supported by this shader. Usually a different number of light will trigger a permutation and layout update.
            </summary>
            <param name="lightCount"></param>
            <returns></returns>
        </member>
        <member name="M:Stride.Rendering.Lights.LightShaderGroupDynamic.AddLight(Stride.Rendering.Lights.RenderLight,Stride.Rendering.Shadows.LightShadowMapTexture)">
            <summary>
            Try to add light to this group (returns false if not possible).
            </summary>
            <param name="light"></param>
            <param name="shadowMapTexture"></param>
            <returns></returns>
        </member>
        <member name="M:Stride.Rendering.Lights.LightShaderGroupDynamic.UpdateLayout(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.Lights.LightShaderGroupDynamic.ApplyViewParameters(Stride.Rendering.RenderDrawContext,System.Int32,Stride.Rendering.ParameterCollection)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.Lights.LightShaderGroupDynamic.ApplyDrawParameters(Stride.Rendering.RenderDrawContext,System.Int32,Stride.Rendering.ParameterCollection,Stride.Core.Mathematics.BoundingBoxExt@)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Rendering.Lights.LightShadowMap">
            <summary>
            Base class for a shadow map.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Lights.LightShadowMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Lights.LightShadowMap"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Lights.LightShadowMap.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Stride.Rendering.Lights.LightShadowMap"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
            <userdoc>Display the shadow of the engendered by the light</userdoc>
        </member>
        <member name="P:Stride.Rendering.Lights.LightShadowMap.Filter">
            <summary>
            Gets or sets the shadow map filtering.
            </summary>
            <value>The filter type.</value>
            <userdoc>The type of filter to apply onto the shadow.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Lights.LightShadowMap.Size">
            <summary>
            Gets or sets the size of the shadow-map.
            </summary>
            <value>The size.</value>
            <userdoc>The size of texture to use for shadow mapping. Large textures produces better shadows edges but are much more costly.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Lights.LightShadowMap.BiasParameters">
            <summary>
            Gets the bias parameters.
            </summary>
            <value>The bias parameters.</value>
            <userdoc>Offset values to add during to the depth calculation process of the shadow map.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Lights.LightShadowMap.Debug">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Stride.Rendering.Lights.LightShadowMap"/> is debug.
            </summary>
            <value><c>true</c> if debug; otherwise, <c>false</c>.</value>
            <userdoc>Render the shadow map in debug mode</userdoc>
        </member>
        <member name="T:Stride.Rendering.Lights.LightShadowMap.ShadowMapBiasParameters">
            <summary>
            Bias parameters used for shadow map.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Lights.LightShadowMap.ShadowMapBiasParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Lights.LightShadowMap.ShadowMapBiasParameters"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Lights.LightShadowMap.ShadowMapBiasParameters.DepthBias">
            <summary>
            Gets or sets the depth bias used for shadow map comparison.
            </summary>
            <value>The bias.</value>
            <userdoc>An absolute value to add to the calculated depth.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Lights.LightShadowMap.ShadowMapBiasParameters.NormalOffsetScale">
            <summary>
            Gets or sets the offset scale in world space unit along the surface normal.
            </summary>
            <value>The offset scale.</value>
            <userdoc>A factor specifying the offset to add to the calculated depth with respect to the surface normal.</userdoc>
        </member>
        <member name="T:Stride.Rendering.Lights.LightShadowMapCascadeCount">
            <summary>
            Number of cascades used for a shadow map.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Lights.LightShadowMapCascadeCount.OneCascade">
            <summary>
            A shadow map with one cascade.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Lights.LightShadowMapCascadeCount.TwoCascades">
            <summary>
            A shadow map with two cascades.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Lights.LightShadowMapCascadeCount.FourCascades">
            <summary>
            A shadow map with four cascades.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Lights.LightShadowMapFilterTypePcf">
            <summary>
            No shadowmap filter.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Lights.LightShadowMapFilterTypePcf.FilterSize">
            <summary>
            Gets or sets the size of the filter.
            </summary>
            <value>The size of the filter.</value>
            <userdoc>The size of the filter (size of the kernel).</userdoc>
        </member>
        <member name="T:Stride.Rendering.Lights.LightShadowMapSize">
            <summary>
            Size hint of a shadow map. See remarks.
            </summary>
            <remarks>This is a hint to determine the size of a shadow map</remarks>
        </member>
        <member name="F:Stride.Rendering.Lights.LightShadowMapSize.XSmall">
            <summary>
            Use a xtra-small size.
            </summary>
            <userodc>A smaller shadow map (1/8 of the reference size)</userodc>
        </member>
        <member name="F:Stride.Rendering.Lights.LightShadowMapSize.Small">
            <summary>
            Use a small size.
            </summary>
            <userodc>A small shadow map (1/4 of the reference size)</userodc>
        </member>
        <member name="F:Stride.Rendering.Lights.LightShadowMapSize.Medium">
            <summary>
            Use a medium size.
            </summary>
            <userodc>A medium shadow map (1/2 of the reference size)</userodc>
        </member>
        <member name="F:Stride.Rendering.Lights.LightShadowMapSize.Large">
            <summary>
            Use a large size.
            </summary>
            <userodc>A large shadow map(x 1 of the reference size)</userodc>
        </member>
        <member name="F:Stride.Rendering.Lights.LightShadowMapSize.XLarge">
            <summary>
            Use a xtra-large size.
            </summary>
            <userodc>A larger shadow map (x 2 of the reference size)</userodc>
        </member>
        <member name="T:Stride.Rendering.Lights.LightShadowMapStabilizationMode">
            <summary>
            The stabilization mode used for the shadow maps.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Lights.LightShadowMapStabilizationMode.None">
            <summary>
            No stabilization is performed.
            </summary>
            <userdoc>No stabilization is performed.</userdoc>
        </member>
        <member name="F:Stride.Rendering.Lights.LightShadowMapStabilizationMode.ProjectionSnapping">
            <summary>
            The light projection is snapped to the closest pixel according to the size of the shadow map. This will decrease filtering but lower the quality of the shadow map (more than <see cref="F:Stride.Rendering.Lights.LightShadowMapStabilizationMode.None"/>).
            </summary>
            <userdoc>The light projection is snapped to the closest pixel according to the size of the shadow map. This will decrease filtering but lower the quality of the shadow map (more than <see cref="F:Stride.Rendering.Lights.LightShadowMapStabilizationMode.None"/>)</userdoc>
        </member>
        <member name="F:Stride.Rendering.Lights.LightShadowMapStabilizationMode.ViewSnapping">
            <summary>
            The light target view is snapped according to the size of the shadow map. Gives better results but decrease the quality of the shadow map (more than <see cref="F:Stride.Rendering.Lights.LightShadowMapStabilizationMode.ProjectionSnapping"/>).
            </summary>
            <userdoc>The light target view is snapped according to the size of the shadow map. Gives better results but decrease the quality of the shadow map (more than <see cref="F:Stride.Rendering.Lights.LightShadowMapStabilizationMode.ProjectionSnapping"/>).</userdoc>
        </member>
        <member name="T:Stride.Rendering.Lights.LightSkybox">
            <summary>
            A light coming from a skybox. The <see cref="!:SkyboxComponent"/> must be set on the entity in order to see a skybox. 
            </summary>
        </member>
        <member name="P:Stride.Rendering.Lights.LightSkybox.Skybox">
            <summary>
            Gets or sets the skybox.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Lights.LightSkyboxRenderer">
            <summary>
            Light renderer for <see cref="T:Stride.Rendering.Lights.LightSkybox"/>.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Lights.LightSkyboxRenderer.Reset">
            <param name="viewCount"></param>
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.Lights.LightSkyboxRenderer.ProcessLights(Stride.Rendering.Lights.LightGroupRendererBase.ProcessLightsParameters)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Rendering.Lights.LightSpot">
            <summary>
            A spot light.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Lights.LightSpot.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Lights.LightSpot"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Lights.LightSpot.Range">
            <summary>
            Gets or sets the range distance the light is affecting.
            </summary>
            <value>The range.</value>
            <userdoc>The range of the spot light in scene units</userdoc>
        </member>
        <member name="P:Stride.Rendering.Lights.LightSpot.AngleInner">
            <summary>
            Gets or sets the spot angle in degrees.
            </summary>
            <value>The spot angle in degrees.</value>
            <userdoc>The angle of the main beam of the light spot.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Lights.LightSpot.AngleOuter">
            <summary>
            Gets or sets the spot angle in degrees.
            </summary>
            <value>The spot angle in degrees.</value>
            <userdoc>The angle of secondary beam of the light spot</userdoc>
        </member>
        <member name="P:Stride.Rendering.Lights.LightSpot.ProjectiveTexture">
            <summary>The texture that is multiplied on top of the lighting result like a mask. Can be used like a cinema projector.</summary>
            <userdoc>The texture that is multiplied on top of the lighting result like a mask. Can be used like a cinema projector.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Lights.LightSpot.UVScale">
            <summary>
            The scale of the texture coordinates.
            </summary>
            <userdoc>
            The scale to apply to the texture coordinates. Values lower than 1 zoom the texture in; values greater than 1 tile it.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Lights.LightSpot.UVOffset">
            <summary>
            The offset in the texture coordinates.
            </summary>
            <userdoc>
            The offset to apply to the model's texture coordinates
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Lights.LightSpot.MipMapScale">
            <summary>Scales the mip map level in the shader. 0 = biggest mip map, 1 = smallest mip map.</summary>
            <userdoc>Used to set how blurry the projected texture should be. 0 = full resolution, 1 = 1x1 pixel</userdoc>
        </member>
        <member name="T:Stride.Rendering.Lights.LightSpotGroupRenderer">
            <summary>
            Light renderer for <see cref="T:Stride.Rendering.Lights.LightSpot"/>.
            Handles grouping by shadow type and projection texture.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Lights.LightSpotGroupRenderer.SpotLightShaderGroup.AddView(System.Int32,Stride.Rendering.RenderView,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Rendering.Lights.ITextureProjectionRenderer">
            <summary>
            Interface to project a texture onto geometry.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Lights.LightSpotTextureProjectionRenderer">
            <summary>
            </summary>
        </member>
        <member name="M:Stride.Rendering.Lights.LightSpotTextureProjectionRenderer.#ctor(Stride.Rendering.Lights.SpotLightTextureParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Lights.LightSpotTextureProjectionRenderer"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Lights.LightSpotTextureProjectionRenderer.LightSpotTextureProjectionGroupShaderData.#ctor(Stride.Rendering.Lights.SpotLightTextureParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Lights.LightSpotTextureProjectionRenderer.LightSpotTextureProjectionGroupShaderData" /> class.
            </summary>
            <param name="shadowType">Type of the shadow.</param>
            <param name="lightCountMax">The light count maximum.</param>
        </member>
        <member name="T:Stride.Rendering.Lights.LightStandardShadowMap">
            <summary>
            A standard shadow map.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Lights.RenderLight.Position">
            <summary>
            Gets the light position in World-Space (computed by the <see cref="!:LightProcessor"/>) (readonly field). See remarks.
            </summary>
            <value>The position.</value>
            <remarks>This property should only be used inside a renderer and not from a script as it is updated after scripts</remarks>
        </member>
        <member name="F:Stride.Rendering.Lights.RenderLight.Direction">
            <summary>
            Gets the light direction in World-Space (computed by the <see cref="!:LightProcessor"/>) (readonly field).
            </summary>
            <value>The direction.</value>
            <remarks>This property should only be used inside a renderer and not from a script as it is updated after scripts</remarks>
        </member>
        <member name="F:Stride.Rendering.Lights.RenderLight.BoundingBox">
            <summary>
            The bounding box of this light in WS after the <see cref="!:LightProcessor"/> has been applied (readonly field).
            </summary>
        </member>
        <member name="F:Stride.Rendering.Lights.RenderLight.BoundingBoxExt">
            <summary>
            The bounding box extents of this light in WS after the <see cref="!:LightProcessor"/> has been applied (readonly field).
            </summary>
        </member>
        <member name="F:Stride.Rendering.Lights.RenderLight.HasBoundingBox">
            <summary>
            The determines whether this instance has a valid bounding box (readonly field).
            </summary>
        </member>
        <member name="M:Stride.Rendering.Lights.RenderLight.UpdateBoundingBox">
            <summary>
            Updates this instance( <see cref="F:Stride.Rendering.Lights.RenderLight.Position"/>, <see cref="F:Stride.Rendering.Lights.RenderLight.Direction"/>, <see cref="F:Stride.Rendering.Lights.RenderLight.HasBoundingBox"/>, <see cref="F:Stride.Rendering.Lights.RenderLight.BoundingBox"/>, <see cref="F:Stride.Rendering.Lights.RenderLight.BoundingBoxExt"/>
            </summary>
            <param name="colorSpace"></param>
        </member>
        <member name="T:Stride.Rendering.Lights.RenderLightCollection">
            <summary>
            A list of <see cref="!:LightComponent"/> for a specified <see cref="T:Stride.Rendering.RenderGroupMask"/>.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Lights.RenderLightCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Lights.RenderLightCollection"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Lights.RenderLightCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Lights.RenderLightCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="P:Stride.Rendering.Lights.RenderLightCollection.CullingMask">
            <summary>
            Gets or sets the culling mask.
            </summary>
            <value>The culling mask.</value>
        </member>
        <member name="F:Stride.Rendering.Lights.RenderLightCollection.Tags">
            <summary>
            Tags attached.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Lights.RenderLightCollectionGroup">
            <summary>
            A list of <see cref="T:Stride.Rendering.Lights.RenderLightCollection"/> for a particular type of light (direct light, direct light + shadows, environment lights).
            </summary>
        </member>
        <member name="M:Stride.Rendering.Lights.RenderLightCollectionGroup.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Lights.RenderLightCollectionGroup"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Lights.RenderLightCollectionGroup.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Stride.Rendering.Lights.RenderLightCollection"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>LightComponentCollection.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index [{0}] out of range [0, {1}].ToFormat(index, lights.Count - 1)</exception>
        </member>
        <member name="M:Stride.Rendering.Lights.RenderLightCollectionGroup.FindLightCollectionByGroup(Stride.Rendering.RenderGroup)">
            <summary>
            Gets the light affecting a specific group.
            </summary>
            <param name="group">The group.</param>
            <returns>LightComponentCollection.</returns>
        </member>
        <member name="P:Stride.Rendering.Lights.RenderLightCollectionGroup.AllLights">
            <summary>
            Gets all the lights stored in this group.
            </summary>
            <value>All lights.</value>
        </member>
        <member name="P:Stride.Rendering.Lights.RenderLightCollectionGroup.AllLightsWithShadows">
            <summary>
            Gets the lights with shadows.
            </summary>
            <value>The lights with shadows.</value>
        </member>
        <member name="P:Stride.Rendering.Lights.RenderLightCollectionGroup.Count">
            <summary>
            Gets the number of <see cref="T:Stride.Rendering.Lights.RenderLightCollection"/> stored in this group.
            </summary>
            <value>The number of <see cref="T:Stride.Rendering.Lights.RenderLightCollection"/> stored in this group.</value>
        </member>
        <member name="P:Stride.Rendering.Lights.RenderLightCollectionGroup.LightType">
            <summary>
            Gets the light type this collection contains.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Lights.TextureProjectionKeys">
            <summary>
            Keys used for texture projection by lights.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Lights.TextureProjectionKeys.ProjectionTexture">
            <summary>
            Key for the texture to project.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Lights.TextureProjectionKeys.UVScale">
            <summary>
            Key for the texture to project.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Lights.TextureProjectionKeys.UVOffset">
            <summary>
            Key for the texture to project.
            </summary>
        </member>
        <member name="T:Stride.Rendering.LightingKeys">
            <summary>
            Keys used for lighting.
            </summary>
        </member>
        <member name="T:Stride.Rendering.LogicalGroup">
            <summary>
            Defines a group of descriptors and cbuffer range that are updated together.
            It can be declared in shader using the syntax <c>cbuffer PerView.LogicalGroupName</c> (also works with <c>rgroup</c>).
            </summary>
        </member>
        <member name="T:Stride.Rendering.LogicalGroupExtensions">
            <summary>
            Various extension methods usedful to use with <see cref="T:Stride.Rendering.LogicalGroup"/>.
            </summary>
        </member>
        <member name="M:Stride.Rendering.LogicalGroupExtensions.ProcessLogicalGroup(Stride.Rendering.ParameterCollectionLayout,Stride.Rendering.RenderSystemResourceGroupLayout,Stride.Rendering.LogicalGroup@)">
            <summary>
            Adds a <see cref="T:Stride.Rendering.LogicalGroup"/> layout to a <see cref="T:Stride.Rendering.ParameterCollectionLayout"/>, so that it is later easy to use with <see cref="M:Stride.Rendering.LogicalGroupExtensions.UpdateLogicalGroup(Stride.Graphics.ResourceGroup,Stride.Rendering.LogicalGroup@,Stride.Rendering.ParameterCollection,System.Int32,System.Int32)"/>.
            </summary>
            <param name="parameterCollectionLayout"></param>
            <param name="resourceGroupLayout"></param>
            <param name="logicalGroup"></param>
        </member>
        <member name="M:Stride.Rendering.LogicalGroupExtensions.UpdateLogicalGroup(Stride.Graphics.ResourceGroup,Stride.Rendering.LogicalGroup@,Stride.Rendering.ParameterCollection,System.Int32,System.Int32)">
            <summary>
            Copies a full logical group of descriptors and data from a <see cref="T:Stride.Rendering.ParameterCollection"/> to a <see cref="T:Stride.Graphics.ResourceGroup"/>.
            </summary>
            <param name="resourceGroup">The target resource group to update.</param>
            <param name="logicalGroup">The logical group.</param>
            <param name="sourceParameters">The source values.</param>
            <param name="sourceDescriptorSlotStart">The source descriptor start slot (in case it contains other data before in the layout).</param>
            <param name="sourceOffset">The source data start offset (in case it contains other data before in the layout).</param>
        </member>
        <member name="T:Stride.Rendering.LogicalGroupReference">
            <summary>
            Handle used to query logical group information.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Material">
            <summary>
            A compiled version of <see cref="T:Stride.Rendering.Materials.MaterialDescriptor"/>.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Material.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Material"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Material.Passes">
            <summary>
            The passes contained in this material (usually one).
            </summary>
        </member>
        <member name="P:Stride.Rendering.Material.Descriptor">
            <summary>
            Gets or sets the descriptor (this field is null at runtime).
            </summary>
            <value>The descriptor.</value>
        </member>
        <member name="M:Stride.Rendering.Material.New(Stride.Graphics.GraphicsDevice,Stride.Rendering.Materials.MaterialDescriptor)">
            <summary>
            Creates a new material from the specified descriptor.
            </summary>
            <param name="device"></param>
            <param name="descriptor">The material descriptor.</param>
            <returns>An instance of a <see cref="T:Stride.Rendering.Material"/>.</returns>
            <exception cref="T:System.ArgumentNullException">descriptor</exception>
            <exception cref="T:System.InvalidOperationException">If an error occurs with the material description</exception>
        </member>
        <member name="T:Stride.Rendering.MaterialAssetKeys">
            <summary>
            Defines keys associated with mesh used for compiling assets.
            </summary>
        </member>
        <member name="F:Stride.Rendering.MaterialAssetKeys.UseParameters">
            <summary>
            When compiling effect with an EffectLibraryAsset (sdfxlib), set it to true to allow permutation based on the 
            parameters of all materials.
            </summary>
            <userdoc>
            Use the material parameters to generate effects
            </userdoc>
        </member>
        <member name="F:Stride.Rendering.MaterialAssetKeys.GenerateShader">
            <summary>
            Allow material compilation without mesh.
            </summary>
            <userdoc>
            Generate a shader even if the materials aren't attached to a mesh
            </userdoc>
        </member>
        <member name="T:Stride.Rendering.MaterialInstance">
            <summary>
            A <see cref="P:Stride.Rendering.MaterialInstance.Material"/> instance.
            </summary>
        </member>
        <member name="M:Stride.Rendering.MaterialInstance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.MaterialInstance"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.MaterialInstance.#ctor(Stride.Rendering.Material)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.MaterialInstance"/> class.
            </summary>
            <param name="material">The material.</param>
        </member>
        <member name="P:Stride.Rendering.MaterialInstance.Material">
            <summary>
            Gets or sets the material.
            </summary>
            <value>The material.</value>
            <userdoc>The reference to the material asset to used for this material slot name.</userdoc>
        </member>
        <member name="P:Stride.Rendering.MaterialInstance.IsShadowCaster">
            <summary>
            Gets or sets if this instance is casting shadows.
            </summary>
            <value>A boolean indicating whether this instance is casting shadows. Default is <c>true</c>.</value>
            <userdoc>Generate a shadow (when shadow maps are enabled)</userdoc>
        </member>
        <member name="M:Stride.Rendering.MaterialInstance.op_Implicit(Stride.Rendering.Material)~Stride.Rendering.MaterialInstance">
            <summary>
            Performs an explicit conversion from <see cref="P:Stride.Rendering.MaterialInstance.Material"/> to <see cref="T:Stride.Rendering.MaterialInstance"/>.
            </summary>
            <param name="material">The material.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Stride.Rendering.MaterialPass">
            <summary>
            Describes a single rendering pass of a <see cref="T:Stride.Rendering.Material"/>.
            </summary>
        </member>
        <member name="M:Stride.Rendering.MaterialPass.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.MaterialPass"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.MaterialPass.#ctor(Stride.Rendering.ParameterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.MaterialPass"/> class.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="P:Stride.Rendering.MaterialPass.Material">
            <summary>
            The material that contains this pass.
            </summary>
        </member>
        <member name="P:Stride.Rendering.MaterialPass.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="F:Stride.Rendering.MaterialPass.CullMode">
            <summary>
            Overrides the cullmode for this material.
            </summary>
        </member>
        <member name="F:Stride.Rendering.MaterialPass.BlendState">
            <summary>
            Overrides the blend state for this material.
            </summary>
        </member>
        <member name="F:Stride.Rendering.MaterialPass.TessellationMethod">
            <summary>
            The tessellation method used by the material.
            </summary>
        </member>
        <member name="P:Stride.Rendering.MaterialPass.HasTransparency">
            <summary>
            Gets or sets a value indicating whether this instance has transparent.
            </summary>
            <value><c>true</c> if this instance has transparent; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Rendering.MaterialPass.AlphaToCoverage">
            <summary>
            Whether or not to use the alpha-to-coverage multisampling technique.
            </summary>
        </member>
        <member name="P:Stride.Rendering.MaterialPass.IsLightDependent">
            <summary>
            Determines if this material is affected by lighting.
            </summary>
            <value><c>true</c> if this instance affects lighting; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Rendering.MaterialPass.PassIndex">
            <summary>
            The index of this pass as part of its containing <see cref="P:Stride.Rendering.MaterialPass.Material"/>.
            </summary>
            <remarks>
            Used for state sorting.
            </remarks>
        </member>
        <member name="T:Stride.Rendering.MaterialPassCollection">
            <summary>
            A collection of <see cref="T:Stride.Rendering.MaterialPass"/>.
            </summary>
        </member>
        <member name="M:Stride.Rendering.MaterialPassCollection.InsertItem(System.Int32,Stride.Rendering.MaterialPass)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.MaterialPassCollection.RemoveItem(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.MaterialPassCollection.SetItem(System.Int32,Stride.Rendering.MaterialPass)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Rendering.StrideTessellationMethod">
            <summary>
            Describe the different tessellation methods used in Stride.
            </summary>
        </member>
        <member name="F:Stride.Rendering.StrideTessellationMethod.None">
            <summary>
            No tessellation
            </summary>
        </member>
        <member name="F:Stride.Rendering.StrideTessellationMethod.Flat">
            <summary>
            Flat tessellation. Also known as dicing tessellation.
            </summary>
        </member>
        <member name="F:Stride.Rendering.StrideTessellationMethod.PointNormal">
            <summary>
            Point normal tessellation.
            </summary>
        </member>
        <member name="F:Stride.Rendering.StrideTessellationMethod.AdjacentEdgeAverage">
            <summary>
            Adjacent edge average.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Mesh.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Mesh"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Mesh.#ctor(Stride.Rendering.Mesh)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Mesh"/> class using a shallow copy constructor.
            </summary>
            <param name="mesh">The mesh.</param>
        </member>
        <member name="M:Stride.Rendering.Mesh.#ctor(Stride.Rendering.MeshDraw,Stride.Rendering.ParameterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Mesh" /> class.
            </summary>
            <param name="meshDraw">The mesh draw.</param>
            <param name="parameters">The parameters.</param>
            <exception cref="T:System.ArgumentNullException">parameters</exception>
        </member>
        <member name="F:Stride.Rendering.Mesh.NodeIndex">
            <summary>
            Index of the transformation node in <see cref="T:Stride.Rendering.Model"/>.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Mesh.BoundingBox">
            <summary>
            Gets or sets the bounding box encompassing this <see cref="T:Stride.Rendering.Mesh"/>.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Mesh.BoundingSphere">
            <summary>
            Gets the bounding sphere
            </summary>
        </member>
        <member name="T:Stride.Rendering.MeshBoneDefinition">
            <summary>
            Describes a bone cluster inside a <see cref="T:Stride.Rendering.Mesh"/>.
            </summary>
        </member>
        <member name="F:Stride.Rendering.MeshBoneDefinition.NodeIndex">
            <summary>
            The node index in <see cref="P:Stride.Rendering.SkeletonUpdater.NodeTransformations"/>.
            </summary>
        </member>
        <member name="F:Stride.Rendering.MeshBoneDefinition.LinkToMeshMatrix">
            <summary>
            The matrix to transform from mesh space to local space of this bone.
            </summary>
        </member>
        <member name="T:Stride.Rendering.MeshKeys">
            <summary>
            Defines keys associated with mesh used for compiling assets.
            </summary>
        </member>
        <member name="F:Stride.Rendering.MeshKeys.UseParameters">
            <summary>
            When compiling effect with an EffectLibraryAsset (sdfxlib), set it to true to allow permutation based on the 
            parameters of all meshes.
            </summary>
            TODO: allow permutation for a specific mesh
            <userdoc>
            Use the mesh parameters to generate effects
            </userdoc>
        </member>
        <member name="T:Stride.Rendering.MeshPipelineProcessor">
            <summary>
            Pipeline processor for <see cref="T:Stride.Rendering.RenderMesh"/> with materials. It will set blend and depth-stencil state for transparent objects, and properly set culling according to material and negative scaling.
            </summary>
        </member>
        <member name="T:Stride.Rendering.MeshRenderFeature">
            <summary>
            Renders <see cref="T:Stride.Rendering.RenderMesh"/>.
            </summary>
        </member>
        <member name="F:Stride.Rendering.MeshRenderFeature.RenderFeatures">
            <summary>
            Lists of sub render features that can be applied on <see cref="T:Stride.Rendering.RenderMesh"/>.
            </summary>
        </member>
        <member name="P:Stride.Rendering.MeshRenderFeature.SupportedRenderObjectType">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.MeshRenderFeature.InitializeCore">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.MeshRenderFeature.Collect">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.MeshRenderFeature.Extract">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.MeshRenderFeature.PrepareEffectPermutationsImpl(Stride.Rendering.RenderDrawContext)">
            <param name="context"></param>
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.MeshRenderFeature.Prepare(Stride.Rendering.RenderDrawContext)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.MeshRenderFeature.Draw(Stride.Rendering.RenderDrawContext,Stride.Rendering.RenderView,Stride.Rendering.RenderViewStage)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.MeshRenderFeature.Draw(Stride.Rendering.RenderDrawContext,Stride.Rendering.RenderView,Stride.Rendering.RenderViewStage,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.MeshRenderFeature.Flush(Stride.Rendering.RenderDrawContext)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Rendering.MeshSkinningDefinition">
            <summary>
            Describes skinning for a <see cref="T:Stride.Rendering.Mesh"/>, through a collection of <see cref="T:Stride.Rendering.MeshBoneDefinition"/>.
            </summary>
        </member>
        <member name="F:Stride.Rendering.MeshSkinningDefinition.Bones">
            <summary>
            The bones.
            </summary>
        </member>
        <member name="T:Stride.Rendering.MeshVelocityRenderFeature">
            <summary>
            Output per-pixel motion vectors to a separate render target
            </summary>
        </member>
        <member name="T:Stride.Rendering.Model">
            <summary>
            Collection of <see cref="T:Stride.Rendering.Mesh"/>, each one usually being a different LOD of the same Model.
            The effect system will select the appropriate LOD depending on distance, current pass, and other effect-specific requirements.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Model.Children">
            <summary>
            Gets the views.
            </summary>
            <value>
            The views.
            </value>
        </member>
        <member name="P:Stride.Rendering.Model.Materials">
            <summary>
            Gets the materials.
            </summary>
            <value>
            The materials.
            </value>
        </member>
        <member name="P:Stride.Rendering.Model.Meshes">
            <summary>
            Gets the meshes.
            </summary>
            <value>
            The meshes.
            </value>
        </member>
        <member name="P:Stride.Rendering.Model.Skeleton">
            <summary>
            Gets or sets the hierarchy definition, which describes nodes name, default transformation and hierarchical parent.
            </summary>
            <value>
            The hierarchy, which describes nodes name, default transformation and hierarchical parent.
            </value>
        </member>
        <member name="P:Stride.Rendering.Model.BoundingBox">
            <summary>
            Gets or sets the bounding box encompassing all the <see cref="P:Stride.Rendering.Model.Meshes"/> (not including animation).
            </summary>
            <value>
            The bounding box.
            </value>
        </member>
        <member name="P:Stride.Rendering.Model.BoundingSphere">
            <summary>
            Gets or sets the bounding sphere encompassing all the <see cref="P:Stride.Rendering.Model.Meshes"/> (not including animation).
            </summary>
            <value>The bounding sphere.</value>
        </member>
        <member name="M:Stride.Rendering.Model.Add(Stride.Rendering.Model)">
            <summary>
            Adds the specified model view (for collection Initializers).
            </summary>
            <param name="model">The model view.</param>
        </member>
        <member name="M:Stride.Rendering.Model.Add(Stride.Rendering.Mesh)">
            <summary>
            Adds the specified mesh (for collection Initializers).
            </summary>
            <param name="mesh">The mesh.</param>
        </member>
        <member name="M:Stride.Rendering.Model.Add(Stride.Rendering.MaterialInstance)">
            <summary>
            Adds the specified material (for collection Initializers).
            </summary>
            <param name="material">The mesh.</param>
        </member>
        <member name="M:Stride.Rendering.Model.Instantiate">
            <summary>
            Create a clone with its own ParameterCollection.
            It allows reuse of a single Model for multiple ModelComponent.
            </summary>
        </member>
        <member name="T:Stride.Rendering.ModelNodeDefinition">
            <summary>
            Describes a single transformation node, usually in a <see cref="T:Stride.Rendering.Model"/> node hierarchy.
            </summary>
        </member>
        <member name="F:Stride.Rendering.ModelNodeDefinition.ParentIndex">
            <summary>
            The parent node index.
            </summary>
        </member>
        <member name="F:Stride.Rendering.ModelNodeDefinition.Transform">
            <summary>
            The local transform.
            </summary>
        </member>
        <member name="F:Stride.Rendering.ModelNodeDefinition.Name">
            <summary>
            The name of this node.
            </summary>
        </member>
        <member name="F:Stride.Rendering.ModelNodeDefinition.Flags">
            <summary>
            The flags of this node.
            </summary>
        </member>
        <member name="T:Stride.Rendering.ModelNodeFlags">
            <summary>
            Flags describing state of a <see cref="T:Stride.Rendering.ModelNodeDefinition"/>.
            </summary>
        </member>
        <member name="F:Stride.Rendering.ModelNodeFlags.EnableTransform">
            <summary>
            If true, <see cref="F:Stride.Rendering.ModelNodeTransformation.Transform"/> will be used to update <see cref="F:Stride.Rendering.ModelNodeTransformation.LocalMatrix"/>.
            </summary>
        </member>
        <member name="F:Stride.Rendering.ModelNodeFlags.EnableRender">
            <summary>
            If true, associated <see cref="T:Stride.Rendering.Mesh"/> will be rendered.
            </summary>
        </member>
        <member name="F:Stride.Rendering.ModelNodeFlags.OverrideWorldMatrix">
            <summary>
            Used by the physics engine to override the world matrix transform
            </summary>
        </member>
        <member name="F:Stride.Rendering.ModelNodeFlags.Default">
            <summary>
            The default flags.
            </summary>
        </member>
        <member name="F:Stride.Rendering.ModelNodeTransformation.Flags">
            <summary>
            The flags of this node.
            </summary>
        </member>
        <member name="T:Stride.Rendering.EffectObjectNode">
            <summary>
            Represents a <see cref="T:Stride.Rendering.RenderObject"/> drawn with a specific <see cref="F:Stride.Rendering.EffectObjectNode.RenderEffect"/>, with attached properties.
            </summary>
        </member>
        <member name="F:Stride.Rendering.EffectObjectNode.RenderEffect">
            <summary>
            The effect used.
            </summary>
        </member>
        <member name="F:Stride.Rendering.EffectObjectNode.ObjectNode">
            <summary>
            The object node reference.
            </summary>
        </member>
        <member name="F:Stride.Rendering.EffectObjectNode.ObjectDescriptorSet">
            <summary>
            The "PerObject" descriptor set.
            </summary>
        </member>
        <member name="F:Stride.Rendering.EffectObjectNode.ObjectConstantBufferOffset">
            <summary>
            The "PerObject" constant buffer offset in our global cbuffer.
            </summary>
        </member>
        <member name="T:Stride.Rendering.ObjectNode">
            <summary>
            Represents a <see cref="F:Stride.Rendering.ObjectNode.RenderObject"/> and allows to attach properties every frame.
            </summary>
        </member>
        <member name="F:Stride.Rendering.ObjectNode.RenderObject">
            <summary>
            Access underlying RenderObject.
            </summary>
        </member>
        <member name="T:Stride.Rendering.RenderNode">
            <summary>
            Represents an single render operation of a <see cref="F:Stride.Rendering.RenderNode.RenderObject"/> from a specific view with a specific effect, with attached properties.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderNode.RenderObject">
            <summary>
            Underlying render object.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderNode.RenderView">
            <summary>
            View used when rendering. This is usually a frustum and some camera parameters.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderNode.ViewObjectNode">
            <summary>
            Contains parameters specific to this object in the current view.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderNode.EffectObjectNode">
            <summary>
            Contains parameters specific to this object with the current effect.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderNode.Resources">
            <summary>
            The "PerDraw" resources.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderNode.RenderStage">
            <summary>
            The render stage.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderNode.RenderEffect">
            <summary>
            The render effect.
            </summary>
        </member>
        <member name="T:Stride.Rendering.ViewObjectNode">
            <summary>
            Represents a <see cref="F:Stride.Rendering.ViewObjectNode.RenderObject"/> from a specific view.
            </summary>
        </member>
        <member name="F:Stride.Rendering.ViewObjectNode.RenderObject">
            <summary>
            Access underlying RenderObject.
            </summary>
        </member>
        <member name="F:Stride.Rendering.ViewObjectNode.ObjectNode">
            <summary>
            The object node reference.
            </summary>
        </member>
        <member name="T:Stride.Rendering.PipelinePluginContext">
            <summary>
            Context used by <see cref="!:PipelinePluginManager"/>.
            </summary>
        </member>
        <member name="T:Stride.Rendering.ProceduralModels.CapsuleProceduralModel">
            <summary>
            A Capsule descriptor
            </summary>
        </member>
        <member name="M:Stride.Rendering.ProceduralModels.CapsuleProceduralModel.#ctor">
            <summary>
            Initializes a new instance of the Capsule descriptor class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.CapsuleProceduralModel.Length">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
            <userdoc>The length of the capsule. That is the distance between the center of two extremity spheres.</userdoc>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.CapsuleProceduralModel.Radius">
            <summary>
            Gets or sets the radius of the base of the Capsule.
            </summary>
            <value>The radius.</value>
            <userdoc>The radius of the capsule.</userdoc>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.CapsuleProceduralModel.Tessellation">
            <summary>
            Gets or sets the tessellation factor.
            </summary>
            <userdoc>The tessellation of the capsule. That is the number of polygons composing it.</userdoc>
        </member>
        <member name="T:Stride.Rendering.ProceduralModels.ConeProceduralModel">
            <summary>
            A Cone descriptor
            </summary>
        </member>
        <member name="M:Stride.Rendering.ProceduralModels.ConeProceduralModel.#ctor">
            <summary>
            Initializes a new instance of the Cone descriptor class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.ConeProceduralModel.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
            <userdoc>The height of the cone.</userdoc>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.ConeProceduralModel.Radius">
            <summary>
            Gets or sets the radius of the base of the Cone.
            </summary>
            <value>The radius.</value>
            <userdoc>The radius of the cone.</userdoc>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.ConeProceduralModel.Tessellation">
            <summary>
            Gets or sets the tessellation factor.
            </summary>
            <value>The tessellation.</value>
            <userdoc>The tessellation of the cone. That is the number of polygons composing it.</userdoc>
        </member>
        <member name="T:Stride.Rendering.ProceduralModels.CubeProceduralModel">
            <summary>
            A cube procedural model
            </summary>
        </member>
        <member name="M:Stride.Rendering.ProceduralModels.CubeProceduralModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.ProceduralModels.CubeProceduralModel"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.CubeProceduralModel.Size">
            <summary>
            Gets or sets the size of the cube.
            </summary>
            <value>The size.</value>
            <userdoc>The size of the cube along the Ox, Oy and Oz axis.</userdoc>
        </member>
        <member name="T:Stride.Rendering.ProceduralModels.CylinderProceduralModel">
            <summary>
            A Cylinder descriptor
            </summary>
        </member>
        <member name="M:Stride.Rendering.ProceduralModels.CylinderProceduralModel.#ctor">
            <summary>
            Initializes a new instance of the Cylinder descriptor class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.CylinderProceduralModel.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
            <userdoc>The height of the cylinder.</userdoc>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.CylinderProceduralModel.Radius">
            <summary>
            Gets or sets the radius of the base of the cylinder.
            </summary>
            <value>The radius.</value>
            <userdoc>The radius of the cylinder.</userdoc>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.CylinderProceduralModel.Tessellation">
            <summary>
            Gets or sets the tessellation factor.
            </summary>
            <value>The tessellation.</value>
            <userdoc>The tessellation of the cylinder. That is the number of polygons composing it.</userdoc>
        </member>
        <member name="T:Stride.Rendering.ProceduralModels.GeoSphereProceduralModel">
            <summary>
            A sphere procedural model.
            </summary>
        </member>
        <member name="M:Stride.Rendering.ProceduralModels.GeoSphereProceduralModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.ProceduralModels.GeoSphereProceduralModel"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.GeoSphereProceduralModel.Radius">
            <summary>
            Gets or sets the radius of this sphere.
            </summary>
            <value>The radius.</value>
            <userdoc>The radius of the geosphere.</userdoc>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.GeoSphereProceduralModel.Tessellation">
            <summary>
            Gets or sets the tessellation factor (default: 3.0)
            </summary>
            <value>The tessellation.</value>
            <userdoc>The tessellation of the geophere. That is the number of polygons composing it.</userdoc>
        </member>
        <member name="T:Stride.Rendering.ProceduralModels.IProceduralModel">
            <summary>
            Interface to create a procedural model.
            </summary>
        </member>
        <member name="M:Stride.Rendering.ProceduralModels.IProceduralModel.Generate(Stride.Core.IServiceRegistry,Stride.Rendering.Model)">
            <summary>
            Creates a procedural model.
            </summary>
            <param name="services">The services registry.</param>
            <param name="model">A model instance to fill with procedural content.</param>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.IProceduralModel.MaterialInstances">
            <summary>
            Gets the collection of material instances used by this <see cref="T:Stride.Rendering.ProceduralModels.IProceduralModel"/>/
            </summary>
        </member>
        <member name="T:Stride.Rendering.ProceduralModels.PlaneProceduralModel">
            <summary>
            The geometric descriptor for a plane.
            </summary>
        </member>
        <member name="M:Stride.Rendering.ProceduralModels.PlaneProceduralModel.#ctor">
            <summary>
            Initializes a new instance of geometric descriptor for a plane.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.PlaneProceduralModel.Size">
            <summary>
            Gets or sets the size of the plane.
            </summary>
            <value>The size x.</value>
            <userdoc>The size of plane along the X/Y axis</userdoc>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.PlaneProceduralModel.Tessellation">
            <summary>
            Gets or sets the tessellation of the plane.
            </summary>
            <value>The tessellation x.</value>
            <userdoc>The tessellation of the plane along the X/Y axis. That is the number polygons the plane is made of.</userdoc>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.PlaneProceduralModel.Normal">
            <summary>
            Gets or sets the normal direction of the plane.
            </summary>
            <userdoc>The direction of the normal of the plane. This changes the default orientation of the plane.</userdoc>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.PlaneProceduralModel.GenerateBackFace">
            <summary>
            Gets or sets value indicating if a back face should be added.
            </summary>
            <userdoc>Check this combo box to generate a back face to the plane</userdoc>
        </member>
        <member name="T:Stride.Rendering.ProceduralModels.PrimitiveProceduralModelBase">
            <summary>
            Base class for primitive procedural model.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.PrimitiveProceduralModelBase.UvScale">
            <summary>
            Gets or sets the UV scale.
            </summary>
            <value>The UV scale</value>
            <userdoc>The scale to apply to the UV coordinates of the shape. This can be used to tile a texture on it.</userdoc>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.PrimitiveProceduralModelBase.LocalOffset">
            <summary>
            Gets or sets the local offset that will be applied to the procedural model's vertexes.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.PrimitiveProceduralModelBase.NumberOfTextureCoordinates">
            <summary>
            Gets or sets the number of texture coordinate channels to generate. A value between 1 and 10, inclusive.
            </summary>
            <value>
            The number of texure coordinate channels.
            </value>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.PrimitiveProceduralModelBase.MaterialInstance">
            <summary>
            Gets the material instance.
            </summary>
            <value>The material instance.</value>
            <userdoc>The reference material asset to use with this model.</userdoc>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.PrimitiveProceduralModelBase.MaterialInstances">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Rendering.ProceduralModels.ProceduralModelDescriptor">
            <summary>
            A descriptor for a procedural geometry.
            </summary>
        </member>
        <member name="M:Stride.Rendering.ProceduralModels.ProceduralModelDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.ProceduralModels.ProceduralModelDescriptor"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.ProceduralModels.ProceduralModelDescriptor.#ctor(Stride.Rendering.ProceduralModels.IProceduralModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.ProceduralModels.ProceduralModelDescriptor"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.ProceduralModelDescriptor.Type">
            <summary>
            Gets or sets the type of geometric primitive.
            </summary>
            <value>The type of geometric primitive.</value>
        </member>
        <member name="T:Stride.Rendering.ProceduralModels.SphereProceduralModel">
            <summary>
            A sphere procedural.
            </summary>
        </member>
        <member name="M:Stride.Rendering.ProceduralModels.SphereProceduralModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.ProceduralModels.SphereProceduralModel"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.SphereProceduralModel.Radius">
            <summary>
            Gets or sets the radius of this sphere.
            </summary>
            <value>The radius.</value>
            <userdoc>The radius of the sphere.</userdoc>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.SphereProceduralModel.Tessellation">
            <summary>
            Gets or sets the tessellation factor (default: 3.0)
            </summary>
            <value>The tessellation.</value>
            <userdoc>The tessellation of the sphere. That is the number of polygons composing it.</userdoc>
        </member>
        <member name="T:Stride.Rendering.ProceduralModels.TeapotProceduralModel">
            <summary>
            A teapot procedural model.
            </summary>
        </member>
        <member name="M:Stride.Rendering.ProceduralModels.TeapotProceduralModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.ProceduralModels.TeapotProceduralModel"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.TeapotProceduralModel.Size">
            <summary>
            Gets or sets the size of this teapot.
            </summary>
            <value>The size.</value>
            <userdoc>The size of the teapot.</userdoc>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.TeapotProceduralModel.Tessellation">
            <summary>
            Gets or sets the tessellation factor (default: 3.0)
            </summary>
            <value>The tessellation of the teapot. That is the number of polygons composing it.</value>
        </member>
        <member name="T:Stride.Rendering.ProceduralModels.TorusProceduralModel">
            <summary>
            The Torus Model.
            </summary>
        </member>
        <member name="M:Stride.Rendering.ProceduralModels.TorusProceduralModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.ProceduralModels.TorusProceduralModel"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.TorusProceduralModel.Radius">
            <summary>
            Gets or sets the size of this Torus.
            </summary>
            <value>The radius.</value>
            <userdoc>The major radius of the torus.</userdoc>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.TorusProceduralModel.Thickness">
            <summary>
            Gets or sets the thickness.
            </summary>
            <value>The minor radius of the torus. That is the radius of the ring.</value>
        </member>
        <member name="P:Stride.Rendering.ProceduralModels.TorusProceduralModel.Tessellation">
            <summary>
            Gets or sets the tessellation factor (default: 3.0)
            </summary>
            <value>The tessellation.</value>
            <userdoc>The tessellation of the torus. That is the number of polygons composing it.</userdoc>
        </member>
        <member name="T:Stride.Rendering.ProfilingKeys">
            <summary>
            Various <see cref="T:Stride.Core.Diagnostics.ProfilingKey"/> used to measure performance across some part of the effect system.
            </summary>
        </member>
        <member name="F:Stride.Rendering.ViewObjectNodeReference.Invalid">
            <summary>
            Invalid slot.
            </summary>
        </member>
        <member name="T:Stride.Rendering.RenderDataHolder">
            <summary>
            Holds associated data used during rendering.
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderDataHolder.GetData``1(Stride.Rendering.ViewObjectPropertyKey{``0})">
            <summary>
            Get data from its key.
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderDataHolder.ChangeDataMultiplier``1(Stride.Rendering.ViewObjectPropertyKey{``0},System.Int32)">
            <summary>
            Change data multiplier (i.e. how many data entries per item there will be).
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderDataHolder.GetData``1(Stride.Rendering.ObjectPropertyKey{``0})">
            <summary>
            Get data from its key.
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderDataHolder.ChangeDataMultiplier``1(Stride.Rendering.ObjectPropertyKey{``0},System.Int32)">
            <summary>
            Change data multiplier (i.e. how many data entries per item there will be).
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderDataHolder.GetData``1(Stride.Rendering.RenderPropertyKey{``0})">
            <summary>
            Get data from its key.
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderDataHolder.ChangeDataMultiplier``1(Stride.Rendering.RenderPropertyKey{``0},System.Int32)">
            <summary>
            Change data multiplier (i.e. how many data entries per item there will be).
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderDataHolder.GetData``1(Stride.Rendering.EffectObjectPropertyKey{``0})">
            <summary>
            Get data from its key.
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderDataHolder.ChangeDataMultiplier``1(Stride.Rendering.EffectObjectPropertyKey{``0},System.Int32)">
            <summary>
            Change data multiplier (i.e. how many data entries per item there will be).
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderDataHolder.GetData``1(Stride.Rendering.ViewPropertyKey{``0})">
            <summary>
            Get data from its key.
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderDataHolder.ChangeDataMultiplier``1(Stride.Rendering.ViewPropertyKey{``0},System.Int32)">
            <summary>
            Change data multiplier (i.e. how many data entries per item there will be).
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderDataHolder.GetData``1(Stride.Rendering.StaticObjectPropertyKey{``0})">
            <summary>
            Get data from its key.
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderDataHolder.ChangeDataMultiplier``1(Stride.Rendering.StaticObjectPropertyKey{``0},System.Int32)">
            <summary>
            Change data multiplier (i.e. how many data entries per item there will be).
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderDataHolder.DataArrayInfo.EnsureSize(System.Array@,System.Int32)">
            <summary>
            Ensure this array has the given size.
            </summary>
            <param name="array"></param>
            <param name="size"></param>
        </member>
        <member name="M:Stride.Rendering.RenderDataHolder.DataArrayInfo.SwapRemoveItem(System.Array,System.Int32,System.Int32)">
            <summary>
            Move items around. Source will be reset to default values. No growing of array is expected.
            </summary>
            <param name="array"></param>
            <param name="removedElement"></param>
            <param name="lastElement"></param>
        </member>
        <member name="M:Stride.Rendering.RenderDataHolder.DataArrayInfo.ChangeMutiplier(System.Array@,System.Int32)">
            <summary>
            Change number of elements per entry.
            </summary>
            <param name="array"></param>
            <param name="newMultiplier"></param>
        </member>
        <member name="F:Stride.Rendering.ObjectNodeReference.Invalid">
            <summary>
            Invalid slot.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderNodeReference.Invalid">
            <summary>
            Invalid slot.
            </summary>
        </member>
        <member name="F:Stride.Rendering.EffectObjectNodeReference.Invalid">
            <summary>
            Invalid slot.
            </summary>
        </member>
        <member name="F:Stride.Rendering.ViewNodeReference.Invalid">
            <summary>
            Invalid slot.
            </summary>
        </member>
        <member name="F:Stride.Rendering.StaticObjectNodeReference.Invalid">
            <summary>
            Invalid slot.
            </summary>
        </member>
        <member name="M:Stride.Rendering.QueryManager.BeginProfile(Stride.Core.Mathematics.Color4,Stride.Core.Diagnostics.ProfilingKey)">
            <summary>
            Begins profile.
            </summary>
            <param name="profileColor">The profile event color.</param>
            <param name="profilingKey">The <see cref="T:Stride.Core.Diagnostics.ProfilingKey"/></param>
        </member>
        <member name="M:Stride.Rendering.QueryManager.EndProfile(Stride.Core.Diagnostics.ProfilingKey)">
            <summary>
            Ends profile.
            </summary>
        </member>
        <member name="T:Stride.Rendering.RenderContext">
            <summary>
            Rendering context.
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderContext.#ctor(Stride.Core.IServiceRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.RenderContext" /> class.
            </summary>
            <param name="services">The services.</param>
            <exception cref="T:System.ArgumentNullException">services</exception>
        </member>
        <member name="E:Stride.Rendering.RenderContext.RendererInitialized">
            <summary>
            Occurs when a renderer is initialized.
            </summary>
        </member>
        <member name="P:Stride.Rendering.RenderContext.Effects">
            <summary>
            Gets the content manager.
            </summary>
            <value>The content manager.</value>
        </member>
        <member name="P:Stride.Rendering.RenderContext.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
            <value>The graphics device.</value>
        </member>
        <member name="P:Stride.Rendering.RenderContext.Services">
            <summary>
            Gets the services registry.
            </summary>
            <value>The services registry.</value>
        </member>
        <member name="P:Stride.Rendering.RenderContext.Time">
            <summary>
            Gets or sets the time.
            </summary>
        </member>
        <member name="P:Stride.Rendering.RenderContext.Allocator">
            <summary>
            Gets the <see cref="T:Stride.Graphics.GraphicsResource"/> allocator.
            </summary>
            <value>The allocator.</value>
        </member>
        <member name="P:Stride.Rendering.RenderContext.RenderSystem">
            <summary>
            The current render system.
            </summary>
        </member>
        <member name="P:Stride.Rendering.RenderContext.VisibilityGroup">
            <summary>
            The current visibility group from the <see cref="!:SceneInstance"/> and <see cref="P:Stride.Rendering.RenderContext.RenderSystem"/>.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderContext.RenderOutput">
            <summary>
            The current render output format (used during the collect phase).
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderContext.ViewportState">
            <summary>
            The current render output format (used during the collect phase).
            </summary>
        </member>
        <member name="P:Stride.Rendering.RenderContext.RenderView">
            <summary>
            The current render view.
            </summary>
        </member>
        <member name="P:Stride.Rendering.RenderContext.StreamingManager">
            <summary>
            The streaming manager.
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderContext.GetShared(Stride.Core.IServiceRegistry)">
            <summary>
            Gets a global shared context.
            </summary>
            <param name="services">The services.</param>
            <returns>RenderContext.</returns>
        </member>
        <member name="M:Stride.Rendering.RenderContext.SaveViewportAndRestore">
            <summary>
            Saves a viewport state and restores after using it.
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderContext.SaveRenderOutputAndRestore">
            <summary>
            Saves a viewport and restores it after using it.
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderContext.PushRenderViewAndRestore(Stride.Rendering.RenderView)">
            <summary>
            Pushes a render view and restores it after using it.
            </summary>
            <param name="renderView">The render view.</param>
        </member>
        <member name="T:Stride.Rendering.RenderDrawContext">
            <summary>
            Rendering context used during <see cref="!:IGraphicsRenderer.Draw"/>.
            </summary>
        </member>
        <member name="P:Stride.Rendering.RenderDrawContext.RenderContext">
            <summary>
            Gets the render context.
            </summary>
        </member>
        <member name="P:Stride.Rendering.RenderDrawContext.ResourceGroupAllocator">
            <summary>
            Gets the <see cref="T:Stride.Graphics.ResourceGroup"/> allocator.
            </summary>
        </member>
        <member name="P:Stride.Rendering.RenderDrawContext.CommandList">
            <summary>
            Gets the command list.
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderDrawContext.LockCommandList">
            <summary>
            Locks the command list until <see cref="M:System.IDisposable.Dispose"/> is called on the returned value type.
            </summary>
            <returns></returns>
            This is necessary only during Collect(), Extract() and Prepare() phases, not during Draw().
            Some graphics API might not require actual locking, in which case this object might do nothing.
        </member>
        <member name="M:Stride.Rendering.RenderDrawContext.PushRenderTargetsAndRestore">
            <summary>
            Pushes render targets and viewport state.
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderDrawContext.PopRenderTargets">
            <summary>
            Restores render targets and viewport state.
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderDrawContext.GetSharedEffect``1">
            <summary>
            Gets or creates a shared effect.
            </summary>
            <typeparam name="T">Type of the shared effect (mush have a constructor taking a <see cref="T:Stride.Rendering.RenderContext"/></typeparam>
            <returns>A singleton instance of <typeparamref name="T"/></returns>
        </member>
        <member name="T:Stride.Rendering.RenderDrawContext.RenderTargetsState">
            <summary>
            Holds current viewports and render targets.
            </summary>
        </member>
        <member name="T:Stride.Rendering.RenderEffect">
            <summary>
            Instantiation of an Effect for a given <see cref="!:StaticEffectObjectNodeReference"/>.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderEffect.State">
            <summary>
            Describes what state the effect is in (compiling, error, etc..)
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderEffect.RetryTime">
            <summary>
            Describes when to try again after a previous error (UTC).
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderEffect.PipelineState">
            <summary>
            Compiled pipeline state.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderEffect.EffectValidator">
            <summary>
            Validates if effect needs to be compiled or recompiled.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderEffect.PendingEffect">
            <summary>
            Pending effect being compiled.
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderEffect.MarkAsUsed(Stride.Rendering.RenderSystem)">
            <summary>
            Mark effect as used during this frame.
            </summary>
            <returns>True if state changed (object was not mark as used during this frame until now), otherwise false.</returns>
        </member>
        <member name="T:Stride.Rendering.RenderEffectReflection">
            <summary>
            Describes an effect as used by a <see cref="T:Stride.Rendering.RenderNode"/>.
            </summary>
        </member>
        <member name="T:Stride.Rendering.RenderEffectState">
            <summary>
            Describes the state of a <see cref="T:Stride.Rendering.RenderEffect"/>.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderEffectState.Normal">
            <summary>
            The effect is in normal state.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderEffectState.Compiling">
            <summary>
            The effect is being asynchrounously compiled.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderEffectState.Error">
            <summary>
            There was an error while compiling the effect.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderEffectState.Skip">
            <summary>
            The effect is skipped.
            </summary>
        </member>
        <member name="T:Stride.Rendering.RendererBase">
            <summary>
            Base implementation of <see cref="T:Stride.Rendering.IGraphicsRenderer"/>
            </summary>
        </member>
        <member name="M:Stride.Rendering.RendererBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.RendererBase"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.RendererBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.ComponentBase" /> class.
            </summary>
            <param name="name">The name attached to this component</param>
        </member>
        <member name="M:Stride.Rendering.RendererBase.DrawCore(Stride.Rendering.RenderDrawContext)">
            <summary>
            Main drawing method for this renderer that must be implemented. 
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Stride.Rendering.RendererBase.Draw(Stride.Rendering.RenderDrawContext)">
            <summary>
            Draws this renderer with the specified context.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">context</exception>
            <exception cref="T:System.InvalidOperationException">Cannot use a different context between Load and Draw</exception>
        </member>
        <member name="T:Stride.Rendering.RendererCoreBase">
            <summary>
            Base implementation of <see cref="T:Stride.Rendering.IGraphicsRenderer"/>
            </summary>
        </member>
        <member name="M:Stride.Rendering.RendererCoreBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.RendererBase"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.RendererCoreBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.ComponentBase" /> class.
            </summary>
            <param name="name">The name attached to this component</param>
        </member>
        <member name="P:Stride.Rendering.RendererCoreBase.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="!:EntityComponentRendererBase"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
            <userdoc>Enabled if checked, disabled otherwise</userdoc>
        </member>
        <member name="P:Stride.Rendering.RendererCoreBase.Services">
            <summary>
            Gets the <see cref="T:Stride.Core.IServiceRegistry"/>.
            </summary>
            <value>The service registry.</value>
        </member>
        <member name="P:Stride.Rendering.RendererCoreBase.Content">
            <summary>
            Gets the <see cref="T:Stride.Core.Serialization.Contents.ContentManager"/>.
            </summary>
            <value>The asset manager.</value>
        </member>
        <member name="P:Stride.Rendering.RendererCoreBase.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
            <value>The graphics device.</value>
        </member>
        <member name="P:Stride.Rendering.RendererCoreBase.EffectSystem">
            <summary>
            Gets the effect system.
            </summary>
            <value>The effect system.</value>
        </member>
        <member name="M:Stride.Rendering.RendererCoreBase.Unload">
            <summary>
            Unloads this instance on dispose.
            </summary>
        </member>
        <member name="M:Stride.Rendering.RendererCoreBase.NewScopedBuffer(Stride.Graphics.BufferDescription,Stride.Graphics.PixelFormat)">
            <summary>
            Gets a render target with the specified description, scoped for the duration of the <see cref="!:DrawEffect.DrawCore"/>.
            </summary>
            <param name="description">The description of the buffer to allocate</param>
            <param name="viewFormat">The pixel format seen in shader</param>
            <returns>A new instance of texture.</returns>
        </member>
        <member name="M:Stride.Rendering.RendererCoreBase.NewScopedTypedBuffer(System.Int32,Stride.Graphics.PixelFormat,System.Boolean,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Gets a render target with the specified description, scoped for the duration of the <see cref="!:DrawEffect.DrawCore"/>.
            </summary>
            <returns>A new instance of texture.</returns>
        </member>
        <member name="M:Stride.Rendering.RendererCoreBase.PushScopedResource``1(``0)">
            <summary>
            Pushes a new scoped resource to the current Draw.
            </summary>
            <param name="resource">The scoped resource</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Rendering.RendererCoreBase.CheckIsInDrawCore">
            <summary>
            Checks that the current execution path is between a PreDraw/PostDraw sequence and throws and exception if not.
            </summary>
        </member>
        <member name="T:Stride.Rendering.RenderFeature">
            <summary>
            Entry-point for implementing rendering feature.
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderFeature.InitializeCore">
            <summary>
            Initializes this instance.
            Query for specific cbuffer (either new one, like PerMaterial, or parts of an existing one, like PerObject=>Skinning)
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderFeature.Collect">
            <summary>
            Performs pipeline initialization, enumerates views and populates visibility groups.
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderFeature.Extract">
            <summary>
            Extract data from entities, should be as fast as possible to not block simulation loop. It should be mostly copies, and the actual processing should be part of Prepare().
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderFeature.PrepareEffectPermutations(Stride.Rendering.RenderDrawContext)">
            <summary>
            Perform effect permutations, before <see cref="M:Stride.Rendering.RenderFeature.Prepare(Stride.Rendering.RenderDrawContext)"/>.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Stride.Rendering.RenderFeature.Prepare(Stride.Rendering.RenderDrawContext)">
            <summary>
            Performs most of the work (computation and resource preparation). Later game simulation might be running during that step.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Stride.Rendering.RenderFeature.Draw(Stride.Rendering.RenderDrawContext,Stride.Rendering.RenderView,Stride.Rendering.RenderViewStage)">
            <summary>
            Performs GPU updates and/or drawing, everytime a render view changes.
            </summary>
            <param name="context"></param>
            <param name="renderView"></param>
            <param name="renderViewStage"></param>
        </member>
        <member name="M:Stride.Rendering.RenderFeature.Draw(Stride.Rendering.RenderDrawContext,Stride.Rendering.RenderView,Stride.Rendering.RenderViewStage,System.Int32,System.Int32)">
            <summary>
            Performs GPU updates and/or draw.
            </summary>
            <param name="context"></param>
            <param name="renderView"></param>
            <param name="renderViewStage"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
        </member>
        <member name="M:Stride.Rendering.RenderFeature.Flush(Stride.Rendering.RenderDrawContext)">
            <summary>
            Releases temporary resources and cleans the state. Should be called once after all <see cref="M:Stride.Rendering.RenderFeature.Draw(Stride.Rendering.RenderDrawContext,Stride.Rendering.RenderView,Stride.Rendering.RenderViewStage)"/> calls have finished.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Stride.Rendering.RenderGroup">
            <summary>
            An entity group.
            </summary>
        </member>
        <member name="T:Stride.Rendering.RenderGroupMask">
            <summary>
            A mask for <see cref="T:Stride.Rendering.RenderGroup"/>.
            </summary>
        </member>
        <member name="T:Stride.Rendering.RenderGroupMaskExtensions">
            <summary>
            Extensions for <see cref="T:Stride.Rendering.RenderGroupMask"/>
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderGroupMaskExtensions.Contains(Stride.Rendering.RenderGroupMask,Stride.Rendering.RenderGroup)">
            <summary>
            Determines whether the group mask contains the specified group.
            </summary>
            <param name="mask">The mask.</param>
            <param name="group">The group.</param>
            <returns><c>true</c> if the group mask contains the specified group; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Stride.Rendering.RenderInstancing">
            <summary>
            Contains information for model instancing. Used by the <see cref="T:Stride.Rendering.InstancingRenderFeature"/>
            </summary>
        </member>
        <member name="T:Stride.Rendering.RenderMesh">
            <summary>
            Used by <see cref="T:Stride.Rendering.MeshRenderFeature"/> to render a <see cref="T:Stride.Rendering.Mesh"/>.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderMesh.Mesh">
            <summary>
            Underlying mesh, can be accessed only during <see cref="M:Stride.Rendering.RenderFeature.Extract"/> phase.
            </summary>
        </member>
        <member name="T:Stride.Rendering.RenderModel">
            <summary>
            Contains information related to the <see cref="T:Stride.Rendering.Model"/> so that the <see cref="T:Stride.Rendering.RenderMesh"/> can access it.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderModel.UniqueMeshCount">
            <summary>
            The number of <see cref="T:Stride.Rendering.Mesh"/>es when <see cref="F:Stride.Rendering.RenderModel.Meshes"/> was generated.
            </summary>
            <remarks>
            A single mesh may be split into multiple RenderMeshes due to multiple material passes.
            </remarks>
        </member>
        <member name="T:Stride.Rendering.RenderObject">
            <summary>
            Describes something that can be rendered by a <see cref="T:Stride.Rendering.RootRenderFeature"/>.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderObject.Source">
            <summary>
            Can be used to setup a link to a source.
            Typically, this might be an entity component.
            </summary>
        </member>
        <member name="T:Stride.Rendering.RenderObjectCollection">
            <summary>
            A collection of <see cref="T:Stride.Rendering.RenderObject"/>.
            </summary>
        </member>
        <member name="T:Stride.Rendering.RenderStage">
            <summary>
            Represents a way to instantiate a given <see cref="T:Stride.Rendering.RenderObject"/> for rendering, esp. concerning effect selection and permutation.
            </summary>
            Note that a stage doesn't imply any order. You can render any combination of <see cref="T:Stride.Rendering.RenderStage"/> and <see cref="T:Stride.Rendering.RenderView"/> arbitrarily at any point of the Draw phase.
        </member>
        <member name="P:Stride.Rendering.RenderStage.Id">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Rendering.RenderStage.Name">
            <summary>
            The name of this <see cref="T:Stride.Rendering.RenderStage"/>.
            </summary>
        </member>
        <member name="P:Stride.Rendering.RenderStage.EffectSlotName">
            <summary>
            The effect permutation slot name. If similar to another <see cref="T:Stride.Rendering.RenderStage"/>, effect permutations will be shared.
            </summary>
        </member>
        <member name="P:Stride.Rendering.RenderStage.SortMode">
            <summary>
            Defines how <see cref="T:Stride.Rendering.RenderNode"/> sorting should be performed.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderStage.Output">
            <summary>
            Defines render targets this stage outputs to.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderStage.Index">
            <summary>
            Index in <see cref="P:Stride.Rendering.RenderSystem.RenderStages"/>.
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderStage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Rendering.RenderStageFilter">
            <summary>
            Defines a way to filter RenderObject.
            </summary>
        </member>
        <member name="T:Stride.Rendering.RenderStageSelector">
            <summary>
            Defines how a <see cref="T:Stride.Rendering.RenderObject"/> gets assigned to specific <see cref="T:Stride.Rendering.RenderStage"/>.
            </summary>
        </member>
        <member name="T:Stride.Rendering.RenderSystem">
            <summary>
            Facility to perform rendering: extract rendering data from scene, determine effects and GPU states, compute and prepare data (i.e. matrices, buffers, etc...) and finally draw it.
            </summary>
        </member>
        <member name="P:Stride.Rendering.RenderSystem.RenderStages">
            <summary>
            List of render stages.
            </summary>
        </member>
        <member name="P:Stride.Rendering.RenderSystem.FrameCounter">
            <summary>
            Frame counter, mostly for internal use.
            </summary>
        </member>
        <member name="P:Stride.Rendering.RenderSystem.RenderFeatures">
            <summary>
            List of render features
            </summary>
        </member>
        <member name="P:Stride.Rendering.RenderSystem.GraphicsDevice">
            <summary>
            The graphics device, used to create graphics resources.
            </summary>
        </member>
        <member name="P:Stride.Rendering.RenderSystem.EffectSystem">
            <summary>
            The effect system, used to compile effects.
            </summary>
        </member>
        <member name="P:Stride.Rendering.RenderSystem.Views">
            <summary>
            List of views.
            </summary>
        </member>
        <member name="P:Stride.Rendering.RenderSystem.Services">
            <summary>
            Gets the services registry.
            </summary>
            <value>The services registry.</value>
        </member>
        <member name="M:Stride.Rendering.RenderSystem.Collect(Stride.Rendering.RenderContext)">
            <summary>
            Performs pipeline initialization, enumerates views and populates visibility groups.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Stride.Rendering.RenderSystem.Extract(Stride.Rendering.RenderContext)">
            <summary>
            Extract data from entities, should be as fast as possible to not block simulation loop. It should be mostly copies, and the actual processing should be part of Prepare().
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderSystem.Flush(Stride.Rendering.RenderDrawContext)">
            <summary>
            Finalizes the render features work and releases temporary resources if necessary.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Stride.Rendering.RenderSystem.Prepare(Stride.Rendering.RenderDrawContext)">
            <summary>
            Performs most of the work (computation and resource preparation). Later game simulation might be running during that step.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Stride.Rendering.RenderSystem.Initialize(Stride.Rendering.RenderContext)">
            <summary>
            Initializes the render system.
            </summary>
            <param name="effectSystem">The effect system.</param>
            <param name="graphicsDevice">The graphics device.</param>
        </member>
        <member name="M:Stride.Rendering.RenderSystem.Reset">
            <summary>
            Reset render objects and features. Should be called at beginning of Extract phase.
            </summary>
        </member>
        <member name="M:Stride.Rendering.RenderSystem.AddRenderObject(Stride.Rendering.RenderObject)">
            <summary>
            Adds a <see cref="T:Stride.Rendering.RenderObject"/> to the rendering.
            </summary>
            An appropriate <see cref="T:Stride.Rendering.RootRenderFeature"/> will be found and the object will be initialized with it.
            If nothing could be found, <see cref="F:Stride.Rendering.RenderObject.RenderFeature"/> will be null.
            <param name="renderObject"></param>
        </member>
        <member name="M:Stride.Rendering.RenderSystem.RemoveRenderObject(Stride.Rendering.RenderObject)">
            <summary>
            Removes a <see cref="T:Stride.Rendering.RenderObject"/> from the rendering.
            </summary>
            <param name="renderObject"></param>
        </member>
        <member name="T:Stride.Rendering.RenderSystemResourceGroupLayout">
            <summary>
            Implementation of <see cref="T:Stride.Graphics.ResourceGroupLayout"/> specifically for <see cref="T:Stride.Rendering.RenderSystem"/> use (contains some extra information).
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderSystemResourceGroupLayout.State">
            <summary>
            Describes what state the effect is in (compiling, error, etc..)
            </summary>
        </member>
        <member name="P:Stride.Rendering.RenderTextures.RenderTextureDescriptor.Width">
            <summary>
            The width in pixel.
            </summary>
        </member>
        <member name="P:Stride.Rendering.RenderTextures.RenderTextureDescriptor.Height">
            <summary>
            The height in pixel.
            </summary>
        </member>
        <member name="P:Stride.Rendering.RenderTextures.RenderTextureDescriptor.Format">
            <summary>
            The format.
            </summary>
        </member>
        <member name="P:Stride.Rendering.RenderTextures.RenderTextureDescriptor.ColorSpace">
            <summary>
            Gets or sets the value indicating whether the output texture is encoded into the standard RGB color space.
            </summary>
            <userdoc>
            Consider the texture an sRGB image. This should be the default for color textures with HDR/gamma-correct rendering.
            </userdoc>
        </member>
        <member name="T:Stride.Rendering.RenderTextures.RenderTextureFormat">
            <summary>
            Describes the format of a <see cref="T:Stride.Rendering.RenderTextures.RenderTextureDescriptor"/>.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderTextures.RenderTextureFormat.LDR">
            <summary>
            The rendering target is a 32bits bits targets (4 x 16 bits half floats per RGBA component).
            </summary>
            <userdoc>The rendering target is a 32bits bits targets (4 x 16 bits half floats per RGBA component).</userdoc>
        </member>
        <member name="F:Stride.Rendering.RenderTextures.RenderTextureFormat.HDR">
            <summary>
            The rendering target is a floating point 64 bits targets (4 x 16 bits half floats per RGBA component).
            </summary>
            <userdoc>The rendering target is a floating point 64 bits targets (4 x 16 bits half floats per RGBA component).</userdoc>
        </member>
        <member name="T:Stride.Rendering.RenderView">
            <summary>
            Defines a view used during rendering. This is usually a frustum and some camera parameters.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderView.Features">
            <summary>
            The part of the view specific to a given <see cref="T:Stride.Rendering.RootRenderFeature"/>.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderView.RenderStages">
            <summary>
            List of data sepcific to each <see cref="T:Stride.Rendering.RenderStage"/> for this <see cref="T:Stride.Rendering.RenderView"/>.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderView.RenderObjects">
            <summary>
            List of visible render objects.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderView.Index">
            <summary>
            Index in <see cref="P:Stride.Rendering.RenderSystem.Views"/>.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderView.View">
            <summary>
            The view matrix for this view.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderView.Projection">
            <summary>
            The projection matrix for this view.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderView.ViewProjection">
            <summary>
            The view projection matrix for this view.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderView.NearClipPlane">
            <summary>
            Far clip plane.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderView.FarClipPlane">
            <summary>
            Near clip plane.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderView.Frustum">
            <summary>
            The frustum extracted from the view projection matrix.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderView.ViewSize">
            <summary>
            The size of the view being rendered.
            </summary>
        </member>
        <member name="P:Stride.Rendering.RenderView.CullingMask">
            <summary>
            The culling mask.
            </summary>
        </member>
        <member name="P:Stride.Rendering.RenderView.CullingMode">
            <summary>
            The culling mode.
            </summary>
        </member>
        <member name="P:Stride.Rendering.RenderView.LightingView">
            <summary>
            The view used for lighting (useful to share lighting results for two very close views such as VR)
            </summary>
            <remarks>This is a temporary workaround until shadow maps have a real scope: global or view-dependent (single view or multiple views).</remarks>
        </member>
        <member name="F:Stride.Rendering.RenderView.VisiblityIgnoreDepthPlanes">
            <summary>
            Ignore depth planes in visibility test
            </summary>
        </member>
        <member name="T:Stride.Rendering.RenderViewFeature">
            <summary>
            Describes a specific <see cref="T:Stride.Rendering.RenderView"/> and <see cref="T:Stride.Rendering.RootRenderFeature"/> combination.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderViewFeature.RenderNodes">
            <summary>
            List of render nodes. It might cover multiple RenderStage, RenderStages contains range information.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderViewFeature.ViewObjectNodes">
            <summary>
            The list of object nodes contained in this view.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderViewFeature.Layouts">
            <summary>
            List of resource layouts used by this render view.
            </summary>
        </member>
        <member name="T:Stride.Rendering.RenderViewFeatureStage">
            <summary>
            Describes a specific <see cref="T:Stride.Rendering.RenderView"/>, <see cref="T:Stride.Rendering.RootRenderFeature"/> and <see cref="F:Stride.Rendering.RenderViewFeatureStage.RenderStage"/> combination.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderViewFlags.None">
            <summary>
            Nothing special.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderViewFlags.NotDrawn">
            <summary>
            Not being drawn directly (i.e. shared view for VR eyes).
            </summary>
        </member>
        <member name="T:Stride.Rendering.RenderViewStage">
            <summary>
            Stage-specific data for a <see cref="T:Stride.Rendering.RenderView"/>.
            </summary>
            Mostly useful to store list of <see cref="T:Stride.Rendering.RenderNode"/> prefiltered by a <see cref="T:Stride.Rendering.RenderStage"/> and a <see cref="T:Stride.Rendering.RenderView"/>.
        </member>
        <member name="F:Stride.Rendering.RenderViewStage.Invalid">
            <summary>
            Invalid slot.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderViewStage.RenderNodes">
            <summary>
            List of render nodes. It might cover multiple RenderStage and RootRenderFeature. RenderStages contains RenderStage range information.
            Used mostly for sorting and rendering.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderViewStage.SortedRenderNodes">
            <summary>
            Sorted list of render nodes, that should be used during actual drawing.
            </summary>
        </member>
        <member name="T:Stride.Rendering.ResolutionStretch">
            <summary>
            Enumerates the different ways to interpret a visual resolution value.
            </summary>
        </member>
        <member name="F:Stride.Rendering.ResolutionStretch.FixedWidthFixedHeight">
            <summary>
            The resolution is determined by the width, height and depth of the field.
            </summary>
        </member>
        <member name="F:Stride.Rendering.ResolutionStretch.FixedWidthAdaptableHeight">
            <summary>
            The resolution is determined by the width, the ratio of the target, and the depth.
            </summary>
        </member>
        <member name="F:Stride.Rendering.ResolutionStretch.FixedHeightAdaptableWidth">
            <summary>
            The resolution is determined by the height, the ratio of the target, and the depth.
            </summary>
        </member>
        <member name="M:Stride.Rendering.ResourceGroupEntry.MarkAsUsed(Stride.Rendering.RenderSystem)">
            <summary>
            Mark resource group as used during this frame.
            </summary>
            <returns>True if state changed (object was not mark as used during this frame until now), otherwise false.</returns>
        </member>
        <member name="T:Stride.Rendering.ResourceResolver">
            <summary>
            Resolves a render target from one render pass to be used as an input resource to another render pass
            </summary>
        </member>
        <member name="M:Stride.Rendering.ResourceResolver.#ctor(Stride.Rendering.RenderDrawContext)">
            <summary>
            Constructor
            </summary>
            <param name="context"><see cref="T:Stride.Rendering.RenderDrawContext"/> to which this resolver belongs</param>
        </member>
        <member name="M:Stride.Rendering.ResourceResolver.GetDepthStencilAsRenderTarget(Stride.Graphics.Texture,Stride.Graphics.Texture)">
            <summary>
            Returns a texture view which should be used as DepthStencil render target while SRV is also used
            </summary>
            <param name="texture">The depthStencil texture originally used for render target</param>
            <param name="readOnlyCached">The cached view for the texture resource</param>
            <returns>The texture view which should be used as DepthStencil render target while SRV is also used</returns>
        </member>
        <member name="M:Stride.Rendering.ResourceResolver.GetDepthStenctilAsShaderResource(Stride.Graphics.Texture)">
            <summary>
            Returns a texture view which should be used as DepthStencil Shader Resource View. Can be <c>null</c> if not supported
            </summary>
            <param name="texture">The depthStencil texture originally used for render target</param>
            <returns>The texture view which should be used as DepthStencil SRV. Can be <c>null</c> if not supported</returns>
        </member>
        <member name="M:Stride.Rendering.ResourceResolver.ReleaseDepthStenctilAsShaderResource(Stride.Graphics.Texture)">
            <summary>
            Frees previously acquired SRV texture. Should be called when the view is no longer needed
            </summary>
            <param name="depthAsSR">The previously acquired SRV texture</param>
        </member>
        <member name="M:Stride.Rendering.ResourceResolver.GetDepthStenctilAsShaderResource_Copy(Stride.Graphics.Texture)">
            <summary>
            Gets a texture view which can be used to copy the depth buffer
            </summary>
            <param name="texture">The depthStencil texture originally used for render target</param>
            <returns>A texture view which can be used to copy the depth buffer</returns>
        </member>
        <member name="M:Stride.Rendering.ResourceResolver.ResolveDepthStencil(Stride.Graphics.Texture)">
            <summary>
            Resolves the depth render target so it can be used as a shader resource view. Should only be called once per frame and acquired with <see cref="M:Stride.Rendering.ResourceResolver.GetDepthStenctilAsShaderResource(Stride.Graphics.Texture)"/> after that
            </summary>
            <param name="texture">The depthStencil texture originally used for render target</param>
            <returns>The texture view which should be used as DepthStencil render target while SRV is also used</returns>
        </member>
        <member name="T:Stride.Rendering.RootEffectRenderFeature">
            <summary>
            A root render feature that can manipulate effects.
            </summary>
        </member>
        <member name="P:Stride.Rendering.RootEffectRenderFeature.EffectPermutationSlotCount">
            <summary>
            Gets number of effect permutation slot, which is the number of effect cached per object.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RootEffectRenderFeature.RenderEffectKey">
            <summary>
            Key to store extra info for each effect instantiation of each object.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RootEffectRenderFeature.InstantiatedEffects">
            <summary>
            Stores reflection info for each effect.
            </summary>
        </member>
        <member name="M:Stride.Rendering.RootEffectRenderFeature.InitializeCore">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.RootEffectRenderFeature.ComputeResourceGroupOffset(Stride.Rendering.RenderNodeReference)">
            <summary>
            Compute the index of first descriptor set stored in <see cref="F:Stride.Rendering.RootEffectRenderFeature.ResourceGroupPool"/>.
            </summary>
        </member>
        <member name="M:Stride.Rendering.RootEffectRenderFeature.GetEffectPermutationSlot(Stride.Rendering.RenderStage)">
            <summary>
            Gets the effect slot for a given render stage.
            </summary>
            <param name="renderStage"></param>
            <returns></returns>
        </member>
        <member name="M:Stride.Rendering.RootEffectRenderFeature.CreateEffectPermutationSlot(System.String)">
            <summary>
            Creates a slot for storing a particular effect instantiation (per RenderObject).
            </summary>
            As an example, we could have main shader (automatically created), GBuffer shader and shadow mapping shader.
            <returns></returns>
        </member>
        <member name="M:Stride.Rendering.RootEffectRenderFeature.PrepareRenderTargetExtensionsMixins(Stride.Rendering.RenderDrawContext)">
            <summary>
            This is a subpart of effect permutation preparation:
             set the shader classes that are going to be responsible to compute extended render target colors.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Stride.Rendering.RootEffectRenderFeature.PrepareEffectPermutationsImpl(Stride.Rendering.RenderDrawContext)">
            <summary>
            Actual implementation of <see cref="M:Stride.Rendering.RootEffectRenderFeature.PrepareEffectPermutations(Stride.Rendering.RenderDrawContext)"/>.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Stride.Rendering.RootEffectRenderFeature.PrepareEffectPermutations(Stride.Rendering.RenderDrawContext)">
            <param name="context"></param>
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.RootEffectRenderFeature.InvalidateEffectPermutation(Stride.Rendering.RenderObject,Stride.Rendering.RenderEffect)">
            <summary>
            Implemented by subclasses to reset effect dependent data.
            </summary>
        </member>
        <member name="M:Stride.Rendering.RootEffectRenderFeature.Prepare(Stride.Rendering.RenderDrawContext)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Rendering.RootRenderFeature">
            <summary>
            A top-level renderer that work on a specific kind of <see cref="T:Stride.Rendering.RenderObject"/>, such as Mesh, Particle, Sprite, etc...
            </summary>
        </member>
        <member name="P:Stride.Rendering.RootRenderFeature.SortKey">
            <summary>
            Sort key used during rendering.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RootRenderFeature.RenderObjects">
            <summary>
            List of <see cref="T:Stride.Rendering.RenderObject"/> initialized with this root render feature.
            </summary>
        </member>
        <member name="P:Stride.Rendering.RootRenderFeature.ObjectNodeReferences">
            <summary>
            Object nodes to process this frame.
            </summary>
        </member>
        <member name="P:Stride.Rendering.RootRenderFeature.RenderNodes">
            <summary>
            List of render nodes for this specific root render feature.
            </summary>
        </member>
        <member name="P:Stride.Rendering.RootRenderFeature.RenderStageSelectors">
            <summary>
            Overrides that allow defining which render stages are enabled for a specific <see cref="T:Stride.Rendering.RenderObject"/>.
            </summary>
        </member>
        <member name="P:Stride.Rendering.RootRenderFeature.SupportedRenderObjectType">
            <summary>
            Gets the type of render object supported by this <see cref="T:Stride.Rendering.RootRenderFeature"/>.
            </summary>
        </member>
        <member name="M:Stride.Rendering.RootRenderFeature.Unload">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.RootRenderFeature.GetRenderNode(Stride.Rendering.RenderNodeReference)">
            <summary>
            Gets the render node from its reference.
            </summary>
            <param name="reference"></param>
            <returns>The render node.</returns>
        </member>
        <member name="M:Stride.Rendering.RootRenderFeature.GetViewObjectNode(Stride.Rendering.ViewObjectNodeReference)">
            <summary>
            Gets the view object node from its reference.
            </summary>
            <param name="reference"></param>
            <returns>The view object node.</returns>
        </member>
        <member name="M:Stride.Rendering.RootRenderFeature.GetObjectNode(Stride.Rendering.ObjectNodeReference)">
            <summary>
            Gets the object node from its reference.
            </summary>
            <param name="reference"></param>
            <returns>The object node.</returns>
        </member>
        <member name="M:Stride.Rendering.RootRenderFeature.CreateViewObjectNode(Stride.Rendering.RenderView,Stride.Rendering.RenderObject)">
            <summary>
            Creates a view object node during Extract phase.
            </summary>
            <param name="view"></param>
            <param name="renderObject"></param>
            <returns>The view object node reference.</returns>
        </member>
        <member name="M:Stride.Rendering.RootRenderFeature.OnAddRenderObject(Stride.Rendering.RenderObject)">
            <summary>
            Called when a render object is added.
            </summary>
            <param name="renderObject"></param>
        </member>
        <member name="M:Stride.Rendering.RootRenderFeature.OnRemoveRenderObject(Stride.Rendering.RenderObject)">
            <summary>
            Called when a render object is removed.
            </summary>
            <param name="renderObject">The render object.</param>
        </member>
        <member name="T:Stride.Rendering.CameraKeys">
            <summary>
            Keys used by transformations.
            </summary>
        </member>
        <member name="F:Stride.Rendering.CameraKeys.FocusDistance">
            <summary>
            Camera focus distance
            </summary>
        </member>
        <member name="T:Stride.Rendering.RenderTargetKeys">
            <summary>
            Keys used for render target settings.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderTargetKeys.DepthStencil">
            <summary>
            The depth stencil buffer key.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderTargetKeys.DepthStencilSource">
            <summary>
            The depth stencil buffer key used as an input shader resource.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderTargetKeys.RenderTarget">
            <summary>
            The render target key.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderTargetKeys.StreamTarget">
            <summary>
            The render target key.
            </summary>
        </member>
        <member name="F:Stride.Rendering.RenderTargetKeys.RequireDepthStencilShaderResource">
            <summary>
            Used by <see cref="!:RenderTargetPlugin"/> to notify that the plugin requires support for depth stencil as shader resource
            </summary>
        </member>
        <member name="T:Stride.Rendering.TransformationKeys">
            <summary>
            Keys used by transformations.
            </summary>
        </member>
        <member name="T:Stride.Rendering.ShadowMeshPipelineProcessor">
            <summary>
            Pipline processor for <see cref="T:Stride.Rendering.RenderMesh"/> that cast shadows, to properly disable culling and depth clip.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Shadows.ILightShadowMapRenderer">
            <summary>
            Interface to render a shadow map.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Shadows.ILightShadowRenderer">
            <summary>
            Interface to render shadows
            </summary>
        </member>
        <member name="M:Stride.Rendering.Shadows.ILightShadowRenderer.Reset(Stride.Rendering.RenderContext)">
            <summary>
            Reset the state of this instance before calling Render method multiple times for different shadow map textures. See remarks.
            </summary>
            <remarks>
            This method allows the implementation to prepare some internal states before being rendered.
            </remarks>
        </member>
        <member name="M:Stride.Rendering.Shadows.ILightShadowRenderer.CanRenderLight(Stride.Rendering.Lights.IDirectLight)">
            <summary>
            Test if this renderer can render this kind of light
            </summary>
        </member>
        <member name="T:Stride.Rendering.Shadows.IShadowMapRenderer">
            <summary>
            Render shadow maps; should be set on <see cref="P:Stride.Rendering.Lights.ForwardLightingRenderFeature.ShadowMapRenderer"/>.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Shadows.LightDirectionalShadowMapRenderer">
            <summary>
            Renders a shadow map from a directional light.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Shadows.LightDirectionalShadowMapRenderer.VectorUps">
            <summary>
            The various UP vectors to try.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Shadows.LightDirectionalShadowMapRenderer.FrustumBasePoints">
            <summary>
            Base points for frustum corners.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Shadows.LightDirectionalShadowMapRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Shadows.LightDirectionalShadowMapRenderer"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Shadows.LightDirectionalShadowMapRenderer.ShaderGroupData.#ctor(Stride.Rendering.Shadows.LightShadowType)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Shadows.LightDirectionalShadowMapRenderer.ShaderGroupData" /> class.
            </summary>
            <param name="shadowType">Type of the shadow.</param>
            <param name="lightCountMax">The light count maximum.</param>
        </member>
        <member name="T:Stride.Rendering.Shadows.LightPointShadowMapRendererCubeMap">
            <summary>
            Renders omnidirectional shadow maps using a simulated cubemap inside of the shadow map atlas
            </summary>
        </member>
        <member name="M:Stride.Rendering.Shadows.LightPointShadowMapRendererCubeMap.GetShadowMapDepthParameters(Stride.Rendering.Shadows.LightShadowMapTexture)">
            <returns>
            x = Near; y = 1/(Far-Near)
            </returns>
        </member>
        <member name="F:Stride.Rendering.Shadows.LightPointShadowMapRendererCubeMap.ShaderData.FaceOffsets">
            <summary>
            Offset to every one of the faces of the cubemap in the atlas
            </summary>
        </member>
        <member name="F:Stride.Rendering.Shadows.LightPointShadowMapRendererCubeMap.ShaderData.DepthParameters">
            <summary>
            Calculated by <see cref="M:Stride.Rendering.CameraKeys.ZProjectionACalculate(System.Single,System.Single)"/> to reconstruct linear depth from the depth buffer
            </summary>
        </member>
        <member name="F:Stride.Rendering.Shadows.LightPointShadowMapRendererCubeMap.ShaderData.Projection">
            <summary>
            Projection matrix used for each cubemap face
            </summary>
        </member>
        <member name="F:Stride.Rendering.Shadows.LightPointShadowMapRendererCubeMap.ShaderData.View">
            <summary>
            View matrices for all the faces
            </summary>
        </member>
        <member name="F:Stride.Rendering.Shadows.LightPointShadowMapRendererCubeMap.ShaderData.WorldToShadow">
            <summary>
            Converts from world space to uv space
            </summary>
        </member>
        <member name="T:Stride.Rendering.Shadows.LightPointShadowMapRendererParaboloid">
            <summary>
            Renders omnidirectional shadow maps using paraboloid shadow maps
            </summary>
        </member>
        <member name="M:Stride.Rendering.Shadows.LightPointShadowMapRendererParaboloid.CalculateViewDirection(Stride.Rendering.Shadows.LightShadowMapTexture)">
            <summary>
            Calculates the direction of the split between the shadow maps
            </summary>
        </member>
        <member name="M:Stride.Rendering.Shadows.LightPointShadowMapRendererParaboloid.GetShadowMapDepthParameters(Stride.Rendering.Shadows.LightShadowMapTexture)">
            <summary>
            Computes shadow map depth parameters.
            </summary>
            <returns>
            x = Near; y = 1/(Far-Near)
            </returns>
        </member>
        <member name="F:Stride.Rendering.Shadows.LightPointShadowMapRendererParaboloid.ShaderData.Offset">
            <summary>
            Normalized offset of the front face of the shadow map in normalized coordinates
            </summary>
        </member>
        <member name="F:Stride.Rendering.Shadows.LightPointShadowMapRendererParaboloid.ShaderData.BackfaceOffset">
            <summary>
            Offset from fromnt to back face in normalized texture coordinates in the atlas
            </summary>
        </member>
        <member name="F:Stride.Rendering.Shadows.LightPointShadowMapRendererParaboloid.ShaderData.FaceSize">
            <summary>
            Size of a single face of the shadow map
            </summary>
        </member>
        <member name="F:Stride.Rendering.Shadows.LightPointShadowMapRendererParaboloid.ShaderData.View">
            <summary>
            Matrix that converts from world space to the front face space of the light's shadow map
            </summary>
        </member>
        <member name="F:Stride.Rendering.Shadows.LightPointShadowMapRendererParaboloid.ShaderData.DepthParameters">
            <summary>
            Radius of the point light, used to determine the range of the depth buffer
            </summary>
        </member>
        <member name="T:Stride.Rendering.Shadows.LightShadowMapRendererBase">
            <summary>
            Base class for shadow map renderers
            </summary>
        </member>
        <member name="P:Stride.Rendering.Shadows.LightShadowMapRendererBase.ShadowCasterRenderStage">
            <summary>
            The shadow map render stage this light shadow map renderer uses
            </summary>
        </member>
        <member name="M:Stride.Rendering.Shadows.LightShadowMapRendererBase.CreateRenderView">
            <summary>
            Creates a default view with the shadow caster stage added to it
            </summary>
        </member>
        <member name="T:Stride.Rendering.Shadows.LightShadowMapShaderGroupDataBase">
            <summary>
            Provides basic functionality for shadow map shader groups with a single shader source and a filter based on the <see cref="T:Stride.Rendering.Shadows.LightShadowType"/>
            </summary>
        </member>
        <member name="P:Stride.Rendering.Shadows.LightShadowMapShaderGroupDataBase.FilterMemberName">
            <summary>
            The first member name argument passed to the instantiated filter
            </summary>
        </member>
        <member name="M:Stride.Rendering.Shadows.LightShadowMapShaderGroupDataBase.CreateShaderSource(System.Int32)">
            <summary>
            Creates the shader source that performs shadowing
            </summary>
            <returns></returns>
        </member>
        <member name="T:Stride.Rendering.Shadows.LightShadowMapTexture">
            <summary>
            An allocated shadow map texture associated to a light.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Shadows.LightSpotShadowMapRenderer">
            <summary>
            Renders a shadow map from a directional light.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Shadows.LightSpotShadowMapRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Shadows.LightSpotShadowMapRenderer"/> class.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Shadows.LightSpotShadowMapRenderer.LightSpotShadowMapGroupShaderData.#ctor(Stride.Rendering.Shadows.LightShadowType)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Shadows.LightSpotShadowMapRenderer.LightSpotShadowMapGroupShaderData" /> class.
            </summary>
            <param name="shadowType">Type of the shadow.</param>
            <param name="lightCountMax">The light count maximum.</param>
        </member>
        <member name="T:Stride.Rendering.Shadows.ShadowMapAtlasTexture">
            <summary>
            An atlas of shadow maps.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Shadows.ShadowMapKeys">
            <summary>
            Keys used for shadow mapping.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Shadows.ShadowMapKeys.ShadowMapTexture">
            <summary>
            Final shadow map texture.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Shadows.ShadowMapKeys.TextureSize">
            <summary>
            Final shadow map texture size
            </summary>
        </member>
        <member name="F:Stride.Rendering.Shadows.ShadowMapKeys.TextureTexelSize">
            <summary>
            Final shadow map texture texel size.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Shadows.ShadowMapRenderer">
            <summary>
            Handles rendering of shadow map casters.
            </summary>
        </member>
        <member name="T:Stride.Rendering.Shadows.ShadowMapRenderView">
            <summary>
            A view used to render a shadow map to a <see cref="T:Stride.Rendering.Shadows.LightShadowMapTexture"/>
            </summary>
        </member>
        <member name="F:Stride.Rendering.Shadows.ShadowMapRenderView.RenderView">
            <summary>
            The view for which this shadow map is rendered
            </summary>
        </member>
        <member name="F:Stride.Rendering.Shadows.ShadowMapRenderView.ShadowMapTexture">
            <summary>
            The shadow map to render
            </summary>
        </member>
        <member name="F:Stride.Rendering.Shadows.ShadowMapRenderView.Rectangle">
            <summary>
            The rectangle to render to in the shadow map
            </summary>
        </member>
        <member name="T:Stride.Rendering.Skeleton">
            <summary>
            Describes hiderarchical nodes in a flattened array.
            </summary>
            <remarks>
            Nodes are ordered so that parents always come first, allowing for hierarchical updates in a simple loop.
            </remarks>
        </member>
        <member name="F:Stride.Rendering.Skeleton.Nodes">
            <summary>
            The nodes in this hierarchy.
            </summary>
        </member>
        <member name="T:Stride.Rendering.SkeletonUpdater">
            <summary>
            Performs hierarchical updates for a given <see cref="T:Stride.Rendering.Model"/>.
            </summary>
        </member>
        <member name="M:Stride.Rendering.SkeletonUpdater.#ctor(Stride.Rendering.Skeleton)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.SkeletonUpdater" /> class.
            </summary>
            <param name="skeleton">The skeleton.</param>
        </member>
        <member name="M:Stride.Rendering.SkeletonUpdater.ResetInitialValues">
            <summary>
            Resets initial values.
            </summary>
        </member>
        <member name="M:Stride.Rendering.SkeletonUpdater.UpdateMatrices">
            <summary>
            For each node, updates the world matrices from local matrices.
            </summary>
        </member>
        <member name="T:Stride.Rendering.SkinningRenderFeature">
            <summary>
            Computes and uploads skinning info.
            </summary>
        </member>
        <member name="M:Stride.Rendering.SkinningRenderFeature.InitializeCore">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.SkinningRenderFeature.PrepareEffectPermutations(Stride.Rendering.RenderDrawContext)">
            <param name="context"></param>
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.SkinningRenderFeature.Extract">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.SkinningRenderFeature.Prepare(Stride.Rendering.RenderDrawContext)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Rendering.Skyboxes.Skybox">
            <summary>
            The Skybox at runtime.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Skyboxes.Skybox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.Skyboxes.Skybox"/> class.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Skyboxes.Skybox.Parameters">
            <summary>
            Gets or sets the parameters compiled for the runtime for the skybox.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="T:Stride.Rendering.SortKey">
            <summary>
            Sort key used 
            </summary>
        </member>
        <member name="T:Stride.Rendering.SortMode">
            <summary>
            Defines a way to sort RenderObject.
            </summary>
        </member>
        <member name="T:Stride.Rendering.SortModeDistance">
            <summary>
            Helper class to sort objects based on distance.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Sprites.SpriteBlend.None">
            <userdoc>No blending, the sprite is drawn as-is.</userdoc>
        </member>
        <member name="F:Stride.Rendering.Sprites.SpriteBlend.Auto">
            <userdoc>Use alpha blending if the sprite has transparent pixels, disable the blending otherwise.</userdoc>
        </member>
        <member name="F:Stride.Rendering.Sprites.SpriteBlend.AlphaBlend">
            <userdoc>Use the alpha component for blending the source and sprite.</userdoc>
        </member>
        <member name="F:Stride.Rendering.Sprites.SpriteBlend.AdditiveBlend">
            <userdoc>The sprite color is added to the source without using the alpha.</userdoc>
        </member>
        <member name="F:Stride.Rendering.Sprites.SpriteBlend.NoColor">
            <userdoc>Do not render the colors of the sprite. Renders only the depth to the stencil buffer.</userdoc>
        </member>
        <member name="T:Stride.Rendering.Sprites.SpriteFromSheet">
            <summary>
            A sprite provider from a <see cref="T:Stride.Graphics.SpriteSheet"/>
            </summary>
        </member>
        <member name="P:Stride.Rendering.Sprites.SpriteFromSheet.Sheet">
            <summary>
            Gets or sets the <see cref="P:Stride.Rendering.Sprites.SpriteFromSheet.Sheet"/> of the provider.
            </summary>
            <userdoc>The sheet that provides the sprites</userdoc>
        </member>
        <member name="P:Stride.Rendering.Sprites.SpriteFromSheet.CurrentFrame">
            <summary>
            Gets or sets the current frame of the animation.
            </summary>
            <userdoc>The index of the default frame of the sprite sheet to use.</userdoc>
        </member>
        <member name="P:Stride.Rendering.Sprites.SpriteFromSheet.SpritesCount">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.Sprites.SpriteFromSheet.Create(Stride.Graphics.SpriteSheet,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Stride.Rendering.Sprites.SpriteFromSheet"/> with the specified <see cref="T:Stride.Graphics.SpriteSheet"/>.
            <see cref="P:Stride.Rendering.Sprites.SpriteFromSheet.CurrentFrame"/> is initialized according to the specified <paramref name="spriteName"/>.
            </summary>
            <param name="sheet"></param>
            <param name="spriteName">The name of the sprite.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">sheet</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No sprite in the sheet has the given name.</exception>
            <remarks>If two sprites have the provided name then the first sprite found is used.</remarks>
        </member>
        <member name="M:Stride.Rendering.Sprites.SpriteFromSheet.GetSprite">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Rendering.Sprites.SpriteFromTexture">
            <summary>
            A <see cref="T:Stride.Graphics.Sprite"/> provider from a <see cref="P:Stride.Rendering.Sprites.SpriteFromTexture.Texture"/>.
            </summary>
        </member>
        <member name="M:Stride.Rendering.Sprites.SpriteFromTexture.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Stride.Rendering.Sprites.SpriteFromTexture"/>.
            </summary>
        </member>
        <member name="P:Stride.Rendering.Sprites.SpriteFromTexture.Texture">
            <summary>
            Gets or sets the texture of representing the sprite
            </summary>
            <userdoc>Specify the texture to use as sprite</userdoc>
        </member>
        <member name="P:Stride.Rendering.Sprites.SpriteFromTexture.PixelsPerUnit">
            <summary>
            Gets or sets the value specifying the size of one pixel in scene units
            </summary>
            <userdoc>
            Specify the size in pixels of one unit in the scene.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Sprites.SpriteFromTexture.Center">
            <summary>
            The position of the center of the image in pixels.
            </summary>
            <userdoc>
            The position of the center of the sprite in pixels. 
            Depending on the value of 'CenterFromMiddle', it is the offset from the top/left corner or the middle of the image.
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Sprites.SpriteFromTexture.CenterFromMiddle">
            <summary>
            Gets or sets the value indicating position provided to <see cref="P:Stride.Rendering.Sprites.SpriteFromTexture.Center"/> is from the middle of the sprite region or from the left/top corner.
            </summary>
            <userdoc>
            If enabled, the value in Center represents the offset of the sprite center from the middle of the image
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Sprites.SpriteFromTexture.IsTransparent">
            <summary>
            Gets or sets the transparency value of the sprite.
            </summary>
            <userdoc>
            Enable transparency in the sprite
            </userdoc>
        </member>
        <member name="P:Stride.Rendering.Sprites.SpriteFromTexture.SpritesCount">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.Sprites.SpriteFromTexture.GetSprite">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Rendering.Sprites.SpriteType">
            <summary>
            Enumerates the different types of sprites.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Sprites.SpriteType.Sprite">
            <summary>
            A 3D sprite.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Sprites.SpriteType.Billboard">
            <summary>
            A billboard sprite.
            </summary>
        </member>
        <member name="T:Stride.Rendering.StateChangeSortMode">
            <summary>
            Sort elements according to the pattern: [RenderFeature Sort Key 8 bits] RenderObject states 32 bits] [Distance front to back 16 bits]
            </summary>
        </member>
        <member name="T:Stride.Rendering.SubRenderFeature">
            <summary>
            A render feature used inside another one (i.e. <see cref="F:Stride.Rendering.MeshRenderFeature.RenderFeatures"/>.
            </summary>
        </member>
        <member name="F:Stride.Rendering.SubRenderFeature.RootRenderFeature">
            <summary>
            Gets root render feature.
            </summary>
        </member>
        <member name="M:Stride.Rendering.SubRenderFeature.AttachRootRenderFeature(Stride.Rendering.RootRenderFeature)">
            <summary>
            Attach this <see cref="T:Stride.Rendering.SubRenderFeature"/> to a <see cref="F:Stride.Rendering.SubRenderFeature.RootRenderFeature"/>.
            </summary>
            <param name="rootRenderFeature"></param>
        </member>
        <member name="M:Stride.Rendering.SubRenderFeature.ProcessPipelineState(Stride.Rendering.RenderContext,Stride.Rendering.RenderNodeReference,Stride.Rendering.RenderNode@,Stride.Rendering.RenderObject,Stride.Graphics.PipelineStateDescription)">
            <summary>
            Do any changes required to the pipeline state.
            </summary>
            <param name="context"></param>
            <param name="renderNodeReference"></param>
            <param name="renderNode"></param>
            <param name="renderObject"></param>
            <param name="pipelineState"></param>
        </member>
        <member name="F:Stride.Rendering.Tessellation.TessellationKeys.DesiredTriangleSize">
            <summary>
            Desired maximum triangle size in screen space during tessellation.
            </summary>
        </member>
        <member name="F:Stride.Rendering.Tessellation.TessellationKeys.SmoothingMap">
            <summary>
            The intensity of the smoothing for PN-based tessellation.
            </summary>
        </member>
        <member name="T:Stride.Rendering.TransformRenderFeature">
            <summary>
            A render feature that computes and upload World, View and Projection matrices for each views and for each objects.
            </summary>
        </member>
        <member name="M:Stride.Rendering.TransformRenderFeature.InitializeCore">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.TransformRenderFeature.Extract">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Rendering.TransformRenderFeature.Prepare(Stride.Rendering.RenderDrawContext)">
            <param name="context"></param>
            <inheritdoc/>
        </member>
        <member name="T:Stride.Rendering.TransformTRS">
            <summary>
            Stores transformation in a TRS format (Position, Rotation and Scale).
            </summary>
            <remarks>
            It first applies scaling, then rotation, then translation.
            Rotation is stored in a Quaternion so that animation system can provides smooth rotation interpolations and blending.
            </remarks>
        </member>
        <member name="F:Stride.Rendering.TransformTRS.Position">
            <summary>
            The translation.
            </summary>
        </member>
        <member name="F:Stride.Rendering.TransformTRS.Rotation">
            <summary>
            The rotation.
            </summary>
        </member>
        <member name="F:Stride.Rendering.TransformTRS.Scale">
            <summary>
            The scaling
            </summary>
        </member>
        <member name="M:Stride.Rendering.ViewportState.CaptureState(Stride.Graphics.CommandList)">
            <summary>
            Capture state from <see cref="P:Stride.Graphics.CommandList.Viewports"/>.
            </summary>
            <param name="commandList">The command list to capture state from.</param>
        </member>
        <member name="T:Stride.Rendering.ViewResourceGroupLayout">
            <summary>
            Implementation of <see cref="!:ResourceGroupLayout"/> specifically for PerView cbuffer of <see cref="T:Stride.Rendering.RenderSystem"/>.
            </summary>
        </member>
        <member name="T:Stride.Rendering.VisibilityGroup">
            <summary>
            Represents a group of visible <see cref="T:Stride.Rendering.RenderObject"/>.
            </summary>
        </member>
        <member name="F:Stride.Rendering.VisibilityGroup.RenderData">
            <summary>
            Stores render data.
            </summary>
        </member>
        <member name="F:Stride.Rendering.VisibilityGroup.Tags">
            <summary>
            Gets the attached properties to this visibility group.
            </summary>
        </member>
        <member name="P:Stride.Rendering.VisibilityGroup.RenderObjects">
            <summary>
            List of objects registered in this group.
            </summary>
        </member>
        <member name="M:Stride.Rendering.VisibilityGroup.TryCollect(Stride.Rendering.RenderView)">
            <summary>
            Collects render objects visibile in a view (if not previously collected before).
            </summary>
            <param name="view"></param>
        </member>
        <member name="T:Stride.Engine.IAnimatableSpriteProvider">
            <summary>
            The base interface for all classes providing animated sprites.
            </summary>
        </member>
        <member name="P:Stride.Engine.IAnimatableSpriteProvider.CurrentFrame">
            <summary>
            Gets or sets the current frame of the animation.
            </summary>
        </member>
        <member name="T:Stride.Engine.ISpriteProvider">
            <summary>
            The base interface for all classes providing sprites.
            </summary>
        </member>
        <member name="P:Stride.Engine.ISpriteProvider.SpritesCount">
            <summary>
            Gets the number of sprites available in the provider.
            </summary>
        </member>
        <member name="M:Stride.Engine.ISpriteProvider.GetSprite">
            <summary>
            Get a sprite from the provider.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Stride.Shaders.Compiler.EffectCompileRequest">
            <summary>
            Represents an effect compile request done to the <see cref="T:Stride.Rendering.EffectSystem"/>.
            </summary>
        </member>
        <member name="T:Stride.Streaming.StreamableResource">
            <summary>
            Base class for all resources that can be dynamicly streamed.
            </summary>
        </member>
        <member name="F:Stride.Streaming.StreamableResource.LastUpdate">
            <summary>
            The last update time.
            </summary>
        </member>
        <member name="F:Stride.Streaming.StreamableResource.TargetResidencyChange">
            <summary>
            The last target residency change time.
            </summary>
        </member>
        <member name="P:Stride.Streaming.StreamableResource.Manager">
            <summary>
            Gets the manager.
            </summary>
        </member>
        <member name="P:Stride.Streaming.StreamableResource.Storage">
            <summary>
            Gets the resource storage.
            </summary>
        </member>
        <member name="P:Stride.Streaming.StreamableResource.Resource">
            <summary>
            Gets the resource object.
            </summary>
        </member>
        <member name="P:Stride.Streaming.StreamableResource.CurrentResidency">
            <summary>
            Gets the current residency level.
            </summary>
        </member>
        <member name="P:Stride.Streaming.StreamableResource.AllocatedResidency">
            <summary>
            Gets the allocated residency level.
            </summary>
        </member>
        <member name="P:Stride.Streaming.StreamableResource.MaxResidency">
            <summary>
            Gets the maximum residency level.
            </summary>
        </member>
        <member name="P:Stride.Streaming.StreamableResource.TargetResidency">
            <summary>
            Gets the target residency level.
            </summary>
        </member>
        <member name="P:Stride.Streaming.StreamableResource.IsAllocated">
            <summary>
            Gets a value indicating whether this resource is allocated.
            </summary>
        </member>
        <member name="F:Stride.Streaming.StreamableResource.StreamingOptions">
            <summary>
            The current streaming options of the resource.
            </summary>
        </member>
        <member name="P:Stride.Streaming.StreamableResource.IsTaskActive">
            <summary>
            Gets a value indicating whether this resource async task is active.
            </summary>
            <value>
              <c>true</c> if async task is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Stride.Streaming.StreamableResource.CanBeUpdated">
            <summary>
            Determines whether this instance can be updated. Which means: no async streaming, no pending action in background.
            </summary>
            <returns><c>true</c> if this instance can be updated; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Streaming.StreamableResource.CalculateTargetResidency(Stride.Streaming.StreamingQuality)">
            <summary>
            Calculates the target residency level for this resource based on a given uniform quality.
            </summary>
            <param name="quality">The quality.</param>
            <returns>Target residency.</returns>
        </member>
        <member name="M:Stride.Streaming.StreamableResource.CalculateRequestedResidency(System.Int32)">
            <summary>
            Calculates the requested residency level for this resource based on a given target residency.
            Resource can control how to change it's residency up/down and if do it at once or in steps, etc..
            This gives more control over per resource streaming.
            </summary>
            <param name="targetResidency">The target residency.</param>
            <returns>Requested residency.</returns>
        </member>
        <member name="M:Stride.Streaming.StreamableResource.StreamAsyncInternal(System.Int32)">
            <summary>
            Stream resource to the target residency level.
            </summary>
            <param name="residency">The target residency.</param>
        </member>
        <member name="M:Stride.Streaming.StreamableResource.FlushSync">
            <summary>
            Flushes the staging data and performs streamed async data synchronization during update on main thread. Safety moment with write access to engine resources.
            </summary>
        </member>
        <member name="M:Stride.Streaming.StreamableResource.Release">
            <summary>
            Releases this resources on StreamingManager shutdown.
            </summary>
        </member>
        <member name="M:Stride.Streaming.StreamableResource.Destroy">
            <inheritdoc />
        </member>
        <member name="M:Stride.Streaming.StreamableResource.StreamAsync(System.Int32)">
            <summary>
            Stream resource to the target residency level.
            </summary>
            <param name="residency">The target residency.</param>
        </member>
        <member name="M:Stride.Streaming.StreamableResource.StopStreaming">
            <summary>
            Stops the resource streaming using cancellation token.
            </summary>
        </member>
        <member name="T:Stride.Streaming.StreamingManager">
            <summary>
            Performs content streaming.
            </summary>
            <seealso cref="T:Stride.Games.GameSystemBase" />
            <seealso cref="T:Stride.Graphics.Data.ITexturesStreamingProvider" />
        </member>
        <member name="F:Stride.Streaming.StreamingManager.ManagerUpdatesInterval">
            <summary>
            The interval between <see cref="T:Stride.Streaming.StreamingManager"/> updates.
            </summary>
        </member>
        <member name="F:Stride.Streaming.StreamingManager.ResourceLiveTimeout">
            <summary>
            The <see cref="T:Stride.Streaming.StreamableResource"/> live timeout. Resources that aren't used for a while are downscaled in quality.
            </summary>
        </member>
        <member name="F:Stride.Streaming.StreamingManager.MaxResourcesPerUpdate">
            <summary>
            The maximum number of resources updated per streaming manager tick. Used to balance performance/streaming speed.
            </summary>
        </member>
        <member name="F:Stride.Streaming.StreamingManager.TargetedMemoryBudget">
            <summary>
            The targeted memory budget of the streaming system in MB. If the memory allocated by streaming system is under this budget it will not try to unload not visible resources.
            </summary>
        </member>
        <member name="P:Stride.Streaming.StreamingManager.AllocatedMemory">
            <summary>
            Gets the memory currently allocated by streamable resources in MB.
            </summary>
        </member>
        <member name="P:Stride.Streaming.StreamingManager.AllocatedMemoryBytes">
            <summary>
            Gets the extact memory amount allocated by streamable resources in bytes.
            </summary>
        </member>
        <member name="P:Stride.Streaming.StreamingManager.ContentStreaming">
            <summary>
            Gets the content streaming service.
            </summary>
        </member>
        <member name="P:Stride.Streaming.StreamingManager.Resources">
            <summary>
            List with all registered streamable resources.
            </summary>
        </member>
        <member name="M:Stride.Streaming.StreamingManager.#ctor(Stride.Core.IServiceRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Streaming.StreamingManager"/> class.
            </summary>
            <param name="services">The servicies registry.</param>
            <remarks>
            The GameSystem expects the following services to be registered: <see cref="T:Stride.Games.IGame" /> and <see cref="T:Stride.Core.Serialization.Contents.IContentManager" />.
            </remarks>
        </member>
        <member name="M:Stride.Streaming.StreamingManager.SetStreamingSettings(Stride.Streaming.StreamingSettings)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Streaming.StreamingManager.Destroy">
            <inheritdoc />
        </member>
        <member name="M:Stride.Streaming.StreamingManager.Get``1(System.Object)">
            <summary>
            Gets the <see cref="T:Stride.Streaming.StreamableResource"/> corresponding to the given resource object.
            </summary>
            <typeparam name="T">The type of the streamable resource.</typeparam>
            <param name="obj">The object.</param>
            <returns>Streamable resource, or null if it can't be found.</returns>
        </member>
        <member name="M:Stride.Streaming.StreamingManager.Get(Stride.Graphics.Texture)">
            <summary>
            Gets the <see cref="T:Stride.Streaming.StreamingTexture"/> corresponding to the given texture object.
            </summary>
            <param name="obj">The texture object.</param>
            <returns>Streamable texture, or null if it can't be found.</returns>
        </member>
        <member name="M:Stride.Streaming.StreamingManager.StreamResources(Stride.Rendering.RenderMesh,System.Nullable{Stride.Streaming.StreamingOptions})">
            <summary>
            Called when render mesh is submitted to rendering. Registers referenced resources to stream them.
            </summary>
            <param name="renderMesh">The render mesh.</param>
            <param name="options">The streaming options when streaming those resources</param>
        </member>
        <member name="M:Stride.Streaming.StreamingManager.StreamResources(Stride.Rendering.ParameterCollection,System.Nullable{Stride.Streaming.StreamingOptions})">
            <summary>
            Called when material parameters are submitted to rendering. Registers referenced resources to stream them.
            </summary>
            <param name="parameters">The material parameters.</param>
            <param name="options">The streaming options when streaming those resources</param>
        </member>
        <member name="M:Stride.Streaming.StreamingManager.StreamResources(Stride.Graphics.Texture,System.Nullable{Stride.Streaming.StreamingOptions})">
            <summary>
            Called when texture is submitted to rendering. Registers referenced resources to stream them.
            </summary>
            <param name="texture">The texture.</param>
            <param name="options">The streaming options when streaming those resources</param>
        </member>
        <member name="M:Stride.Streaming.StreamingManager.SetResourceStreamingOptions(Stride.Rendering.RenderMesh,System.Nullable{Stride.Streaming.StreamingOptions})">
            <summary>
            Set the streaming options for the resources
            </summary>
            <param name="renderMesh">The render mesh.</param>
            <param name="options">The streaming options when streaming those resources</param>
        </member>
        <member name="M:Stride.Streaming.StreamingManager.SetResourceStreamingOptions(Stride.Rendering.ParameterCollection,System.Nullable{Stride.Streaming.StreamingOptions})">
            <summary>
            Set the streaming options for the resources
            </summary>
            <param name="parameters">The material parameters.</param>
            <param name="options">The streaming options when streaming those resources</param>
        </member>
        <member name="M:Stride.Streaming.StreamingManager.SetResourceStreamingOptions(Stride.Graphics.Texture,System.Nullable{Stride.Streaming.StreamingOptions})">
            <summary>
            Set the streaming options for the resources
            </summary>
            <param name="texture">The texture.</param>
            <param name="options">The streaming options when streaming those resources</param>
        </member>
        <member name="M:Stride.Streaming.StreamingManager.RegisterMemoryUsage(System.Int64)">
            <summary>
            Notify the streaming manager of the change memory used by the resources.
            </summary>
            <param name="memoryUsedChange">The change of memory used in bytes. This value can be positive of negative.</param>
        </member>
        <member name="M:Stride.Streaming.StreamingManager.Stride#Graphics#Data#ITexturesStreamingProvider#FullyLoadTexture(Stride.Graphics.Texture,Stride.Graphics.ImageDescription@,Stride.Core.Streaming.ContentStorageHeader@)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Streaming.StreamingManager.Stride#Graphics#Data#ITexturesStreamingProvider#RegisterTexture(Stride.Graphics.Texture,Stride.Graphics.ImageDescription@,Stride.Core.Streaming.ContentStorageHeader@)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Streaming.StreamingManager.Stride#Graphics#Data#ITexturesStreamingProvider#UnregisterTexture(Stride.Graphics.Texture)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Streaming.StreamingManager.Stride#Core#Streaming#IStreamingManager#FullyLoadResource(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Stride.Streaming.StreamingOptions">
            <summary>
            Available options when streaming a resource.
            </summary>
        </member>
        <member name="F:Stride.Streaming.StreamingOptions.Default">
            <summary>
            The default steaming options: KeepLoaded=false, ForceHighestQuality=false, LoadImmediately=false
            </summary>
        </member>
        <member name="F:Stride.Streaming.StreamingOptions.LoadAtOnce">
            <summary>
            Request the immediate loading of the resource to its highest level of quality.
            </summary>
        </member>
        <member name="F:Stride.Streaming.StreamingOptions.DoNotStream">
            <summary>
            Do not stream the texture always keep it to the higest quality
            </summary>
        </member>
        <member name="F:Stride.Streaming.StreamingOptions.KeepLoaded">
            <summary>
            Keep the resource loaded even if not rendered on the screen.
            </summary>
        </member>
        <member name="F:Stride.Streaming.StreamingOptions.ForceHighestQuality">
            <summary>
            Force the resource to be loaded at highest quality.
            </summary>
        </member>
        <member name="F:Stride.Streaming.StreamingOptions.LoadImmediately">
            <summary>
            Block the execution flow and load the resource up to maximum quality synchronously.
            </summary>
        </member>
        <member name="F:Stride.Streaming.StreamingOptions.IgnoreResource">
            <summary>
            Do not update the resource data
            </summary>
        </member>
        <member name="M:Stride.Streaming.StreamingOptions.CombineWith(Stride.Streaming.StreamingOptions)">
            <summary>
            Merge and return the combination of two streaming options for a same resource.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Stride.Streaming.StreamingQuality">
            <summary>
            Resources streaming quality level value type.
            </summary>
        </member>
        <member name="F:Stride.Streaming.StreamingQuality.Mininum">
            <summary>
            The mininum quality value.
            </summary>
        </member>
        <member name="F:Stride.Streaming.StreamingQuality.Maximum">
            <summary>
            The maximum quality value.
            </summary>
        </member>
        <member name="F:Stride.Streaming.StreamingQuality.Value">
            <summary>
            The quality value in range: [0; 1].
            </summary>
        </member>
        <member name="M:Stride.Streaming.StreamingQuality.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Streaming.StreamingQuality"/> struct.
            </summary>
            <param name="value">The quality value (range [0;1]).</param>
        </member>
        <member name="M:Stride.Streaming.StreamingQuality.Normalize">
            <summary>
            Normalizes this quality value to range [0;1].
            </summary>
        </member>
        <member name="M:Stride.Streaming.StreamingQuality.op_Implicit(Stride.Streaming.StreamingQuality)~System.Single">
            <summary>
            Performs an implicit conversion from <see cref="T:Stride.Streaming.StreamingQuality"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Stride.Streaming.StreamingQuality.op_Implicit(System.Single)~Stride.Streaming.StreamingQuality">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:Stride.Streaming.StreamingQuality"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:Stride.Streaming.StreamingSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether resource streaming should be disabled.
            </summary>
            <userdoc>
            Enable streaming
            </userdoc>
            <seealso cref="P:Stride.Games.GameSystemBase.Enabled"/>
        </member>
        <member name="P:Stride.Streaming.StreamingSettings.ManagerUpdatesInterval">
            <inheritdoc cref="F:Stride.Streaming.StreamingManager.ManagerUpdatesInterval"/>
            <userdoc>
            How frequently Stride updates the streaming. Smaller intervals mean the streaming system reacts faster, but use more CPU and cause more memory fluctuations.
            </userdoc>
            <seealso cref="F:Stride.Streaming.StreamingManager.ManagerUpdatesInterval"/>
        </member>
        <member name="P:Stride.Streaming.StreamingSettings.MaxResourcesPerUpdate">
            <inheritdoc cref="F:Stride.Streaming.StreamingManager.MaxResourcesPerUpdate"/>
            <userdoc>
            The maximum number of textures loaded or unloaded per streaming update. Higher numbers reduce pop-in but might slow down the framerate.
            </userdoc>
            <seealso cref="F:Stride.Streaming.StreamingManager.MaxResourcesPerUpdate"/>
        </member>
        <member name="P:Stride.Streaming.StreamingSettings.ResourceLiveTimeout">
            <inheritdoc cref="F:Stride.Streaming.StreamingManager.ResourceLiveTimeout"/>
            <userdoc>
            How long resources stay loaded after they're no longer used (when the memory budget is exceeded)
            </userdoc>
            <seealso cref="F:Stride.Streaming.StreamingManager.ResourceLiveTimeout"/>
        </member>
        <member name="P:Stride.Streaming.StreamingSettings.TargetedMemoryBudget">
            <inheritdoc cref="F:Stride.Streaming.StreamingManager.TargetedMemoryBudget"/>
            <userdoc>
            When the memory used by streaming exceeds this budget, Stride unloads unused textures. You can increase this to keep more textures loaded when you have memory to spare, and vice versa.
            </userdoc>
            <seealso cref="F:Stride.Streaming.StreamingManager.TargetedMemoryBudget"/>
        </member>
        <member name="T:Stride.Streaming.StreamingTexture">
            <summary>
            Texture streaming object.
            </summary>
        </member>
        <member name="F:Stride.Streaming.StreamingTexture.texture">
            <summary>
            The texture to stream.
            </summary>
        </member>
        <member name="F:Stride.Streaming.StreamingTexture.textureToSync">
            <summary>
            The texture to synchronize. Created and prepared in a background to be swaped with the streamed texture. See <see cref="M:Stride.Streaming.StreamingTexture.FlushSync"/>.
            </summary>
        </member>
        <member name="F:Stride.Streaming.StreamingTexture.description">
            <summary>
            The actual texture description.
            </summary>
        </member>
        <member name="F:Stride.Streaming.StreamingTexture.residentMips">
            <summary>
            The amount of the resident mips (uploaded to the GPU).
            </summary>
        </member>
        <member name="F:Stride.Streaming.StreamingTexture.mipInfos">
            <summary>
            The texture cached mip maps infos.
            </summary>
        </member>
        <member name="T:Stride.Streaming.StreamingTexture.MipInfo">
            <summary>
            Helper structure used to pre-cache <see cref="T:Stride.Streaming.StreamingTexture"/> mip maps metadata. Used to improve streaming performance (smaller CPU usage).
            </summary>
        </member>
        <member name="P:Stride.Streaming.StreamingTexture.Texture">
            <summary>
            Gets the texture object.
            </summary>
        </member>
        <member name="P:Stride.Streaming.StreamingTexture.Description">
            <summary>
            Gets the texture image description (available in the storage container).
            </summary>
        </member>
        <member name="P:Stride.Streaming.StreamingTexture.TotalMipLevels">
            <summary>
            Gets the total amount of mip levels.
            </summary>
        </member>
        <member name="P:Stride.Streaming.StreamingTexture.TotalWidth">
            <summary>
            Gets the width of maximum texture mip.
            </summary>
        </member>
        <member name="P:Stride.Streaming.StreamingTexture.TotalHeight">
            <summary>
            Gets the height of maximum texture mip.
            </summary>
        </member>
        <member name="P:Stride.Streaming.StreamingTexture.ArraySize">
            <summary>
            Gets the number of textures in an array.
            </summary>
        </member>
        <member name="P:Stride.Streaming.StreamingTexture.IsCubeMap">
            <summary>
            Gets a value indicating whether this texture is a cube map.
            </summary>
            <value><c>true</c> if this texture is a cube map; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Streaming.StreamingTexture.Format">
            <summary>
            Gets the texture texels format
            </summary>
        </member>
        <member name="P:Stride.Streaming.StreamingTexture.HighestResidentMipIndex">
            <summary>
            Gets index of the highest resident mip map (may be equal to MipLevels if no mip has been uploaded). Note: mip=0 is the highest (top quality)
            </summary>
            <returns>Mip index</returns>
        </member>
        <member name="P:Stride.Streaming.StreamingTexture.Resource">
            <inheritdoc />
        </member>
        <member name="P:Stride.Streaming.StreamingTexture.CurrentResidency">
            <inheritdoc />
        </member>
        <member name="P:Stride.Streaming.StreamingTexture.AllocatedResidency">
            <inheritdoc />
        </member>
        <member name="P:Stride.Streaming.StreamingTexture.MaxResidency">
            <inheritdoc />
        </member>
        <member name="M:Stride.Streaming.StreamingTexture.CalculateTargetResidency(Stride.Streaming.StreamingQuality)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Streaming.StreamingTexture.CalculateRequestedResidency(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Stride.Streaming.StreamingTexture.CanBeUpdated">
            <inheritdoc />
        </member>
        <member name="M:Stride.Streaming.StreamingTexture.FlushSync">
            <inheritdoc />
        </member>
        <member name="M:Stride.Streaming.StreamingTexture.Release">
            <inheritdoc />
        </member>
        <member name="M:Stride.Streaming.StreamingTexture.Destroy">
            <inheritdoc />
        </member>
        <member name="M:Stride.Streaming.StreamingTexture.StreamAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Stride.StrideVersion">
            <summary>
            Internal version used to identify Stride version.
            </summary>
            <remarks>
            During package build, PackageUpdateVersionTask is updating that file and expect some specific text regex so be careful if you change any of this.
            </remarks>
        </member>
        <member name="F:Stride.StrideVersion.PublicVersion">
            <summary>
            The version used by editor for display purpose. 4th digit needs to be at least 1 if used (due to NuGet special cases).
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.AssemblyVersion">
            <summary>
            The current assembly version as text, currently same as <see cref="F:Stride.StrideVersion.PublicVersion"/>.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersionSimple">
            <summary>
            The NuGet package version without special tags.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersion">
            <summary>
            The NuGet package version.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersionSuffix">
            <summary>
            The NuGet package suffix (i.e. -beta01). Automatically set by Stride.GitVersioning.GenerateVersionFile.
            Three possible values:
            - Empty: official release
            - -betaXX: development version (XX should corespond to development asset versioning)
            - -betaXX-YYYY: beta release (YYYY is the git height since current version has been bumped)
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.BuildMetadata">
            <summary>
            The build metadata, usually +g[git_hash] during package. Automatically set by Stride.GitVersioning.GenerateVersionFile.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.AssemblyInformationalVersion">
            <summary>
            The informational assembly version, containing -beta01 or +g[git_hash] during package.
            </summary>
        </member>
        <member name="T:Stride.PublicKeys">
            <summary>
            Assembly signing information.
            </summary>
        </member>
        <member name="F:Stride.PublicKeys.Default">
            <summary>
            Assembly name suffix that contains signing information.
            </summary>
        </member>
    </members>
</doc>
