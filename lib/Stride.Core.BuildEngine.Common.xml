<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stride.Core.BuildEngine.Common</name>
    </assembly>
    <members>
        <member name="T:Stride.Core.BuildEngine.AnonymousBuildStepProvider">
            <summary>
            An implementation of the <see cref="T:Stride.Core.BuildEngine.IBuildStepProvider"/> interface that allows to create a build step provider
            from an anonymous function.
            </summary>
        </member>
        <member name="M:Stride.Core.BuildEngine.AnonymousBuildStepProvider.#ctor(System.Func{System.Int32,Stride.Core.BuildEngine.BuildStep})">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.BuildEngine.AnonymousBuildStepProvider"/> class.
            </summary>
            <param name="providerFunction">The function that provides build steps.</param>
        </member>
        <member name="M:Stride.Core.BuildEngine.AnonymousBuildStepProvider.GetNextBuildStep(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.BuildEngine.AssemblyHash.ComputeAssemblyHash(System.Reflection.Assembly)">
            <summary>
            Computes the hash from an assembly based on its AssemblyFileVersion. Recurse to all assembly dependencies.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>A full hash of this assembly, including all its dependencies.</returns>
        </member>
        <member name="P:Stride.Core.BuildEngine.Builder.ObjectDatabase">
            <summary>
            Gets the <see cref="P:Stride.Core.BuildEngine.Builder.ObjectDatabase"/> in which built objects are written.
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.Builder.BuilderId">
            <summary>
            The <see cref="T:System.Guid"/> assigned to the builder.
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.Builder.BuilderName">
            <summary>
            Builder name
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.Builder.Cancelled">
            <summary>
            Indicate whether the build has been canceled
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.Builder.IsRunning">
            <summary>
            Indicate whether this builder is currently running.
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.Builder.Logger">
            <summary>
            Logger used by the builder and the commands
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.Builder.Root">
            <summary>
            The root build step of the builder defining the builds to perform.
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.Builder.ThreadCount">
            <summary>
            Number of working threads to create
            </summary>
        </member>
        <member name="T:Stride.Core.BuildEngine.Builder.Mode">
            <summary>
            Indicate which mode to use with this builder
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.Builder.Mode.Build">
            <summary>
            Build the script
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.Builder.Mode.Clean">
            <summary>
            Clean the command cache used to determine wheither a command has already been triggered.
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.Builder.Mode.CleanAndDelete">
            <summary>
            Clean the command cache and delete every output objects
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.Builder.buildPath">
            <summary>
            The path on the disk where to perform the build
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.Builder.indexName">
            <summary>
            The name on the disk of the index file name.
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.Builder.cancellationTokenSource">
            <summary>
            Cancellation token source used for cancellation.
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.Builder.resultMap">
            <summary>
            A map containing results of each commands, indexed by command hashes. When the builder is running, this map if filled with the result of the commands of the current execution.
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.Builder.runMode">
            <summary>
            The build mode of the current run execution
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.Builder.IndexFileFullPath">
            <summary>
            The full path of the index file from the build directory.
            </summary>
        </member>
        <member name="M:Stride.Core.BuildEngine.Builder.CancelBuild">
            <summary>
            Cancel the currently executing build.
            </summary>
        </member>
        <member name="M:Stride.Core.BuildEngine.Builder.Reset">
            <summary>
            Discard the current <see cref="P:Stride.Core.BuildEngine.Builder.Root"/> build step and initialize a new empty one.
            </summary>
        </member>
        <member name="M:Stride.Core.BuildEngine.Builder.Run(Stride.Core.BuildEngine.Builder.Mode,System.Boolean)">
            <summary>
            Runs this instance.
            </summary>
        </member>
        <member name="M:Stride.Core.BuildEngine.Builder.WriteIndexFile(System.Boolean)">
            <summary>
            Write the generated objects into the index map file.
            </summary>
            <param name="mergeWithCurrentIndexFile">Indicate if old values must be deleted or merged</param>
        </member>
        <member name="M:Stride.Core.BuildEngine.Builder.PrepareDependencyGraph(Stride.Core.BuildEngine.BuildStep,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.KeyValuePair{Stride.Core.BuildEngine.BuildStep,System.Collections.Generic.HashSet{System.String}}})">
            <summary>
            Collects dependencies between <see cref="P:Stride.Core.BuildEngine.BuildStep.OutputLocation"/> BuildStep. See remarks.
            </summary>
            <param name="step">The step to compute the dependencies for</param>
            <param name="contentBuildSteps">A cache of content reference location to buildsteps </param>
            <remarks>
            Each BuildStep inheriting from <see cref="P:Stride.Core.BuildEngine.BuildStep.OutputLocation"/> is considered as a top-level dependency step that can have depedencies
            on other top-level dependency. We are collecting all of them here.
            </remarks>
        </member>
        <member name="M:Stride.Core.BuildEngine.Builder.GenerateDependencies(Stride.Core.BuildEngine.BuildStep)">
            <summary>
            Collects dependencies between <see cref="P:Stride.Core.BuildEngine.BuildStep.OutputLocation"/> and fill the <see cref="P:Stride.Core.BuildEngine.BuildStep.PrerequisiteSteps"/> accordingly.
            </summary>
            <param name="rootStep">The root BuildStep</param>
        </member>
        <member name="P:Stride.Core.BuildEngine.BuildStep.TransformExecuteContextLogger">
            <summary>
            Callback that can transform the <see cref="!:IExecuteContext.Logger"/>.
            </summary>
            <value>The module.</value>
        </member>
        <member name="P:Stride.Core.BuildEngine.BuildStep.Priority">
            <summary>
            Gets or sets the priority amongst other build steps.
            </summary>
            <value>
            The priority.
            </value>
        </member>
        <member name="P:Stride.Core.BuildEngine.BuildStep.Title">
            <summary>
            Title of the build step. Intended to be short
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.BuildStep.Description">
            <summary>
            Description of the build step. Intended to be longer and more descriptive than the <see cref="P:Stride.Core.BuildEngine.BuildStep.Title"/>
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.BuildStep.Status">
            <summary>
            The status of the result.
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.BuildStep.Processed">
            <summary>
            Indicate whether this command has already been processed (ie. executed or skipped) by the Builder
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.BuildStep.Succeeded">
            <summary>
            Indicate whether the result corresponds to a successful execution (even if the command has not been triggered)
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.BuildStep.Failed">
            <summary>
            Indicate whether the result corresponds to a failed execution (even if the command has not been triggered)
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.BuildStep.Tag">
            <summary>
            A tag property that can contain anything useful for tools based on this build Engine.
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.BuildStep.PrerequisiteSteps">
            <summary>
            List of commands that must be executed prior this one (direct dependence only).
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.BuildStep.Parent">
            <summary>
            The parent build step, which will be the instigator of the step
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.BuildStep.ExecutionId">
            <summary>
            An unique id during a build execution, assigned once the build step is scheduled.
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.BuildStep.ArePrerequisitesCompleted">
            <summary>
            Indicate whether all prerequisite commands have been processed
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.BuildStep.ArePrerequisitesSuccessful">
            <summary>
            Indicate whether all prerequisite commands have been processed and are in a successful state
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.BuildStep.Logger">
            <summary>
            Gets the logger for the current build step.
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.BuildStep.OutputLocation">
            <summary>
            The object this build step write (if any).
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.BuildStep.OutputObjectIds">
            <summary>
            The list of objects generated by this build step.
            </summary>
        </member>
        <member name="E:Stride.Core.BuildEngine.BuildStep.StepProcessed">
            <summary>
            Event raised when the command is processed (even if it has been skipped or if it failed)
            </summary>
        </member>
        <member name="M:Stride.Core.BuildEngine.BuildStep.Execute(Stride.Core.BuildEngine.IExecuteContext,Stride.Core.BuildEngine.BuilderContext)">
            <summary>
            Execute the BuildStep, usually resulting in scheduling tasks in the scheduler 
            </summary>
            <param name="executeContext">The execute context</param>
            <param name="builderContext">The builder context</param>
            <returns>A task returning <see cref="T:Stride.Core.BuildEngine.ResultStatus"/> indicating weither the execution has successed or failed.</returns>
        </member>
        <member name="M:Stride.Core.BuildEngine.BuildStep.Clean(Stride.Core.BuildEngine.IExecuteContext,Stride.Core.BuildEngine.BuilderContext,System.Boolean)">
            <summary>
            Clean the build, deleting the command cache which is used to determine wheither a command has already been executed, and deleting the output objects if asked.
            </summary>
            <param name="executeContext">The execute context</param>
            <param name="builderContext">The builder context</param>
            <param name="deleteOutput">if true, every output object is also deleted, in addition of the command cache.</param>
        </member>
        <member name="M:Stride.Core.BuildEngine.BuildStep.RegisterResult(Stride.Core.BuildEngine.IExecuteContext,Stride.Core.BuildEngine.ResultStatus)">
            <summary>
            Associate the given <see cref="T:Stride.Core.BuildEngine.ResultStatus" /> object as the result of the current step and execute the <see cref="E:Stride.Core.BuildEngine.BuildStep.StepProcessed"/> event.
            </summary>
            <param name="executeContext">The execute context.</param>
            <param name="status">The result status.</param>
        </member>
        <member name="T:Stride.Core.BuildEngine.BuildStepExtensions">
            <summary>
            This class contains extension methods related to the <see cref="T:Stride.Core.BuildEngine.BuildStep"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.BuildEngine.BuildStepExtensions.EnumerateRecursively(Stride.Core.BuildEngine.BuildStep)">
            <summary>
            Enumerates this build step, and all its inner build steps recursively when they are themselves <see cref="T:Stride.Core.BuildEngine.ListBuildStep"/>.
            </summary>
            <param name="buildStep">The build step to enumerates with its inner build steps</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> object enumerating this build step, and all its inner build steps recursively.</returns>
        </member>
        <member name="F:Stride.Core.BuildEngine.Command.CommandCacheVersion">
            <summary>
            The command cache version, should be bumped when binary serialization format changes (so that cache gets invalidated)
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.Command.Title">
            <summary>
            Title (short description) of the command
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.Command.OutputLocation">
            <summary>
            The object this command writes (if any).
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.Command.BasePreCommandCalled">
            <summary>
            Safeguard to ensure inheritance will always call base.PreCommand
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.Command.BasePostCommandCalled">
            <summary>
            Safeguard to ensure inheritance will always call base.PostCommand
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.Command.CancellationToken">
            <summary>
            Cancellation Token. Must be checked frequently by the <see cref="M:Stride.Core.BuildEngine.Command.DoCommandOverride(Stride.Core.BuildEngine.ICommandContext)"/> implementation in order to interrupt the command while running
            </summary>
        </member>
        <member name="M:Stride.Core.BuildEngine.Command.DoCommandOverride(Stride.Core.BuildEngine.ICommandContext)">
            <summary>
            The method to override containing the actual command code. It is called by the <see cref="M:Stride.Core.BuildEngine.Command.DoCommand(Stride.Core.BuildEngine.ICommandContext)"/> function
            </summary>
            <param name="commandContext"></param>
        </member>
        <member name="M:Stride.Core.BuildEngine.Command.DoCommand(Stride.Core.BuildEngine.ICommandContext)">
            <summary>
            The method that indirectly call <see cref="M:Stride.Core.BuildEngine.Command.DoCommandOverride(Stride.Core.BuildEngine.ICommandContext)"/> to execute the actual command code. 
            It is called by the current <see cref="T:Stride.Core.BuildEngine.Builder"/> when the command is triggered
            </summary>
            <param name="commandContext"></param>
        </member>
        <member name="M:Stride.Core.BuildEngine.Command.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.BuildEngine.Command.GetInputFiles">
            <summary>
            Gets the list of input files (that can be deduced without running the command, only from command parameters).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stride.Core.BuildEngine.Command.ShouldForceExecution">
            <summary>
            Check some conditions that determine if the command should be executed. This method may not be called if some previous check determinated that it already needs to be executed.
            </summary>
            <returns>true if the command should be executed</returns>
        </member>
        <member name="M:Stride.Core.BuildEngine.Command.Cancel">
            <summary>
            Callback called by <see cref="M:Stride.Core.BuildEngine.Builder.CancelBuild"/>. It can be useful for commands in a blocking call that can be unblocked from here.
            </summary>
        </member>
        <member name="M:Stride.Core.BuildEngine.Command.ComputeCommandHash(Stride.Core.BuildEngine.IPrepareContext)">
            <summary>
            Computes the command hash. If an error occurred, the hash is <see cref="F:Stride.Core.Storage.ObjectId.Empty"/>
            </summary>
            <param name="prepareContext">The prepare context.</param>
            <returns>Hash of the command.</returns>
        </member>
        <member name="P:Stride.Core.BuildEngine.CommandBuildStep.Title">
            <inheritdoc />
        </member>
        <member name="P:Stride.Core.BuildEngine.CommandBuildStep.Result">
            <summary>
            Command Result, set only after step completion. Not thread safe, should not be modified
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.CommandBuildStep.OutputLocation">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.BuildEngine.CommandBuildStep.OutputObjectIds">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.BuildEngine.CommandIOMonitor">
            <summary>
            This class monitors input/output access from every BuildStep execution, and display an error message if an object url is the input of a command and the output of another command running at the same time.
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.CommandIOMonitor.objectsAccesses">
            <summary>
            A dictionary containing read and write access timings (value) of a given object url (key)
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.CommandIOMonitor.commandExecutionIntervals">
            <summary>
            A dictionary containing execution intervals of BuildStep
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.CommandResultEntry.OutputObjects">
            <summary>
            Output object ids as saved in the object database.
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.CommandResultEntry.LogMessages">
            <summary>
            Log messages corresponding to the execution of the command.
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.CommandResultEntry.TagSymbols">
            <summary>
            Tags added for a given URL.
            </summary>
        </member>
        <member name="T:Stride.Core.BuildEngine.DynamicBuilder">
            <summary>
            This class allow to run a given <see cref="T:Stride.Core.BuildEngine.Builder"/> in a new thread. It will run a single <see cref="T:Stride.Core.BuildEngine.DynamicBuildStep"/>
            that can be fed with a given <see cref="T:Stride.Core.BuildEngine.IBuildStepProvider"/>.
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.DynamicBuilder.builderThread">
            <summary>
            The thread that will run an instance of <see cref="T:Stride.Core.BuildEngine.Builder"/> to build provided steps.
            </summary>
        </member>
        <member name="M:Stride.Core.BuildEngine.DynamicBuilder.#ctor(Stride.Core.BuildEngine.Builder,Stride.Core.BuildEngine.IBuildStepProvider,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.BuildEngine.DynamicBuilder"/> class.
            </summary>
            <param name="name">The name of this instance. Used to name the created thread.</param>
            <param name="builder">The builder to use.</param>
            <param name="buildStepProvider">The build step provider to use.</param>
        </member>
        <member name="M:Stride.Core.BuildEngine.DynamicBuilder.Start">
            <summary>
            Starts the thread an run the builder.
            </summary>
        </member>
        <member name="M:Stride.Core.BuildEngine.DynamicBuilder.Dispose">
            <summary>
            Cancels any build in progress and wait for the thread to exit.
            </summary>
        </member>
        <member name="M:Stride.Core.BuildEngine.DynamicBuilder.NotifyBuildStepAvailable">
            <summary>
            Notify the <see cref="T:Stride.Core.BuildEngine.DynamicBuildStep"/> that a new build step is available.
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.DynamicBuildStep.newWorkAvailable">
            <summary>
            The <see cref="T:System.Threading.AutoResetEvent"/> used to notify the dynamic build step that new work is requested.
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.DynamicBuildStep.MaxParallelSteps">
            <summary>
            Gets or sets the maximum number of steps that can run at the same time in parallel.
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.DynamicBuildStep.MaxHighPriorityParallelSteps">
            <summary>
            Gets or sets the maximum number of steps slots that are kept specifically for high priority steps (negative)
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.DynamicBuildStep.Title">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.BuildEngine.DynamicBuildStep.NotifyNewWorkAvailable">
            <summary>
            Notify the dynamic build step new work is available.
            </summary>
        </member>
        <member name="M:Stride.Core.BuildEngine.DynamicBuildStep.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.BuildEngine.FileVersionStorage">
            <summary>
            Storage used for <see cref="T:Stride.Core.BuildEngine.FileVersionKey"/> associated with an <see cref="T:Stride.Core.Storage.ObjectId"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.BuildEngine.FileVersionStorage.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.BuildEngine.FileVersionStorage"/> class.
            </summary>
            <param name="stream">The localStream.</param>
        </member>
        <member name="M:Stride.Core.BuildEngine.FileVersionStorage.Compact(System.String)">
            <summary>
            Compacts the specified storage path.
            </summary>
            <param name="storagePath">The storage path.</param>
            <returns><c>true</c> if the storage path was successfully compacted, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Stride.Core.BuildEngine.FileVersionTracker">
            <summary>
            A tracker of file date.
            </summary>
        </member>
        <member name="M:Stride.Core.BuildEngine.FileVersionTracker.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.BuildEngine.FileVersionTracker"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Stride.Core.BuildEngine.FileVersionTracker.GetDefault">
            <summary>
            Gets the default file version tracker for this machine.
            </summary>
            <returns>FileVersionTracker.</returns>
        </member>
        <member name="M:Stride.Core.BuildEngine.FileVersionTracker.Load(System.String)">
            <summary>
            Loads previous versions stored from the specified file path.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>FileVersionTracker.</returns>
        </member>
        <member name="T:Stride.Core.BuildEngine.IBuildStepProvider">
            <summary>
            This interface describes a class that is capable of providing build steps to a <see cref="T:Stride.Core.BuildEngine.DynamicBuildStep"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.BuildEngine.IBuildStepProvider.GetNextBuildStep(System.Int32)">
            <summary>
            Gets the next build step to execute.
            </summary>
            <returns>The next build step to execute, or <c>null</c> if there is no build step to execute.</returns>
        </member>
        <member name="T:Stride.Core.BuildEngine.IndexFileCommand">
            <summary>
            A <see cref="T:Stride.Core.BuildEngine.Command"/> that reads and/or writes to the index file.
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.ListBuildStep.Title">
            <inheritdoc />
        </member>
        <member name="P:Stride.Core.BuildEngine.ListBuildStep.OutputObjectIds">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.BuildEngine.ListBuildStep.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.BuildEngine.ListBuildStep.ComputeResultStatusFromExecutedSteps">
            <summary>
            Determine the result status of an execution of enumeration of build steps.
            </summary>
            <returns>The result status of the execution.</returns>
        </member>
        <member name="M:Stride.Core.BuildEngine.ListBuildStep.CompleteCommands(Stride.Core.BuildEngine.IExecuteContext,System.Collections.Generic.List{Stride.Core.BuildEngine.BuildStep})">
            <summary>
            Wait for given build steps to finish, then processes their inputs and outputs.
            </summary>
            <param name="executeContext">The execute context.</param>
            <param name="buildStepsToWait">The build steps to wait.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Core.BuildEngine.ListBuildStep.ProcessCommandBuildStepResult(Stride.Core.BuildEngine.IExecuteContext,Stride.Core.BuildEngine.CommandBuildStep)">
            <summary>
            Processes the results from a <see cref="T:Stride.Core.BuildEngine.CommandBuildStep"/>.
            </summary>
            <param name="executeContext">The execute context.</param>
            <param name="buildStep">The build step.</param>
        </member>
        <member name="M:Stride.Core.BuildEngine.ListBuildStep.CheckInputObject(Stride.Core.BuildEngine.IExecuteContext,Stride.Core.Serialization.Contents.ObjectUrl,Stride.Core.BuildEngine.Command)">
            <summary>
            Adds the input object. Will try to detect input/output conflicts.
            </summary>
            <param name="executeContext">The execute context.</param>
            <param name="inputObjectUrl">The input object URL.</param>
            <param name="command">The command.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Stride.Core.BuildEngine.ListBuildStep.CheckOutputObject(Stride.Core.BuildEngine.IExecuteContext,Stride.Core.Serialization.Contents.ObjectUrl,Stride.Core.BuildEngine.Command)">
            <summary>
            Adds the output object. Will try to detect input/output conflicts, and output with different <see cref="T:Stride.Core.Storage.ObjectId" /> conflicts.
            </summary>
            <param name="executeContext">The execute context.</param>
            <param name="outputObjectUrl">The output object URL.</param>
            <param name="command">The command that produced the output object.</param>
            <exception cref="T:System.InvalidOperationException">Two CommandBuildStep with same inputs did output different results.</exception>
        </member>
        <member name="P:Stride.Core.BuildEngine.ListBuildStep.Count">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.BuildEngine.ListBuildStep.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.BuildEngine.ListBuildStep.Add(Stride.Core.BuildEngine.BuildStep)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.BuildEngine.MicrothreadLocalDatabases">
            <summary>
            A static class that allows to have a different <see cref="T:Stride.Core.Storage.ObjectDatabase"/> on each <see cref="T:Stride.Core.MicroThreading.MicroThread"/>. Objects can still be shared
            between micro-threads by using the <see cref="M:Stride.Core.BuildEngine.MicrothreadLocalDatabases.AddToSharedGroup(System.Collections.Generic.IReadOnlyDictionary{Stride.Core.Serialization.Contents.ObjectUrl,Stride.Core.BuildEngine.OutputObject})"/> method.
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.MicrothreadLocalDatabases.HasValidDatabaseFileProvider">
            <summary>
            Gets a value indicating whether this instance has a valid database file provider.
            </summary>
            <value><c>true</c> if this instance has database file provider; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.BuildEngine.MicrothreadLocalDatabases.DatabaseFileProvider">
            <summary>
            Gets the currently mounted microthread-local database provider.
            </summary>
        </member>
        <member name="M:Stride.Core.BuildEngine.MicrothreadLocalDatabases.AddToSharedGroup(System.Collections.Generic.IReadOnlyDictionary{Stride.Core.Serialization.Contents.ObjectUrl,Stride.Core.BuildEngine.OutputObject})">
            <summary>
            Merges the given dictionary of build output objects into the shared group. Objects merged here will be integrated to every database.
            </summary>
            <param name="outputObjects">The dictionary containing the <see cref="T:Stride.Core.BuildEngine.OutputObject"/> to merge into the shared group.</param>
        </member>
        <member name="M:Stride.Core.BuildEngine.MicrothreadLocalDatabases.GetSharedDatabase">
            <summary>
            Gets a <see cref="F:Stride.Core.BuildEngine.MicrothreadLocalDatabases.MicroThreadLocalDatabaseFileProvider"/> containing only objects from the shared group.
            The shared group is a group of objects registered via <see cref="M:Stride.Core.BuildEngine.MicrothreadLocalDatabases.AddToSharedGroup(System.Collections.Generic.IReadOnlyDictionary{Stride.Core.Serialization.Contents.ObjectUrl,Stride.Core.BuildEngine.OutputObject})"/> and shared amongst all databases.
            </summary>
            <returns>A <see cref="F:Stride.Core.BuildEngine.MicrothreadLocalDatabases.MicroThreadLocalDatabaseFileProvider"/> that can provide objects from the common group.</returns>
        </member>
        <member name="M:Stride.Core.BuildEngine.MicrothreadLocalDatabases.MountDatabase(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyDictionary{Stride.Core.Serialization.Contents.ObjectUrl,Stride.Core.BuildEngine.OutputObject}})">
            <summary>
            Creates and mounts a database containing the given output object groups and the shared group in the microthread-local
            <see cref="F:Stride.Core.BuildEngine.MicrothreadLocalDatabases.MicroThreadLocalDatabaseFileProvider"/>.
            </summary>
            <param name="outputObjectsGroups">A collection of dictionaries representing a group of output object.</param>
        </member>
        <member name="M:Stride.Core.BuildEngine.MicrothreadLocalDatabases.MountCommonDatabase">
            <summary>
            Creates and mounts a database containing output objects from the shared group in the microthread-local <see cref="F:Stride.Core.BuildEngine.MicrothreadLocalDatabases.MicroThreadLocalDatabaseFileProvider"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.BuildEngine.MicrothreadLocalDatabases.UnmountDatabase">
            <summary>
            Unmounts the currently mounted microthread-local database.
            </summary>
        </member>
        <member name="T:Stride.Core.BuildEngine.OutputObject">
            <summary>
            A build output object, as exposed by <see cref="T:Stride.Core.BuildEngine.ListBuildStep"/>. This object represents the hash of an output object and its associated url.
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.OutputObject.Url">
            <summary>
            The url of the object.
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.OutputObject.ObjectId">
            <summary>
            The hash of the object.
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.OutputObject.Tags">
            <summary>
            The tags associated to the object.
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.OutputObject.Counter">
            <summary>
            An internal counter used to manage output object merging.
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.OutputObject.Command">
            <summary>
            The command that generated this object.
            </summary>
        </member>
        <member name="M:Stride.Core.BuildEngine.OutputObject.#ctor(Stride.Core.Serialization.Contents.ObjectUrl,Stride.Core.Storage.ObjectId)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.BuildEngine.OutputObject"/> class.
            </summary>
            <param name="url">The url of the output object.</param>
            <param name="objectId">The hash of the output object.</param>
        </member>
        <member name="T:Stride.Core.BuildEngine.ResultStatus">
            <summary>
            Status of a command.
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.ResultStatus.NotProcessed">
            <summary>
            The command has not finished yet
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.ResultStatus.Successful">
            <summary>
            The command was successfully executed
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.ResultStatus.Failed">
            <summary>
            The command execution failed
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.ResultStatus.Cancelled">
            <summary>
            The command was started but cancelled, output is undeterminated
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.ResultStatus.NotTriggeredWasSuccessful">
            <summary>
            A command may not be triggered if its input data haven't changed since the successful last execution
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.ResultStatus.NotTriggeredPrerequisiteFailed">
            <summary>
            One of the prerequisite command failed and the command was not executed
            </summary>
        </member>
        <member name="T:Stride.Core.BuildEngine.SerializableTimestampLogMessage">
            <summary>
            A specialization of the <see cref="T:Stride.Core.Diagnostics.SerializableLogMessage"/> class that contains a timestamp information.
            </summary>
        </member>
        <member name="M:Stride.Core.BuildEngine.SerializableTimestampLogMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.BuildEngine.SerializableTimestampLogMessage"/> class with default values for its properties
            </summary>
        </member>
        <member name="M:Stride.Core.BuildEngine.SerializableTimestampLogMessage.#ctor(Stride.Core.Diagnostics.TimestampLocalLogger.Message)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.BuildEngine.SerializableTimestampLogMessage"/> class from a <see cref="T:Stride.Core.Diagnostics.TimestampLocalLogger.Message"/> instance.
            </summary>
            <param name="message">The <see cref="T:Stride.Core.Diagnostics.TimestampLocalLogger.Message"/> instance to use to initialize properties.</param>
        </member>
        <member name="P:Stride.Core.BuildEngine.SerializableTimestampLogMessage.Timestamp">
            <summary>
            Gets or sets the timestamp of this message.
            </summary>
        </member>
        <member name="F:Stride.Core.BuildEngine.SingleFileImportCommand.Version">
            <summary>
            This is useful if the asset binary format has changed and we want to bump the version to force re-evaluation/compilation of the command
            </summary>
        </member>
        <member name="P:Stride.Core.BuildEngine.SingleFileImportCommand.SourcePath">
            <summary>
            Gets or sets the source path of the raw asset.
            </summary>
            <value>The source path.</value>
        </member>
        <member name="P:Stride.Core.BuildEngine.SingleFileImportCommand.Location">
            <summary>
            Gets or sets the destination location in the storage.
            </summary>
            <value>The location.</value>
        </member>
        <member name="T:Stride.Core.BuildEngine.TimeInterval">
            <summary>
            An helper class used to store command timing
            </summary>
        </member>
        <member name="T:Stride.StrideVersion">
            <summary>
            Internal version used to identify Stride version.
            </summary>
            <remarks>
            During package build, PackageUpdateVersionTask is updating that file and expect some specific text regex so be careful if you change any of this.
            </remarks>
        </member>
        <member name="F:Stride.StrideVersion.PublicVersion">
            <summary>
            The version used by editor for display purpose. 4th digit needs to be at least 1 if used (due to NuGet special cases).
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.AssemblyVersion">
            <summary>
            The current assembly version as text, currently same as <see cref="F:Stride.StrideVersion.PublicVersion"/>.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersionSimple">
            <summary>
            The NuGet package version without special tags.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersion">
            <summary>
            The NuGet package version.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersionSuffix">
            <summary>
            The NuGet package suffix (i.e. -beta01). Automatically set by Stride.GitVersioning.GenerateVersionFile.
            Three possible values:
            - Empty: official release
            - -betaXX: development version (XX should corespond to development asset versioning)
            - -betaXX-YYYY: beta release (YYYY is the git height since current version has been bumped)
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.BuildMetadata">
            <summary>
            The build metadata, usually +g[git_hash] during package. Automatically set by Stride.GitVersioning.GenerateVersionFile.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.AssemblyInformationalVersion">
            <summary>
            The informational assembly version, containing -beta01 or +g[git_hash] during package.
            </summary>
        </member>
        <member name="T:Stride.PublicKeys">
            <summary>
            Assembly signing information.
            </summary>
        </member>
        <member name="F:Stride.PublicKeys.Default">
            <summary>
            Assembly name suffix that contains signing information.
            </summary>
        </member>
    </members>
</doc>
