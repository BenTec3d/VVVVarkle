/**************************
***** Compiler Parameters *****
***************************
@P EffectName: HSCB_TextureFX
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerDraw [Size: 64]
@C    MatrixTransform_id73 => SpriteBase.MatrixTransform
cbuffer Globals [Size: 112]
@C    Texture0TexelSize_id15 => Texturing.Texture0TexelSize
@C    Texture1TexelSize_id17 => Texturing.Texture1TexelSize
@C    Texture2TexelSize_id19 => Texturing.Texture2TexelSize
@C    Texture3TexelSize_id21 => Texturing.Texture3TexelSize
@C    Texture4TexelSize_id23 => Texturing.Texture4TexelSize
@C    Texture5TexelSize_id25 => Texturing.Texture5TexelSize
@C    Texture6TexelSize_id27 => Texturing.Texture6TexelSize
@C    Texture7TexelSize_id29 => Texturing.Texture7TexelSize
@C    Texture8TexelSize_id31 => Texturing.Texture8TexelSize
@C    Texture9TexelSize_id33 => Texturing.Texture9TexelSize
@C    Hue_id76 => HSCB_TextureFX.Hue
@C    HueCycles_id77 => HSCB_TextureFX.HueCycles
@C    Saturation_id78 => HSCB_TextureFX.Saturation
@C    SaturationBalance_id79 => HSCB_TextureFX.SaturationBalance
@C    Contrast_id80 => HSCB_TextureFX.Contrast
@C    Brightness_id81 => HSCB_TextureFX.Brightness
***************************
******  Resources    ******
***************************
@R    PerDraw => PerDraw [Stage: Vertex, Slot: (0-0)]
@R    LinearSampler_id44 => Texturing.LinearSampler [Stage: Pixel, Slot: (0-0)]
@R    Texture0_id14 => Texturing.Texture0 [Stage: Pixel, Slot: (0-0)]
@R    Globals => Globals [Stage: Pixel, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    HSCB_TextureFX => 88b5643af49a04306ccd8fad174120e1
@S    TextureFX => 733e12e1d7dcba0a71c11dec4224f6a1
@S    ImageEffectShader => 9b7cefba2dd674808bc791525995b495
@S    SpriteBase => 67b12f03dd9d34e76b6fcfb517afba8c
@S    ShaderBase => 01e372056ff6c06edab8e988414a8f75
@S    ShaderBaseStream => 91c0ea8aae0a45ca00578a4084fa3607
@S    Texturing => 6605f68230266eff2bc8b4e8102ede6b
@S    ShaderUtils => 322a94f64a804439ad8484ffa917bb03
***************************
*****     Stages      *****
***************************
@G    Vertex => 79eb7ff071584feaa45b858a38e87b6a
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerDraw
// {
//
//   float4x4 MatrixTransform_id73;     // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PerDraw                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
//
// Initial variable locations:
//   v0.x <- __input__.Position_id72.x; v0.y <- __input__.Position_id72.y; v0.z <- __input__.Position_id72.z; v0.w <- __input__.Position_id72.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o1.x <- <VSMain return value>.TexCoord_id62.x; o1.y <- <VSMain return value>.TexCoord_id62.y; 
//   o0.x <- <VSMain return value>.ShadingPosition_id0.x; o0.y <- <VSMain return value>.ShadingPosition_id0.y; o0.z <- <VSMain return value>.ShadingPosition_id0.z; o0.w <- <VSMain return value>.ShadingPosition_id0.w
//
#line 192 "C:\Users\benox\Documents\vvvv\gamma\Exports\VVVVarkle\lib\log\shader_HSCB_TextureFX_5c8347a776be6d4e5b6c1a93f0b2a31e.hlsl"
dp4 o0.x, v0.xyzw, cb0[0].xyzw
dp4 o0.y, v0.xyzw, cb0[1].xyzw
dp4 o0.z, v0.xyzw, cb0[2].xyzw
dp4 o0.w, v0.xyzw, cb0[3].xyzw

#line 196
mov o1.xy, v1.xyxx
ret 
// Approximately 6 instruction slots used
@G    Pixel => 212dc53205d079ccc1c220bc7a2da66e
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Globals
// {
//
//   float2 Texture0TexelSize_id15;     // Offset:    0 Size:     8 [unused]
//   float2 Texture1TexelSize_id17;     // Offset:    8 Size:     8 [unused]
//   float2 Texture2TexelSize_id19;     // Offset:   16 Size:     8 [unused]
//   float2 Texture3TexelSize_id21;     // Offset:   24 Size:     8 [unused]
//   float2 Texture4TexelSize_id23;     // Offset:   32 Size:     8 [unused]
//   float2 Texture5TexelSize_id25;     // Offset:   40 Size:     8 [unused]
//   float2 Texture6TexelSize_id27;     // Offset:   48 Size:     8 [unused]
//   float2 Texture7TexelSize_id29;     // Offset:   56 Size:     8 [unused]
//   float2 Texture8TexelSize_id31;     // Offset:   64 Size:     8 [unused]
//   float2 Texture9TexelSize_id33;     // Offset:   72 Size:     8 [unused]
//   float Hue_id76;                    // Offset:   80 Size:     4
//      = 0x00000000 
//   float HueCycles_id77;              // Offset:   84 Size:     4
//      = 0x3f800000 
//   float Saturation_id78;             // Offset:   88 Size:     4
//      = 0x3f800000 
//   float SaturationBalance_id79;      // Offset:   92 Size:     4
//      = 0x00000000 
//   float Contrast_id80;               // Offset:   96 Size:     4
//      = 0x00000000 
//   float Brightness_id81;             // Offset:  100 Size:     4
//      = 0x00000000 
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// LinearSampler_id44                sampler      NA          NA             s0      1 
// Texture0_id14                     texture  float4          2d             t0      1 
// Globals                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 4
//
// Initial variable locations:
//   v0.x <- __input__.ShadingPosition_id0.x; v0.y <- __input__.ShadingPosition_id0.y; v0.z <- __input__.ShadingPosition_id0.z; v0.w <- __input__.ShadingPosition_id0.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o0.x <- <PSMain return value>.ColorTarget_id2.x; o0.y <- <PSMain return value>.ColorTarget_id2.y; o0.z <- <PSMain return value>.ColorTarget_id2.z; o0.w <- <PSMain return value>.ColorTarget_id2.w
//
#line 142 "C:\Users\benox\Documents\vvvv\gamma\Exports\VVVVarkle\lib\log\shader_HSCB_TextureFX_5c8347a776be6d4e5b6c1a93f0b2a31e.hlsl"
mov r0.zw, l(0,0,-1.000000,0.666667)
mov r1.zw, l(0,0,0,-0.333333)

#line 163
sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, v1.xyxx, t0.xyzw, s0, l(0.000000)  // r2.x <- <InTex_id17 return value>.x; r2.y <- <InTex_id17 return value>.y; r2.z <- <InTex_id17 return value>.z; r2.w <- <InTex_id17 return value>.w

#line 142
mov r0.xy, r2.zyzz
mov r1.xy, r0.yxyy
lt r2.y, r0.y, r2.z
movc r0.xyzw, r2.yyyy, r0.xyzw, r1.xyzw  // r0.x <- P.x; r0.y <- P.y; r0.z <- P.z; r0.w <- P.w

#line 143
lt r1.x, r2.x, r0.x
mov r3.xyz, r0.xywx
mov r3.w, r2.x

#line 185
mov o0.w, r2.w

#line 143
mov r0.xyw, r3.wywx
movc r0.xyzw, r1.xxxx, r3.xyzw, r0.xyzw  // r0.x <- Q.x; r0.y <- Q.y; r0.z <- Q.z; r0.w <- Q.w

#line 145
add r1.x, -r0.y, r0.w

#line 144
min r0.y, r0.y, r0.w
add r0.y, -r0.y, r0.x  // r0.y <- C

#line 145
mad r0.w, r0.y, l(6.000000), l(0.000000)
div r0.w, r1.x, r0.w
add r0.z, r0.z, r0.w

#line 157
mad r0.x, -r0.y, l(0.500000), r0.x  // r0.x <- L

#line 171
add r0.w, |r0.z|, cb0[5].x

#line 173
min r0.z, |r0.z|, l(1.000000)

#line 171
frc r0.w, r0.w

#line 172
add r1.x, r0.w, l(-1.000000)

#line 171
mul r0.w, r0.w, cb0[5].y

#line 134
frc r0.w, r0.w  // r0.w <- H

#line 137
mad r1.yzw, r0.wwww, l(0.000000, 6.000000, 6.000000, 6.000000), l(0.000000, -3.000000, -2.000000, -4.000000)

#line 138
mad_sat r1.yzw, |r1.yyzw|, l(0.000000, 1.000000, -1.000000, -1.000000), l(0.000000, -1.000000, 2.000000, 2.000000)  // r1.y <- <HUEtoRGB_id8 return value>.x; r1.z <- <HUEtoRGB_id8 return value>.y; r1.w <- <HUEtoRGB_id8 return value>.z

#line 152
add r1.yzw, r1.yyzw, l(0.000000, -0.500000, -0.500000, -0.500000)

#line 172
mul r0.w, r1.x, cb0[5].y  // r0.w <- HSL.x

#line 134
frc r0.w, r0.w  // r0.w <- H

#line 137
mad r2.xyz, r0.wwww, l(6.000000, 6.000000, 6.000000, 0.000000), l(-3.000000, -2.000000, -4.000000, 0.000000)

#line 138
mad_sat r2.xyz, |r2.xyzx|, l(1.000000, -1.000000, -1.000000, 0.000000), l(-1.000000, 2.000000, 2.000000, 0.000000)  // r2.x <- <HUEtoRGB_id8 return value>.x; r2.y <- <HUEtoRGB_id8 return value>.y; r2.z <- <HUEtoRGB_id8 return value>.z

#line 152
add r2.xyz, r2.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)

#line 158
mad r0.w, r0.x, l(2.000000), l(-1.000000)
add r0.w, -|r0.w|, l(1.000000)
div r0.y, r0.y, r0.w  // r0.y <- S

#line 169
log r0.y, r0.y
exp r1.x, cb0[5].w
mul r0.y, r0.y, r1.x
exp r0.y, r0.y
mul_sat r0.y, r0.y, cb0[5].z  // r0.y <- h.y

#line 151
mul r0.y, r0.y, r0.w  // r0.y <- C; r0.y <- C

#line 152
mad r2.xyz, r2.xyzx, r0.yyyy, r0.xxxx  // r2.x <- <HSLtoRGB_id10 return value>.x; r2.y <- <HSLtoRGB_id10 return value>.y; r2.z <- <HSLtoRGB_id10 return value>.z; r2.x <- <HSLtoRGB_id10 return value>.x; r2.y <- <HSLtoRGB_id10 return value>.y; r2.z <- <HSLtoRGB_id10 return value>.z
mad r0.xyw, r1.yzyw, r0.yyyy, r0.xxxx  // r0.x <- <HSLtoRGB_id10 return value>.x; r0.y <- <HSLtoRGB_id10 return value>.y; r0.w <- <HSLtoRGB_id10 return value>.z

#line 173
add r1.xyz, -r0.xywx, r2.xyzx
mad r1.w, r0.z, l(-2.000000), l(3.000000)
mul r0.z, r0.z, r0.z
mul r0.z, r0.z, r1.w
mul r0.z, r0.z, r0.z
mad r0.xyz, r0.zzzz, r1.xyzx, r0.xywx  // r0.x <- c.x; r0.y <- c.y; r0.z <- c.z

#line 174
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r1.x, r0.w
sqrt r0.w, r0.w
mul r0.w, r0.w, l(0.577350)
log r0.w, r0.w
mul r0.xyz, r0.xyzx, r1.xxxx
mul r0.xyz, r0.xyzx, l(1.732051, 1.732051, 1.732051, 0.000000)

#line 175
exp r1.xy, cb0[6].xyxx

#line 174
mul r0.w, r0.w, r1.x
exp r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- c.x; r0.y <- c.y; r0.z <- c.z

#line 175
mul o0.xyz, r1.yyyy, r0.xyzx

#line 185
ret 
// Approximately 64 instruction slots used
***************************
*************************/
struct PS_STREAMS 
{
    float2 TexCoord_id62;
    float4 ColorTarget_id2;
};
struct PS_OUTPUT 
{
    float4 ColorTarget_id2 : SV_Target0;
};
struct PS_INPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_STREAMS 
{
    float4 Position_id72;
    float2 TexCoord_id62;
    float4 ShadingPosition_id0;
};
struct VS_OUTPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_INPUT 
{
    float4 Position_id72 : POSITION;
    float2 TexCoord_id62 : TEXCOORD0;
};
cbuffer PerDraw 
{
    float4x4 MatrixTransform_id73;
};
cbuffer Globals 
{
    float2 Texture0TexelSize_id15;
    float2 Texture1TexelSize_id17;
    float2 Texture2TexelSize_id19;
    float2 Texture3TexelSize_id21;
    float2 Texture4TexelSize_id23;
    float2 Texture5TexelSize_id25;
    float2 Texture6TexelSize_id27;
    float2 Texture7TexelSize_id29;
    float2 Texture8TexelSize_id31;
    float2 Texture9TexelSize_id33;
    float Hue_id76 = .0f;
    float HueCycles_id77 = 1.0f;
    float Saturation_id78 = 1.0f;
    float SaturationBalance_id79 = .0f;
    float Contrast_id80 = .0f;
    float Brightness_id81 = .0f;
};
Texture2D Texture0_id14;
Texture2D Texture1_id16;
Texture2D Texture2_id18;
Texture2D Texture3_id20;
Texture2D Texture4_id22;
Texture2D Texture5_id24;
Texture2D Texture6_id26;
Texture2D Texture7_id28;
Texture2D Texture8_id30;
Texture2D Texture9_id32;
TextureCube TextureCube0_id34;
TextureCube TextureCube1_id35;
TextureCube TextureCube2_id36;
TextureCube TextureCube3_id37;
Texture3D Texture3D0_id38;
Texture3D Texture3D1_id39;
Texture3D Texture3D2_id40;
Texture3D Texture3D3_id41;
SamplerState Sampler_id42;
SamplerState PointSampler_id43 
{
    Filter = MIN_MAG_MIP_POINT;
};
SamplerState LinearSampler_id44 
{
    Filter = MIN_MAG_MIP_LINEAR;
};
SamplerState LinearBorderSampler_id45 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Border;
    AddressV = Border;
};
SamplerComparisonState LinearClampCompareLessEqualSampler_id46 
{
    Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
    ComparisonFunc = LessEqual;
};
SamplerState AnisotropicSampler_id47 
{
    Filter = ANISOTROPIC;
};
SamplerState AnisotropicRepeatSampler_id48 
{
    Filter = ANISOTROPIC;
    AddressU = Wrap;
    AddressV = Wrap;
    MaxAnisotropy = 16;
};
SamplerState PointRepeatSampler_id49 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState LinearRepeatSampler_id50 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState RepeatSampler_id51 
{
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState Sampler0_id52;
SamplerState Sampler1_id53;
SamplerState Sampler2_id54;
SamplerState Sampler3_id55;
SamplerState Sampler4_id56;
SamplerState Sampler5_id57;
SamplerState Sampler6_id58;
SamplerState Sampler7_id59;
SamplerState Sampler8_id60;
SamplerState Sampler9_id61;
float3 HUEtoRGB_id8(in float H)
{
    H = frac(H);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    return saturate(float3(R, G, B));
}
float3 RGBtoHCV_id12(in float3 RGB)
{
    float4 P = (RGB.g < RGB.b) ? float4(RGB.bg, -1.0, 2.0 / 3.0) : float4(RGB.gb, 0.0, -1.0 / 3.0);
    float4 Q = (RGB.r < P.x) ? float4(P.xyw, RGB.r) : float4(RGB.r, P.yzx);
    float C = Q.x - min(Q.w, Q.y);
    float H = abs((Q.w - Q.y) / (6 * C + 0.0000000596) + Q.z);
    return float3(H, C, Q.x);
}
float3 HSLtoRGB_id10(in float3 HSL)
{
    float3 RGB = HUEtoRGB_id8(HSL.x);
    float C = (1 - abs(2 * HSL.z - 1)) * HSL.y;
    return (RGB - 0.5) * C + HSL.z;
}
float3 RGBtoHSL_id13(in float3 RGB)
{
    float3 HCV = RGBtoHCV_id12(RGB);
    float L = HCV.z - HCV.y * 0.5;
    float S = HCV.y / (1 - abs(L * 2 - 1) + 0.0000000596);
    return float3(HCV.x, S, L);
}
float4 InTex_id17(inout PS_STREAMS streams)
{
    return Texture0_id14.SampleLevel(LinearSampler_id44, streams.TexCoord_id62, 0);
}
float4 Shading_id20(inout PS_STREAMS streams)
{
    float4 c = InTex_id17(streams);
    float3 h = RGBtoHSL_id13(c.rgb);
    h.y = pow(h.y, pow(2, SaturationBalance_id79)) * Saturation_id78;
    h.y = saturate(h.y);
    float3 k0 = HSLtoRGB_id10(float3((frac(h.x + Hue_id76) - 0) * HueCycles_id77, h.y, h.z));
    float3 k1 = HSLtoRGB_id10(float3((frac(h.x + Hue_id76) - 1) * HueCycles_id77, h.y, h.z));
    c.rgb = lerp(k0, k1, pow(smoothstep(0, 1, h.x), 2));
    c.rgb = normalize(c.rgb) * sqrt(3) * pow(length(c.rgb) / sqrt(3), pow(2, Contrast_id80));
    c.rgb *= pow(2, Brightness_id81);
    return c;
}
PS_OUTPUT PSMain(PS_INPUT __input__)
{
    PS_STREAMS streams = (PS_STREAMS)0;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ColorTarget_id2 = Shading_id20(streams);
    PS_OUTPUT __output__ = (PS_OUTPUT)0;
    __output__.ColorTarget_id2 = streams.ColorTarget_id2;
    return __output__;
}
VS_OUTPUT VSMain(VS_INPUT __input__)
{
    VS_STREAMS streams = (VS_STREAMS)0;
    streams.Position_id72 = __input__.Position_id72;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ShadingPosition_id0 = mul(streams.Position_id72, MatrixTransform_id73);
    VS_OUTPUT __output__ = (VS_OUTPUT)0;
    __output__.ShadingPosition_id0 = streams.ShadingPosition_id0;
    __output__.TexCoord_id62 = streams.TexCoord_id62;
    return __output__;
}
