<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VL.UI.Core</name>
    </assembly>
    <members>
        <member name="M:VL.Lib.ColorMath.ColorConversions.SRGBToRGB(Stride.Core.Mathematics.Color4)">
            <summary>
            Converts sRGB color values to RGB color values.
            </summary>
            <returns>
            Returns the converted color value.
            </returns>
            <param name="srgb">
            Color value to convert in sRGB.
            </param>
        </member>
        <member name="M:VL.Lib.ColorMath.ColorConversions.RGBToSRGB(Stride.Core.Mathematics.Color4)">
            <summary>
            Converts RGB color values to sRGB color values.
            </summary>
            <returns>
            Returns the converted color value.
            </returns>
            <param name="rgb">Color value to convert.</param>
        </member>
        <member name="M:VL.Lib.ColorMath.ColorConversions.FromHSL(Stride.Core.Mathematics.Vector4)">
            <summary>
            Converts HSL color values to RGB color values.
            </summary>
            <returns>
            Returns the converted color value.
            </returns>
            <param name="hsl">
            Color value to convert in hue, saturation, lightness (HSL).
            The X element is Hue (H), the Y element is Saturation (S), the Z element is Lightness (L), and the W element is Alpha (which is copied to the output's Alpha value).
            Each has a range of 0.0 to 1.0.
            </param>
        </member>
        <member name="M:VL.Lib.ColorMath.ColorConversions.ToHSL(Stride.Core.Mathematics.Color4)">
            <summary>
            Converts RGB color values to HSL color values.
            </summary>
            <returns>
            Returns the converted color value.
            The X element is Hue (H), the Y element is Saturation (S), the Z element is Lightness (L), and the W element is Alpha (a copy of the input's Alpha value).
            Each has a range of 0.0 to 1.0.
            </returns>
            <param name="rgb">Color value to convert.</param>
        </member>
        <member name="M:VL.Lib.ColorMath.ColorConversions.FromHSV(Stride.Core.Mathematics.Vector4)">
            <summary>
            Converts HSV color values to RGB color values.
            </summary>
            <returns>
            Returns the converted color value.
            </returns>
            <param name="hsv">
            Color value to convert in hue, saturation, value (HSV).
            The X element is Hue (H), the Y element is Saturation (S), the Z element is Value (V), and the W element is Alpha (which is copied to the output's Alpha value).
            Each has a range of 0.0 to 1.0.
            </param>
        </member>
        <member name="M:VL.Lib.ColorMath.ColorConversions.ToHSV(Stride.Core.Mathematics.Color4)">
            <summary>
            Converts RGB color values to HSV color values.
            </summary>
            <returns>
            Returns the converted color value.
            The X element is Hue (H), the Y element is Saturation (S), the Z element is Value (V), and the W element is Alpha (a copy of the input's Alpha value).
            Each has a range of 0.0 to 1.0.
            </returns>
            <param name="rgb">Color value to convert.</param>
        </member>
        <member name="M:VL.Lib.ColorMath.ColorConversions.FromXYZ(Stride.Core.Mathematics.Vector4)">
            <summary>
            Converts XYZ color values to RGB color values.
            </summary>
            <returns>
            Returns the converted color value.
            </returns>
            <param name="xyz">
            Color value to convert with the trisimulus values of X, Y, and Z in the corresponding element, and the W element with Alpha (which is copied to the output's Alpha value).
            Each has a range of 0.0 to 1.0.
            </param>
            <remarks>Uses the CIE XYZ colorspace.</remarks>
        </member>
        <member name="M:VL.Lib.ColorMath.ColorConversions.ToXYZ(Stride.Core.Mathematics.Color4)">
            <summary>
            Converts RGB color values to XYZ color values.
            </summary>
            <returns>
            Returns the converted color value with the trisimulus values of X, Y, and Z in the corresponding element, and the W element with Alpha (a copy of the input's Alpha value).
            Each has a range of 0.0 to 1.0.
            </returns>
            <param name="rgb">Color value to convert.</param>
            <remarks>Uses the CIE XYZ colorspace.</remarks>
        </member>
        <member name="M:VL.Lib.ColorMath.ColorConversions.FromYUV(Stride.Core.Mathematics.Vector4)">
            <summary>
            Converts YCbCr color values to RGB color values.
            </summary>
            <returns>
            Returns the converted color value.
            </returns>
            <param name="yuv">
            Color value to convert in Luma-Chrominance (YCbCr) aka YUV.
            The X element contains Luma (Y, 0.0 to 1.0), the Y element contains Blue-difference chroma (U, -0.5 to 0.5), the Z element contains the R-difference chroma (V, -0.5 to 0.5), and the W element contains the Alpha (which is copied to the output's Alpha value).
            </param>
            <remarks>Converts using ITU-R BT.601/CCIR 601 W(r) = 0.299 W(b) = 0.114 U(max) = 0.436 V(max) = 0.615.</remarks>
        </member>
        <member name="M:VL.Lib.ColorMath.ColorConversions.ToYUV(Stride.Core.Mathematics.Color4)">
            <summary>
            Converts RGB color values to YUV color values.
            </summary>
            <returns>
            Returns the converted color value in Luma-Chrominance (YCbCr) aka YUV.
            The X element contains Luma (Y, 0.0 to 1.0), the Y element contains Blue-difference chroma (U, -0.5 to 0.5), the Z element contains the R-difference chroma (V, -0.5 to 0.5), and the W element contains the Alpha (a copy of the input's Alpha value).
            Each has a range of 0.0 to 1.0.
            </returns>
            <param name="rgb">Color value to convert.</param>
            <remarks>Converts using ITU-R BT.601/CCIR 601 W(r) = 0.299 W(b) = 0.114 U(max) = 0.436 V(max) = 0.615.</remarks>
        </member>
        <member name="M:VL.Lib.ColorMath.ColorConversions.FromHCY(Stride.Core.Mathematics.Vector4)">
            <summary>
            Converts HCY color values to RGB color values.
            </summary>
            <returns>
            Returns the converted color value.
            </returns>
            <param name="hcy">
            Color value to convert in hue, chroma, luminance (HCY).
            The X element is Hue (H), the Y element is Chroma (C), the Z element is luminance (Y), and the W element is Alpha (which is copied to the output's Alpha value).
            Each has a range of 0.0 to 1.0.
            </param>
        </member>
        <member name="M:VL.Lib.ColorMath.ColorConversions.ToHCY(Stride.Core.Mathematics.Color4)">
            <summary>
            Converts RGB color values to HCY color values.
            </summary>
            <returns>
            Returns the converted color value.
            The X element is Hue (H), the Y element is Chroma (C), the Z element is luminance (Y), and the W element is Alpha (a copy of the input's Alpha value).
            Each has a range of 0.0 to 1.0.
            </returns>
            <param name="rgb">Color value to convert.</param>
        </member>
        <member name="P:VL.Lib.IO.Mouse.PressedButtons">
            <summary>
            The currently pressed mouse buttons.
            </summary>
        </member>
        <member name="T:VL.Lib.IO.IProjectionSpace">
            <summary>
            Implement this interface on your gui plugin if this has a notion of a projection space.
            You can use the aspect ratio of your window or viewport to do the math or have an explicit aspect ratio transform input.
            </summary>
        </member>
        <member name="M:VL.Lib.IO.IProjectionSpace.MapFromPixels(VL.Lib.IO.Notifications.INotificationWithPosition,Stride.Core.Mathematics.Vector2@,Stride.Core.Mathematics.Vector2@)">
            <summary>
            Transforms a position in pixels into 
            * a position in normalized projection space ((bottom, left = -1, -1) .. (top, right = 1, 1)) 
            * a position in projection space (typically one that respects the aspect ratio of the window)
            so you might need to "undo" the last 2 or 3 transformations in that chain:
                        World T.          View T.          Proj T.          AspectR. T.           Crop T.        Viewport Placement
            Object Space  -->  World Space  -->  View Space  -->  PROJ SPACE  -->  NORM PROJ SPACE  -->  Viewport Space  -->  Pixel Space
            </summary>
        </member>
        <member name="T:VL.Lib.IO.IWorldSpace2d">
            <summary>
            Implement this to support the "Position in World" of several input device nodes.
            It is supposed to give you a position in the same space that gets used by placing primitives.
            World space can be defined in different ways for a node set:
            * undoing the camera transformation gets a position from projection space to world space
            * undoing all downstream transformations (that a module can't be aware of) - like a camera transfomation - is taking you to world space
            </summary>
        </member>
        <member name="T:VL.UI.Core.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:VL.UI.Core.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:VL.UI.Core.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:VL.UI.Core.Properties.Resources._160420_vlSplashScreen_1_background3">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:VL.UI.Core.Settings">
            <summary>
            Global HDE settings
            </summary>
        </member>
        <member name="P:VL.UI.Core.Settings.DefaultStylesheet">
            <summary>
            Used by <see cref="T:VL.Core.Viewer.Styles"/> class to compute final stylesheet. Usual values are either "dark.css" or "light.css".
            </summary>
        </member>
        <member name="P:VL.UI.Core.Settings.NodeShowImplementationIcon">
            <summary>
            Show the icon for a nodes implementation (patch/code) even for nodes that are not in the &quot;Main&quot; namespace
            </summary>
        </member>
        <member name="P:VL.UI.Core.Settings.RuntimeSupport">
            <summary>
            When enabled values as well as timing information can be inspected at runtime. Has minor impact on performance however.
            </summary>
        </member>
        <member name="P:VL.UI.Core.Settings.TooltipShowDocumentation">
            <summary>
            Display code documentation 
            </summary>
        </member>
        <member name="P:VL.UI.Core.Settings.TooltipShowLocalID">
            <summary>
            Display an items localID
            </summary>
        </member>
        <member name="P:VL.UI.Core.Settings.TooltipShowOperation">
            <summary>
            Display the Operation an item is part of 
            </summary>
        </member>
        <member name="P:VL.UI.Core.Settings.MouseWheelZooms">
            <summary>
            Mouse wheel zooms, + ALT pans vertically, + SHIFT pans horizontally. Otherwise mouse wheel pans vertically, + CTRL zooms
            </summary>
        </member>
        <member name="P:VL.UI.Core.Settings.RuntimeDisableJITOptimizations">
            <summary>
            Disables JIT optimizations for dynamically emitted assemblies. Should a runtime exception occur the nodes colored red should always match the stack trace.
            </summary>
        </member>
        <member name="T:VL.Core.Viewer.Constants">
            <summary>
            UI constants.
            </summary>
        </member>
        <member name="T:VL.Core.Viewer.Dialogs">
            <summary>
            Texts for Dialogs.
            1) Tell the user what happened
            2) Explain to them why it is a problem
            3) Suggest what they can do to fix it
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.VMouseEventArgs.Location">
            <summary>
            Location in view Space, relative to the control (ie. where topleft 0/0 corresponds to the Controls 0/0)
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.VMouseEventArgs.WorldLocation">
            <summary>
            Location in canvas space, corrected for zoom and pan
            </summary>
        </member>
        <member name="T:VL.Core.Viewer.IMouseEventHandler">
            <summary>
            Mouse event handler interface
            </summary>
        </member>
        <member name="T:VL.Core.Viewer.IKeyEventHandler">
            <summary>
            Keyboard event handler interface
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.EndWith(VL.Core.Viewer.IMouseEventHandler,System.Action{VL.Core.Viewer.VMouseEventArgs})">
            <summary>
            Calls the given action once this handler returned null.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.ContinueWith(VL.Core.Viewer.IMouseEventHandler,VL.Core.Viewer.IMouseEventHandler)">
            <summary>
            Creates a handler which will be returned once this handler returned null.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.ContinueWith(VL.Core.Viewer.IMouseEventHandler,System.Func{VL.Core.Viewer.VMouseEventArgs,VL.Core.Viewer.IMouseEventHandler})">
            <summary>
            Creates a handler which will be returned and called once this handler returned null.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.InParallelWith(VL.Core.Viewer.IMouseEventHandler,VL.Core.Viewer.IMouseEventHandler)">
            <summary>
            Creates a handler which runs both this and the given handler in parallel.
            As soon as one of them returns null the other one will be returned.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.Repeat(System.Func{VL.Core.Viewer.IMouseEventHandler})">
            <summary>
            Creates a handler which will repeat the handler acquired through the given factory method.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.AsLongAs(VL.Core.Viewer.IMouseEventHandler,System.Func{System.Boolean})">
            <summary>
            Creates a handler which will be alive as long as the given condition returns true.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.OnDown(System.Func{VL.Core.Viewer.VMouseEventArgs,VL.Core.Viewer.IMouseEventHandler})">
            <summary>
            Creates a handler which will call the given continuation once a mouse down was observed.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.OnMove(System.Func{VL.Core.Viewer.VMouseEventArgs,VL.Core.Viewer.IMouseEventHandler})">
            <summary>
            Creates a handler which will call the given continuation once a mouse move was observed.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.OnUp(System.Func{VL.Core.Viewer.VMouseEventArgs,VL.Core.Viewer.IMouseEventHandler})">
            <summary>
            Creates a handler which will call the given continuation once a mouse up was observed.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.OnWheel(System.Func{VL.Core.Viewer.VMouseEventArgs,VL.Core.Viewer.IMouseEventHandler})">
            <summary>
            Creates a handler which will call the given continuation once a mouse wheel change was observed.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.WhileAny(System.Func{VL.Core.Viewer.IMouseEventHandler,VL.Core.Viewer.VMouseEventArgs,VL.Core.Viewer.IMouseEventHandler})">
            <summary>
            Creates a handler which will call the given continuation as long as any mouse actions are observed.
            In order to stay in the loop the continuation needs to return the given handler.
            In order to exit the loop the continuation needs to return null.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.WhileMove(System.Func{VL.Core.Viewer.IMouseEventHandler,VL.Core.Viewer.VMouseEventArgs,VL.Core.Viewer.IMouseEventHandler})">
            <summary>
            Creates a handler which will call the given continuation as long as mouse moves are observed.
            In order to stay in the move loop the continuation needs to return the given handler.
            In order to exit the move loop the continuation needs to return null.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.OnClick(System.Func{VL.Core.Viewer.VMouseEventArgs,VL.Core.Viewer.IMouseEventHandler})">
            <summary>
            Creates a handler which will call the given continuation once a mouse click was observed.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.OnDoubleClick(System.Func{VL.Core.Viewer.VMouseEventArgs,VL.Core.Viewer.IMouseEventHandler})">
            <summary>
            Creates a handler which will call the given continuation once a mouse double click was observed.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.OnDragStart(System.Func{VL.Core.Viewer.VMouseEventArgs,VL.Core.Viewer.IMouseEventHandler})">
            <summary>
            Creates a handler which will call the given continuation once the start of a mouse drag was observed.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.Drag(System.Action{VL.Core.Viewer.VMouseEventArgs,System.Drawing.PointF})">
            <summary>
            Creates a handler which will call the given action as long as the mouse moves. 
            Use together with OnDragStart and EndWith in order to setup proper initialization and finalization code.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.Select(VL.Core.Viewer.VMouseEventArgs,System.Action{VL.Core.Viewer.VMouseEventArgs,System.Drawing.RectangleF})">
            <summary>
            Creates a handler which will call the given action as long as the mouse moves.
            Use together with OnDragStart and EndWith in order to setup proper initialization and finalization code.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.ForeachWheel(System.Action{VL.Core.Viewer.VMouseEventArgs})">
            <summary>
            Creates a handler which reacts to each mouse wheel event.
            </summary>
            <remarks>
            To abort the handler use <see cref="M:VL.Core.Viewer.Handler.AsLongAs(VL.Core.Viewer.IMouseEventHandler,System.Func{System.Boolean})"/>.
            </remarks>
        </member>
        <member name="M:VL.Core.Viewer.Handler.ForeachClick(System.Action{VL.Core.Viewer.VMouseEventArgs})">
            <summary>
            Creates a handler which reacts to each mouse click event.
            </summary>
            <remarks>
            To abort the handler use <see cref="M:VL.Core.Viewer.Handler.AsLongAs(VL.Core.Viewer.IMouseEventHandler,System.Func{System.Boolean})"/>.
            </remarks>
        </member>
        <member name="M:VL.Core.Viewer.Handler.ForeachDrag(System.Func{VL.Core.Viewer.VMouseEventArgs,System.Action{VL.Core.Viewer.VMouseEventArgs,System.Drawing.PointF}})">
            <summary>
            Creates a handler which reacts to each mouse drag event.
            </summary>
            <remarks>
            To abort the handler use <see cref="M:VL.Core.Viewer.Handler.AsLongAs(VL.Core.Viewer.IMouseEventHandler,System.Func{System.Boolean})"/>.
            </remarks>
        </member>
        <member name="M:VL.Core.Viewer.Extensions.IsHandlerOfType``1(VL.Core.Viewer.IMouseEventHandler)">
            <summary>
            Determines whether the handler or any of the parallel handlers is of the given type,
            checks parallel handlers recursively
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Extensions.CallRecursively(VL.Core.Viewer.IMouseEventHandler,System.Func{VL.Core.Viewer.IMouseEventHandler,VL.Core.Viewer.IMouseEventHandler})">
            <summary>
            Calls a handler function recursively on a handler, paralell handlers and continuation handler 
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.ICanvas.FrameRoot">
            <summary>
            The root element to add frames.
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.ICanvas.RegionRoot">
            <summary>
            The root element to add regions.
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.ICanvas.SolidRoot">
            <summary>
            The root element to add graph elements.
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.ICanvas.LinkRoot">
            <summary>
            The root element to add links.
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.ICanvas.FrameViewsRoot">
            <summary>
            The root element to add frames in viewspace.
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.ICanvas.OverlayRoot">
            <summary>
            The root element to add overlays.
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.ICanvas.Color">
            <summary>
            Get/Set the background color of the canvas
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.ICanvas.Camera">
            <summary>
            Get the camera matrix, use PanCamera or ZoomCamera to change the view matrix
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.ICanvas.OverlayCamera">
            <summary>
            Get the overlaycamera matrix, use ZoomOverlay to change the view matrix
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.GraphicalEditor.ICanvas.PanCamera(System.Drawing.PointF)">
            <summary>
            Pans the camera by the given delta
            </summary>
            <param name="delta">Offset in canvas coordinate system</param>
        </member>
        <member name="M:VL.Core.Viewer.GraphicalEditor.ICanvas.PanTo(System.Drawing.PointF)">
            <summary>
            Pans the canvas to the given point
            </summary>
            <param name="target">Target in canvas coordinate system</param>
        </member>
        <member name="M:VL.Core.Viewer.GraphicalEditor.ICanvas.ZoomCamera(System.Single,System.Drawing.PointF)">
            <summary>
            Scales the camera by the given scale factor around a center
            </summary>
            <param name="scale">scale factor, relative to previous scaling</param>
            <param name="scaleCenter">center of scaling in canvas coordinate system</param>
        </member>
        <member name="M:VL.Core.Viewer.GraphicalEditor.ICanvas.ZoomTo(System.Single,System.Drawing.PointF)">
            <summary>
            Sets the camera zoom factor to the given value
            </summary>
            <param name="zoom">absolut zoom factor</param>
            <param name="target">center of zoom in canvas coordinate system</param>
        </member>
        <member name="M:VL.Core.Viewer.GraphicalEditor.ICanvas.ZoomOverlay(System.Single)">
            <summary>
            Applies a scaling factor to the overlay layer
            </summary>
            <param name="scale">scale factor, relative to previous scaling</param>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.ICanvas.ZoomFactor">
            <summary>
            Gets the actual zoomfactor of the camera
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.GraphicalEditor.ICanvas.Clear">
            <summary>
            Remove all graph elements from the canvas
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.GraphicalEditor.ICanvas.Draw(System.Boolean)">
            <summary>
            Redraws the dirty regions of the canvas.
            </summary>
            <param name="force">Forces an immediate redraw</param>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.ICanvas.ParentHandle">
            <summary>
            Window Handle of the Control hosting the canvas
            </summary>
        </member>
        <member name="T:VL.Core.Viewer.GraphicalEditor.TextMode">
            <summary>
            Default: text is drawn as is, hard clipped at Size bounds
            Wordwrap: text is wordwrapped at Size.Width and hard clipped at Size.Height
            EndEllipsis: text is drawn as is, showing ellipsis for lines exceeding Size.Width and hard clipped at Size.Height
            PathEllipsis: text is drawn as is, showing path-ellipsis for lines exceeding Size.Width and hard clipped at Size.Height
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.IText.LineHeight">
            <summary>
            Returns the line height of the given font
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.IText.Size">
            <summary>
            Text is clipped to the given size. Reading Size does not reflect the TextExtents
            If no Size is given, Text is drawn as is
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.IText.TextMode">
            <summary>
            Works in connection with Size. For Modes Wordwrap, EndEllipsis and PathEllipsis Size.Width is taken into account
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.IText.CaptionExtents">
            <summary>
            Extents of the caption text only influenced by Font, but not TextMode and Size
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.IText.CaptionLineCount">
            <summary>
            Number of lines in caption text, not influenced by wrapping via Textmode and Size
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.GraphicalEditor.IText.GetHeightOfTextWrappedAtWidth(System.Single)">
            <summary>
            Returns the height of the text it would need if wrapped at the given width
            </summary>
            <returns></returns>
        </member>
        <member name="T:VL.Core.Viewer.Icons">
            <summary>
            UI icons.
            </summary>
        </member>
        <member name="T:VL.Core.Viewer.ILabelEditor">
            <summary>
            Description of ILabelEditor.
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.ISelectionProvider.CurrentSelection">
            <summary>
            The current selection.
            </summary>
        </member>
        <member name="E:VL.Core.Viewer.ISelectionProvider.SelectionChanged">
            <summary>
            Fired if current selection changed.
            </summary>
        </member>
        <member name="T:VL.Core.Viewer.ISelectionService">
            <summary>
            Gives clients the ability to get or set the current selection provider
            of the application and get notified if the selection provider of the
            application changed.
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.ISelectionService.SelectionProvider">
            <summary>
            The current selection provider.
            </summary>
        </member>
        <member name="E:VL.Core.Viewer.ISelectionService.SelectionProviderChanged">
            <summary>
            Raised if the current selection provider changed.
            </summary>
        </member>
        <member name="E:VL.Core.Viewer.ISelectionService.CurrentProviderSelectionChanged">
            <summary>
            Fired if current selection of current selectionprovider changed.
            </summary>
        </member>
        <member name="T:VL.Core.Viewer.IViewer">
            <summary>
            Base interface for all viewers.
            Allows a consumer to set and retrieve the model displayed by this viewer.
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.IViewer.Model">
            <summary>
            Gets or sets the model displayed by this viewer.
            </summary>
        </member>
        <member name="T:VL.Core.Viewer.IViewerService">
            <summary>
            Provides the ability to get or set the active viewer of the application
            and get notified if the active viewer of the application changed.
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.IViewerService.ActiveViewer">
            <summary>
            Gets or sets the active viewer of the application.
            </summary>
        </member>
        <member name="E:VL.Core.Viewer.IViewerService.ActiveViewerChanged">
            <summary>
            Raised if the active viewer of the application changed.
            </summary>
        </member>
        <member name="T:VL.Core.Viewer.SelectionService">
            <summary>
            Default implementation of ISelectionService.
            </summary>
        </member>
        <member name="T:VL.Core.Viewer.Shortcuts">
            <summary>
            Description of Shortcuts.
            </summary>
        </member>
        <member name="T:VL.Core.Viewer.Shortcuts.MapVirtualKeyMapTypes">
            <summary>
            The set of valid MapTypes used in MapVirtualKey
            </summary>
        </member>
        <member name="F:VL.Core.Viewer.Shortcuts.MapVirtualKeyMapTypes.MAPVK_VK_TO_VSC">
            <summary>
            uCode is a virtual-key code and is translated into a scan code.
            If it is a virtual-key code that does not distinguish between left- and
            right-hand keys, the left-hand scan code is returned.
            If there is no translation, the function returns 0.
            </summary>
        </member>
        <member name="F:VL.Core.Viewer.Shortcuts.MapVirtualKeyMapTypes.MAPVK_VSC_TO_VK">
            <summary>
            uCode is a scan code and is translated into a virtual-key code that
            does not distinguish between left- and right-hand keys. If there is no
            translation, the function returns 0.
            </summary>
        </member>
        <member name="F:VL.Core.Viewer.Shortcuts.MapVirtualKeyMapTypes.MAPVK_VK_TO_CHAR">
            <summary>
            uCode is a virtual-key code and is translated into an unshifted
            character value in the low-order word of the return value. Dead keys (diacritics)
            are indicated by setting the top bit of the return value. If there is no
            translation, the function returns 0.
            </summary>
        </member>
        <member name="F:VL.Core.Viewer.Shortcuts.MapVirtualKeyMapTypes.MAPVK_VSC_TO_VK_EX">
            <summary>
            Windows NT/2000/XP: uCode is a scan code and is translated into a
            virtual-key code that distinguishes between left- and right-hand keys. If
            there is no translation, the function returns 0.
            </summary>
        </member>
        <member name="F:VL.Core.Viewer.Shortcuts.MapVirtualKeyMapTypes.MAPVK_VK_TO_VSC_EX">
            <summary>
            Not currently documented
            </summary>
        </member>
        <member name="T:VL.Core.Viewer.Tooltips">
            <summary>
            Texts for Tooltips of visual elements.
            </summary>
        </member>
        <member name="T:VL.Core.Viewer.ViewerService">
            <summary>
            Default implementation of the viewer service.
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.ViewerService.ActiveViewer">
            <summary>
            Gets or sets the active viewer of the application.
            </summary>
        </member>
        <member name="E:VL.Core.Viewer.ViewerService.ActiveViewerChanged">
            <summary>
            Raised if the active viewer of the application changed.
            </summary>
        </member>
        <member name="T:VL.Core.View.IDecoratable">
            <summary>
            Provides decorations.
            </summary>		
        </member>
        <member name="T:VL.Core.View.IDraggable">
            <summary>
            Participates in a drag of a Drag'n Drop operation.
            </summary>
        </member>
        <member name="T:VL.Core.View.IDroppable">
            <summary>
            Participates in a drop of a Drag'n Drop Operation.
            </summary>
        </member>
        <member name="T:System.Drawing.FontExtentions">
            <summary>
            Calculate exact sizes of strings
            </summary>
        </member>
        <member name="M:System.Drawing.FontExtentions.GetAscentPixels(System.Drawing.Font)">
            <summary>
            Calculates the ascent in pixels of this font
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:System.Drawing.FontExtentions.GetDescentPixels(System.Drawing.Font)">
            <summary>
            Calculates the descent in pixels of this font
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:System.Drawing.FontExtentions.GetLineSpacingPixels(System.Drawing.Font)">
            <summary>
            Calculates the distance from base line to base line of this font
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:System.Drawing.FontExtentions.GetCellHeightPixels(System.Drawing.Font)">
            <summary>
            Calculates the maximum height in pixels of this font
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
    </members>
</doc>
