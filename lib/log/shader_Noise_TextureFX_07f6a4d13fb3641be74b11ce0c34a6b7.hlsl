/**************************
***** Compiler Parameters *****
***************************
@P EffectName: Noise_TextureFX
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerDraw [Size: 64]
@C    MatrixTransform_id73 => SpriteBase.MatrixTransform
cbuffer Globals [Size: 96]
@C    Texture0TexelSize_id15 => Texturing.Texture0TexelSize
@C    Texture1TexelSize_id17 => Texturing.Texture1TexelSize
@C    Texture2TexelSize_id19 => Texturing.Texture2TexelSize
@C    Texture3TexelSize_id21 => Texturing.Texture3TexelSize
@C    Texture4TexelSize_id23 => Texturing.Texture4TexelSize
@C    Texture5TexelSize_id25 => Texturing.Texture5TexelSize
@C    Texture6TexelSize_id27 => Texturing.Texture6TexelSize
@C    Texture7TexelSize_id29 => Texturing.Texture7TexelSize
@C    Texture8TexelSize_id31 => Texturing.Texture8TexelSize
@C    Texture9TexelSize_id33 => Texturing.Texture9TexelSize
@C    Scale_id76 => Noise_TextureFX.Scale
@C    Offset_id77 => Noise_TextureFX.Offset
@C    NoiseType_id78 => Noise_TextureFX.NoiseType
***************************
******  Resources    ******
***************************
@R    PerDraw => PerDraw [Stage: Vertex, Slot: (0-0)]
@R    Globals => Globals [Stage: Pixel, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    Noise_TextureFX => 84159e23fd48ecb7e6583fa370aafc7d
@S    TextureFX => 733e12e1d7dcba0a71c11dec4224f6a1
@S    ImageEffectShader => 9b7cefba2dd674808bc791525995b495
@S    SpriteBase => 67b12f03dd9d34e76b6fcfb517afba8c
@S    ShaderBase => 01e372056ff6c06edab8e988414a8f75
@S    ShaderBaseStream => 91c0ea8aae0a45ca00578a4084fa3607
@S    Texturing => 6605f68230266eff2bc8b4e8102ede6b
@S    ShaderUtils => 322a94f64a804439ad8484ffa917bb03
@S    HappyNoise => 0cdacd2d558b31367abe5bc87b02b3dd
@S    HappyCalc => 80c632edb90a7d1b41a5d390889d19c2
***************************
*****     Stages      *****
***************************
@G    Vertex => 79eb7ff071584feaa45b858a38e87b6a
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerDraw
// {
//
//   float4x4 MatrixTransform_id73;     // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PerDraw                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
//
// Initial variable locations:
//   v0.x <- __input__.Position_id72.x; v0.y <- __input__.Position_id72.y; v0.z <- __input__.Position_id72.z; v0.w <- __input__.Position_id72.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o1.x <- <VSMain return value>.TexCoord_id62.x; o1.y <- <VSMain return value>.TexCoord_id62.y; 
//   o0.x <- <VSMain return value>.ShadingPosition_id0.x; o0.y <- <VSMain return value>.ShadingPosition_id0.y; o0.z <- <VSMain return value>.ShadingPosition_id0.z; o0.w <- <VSMain return value>.ShadingPosition_id0.w
//
#line 347 "C:\Users\benox\Documents\vvvv\gamma\Exports\VVVVarkle\lib\log\shader_Noise_TextureFX_07f6a4d13fb3641be74b11ce0c34a6b7.hlsl"
dp4 o0.x, v0.xyzw, cb0[0].xyzw
dp4 o0.y, v0.xyzw, cb0[1].xyzw
dp4 o0.z, v0.xyzw, cb0[2].xyzw
dp4 o0.w, v0.xyzw, cb0[3].xyzw

#line 351
mov o1.xy, v1.xyxx
ret 
// Approximately 6 instruction slots used
@G    Pixel => 95b6d6cb5023523529944addafb2e3d7
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Globals
// {
//
//   float2 Texture0TexelSize_id15;     // Offset:    0 Size:     8 [unused]
//   float2 Texture1TexelSize_id17;     // Offset:    8 Size:     8 [unused]
//   float2 Texture2TexelSize_id19;     // Offset:   16 Size:     8 [unused]
//   float2 Texture3TexelSize_id21;     // Offset:   24 Size:     8 [unused]
//   float2 Texture4TexelSize_id23;     // Offset:   32 Size:     8 [unused]
//   float2 Texture5TexelSize_id25;     // Offset:   40 Size:     8 [unused]
//   float2 Texture6TexelSize_id27;     // Offset:   48 Size:     8 [unused]
//   float2 Texture7TexelSize_id29;     // Offset:   56 Size:     8 [unused]
//   float2 Texture8TexelSize_id31;     // Offset:   64 Size:     8 [unused]
//   float2 Texture9TexelSize_id33;     // Offset:   72 Size:     8 [unused]
//   float Scale_id76;                  // Offset:   80 Size:     4
//      = 0x3f800000 
//   float2 Offset_id77;                // Offset:   84 Size:     8
//   int NoiseType_id78;                // Offset:   92 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// Globals                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[6], immediateIndexed
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 8
//
// Initial variable locations:
//   o0.x <- <Shading_id20 return value>.x; o0.y <- <Shading_id20 return value>.y; o0.z <- <Shading_id20 return value>.z; o0.w <- <Shading_id20 return value>.w; 
//   v0.x <- __input__.ShadingPosition_id0.x; v0.y <- __input__.ShadingPosition_id0.y; v0.z <- __input__.ShadingPosition_id0.z; v0.w <- __input__.ShadingPosition_id0.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y
//
#line 314 "C:\Users\benox\Documents\vvvv\gamma\Exports\VVVVarkle\lib\log\shader_Noise_TextureFX_07f6a4d13fb3641be74b11ce0c34a6b7.hlsl"
if_z cb0[5].w

#line 315
  add r0.xyzw, v1.xyxy, cb0[5].yzyz
  div r0.xyzw, r0.xyzw, cb0[5].xxxx

#line 131
  round_ni r1.xy, r0.zwzz  // r1.x <- Pi.x; r1.y <- Pi.y

#line 132
  add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
  add r0.xyzw, r0.xyzw, -r1.xyzw  // r0.x <- Pf_Pfmin1.x; r0.y <- Pf_Pfmin1.y; r0.z <- Pf_Pfmin1.z; r0.w <- Pf_Pfmin1.w

#line 134
  mul r2.xyzw, r1.xyzw, l(0.014085, 0.014085, 0.014085, 0.014085)
  round_ni r2.xyzw, r2.xyzw
  mad r1.xyzw, -r2.xyzw, l(71.000000, 71.000000, 71.000000, 71.000000), r1.xyzw  // r1.x <- Pt.x; r1.y <- Pt.y; r1.z <- Pt.z; r1.w <- Pt.w

#line 135
  add r1.xyzw, r1.xyzw, l(26.000000, 161.000000, 26.000000, 161.000000)

#line 136
  mul r1.xyzw, r1.xyzw, r1.xyzw

#line 137
  mul r1.xyzw, r1.yyww, r1.xzxz

#line 138
  mul r2.xyzw, r1.xyzw, l(0.001051, 0.001051, 0.001051, 0.001051)
  frc r2.xyzw, r2.xyzw  // r2.x <- hash_x.x; r2.y <- hash_x.y; r2.z <- hash_x.z; r2.w <- hash_x.w

#line 139
  mul r1.xyzw, r1.xyzw, l(0.001555, 0.001555, 0.001555, 0.001555)
  frc r1.xyzw, r1.xyzw  // r1.x <- hash_y.x; r1.y <- hash_y.y; r1.z <- hash_y.z; r1.w <- hash_y.w

#line 140
  add r2.xyzw, r2.xyzw, l(-0.499990, -0.499990, -0.499990, -0.499990)  // r2.x <- grad_x.x; r2.y <- grad_x.y; r2.z <- grad_x.z; r2.w <- grad_x.w

#line 141
  add r1.xyzw, r1.xyzw, l(-0.499990, -0.499990, -0.499990, -0.499990)  // r1.x <- grad_y.x; r1.y <- grad_y.y; r1.z <- grad_y.z; r1.w <- grad_y.w

#line 142
  mul r3.xyzw, r1.xyzw, r1.xyzw
  mad r3.xyzw, r2.xyzw, r2.xyzw, r3.xyzw
  rsq r3.xyzw, r3.xyzw
  mul r1.xyzw, r0.yyww, r1.xyzw
  mad r1.xyzw, r2.xyzw, r0.xzxz, r1.xyzw
  mul r1.xyzw, r1.xyzw, r3.xyzw  // r1.x <- grad_results.x; r1.y <- grad_results.y; r1.z <- grad_results.z; r1.w <- grad_results.w

#line 143
  mul r1.xyzw, r1.xyzw, l(1.414214, 1.414214, 1.414214, 1.414214)

#line 144
  mul r0.zw, r0.xxxy, r0.xxxy
  mul r0.zw, r0.xxxy, r0.zzzw
  mad r2.xy, r0.xyxx, l(6.000000, 6.000000, 0.000000, 0.000000), l(-15.000000, -15.000000, 0.000000, 0.000000)
  mad r0.xy, r0.xyxx, r2.xyxx, l(10.000000, 10.000000, 0.000000, 0.000000)
  mul r2.xy, r0.xyxx, r0.zwzz  // r2.x <- blend.x; r2.y <- blend.y

#line 146
  mad r2.zw, -r0.zzzw, r0.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
  mul r0.xyzw, r2.wwyy, r2.zxzx
  dp4 o0.xyzw, r1.xyzw, r0.xyzw

#line 315
else 

#line 316
  ieq r0.x, cb0[5].w, l(1)
  if_nz r0.x

#line 317
    add r0.xyzw, v1.xyxy, cb0[5].yzyz
    div r0.xyzw, r0.xyzw, cb0[5].xxxx

#line 150
    round_ni r1.xy, r0.zwzz  // r1.x <- Pi.x; r1.y <- Pi.y

#line 151
    add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
    add r0.xyzw, r0.xyzw, -r1.xyzw  // r0.x <- Pf_Pfmin1.x; r0.y <- Pf_Pfmin1.y; r0.z <- Pf_Pfmin1.z; r0.w <- Pf_Pfmin1.w

#line 153
    mul r2.xyzw, r1.xyzw, l(0.014085, 0.014085, 0.014085, 0.014085)
    round_ni r2.xyzw, r2.xyzw
    mad r1.xyzw, -r2.xyzw, l(71.000000, 71.000000, 71.000000, 71.000000), r1.xyzw  // r1.x <- Pt.x; r1.y <- Pt.y; r1.z <- Pt.z; r1.w <- Pt.w

#line 154
    add r1.xyzw, r1.xyzw, l(26.000000, 161.000000, 26.000000, 161.000000)

#line 155
    mul r1.xyzw, r1.xyzw, r1.xyzw

#line 156
    mul r1.xyzw, r1.yyww, r1.xzxz

#line 157
    mul r2.xyzw, r1.xyzw, l(0.001051, 0.001051, 0.001051, 0.001051)
    frc r2.xyzw, r2.xyzw  // r2.x <- hash_x.x; r2.y <- hash_x.y; r2.z <- hash_x.z; r2.w <- hash_x.w

#line 158
    mul r1.xyzw, r1.xyzw, l(0.001555, 0.001555, 0.001555, 0.001555)
    frc r1.xyzw, r1.xyzw  // r1.x <- hash_y.x; r1.y <- hash_y.y; r1.z <- hash_y.z; r1.w <- hash_y.w

#line 159
    add r2.xyzw, r2.xyzw, l(-0.499990, -0.499990, -0.499990, -0.499990)  // r2.x <- grad_x.x; r2.y <- grad_x.y; r2.z <- grad_x.z; r2.w <- grad_x.w

#line 160
    add r1.xyzw, r1.xyzw, l(-0.499990, -0.499990, -0.499990, -0.499990)  // r1.x <- grad_y.x; r1.y <- grad_y.y; r1.z <- grad_y.z; r1.w <- grad_y.w

#line 161
    mul r3.xyzw, r1.xyzw, r1.xyzw
    mad r3.xyzw, r2.xyzw, r2.xyzw, r3.xyzw
    rsq r3.xyzw, r3.xyzw  // r3.x <- norm.x; r3.y <- norm.y; r3.z <- norm.z; r3.w <- norm.w

#line 162
    mul r2.xyzw, r2.xzyw, r3.xzyw  // r2.y <- grad_x.z; r2.z <- grad_x.y

#line 163
    mul r1.xyzw, r1.xywz, r3.xywz  // r1.z <- grad_y.w; r1.w <- grad_y.z

#line 164
    mul r3.xyzw, r0.yyww, r1.xywz
    mad r3.xyzw, r2.xzyw, r0.xzxz, r3.xyzw  // r3.x <- dotval.x; r3.y <- dotval.y; r3.z <- dotval.z; r3.w <- dotval.w

#line 165
    mul r4.xyzw, r0.xyxy, r0.xyxy
    mad r5.xyzw, r0.xyxy, l(6.000000, 6.000000, 0.000000, 0.000000), l(-15.000000, -15.000000, 30.000000, 30.000000)
    mad r5.xyzw, r0.xyxy, r5.xyzw, l(10.000000, 10.000000, -60.000000, -60.000000)
    mad r0.xyzw, r0.xyxy, r5.xyzw, l(0.000000, 0.000000, 30.000000, 30.000000)
    mul r0.xyzw, r0.xyzw, r4.xyzw  // r0.x <- blend.x; r0.y <- blend.y; r0.z <- blend.z; r0.w <- blend.w

#line 170
    mov r4.x, r3.x
    mov r4.y, r2.x
    mov r4.z, r1.x
    mov r5.x, r3.y
    mov r5.y, r2.z
    mov r5.z, r1.y
    add r5.xyz, -r4.xyzx, r5.xyzx  // r5.x <- k0_gk0.x; r5.y <- k0_gk0.y; r5.z <- k0_gk0.z

#line 171
    mov r2.x, r3.z
    mov r2.z, r1.w
    add r3.xyz, -r4.xyzx, r2.xyzx  // r3.x <- k1_gk1.x; r3.y <- k1_gk1.y; r3.z <- k1_gk1.z

#line 172
    mov r1.x, r3.w
    mov r1.y, r2.w
    add r1.xyz, -r2.xyzx, r1.xyzx
    add r1.xyz, -r5.xyzx, r1.xyzx  // r1.x <- k2_gk2.x; r1.y <- k2_gk2.y; r1.z <- k2_gk2.z

#line 173
    mad r2.xyz, r0.xxxx, r5.xyzx, r4.xyzx
    mad r1.yzw, r0.xxxx, r1.xxyz, r3.xxyz
    mad r1.yzw, r0.yyyy, r1.yyzw, r2.xxyz  // r1.y <- results.x; r1.z <- results.y; r1.w <- results.z

#line 174
    mov r5.w, r3.x
    mad r0.xy, r0.yxyy, r1.xxxx, r5.xwxx
    mad r1.zw, r0.zzzw, r0.xxxy, r1.zzzw

#line 175
    mul o0.xyz, r1.yzwy, l(1.414214, 1.414214, 1.414214, 0.000000)  // o0.x <- <Shading_id20 return value>.x; o0.y <- <Shading_id20 return value>.y; o0.z <- <Shading_id20 return value>.z

#line 317
    mov o0.w, l(1.000000)  // o0.w <- <Shading_id20 return value>.w
  else 

#line 318
    ieq r0.x, cb0[5].w, l(2)
    if_nz r0.x

#line 319
      add r0.xy, v1.xyxx, cb0[5].yzyy
      div r0.xy, r0.xyxx, cb0[5].xxxx

#line 179
      round_ni r1.xy, r0.xyxx  // r1.x <- Pi.x; r1.y <- Pi.y

#line 180
      add r0.xy, r0.xyxx, -r1.xyxx  // r0.x <- Pf.x; r0.y <- Pf.y

#line 182
      add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      mul r2.xyzw, r1.xyzw, l(0.014085, 0.014085, 0.014085, 0.014085)
      round_ni r2.xyzw, r2.xyzw
      mad r1.xyzw, -r2.xyzw, l(71.000000, 71.000000, 71.000000, 71.000000), r1.xyzw  // r1.x <- Pt.x; r1.y <- Pt.y; r1.z <- Pt.z; r1.w <- Pt.w

#line 183
      add r1.xyzw, r1.xyzw, l(26.000000, 161.000000, 26.000000, 161.000000)

#line 184
      mul r1.xyzw, r1.xyzw, r1.xyzw

#line 185
      mul r1.xyzw, r1.yyww, r1.xzxz

#line 186
      mul r1.xyzw, r1.xyzw, l(0.001051, 0.001051, 0.001051, 0.001051)
      frc r1.xyzw, r1.xyzw  // r1.x <- hash.x; r1.y <- hash.y; r1.z <- hash.z; r1.w <- hash.w

#line 187
      mul r0.zw, r0.xxxy, r0.xxxy
      mul r0.zw, r0.xxxy, r0.zzzw
      mad r2.xy, r0.xyxx, l(6.000000, 6.000000, 0.000000, 0.000000), l(-15.000000, -15.000000, 0.000000, 0.000000)
      mad r0.xy, r0.xyxx, r2.xyxx, l(10.000000, 10.000000, 0.000000, 0.000000)
      mul r2.xy, r0.xyxx, r0.zwzz  // r2.x <- blend.x; r2.y <- blend.y

#line 189
      mad r2.zw, -r0.zzzw, r0.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      mul r0.xyzw, r2.wwyy, r2.zxzx
      dp4 o0.xyzw, r1.xyzw, r0.xyzw  // o0.x <- <Shading_id20 return value>.x; o0.y <- <Shading_id20 return value>.y; o0.z <- <Shading_id20 return value>.z; o0.w <- <Shading_id20 return value>.w

#line 319
    else 

#line 320
      ieq r0.x, cb0[5].w, l(3)
      if_nz r0.x

#line 321
        add r0.xyzw, v1.xyxy, cb0[5].yzyz
        div r0.xyzw, r0.xyzw, cb0[5].xxxx

#line 193
        round_ni r1.xy, r0.zwzz  // r1.x <- Pi.x; r1.y <- Pi.y

#line 194
        add r0.xyzw, r0.xyzw, -r1.xyxy  // r0.z <- Pf.x; r0.w <- Pf.y

#line 196
        add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
        mul r2.xyzw, r1.xyzw, l(0.014085, 0.014085, 0.014085, 0.014085)
        round_ni r2.xyzw, r2.xyzw
        mad r1.xyzw, -r2.xyzw, l(71.000000, 71.000000, 71.000000, 71.000000), r1.xyzw  // r1.x <- Pt.x; r1.y <- Pt.y; r1.z <- Pt.z; r1.w <- Pt.w

#line 197
        add r1.xyzw, r1.xyzw, l(26.000000, 161.000000, 26.000000, 161.000000)

#line 198
        mul r1.xyzw, r1.xyzw, r1.xyzw

#line 199
        mul r1.xyzw, r1.yyww, r1.xzxz

#line 200
        mul r1.xyzw, r1.xyzw, l(0.001051, 0.001051, 0.001051, 0.001051)
        frc r1.xyzw, r1.xyzw  // r1.x <- hash.x; r1.y <- hash.y; r1.z <- hash.z; r1.w <- hash.w

#line 201
        mul r2.xyzw, r0.zwzw, r0.zwzw
        mad r3.xyzw, r0.zwzw, l(6.000000, 6.000000, 0.000000, 0.000000), l(-15.000000, -15.000000, 30.000000, 30.000000)
        mad r3.xyzw, r0.zwzw, r3.xyzw, l(10.000000, 10.000000, -60.000000, -60.000000)
        mad r0.xyzw, r0.xyzw, r3.xyzw, l(0.000000, 0.000000, 30.000000, 30.000000)
        mul r0.xyzw, r0.xyzw, r2.xyzw  // r0.x <- blend.x; r0.y <- blend.y; r0.z <- blend.z; r0.w <- blend.w

#line 202
        add r2.xyzw, -r1.xyxz, r1.zwyw
        mad r1.xyzw, r0.yyxx, r2.xyzw, r1.xyxz  // r1.x <- res0.x; r1.y <- res0.y; r1.z <- res0.z; r1.w <- res0.w

#line 203
        add r2.xyz, -r1.xxzx, r1.yywy
        mov r1.yz, l(0,0,0,0)
        mad o0.xyz, r2.xyzx, r0.xzwx, r1.xyzx  // o0.x <- <Shading_id20 return value>.x; o0.y <- <Shading_id20 return value>.y; o0.z <- <Shading_id20 return value>.z

#line 321
        mov o0.w, l(1.000000)  // o0.w <- <Shading_id20 return value>.w
      else 

#line 322
        ieq r0.x, cb0[5].w, l(4)
        if_nz r0.x

#line 323
          add r0.xy, v1.xyxx, cb0[5].yzyy
          div r0.xy, r0.xyxx, cb0[5].xxxx

#line 211
          mul r0.zw, r0.xxxy, l(0.000000, 0.000000, 0.707107, 0.707107)  // r0.z <- p.x; r0.w <- p.y

#line 212
          dp2 r0.z, r0.zwzz, l(0.366025, 0.366025, 0.000000, 0.000000)
          mad r0.zw, r0.xxxy, l(0.000000, 0.000000, 0.707107, 0.707107), r0.zzzz
          round_ni r1.xy, r0.zwzz  // r1.x <- Pi.x; r1.y <- Pi.y

#line 214
          add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
          mul r2.xyzw, r1.xyzw, l(0.014085, 0.014085, 0.014085, 0.014085)
          round_ni r2.xyzw, r2.xyzw
          mad r2.xyzw, -r2.xyzw, l(71.000000, 71.000000, 71.000000, 71.000000), r1.xyzw  // r2.x <- Pt.x; r2.y <- Pt.y; r2.z <- Pt.z; r2.w <- Pt.w

#line 215
          add r2.xyzw, r2.xyzw, l(26.000000, 161.000000, 26.000000, 161.000000)

#line 216
          mul r2.xyzw, r2.xyzw, r2.xyzw

#line 217
          mul r2.xyzw, r2.yyww, r2.xzxz

#line 218
          mul r3.xyzw, r2.xyzw, l(0.001051, 0.001051, 0.001051, 0.001051)
          frc r3.xyzw, r3.xyzw  // r3.x <- hash_x.x; r3.y <- hash_x.y; r3.z <- hash_x.z; r3.w <- hash_x.w

#line 219
          mul r2.xyzw, r2.xyzw, l(0.001555, 0.001555, 0.001555, 0.001555)
          frc r2.xyzw, r2.xyzw  // r2.x <- hash_y.x; r2.y <- hash_y.y; r2.z <- hash_y.z; r2.w <- hash_y.w

#line 220
          dp2 r0.z, r1.xyxx, l(0.211325, 0.211325, 0.000000, 0.000000)
          add r0.zw, -r0.zzzz, r1.xxxy
          mad r0.xy, -r0.xyxx, l(0.707107, 0.707107, 0.000000, 0.000000), r0.zwzz  // r0.x <- v0.x; r0.y <- v0.y

#line 221
          lt r1.x, r0.x, r0.y
          mov r4.xy, l(0.788675,-0.211325,0,0)
          mov r4.z, r3.y
          mov r4.w, r2.y
          mov r5.xy, l(-0.211325,0.788675,0,0)
          mov r5.z, r3.z
          mov r5.w, r2.z
          movc r1.xyzw, r1.xxxx, r4.xyzw, r5.xyzw  // r1.x <- v1pos_v1hash.x; r1.y <- v1pos_v1hash.y; r1.z <- v1pos_v1hash.z; r1.w <- v1pos_v1hash.w

#line 222
          add r4.xy, r0.xyxx, r1.xyxx  // r4.x <- v12.x; r4.y <- v12.y

#line 223
          mov r1.xy, r3.xwxx
          add r3.xyz, r1.xzyx, l(-0.499990, -0.499990, -0.499990, 0.000000)  // r3.x <- grad_x.x; r3.y <- grad_x.y; r3.z <- grad_x.z

#line 224
          mov r1.xy, r2.xwxx
          add r1.xyz, r1.xwyx, l(-0.499990, -0.499990, -0.499990, 0.000000)  // r1.x <- grad_y.x; r1.y <- grad_y.y; r1.z <- grad_y.z

#line 225
          mul r2.xyz, r1.xyzx, r1.xyzx
          mad r2.xyz, r3.xyzx, r3.xyzx, r2.xyzx
          rsq r2.xyz, r2.xyzx
          mov r0.z, r4.x
          add r0.w, r0.x, l(0.577350)
          add r4.xz, r0.yyyy, l(0.000000, 0.000000, 0.577350, 0.000000)
          mul r1.xyz, r1.xyzx, r4.xyzx
          mad r1.xyz, r3.xyzx, r0.xzwx, r1.xyzx
          mul r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- grad_results.x; r1.y <- grad_results.y; r1.z <- grad_results.z

#line 227
          mul r2.xyz, r4.xyzx, r4.xyzx
          mad r0.xyz, r0.xzwx, r0.xzwx, r2.xyzx  // r0.x <- m.x; r0.y <- m.y; r0.z <- m.z

#line 228
          add r0.xyz, -r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
          max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // r0.x <- m.x; r0.y <- m.y; r0.z <- m.z

#line 229
          mul r0.xyz, r0.xyzx, r0.xyzx

#line 230
          mul r0.xyz, r0.xyzx, r0.xyzx
          dp3 r0.x, r0.xyzx, r1.xyzx
          mul o0.xyzw, r0.xxxx, l(99.204338, 99.204338, 99.204338, 99.204338)  // o0.x <- <Shading_id20 return value>.x; o0.y <- <Shading_id20 return value>.y; o0.z <- <Shading_id20 return value>.z; o0.w <- <Shading_id20 return value>.w

#line 323
        else 

#line 324
          ieq r0.x, cb0[5].w, l(5)
          if_nz r0.x

#line 325
            add r0.xy, v1.xyxx, cb0[5].yzyy
            div r0.xy, r0.xyxx, cb0[5].xxxx

#line 238
            mul r0.zw, r0.xxxy, l(0.000000, 0.000000, 0.707107, 0.707107)  // r0.z <- p.x; r0.w <- p.y

#line 239
            dp2 r0.z, r0.zwzz, l(0.366025, 0.366025, 0.000000, 0.000000)
            mad r0.zw, r0.xxxy, l(0.000000, 0.000000, 0.707107, 0.707107), r0.zzzz
            round_ni r1.xy, r0.zwzz  // r1.x <- Pi.x; r1.y <- Pi.y

#line 241
            add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
            mul r2.xyzw, r1.xyzw, l(0.014085, 0.014085, 0.014085, 0.014085)
            round_ni r2.xyzw, r2.xyzw
            mad r2.xyzw, -r2.xyzw, l(71.000000, 71.000000, 71.000000, 71.000000), r1.xyzw  // r2.x <- Pt.x; r2.y <- Pt.y; r2.z <- Pt.z; r2.w <- Pt.w

#line 242
            add r2.xyzw, r2.xyzw, l(26.000000, 161.000000, 26.000000, 161.000000)

#line 243
            mul r2.xyzw, r2.xyzw, r2.xyzw

#line 244
            mul r2.xyzw, r2.yyww, r2.xzxz

#line 245
            mul r3.xyzw, r2.xyzw, l(0.001051, 0.001051, 0.001051, 0.001051)
            frc r3.xyzw, r3.xyzw  // r3.x <- hash_x.x; r3.y <- hash_x.y; r3.z <- hash_x.z; r3.w <- hash_x.w

#line 246
            mul r2.xyzw, r2.xyzw, l(0.001555, 0.001555, 0.001555, 0.001555)
            frc r2.xyzw, r2.xyzw  // r2.x <- hash_y.x; r2.y <- hash_y.y; r2.z <- hash_y.z; r2.w <- hash_y.w

#line 247
            dp2 r0.z, r1.xyxx, l(0.211325, 0.211325, 0.000000, 0.000000)
            add r0.zw, -r0.zzzz, r1.xxxy
            mad r0.xy, -r0.xyxx, l(0.707107, 0.707107, 0.000000, 0.000000), r0.zwzz  // r0.x <- v0.x; r0.y <- v0.y

#line 248
            lt r1.x, r0.x, r0.y
            mov r4.xy, l(0.788675,-0.211325,0,0)
            mov r4.z, r3.y
            mov r4.w, r2.y
            mov r5.xy, l(-0.211325,0.788675,0,0)
            mov r5.z, r3.z
            mov r5.w, r2.z
            movc r1.xyzw, r1.xxxx, r4.xyzw, r5.xyzw  // r1.x <- v1pos_v1hash.x; r1.y <- v1pos_v1hash.y; r1.z <- v1pos_v1hash.z; r1.w <- v1pos_v1hash.w

#line 249
            add r4.xy, r0.xyxx, r1.xyxx  // r4.x <- v12.x; r4.y <- v12.y

#line 250
            mov r1.xy, r3.xwxx
            add r3.xyz, r1.xzyx, l(-0.499990, -0.499990, -0.499990, 0.000000)  // r3.x <- grad_x.x; r3.y <- grad_x.y; r3.z <- grad_x.z

#line 251
            mov r1.xy, r2.xwxx
            add r1.xyz, r1.xwyx, l(-0.499990, -0.499990, -0.499990, 0.000000)  // r1.x <- grad_y.x; r1.y <- grad_y.y; r1.z <- grad_y.z

#line 252
            mul r2.xyz, r1.xyzx, r1.xyzx
            mad r2.xyz, r3.xyzx, r3.xyzx, r2.xyzx
            rsq r2.xyz, r2.xyzx  // r2.x <- norm.x; r2.y <- norm.y; r2.z <- norm.z

#line 253
            mul r3.xyz, r2.xyzx, r3.xyzx

#line 254
            mul r1.xyz, r1.xyzx, r2.xyzx

#line 255
            mov r0.z, r4.x
            add r0.w, r0.x, l(0.577350)
            add r4.xz, r0.yyyy, l(0.000000, 0.000000, 0.577350, 0.000000)
            mul r2.xyz, r1.xyzx, r4.xyzx
            mad r2.xyz, r3.xyzx, r0.xzwx, r2.xyzx  // r2.x <- grad_results.x; r2.y <- grad_results.y; r2.z <- grad_results.z

#line 256
            mul r5.xyz, r4.xyzx, r4.xyzx
            mad r5.xyz, r0.xzwx, r0.xzwx, r5.xyzx  // r5.x <- m.x; r5.y <- m.y; r5.z <- m.z

#line 257
            add r5.xyz, -r5.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
            max r5.xyz, r5.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // r5.x <- m.x; r5.y <- m.y; r5.z <- m.z

#line 258
            mul r6.xyz, r5.xyzx, r5.xyzx  // r6.x <- m2.x; r6.y <- m2.y; r6.z <- m2.z

#line 259
            mul r7.xyz, r6.xyzx, r6.xyzx  // r7.x <- m4.x; r7.y <- m4.y; r7.z <- m4.z

#line 260
            mul r5.xyz, r5.xyzx, r6.xyzx
            mul r5.xyz, r2.xyzx, r5.xyzx
            mul r5.xyz, r5.xyzx, l(8.000000, 8.000000, 8.000000, 0.000000)  // r5.x <- temp.x; r5.y <- temp.y; r5.z <- temp.z

#line 261
            dp3 r0.x, r5.xyzx, r0.xzwx
            dp3 r0.y, r7.xyzx, r3.xyzx
            add r0.y, -r0.y, r0.x  // r0.y <- xderiv

#line 262
            dp3 r0.w, r5.xyzx, r4.xyzx
            dp3 r1.x, r7.xyzx, r1.xyzx
            add r0.z, r0.w, -r1.x  // r0.z <- yderiv

#line 264
            dp3 r0.x, r7.xyzx, r2.xyzx
            mul o0.xyz, r0.xyzx, l(99.204338, 99.204338, 99.204338, 0.000000)  // o0.x <- <Shading_id20 return value>.x; o0.y <- <Shading_id20 return value>.y; o0.z <- <Shading_id20 return value>.z

#line 325
            mov o0.w, l(1.000000)  // o0.w <- <Shading_id20 return value>.w
          else 

#line 326
            ieq r0.x, cb0[5].w, l(6)
            if_nz r0.x

#line 327
              add r0.xy, v1.xyxx, cb0[5].yzyy
              div r0.xy, r0.xyxx, cb0[5].xxxx

#line 269
              round_ni r1.xy, r0.xyxx  // r1.x <- Pi.x; r1.y <- Pi.y

#line 270
              add r0.xy, r0.xyxx, -r1.xyxx  // r0.x <- Pf.x; r0.y <- Pf.y

#line 272
              add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
              mul r2.xyzw, r1.xyzw, l(0.014085, 0.014085, 0.014085, 0.014085)
              round_ni r2.xyzw, r2.xyzw
              mad r1.xyzw, -r2.xyzw, l(71.000000, 71.000000, 71.000000, 71.000000), r1.xyzw  // r1.x <- Pt.x; r1.y <- Pt.y; r1.z <- Pt.z; r1.w <- Pt.w

#line 273
              add r1.xyzw, r1.xyzw, l(26.000000, 161.000000, 26.000000, 161.000000)

#line 274
              mul r1.xyzw, r1.xyzw, r1.xyzw

#line 275
              mul r1.xyzw, r1.yyww, r1.xzxz

#line 276
              mul r2.xyzw, r1.xyzw, l(0.001051, 0.001051, 0.001051, 0.001051)
              frc r2.xyzw, r2.xyzw  // r2.x <- hash_x.x; r2.y <- hash_x.y; r2.z <- hash_x.z; r2.w <- hash_x.w

#line 277
              mul r1.xyzw, r1.xyzw, l(0.001555, 0.001555, 0.001555, 0.001555)
              frc r1.xyzw, r1.xyzw  // r1.x <- hash_y.x; r1.y <- hash_y.y; r1.z <- hash_y.z; r1.w <- hash_y.w

#line 278
              mad r2.xyzw, r2.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)

#line 279
              mad r1.xyzw, r1.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)

#line 280
              mul r3.xyzw, r2.xyzw, r2.xyzw
              lt r4.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000), r2.xyzw
              lt r5.xyzw, r2.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
              iadd r4.xyzw, -r4.xyzw, r5.xyzw
              itof r4.xyzw, r4.xyzw
              mad r2.xyzw, r3.xyzw, r2.xyzw, -r4.xyzw
              mad r2.xyzw, r2.xyzw, l(0.250000, 0.250000, 0.250000, 0.250000), l(0.000000, 1.000000, 0.000000, 1.000000)  // r2.x <- hash_x.x; r2.y <- hash_x.y; r2.z <- hash_x.z; r2.w <- hash_x.w

#line 281
              mul r3.xyzw, r1.xyzw, r1.xyzw
              lt r4.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000), r1.xyzw
              lt r5.xyzw, r1.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
              iadd r4.xyzw, -r4.xyzw, r5.xyzw
              itof r4.xyzw, r4.xyzw
              mad r1.xyzw, r3.xyzw, r1.xyzw, -r4.xyzw
              mad r1.xyzw, r1.xyzw, l(0.250000, 0.250000, 0.250000, 0.250000), l(0.000000, 0.000000, 1.000000, 1.000000)  // r1.x <- hash_y.x; r1.y <- hash_y.y; r1.z <- hash_y.z; r1.w <- hash_y.w

#line 282
              add r2.xyzw, r0.xxxx, -r2.xyzw  // r2.x <- dx.x; r2.y <- dx.y; r2.z <- dx.z; r2.w <- dx.w

#line 283
              add r0.xyzw, r0.yyyy, -r1.xyzw  // r0.x <- dy.x; r0.y <- dy.y; r0.z <- dy.z; r0.w <- dy.w

#line 284
              mul r0.xyzw, r0.xyzw, r0.xyzw
              mad r0.xyzw, r2.xyzw, r2.xyzw, r0.xyzw  // r0.x <- d.x; r0.y <- d.y; r0.z <- d.z; r0.w <- d.w

#line 285
              min r0.xy, r0.zwzz, r0.xyxx

#line 286
              min r0.x, r0.y, r0.x
              mul o0.xyzw, r0.xxxx, l(0.888889, 0.888889, 0.888889, 0.888889)  // o0.x <- <Shading_id20 return value>.x; o0.y <- <Shading_id20 return value>.y; o0.z <- <Shading_id20 return value>.z; o0.w <- <Shading_id20 return value>.w

#line 327
            else 

#line 328
              ieq r0.x, cb0[5].w, l(7)

#line 329
              add r0.yz, v1.xxyx, cb0[5].yyzy
              div r0.yz, r0.yyzy, cb0[5].xxxx

#line 291
              round_ni r1.xy, r0.yzyy  // r1.x <- Pi.x; r1.y <- Pi.y

#line 292
              add r0.yz, r0.yyzy, -r1.xxyx  // r0.y <- Pf.x; r0.z <- Pf.y

#line 294
              add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
              mul r2.xyzw, r1.xyzw, l(0.014085, 0.014085, 0.014085, 0.014085)
              round_ni r2.xyzw, r2.xyzw
              mad r1.xyzw, -r2.xyzw, l(71.000000, 71.000000, 71.000000, 71.000000), r1.xyzw  // r1.x <- Pt.x; r1.y <- Pt.y; r1.z <- Pt.z; r1.w <- Pt.w

#line 295
              add r1.xyzw, r1.xyzw, l(26.000000, 161.000000, 26.000000, 161.000000)

#line 296
              mul r1.xyzw, r1.xyzw, r1.xyzw

#line 297
              mul r1.xyzw, r1.yyww, r1.xzxz

#line 298
              mul r2.xyzw, r1.xyzw, l(0.001051, 0.001051, 0.001051, 0.001051)
              frc r2.xyzw, r2.xyzw  // r2.x <- hash_x.x; r2.y <- hash_x.y; r2.z <- hash_x.z; r2.w <- hash_x.w

#line 299
              mul r1.xyzw, r1.xyzw, l(0.001555, 0.001555, 0.001555, 0.001555)
              frc r1.xyzw, r1.xyzw  // r1.x <- hash_y.x; r1.y <- hash_y.y; r1.z <- hash_y.z; r1.w <- hash_y.w

#line 300
              mad r2.xyzw, r2.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)

#line 301
              mad r1.xyzw, r1.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)

#line 302
              mul r3.xyzw, r2.xyzw, r2.xyzw
              lt r4.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000), r2.xyzw
              lt r5.xyzw, r2.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
              iadd r4.xyzw, -r4.xyzw, r5.xyzw
              itof r4.xyzw, r4.xyzw
              mad r2.xyzw, r3.xyzw, r2.xyzw, -r4.xyzw
              mad r2.xyzw, r2.xyzw, l(0.250000, 0.250000, 0.250000, 0.250000), l(0.000000, 1.000000, 0.000000, 1.000000)  // r2.x <- hash_x.x; r2.y <- hash_x.y; r2.z <- hash_x.z; r2.w <- hash_x.w

#line 303
              mul r3.xyzw, r1.xyzw, r1.xyzw
              lt r4.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000), r1.xyzw
              lt r5.xyzw, r1.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
              iadd r4.xyzw, -r4.xyzw, r5.xyzw
              itof r4.xyzw, r4.xyzw
              mad r1.xyzw, r3.xyzw, r1.xyzw, -r4.xyzw
              mad r1.xyzw, r1.xyzw, l(0.250000, 0.250000, 0.250000, 0.250000), l(0.000000, 0.000000, 1.000000, 1.000000)  // r1.x <- hash_y.x; r1.y <- hash_y.y; r1.z <- hash_y.z; r1.w <- hash_y.w

#line 304
              add r2.xyzw, r0.yyyy, -r2.xzyw  // r2.x <- dx.x; r2.y <- dx.z; r2.z <- dx.y; r2.w <- dx.w

#line 305
              add r1.xyzw, r0.zzzz, -r1.xywz  // r1.x <- dy.x; r1.y <- dy.y; r1.z <- dy.w; r1.w <- dy.z

#line 306
              mul r3.xyzw, r1.xywz, r1.xywz
              mad r3.xyzw, r2.xzyw, r2.xzyw, r3.xyzw  // r3.x <- d.x; r3.y <- d.y; r3.z <- d.z; r3.w <- d.w

#line 308
              lt r0.yz, r3.xxzx, r3.yywy

#line 307
              mov r4.x, r3.x
              mov r4.y, r2.x
              mov r4.z, r1.x
              mov r5.x, r3.y
              mov r5.y, r2.z
              mov r5.z, r1.y
              movc r4.xyz, r0.yyyy, r4.xyzx, r5.xyzx  // r4.x <- t1.x; r4.y <- t1.y; r4.z <- t1.z

#line 308
              mov r2.x, r3.z
              mov r2.z, r1.w
              mov r1.x, r3.w
              mov r1.y, r2.w
              movc r0.yzw, r0.zzzz, r2.xxyz, r1.xxyz  // r0.y <- t2.x; r0.z <- t2.y; r0.w <- t2.z

#line 309
              lt r1.x, r4.x, r0.y
              movc r0.yzw, r1.xxxx, r4.xxyz, r0.yyzw
              mul r0.yzw, r0.yyzw, l(0.000000, 0.888889, 1.777778, 1.777778)  // r0.y <- <worleyFastGrad_id21 return value>.x; r0.z <- <worleyFastGrad_id21 return value>.y; r0.w <- <worleyFastGrad_id21 return value>.z

#line 331
              movc o0.xyz, r0.xxxx, r0.yzwy, l(1.000000,0,1.000000,0)  // o0.x <- <Shading_id20 return value>.x; o0.y <- <Shading_id20 return value>.y; o0.z <- <Shading_id20 return value>.z
              mov o0.w, l(1.000000)  // o0.w <- <Shading_id20 return value>.w
            endif 
          endif 
        endif 
      endif 
    endif 
  endif 
endif 

#line 340
ret 
// Approximately 359 instruction slots used
***************************
*************************/
struct PS_STREAMS 
{
    float2 TexCoord_id62;
    float4 ColorTarget_id2;
};
struct PS_OUTPUT 
{
    float4 ColorTarget_id2 : SV_Target0;
};
struct PS_INPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_STREAMS 
{
    float4 Position_id72;
    float2 TexCoord_id62;
    float4 ShadingPosition_id0;
};
struct VS_OUTPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_INPUT 
{
    float4 Position_id72 : POSITION;
    float2 TexCoord_id62 : TEXCOORD0;
};
cbuffer PerDraw 
{
    float4x4 MatrixTransform_id73;
};
cbuffer Globals 
{
    float2 Texture0TexelSize_id15;
    float2 Texture1TexelSize_id17;
    float2 Texture2TexelSize_id19;
    float2 Texture3TexelSize_id21;
    float2 Texture4TexelSize_id23;
    float2 Texture5TexelSize_id25;
    float2 Texture6TexelSize_id27;
    float2 Texture7TexelSize_id29;
    float2 Texture8TexelSize_id31;
    float2 Texture9TexelSize_id33;
    float Scale_id76 = 1.0f;
    float2 Offset_id77;
    int NoiseType_id78;
};
Texture2D Texture0_id14;
Texture2D Texture1_id16;
Texture2D Texture2_id18;
Texture2D Texture3_id20;
Texture2D Texture4_id22;
Texture2D Texture5_id24;
Texture2D Texture6_id26;
Texture2D Texture7_id28;
Texture2D Texture8_id30;
Texture2D Texture9_id32;
TextureCube TextureCube0_id34;
TextureCube TextureCube1_id35;
TextureCube TextureCube2_id36;
TextureCube TextureCube3_id37;
Texture3D Texture3D0_id38;
Texture3D Texture3D1_id39;
Texture3D Texture3D2_id40;
Texture3D Texture3D3_id41;
SamplerState Sampler_id42;
SamplerState PointSampler_id43 
{
    Filter = MIN_MAG_MIP_POINT;
};
SamplerState LinearSampler_id44 
{
    Filter = MIN_MAG_MIP_LINEAR;
};
SamplerState LinearBorderSampler_id45 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Border;
    AddressV = Border;
};
SamplerComparisonState LinearClampCompareLessEqualSampler_id46 
{
    Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
    ComparisonFunc = LessEqual;
};
SamplerState AnisotropicSampler_id47 
{
    Filter = ANISOTROPIC;
};
SamplerState AnisotropicRepeatSampler_id48 
{
    Filter = ANISOTROPIC;
    AddressU = Wrap;
    AddressV = Wrap;
    MaxAnisotropy = 16;
};
SamplerState PointRepeatSampler_id49 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState LinearRepeatSampler_id50 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState RepeatSampler_id51 
{
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState Sampler0_id52;
SamplerState Sampler1_id53;
SamplerState Sampler2_id54;
SamplerState Sampler3_id55;
SamplerState Sampler4_id56;
SamplerState Sampler5_id57;
SamplerState Sampler6_id58;
SamplerState Sampler7_id59;
SamplerState Sampler8_id60;
SamplerState Sampler9_id61;
float perlin_id28(float2 p)
{
    float2 Pi = floor(p);
    float4 Pf_Pfmin1 = p.xyxy - float4(Pi, Pi + 1.0);
    float4 Pt = float4(Pi.xy, Pi.xy + 1.0);
    Pt = Pt - floor(Pt * (1.0 / 71.0)) * 71.0;
    Pt += float2(26.0, 161.0).xyxy;
    Pt *= Pt;
    Pt = Pt.xzxz * Pt.yyww;
    float4 hash_x = frac(Pt * (1.0 / 951.135664));
    float4 hash_y = frac(Pt * (1.0 / 642.949883));
    float4 grad_x = hash_x - 0.49999;
    float4 grad_y = hash_y - 0.49999;
    float4 grad_results = rsqrt(grad_x * grad_x + grad_y * grad_y) * (grad_x * Pf_Pfmin1.xzxz + grad_y * Pf_Pfmin1.yyww);
    grad_results *= 1.4142135623730950488016887242097;
    float2 blend = Pf_Pfmin1.xy * Pf_Pfmin1.xy * Pf_Pfmin1.xy * (Pf_Pfmin1.xy * (Pf_Pfmin1.xy * 6.0 - 15.0) + 10.0);
    float4 blend2 = float4(blend, float2(1.0 - blend));
    return dot(grad_results, blend2.zxzx * blend2.wwyy);
}
float3 perlinGrad_id27(float2 p)
{
    float2 Pi = floor(p);
    float4 Pf_Pfmin1 = p.xyxy - float4(Pi, Pi + 1.0);
    float4 Pt = float4(Pi.xy, Pi.xy + 1.0);
    Pt = Pt - floor(Pt * (1.0 / 71.0)) * 71.0;
    Pt += float2(26.0, 161.0).xyxy;
    Pt *= Pt;
    Pt = Pt.xzxz * Pt.yyww;
    float4 hash_x = frac(Pt * (1.0 / 951.135664));
    float4 hash_y = frac(Pt * (1.0 / 642.949883));
    float4 grad_x = hash_x - 0.49999;
    float4 grad_y = hash_y - 0.49999;
    float4 norm = rsqrt(grad_x * grad_x + grad_y * grad_y);
    grad_x *= norm;
    grad_y *= norm;
    float4 dotval = (grad_x * Pf_Pfmin1.xzxz + grad_y * Pf_Pfmin1.yyww);
    float4 blend = Pf_Pfmin1.xyxy * Pf_Pfmin1.xyxy * (Pf_Pfmin1.xyxy * (Pf_Pfmin1.xyxy * (Pf_Pfmin1.xyxy * float2(6.0, 0.0).xxyy + float2(-15.0, 30.0).xxyy) + float2(10.0, -60.0).xxyy) + float2(0.0, 30.0).xxyy);
    float3 dotval0_grad0 = float3(dotval.x, grad_x.x, grad_y.x);
    float3 dotval1_grad1 = float3(dotval.y, grad_x.y, grad_y.y);
    float3 dotval2_grad2 = float3(dotval.z, grad_x.z, grad_y.z);
    float3 dotval3_grad3 = float3(dotval.w, grad_x.w, grad_y.w);
    float3 k0_gk0 = dotval1_grad1 - dotval0_grad0;
    float3 k1_gk1 = dotval2_grad2 - dotval0_grad0;
    float3 k2_gk2 = dotval3_grad3 - dotval2_grad2 - k0_gk0;
    float3 results = dotval0_grad0 + blend.x * k0_gk0 + blend.y * (k1_gk1 + blend.x * k2_gk2);
    results.yz += blend.zw * (float2(k0_gk0.x, k1_gk1.x) + blend.yx * k2_gk2.xx);
    return results * 1.4142135623730950488016887242097;
}
float valueNoise_id26(float2 p)
{
    float2 Pi = floor(p);
    float2 Pf = p - Pi;
    float4 Pt = float4(Pi.xy, Pi.xy + 1.0);
    Pt = Pt - floor(Pt * (1.0 / 71.0)) * 71.0;
    Pt += float2(26.0, 161.0).xyxy;
    Pt *= Pt;
    Pt = Pt.xzxz * Pt.yyww;
    float4 hash = frac(Pt * (1.0 / 951.135664));
    float2 blend = Pf * Pf * Pf * (Pf * (Pf * 6.0 - 15.0) + 10.0);
    float4 blend2 = float4(blend, float2(1.0 - blend));
    return dot(hash, blend2.zxzx * blend2.wwyy);
}
float3 valueNoiseGrad_id25(float2 p)
{
    float2 Pi = floor(p);
    float2 Pf = p - Pi;
    float4 Pt = float4(Pi.xy, Pi.xy + 1.0);
    Pt = Pt - floor(Pt * (1.0 / 71.0)) * 71.0;
    Pt += float2(26.0, 161.0).xyxy;
    Pt *= Pt;
    Pt = Pt.xzxz * Pt.yyww;
    float4 hash = frac(Pt * (1.0 / 951.135664));
    float4 blend = Pf.xyxy * Pf.xyxy * (Pf.xyxy * (Pf.xyxy * (Pf.xyxy * float2(6.0, 0.0).xxyy + float2(-15.0, 30.0).xxyy) + float2(10.0, -60.0).xxyy) + float2(0.0, 30.0).xxyy);
    float4 res0 = lerp(hash.xyxz, hash.zwyw, blend.yyxx);
    return float3(res0.x, 0.0, 0.0) + (res0.yyw - res0.xxz) * blend.xzw;
}
float simplex_id24(float2 p)
{
    const float SKEWFACTOR = 0.36602540378443864676372317075294;
    const float UNSKEWFACTOR = 0.21132486540518711774542560974902;
    const float SIMPLEX_TRI_HEIGHT = 0.70710678118654752440084436210485;
    const float3 SIMPLEX_POINTS = float3(1.0 - UNSKEWFACTOR, -UNSKEWFACTOR, 1.0 - 2.0 * UNSKEWFACTOR);
    p *= SIMPLEX_TRI_HEIGHT;
    float2 Pi = floor(p + dot(p, float2(SKEWFACTOR.xx)));
    float4 Pt = float4(Pi.xy, Pi.xy + 1.0);
    Pt = Pt - floor(Pt * (1.0 / 71.0)) * 71.0;
    Pt += float2(26.0, 161.0).xyxy;
    Pt *= Pt;
    Pt = Pt.xzxz * Pt.yyww;
    float4 hash_x = frac(Pt * (1.0 / 951.135664));
    float4 hash_y = frac(Pt * (1.0 / 642.949883));
    float2 v0 = Pi - dot(Pi, float2(UNSKEWFACTOR.xx)) - p;
    float4 v1pos_v1hash = (v0.x < v0.y) ? float4(SIMPLEX_POINTS.xy, hash_x.y, hash_y.y) : float4(SIMPLEX_POINTS.yx, hash_x.z, hash_y.z);
    float4 v12 = float4(v1pos_v1hash.xy, SIMPLEX_POINTS.zz) + v0.xyxy;
    float3 grad_x = float3(hash_x.x, v1pos_v1hash.z, hash_x.w) - 0.49999;
    float3 grad_y = float3(hash_y.x, v1pos_v1hash.w, hash_y.w) - 0.49999;
    float3 grad_results = rsqrt(grad_x * grad_x + grad_y * grad_y) * (grad_x * float3(v0.x, v12.xz) + grad_y * float3(v0.y, v12.yw));
    const float FINAL_NORMALIZATION = 99.204334582718712976990005025589;
    float3 m = float3(v0.x, v12.xz) * float3(v0.x, v12.xz) + float3(v0.y, v12.yw) * float3(v0.y, v12.yw);
    m = max(0.5 - m, 0.0);
    m = m * m;
    return dot(m * m, grad_results) * FINAL_NORMALIZATION;
}
float3 simplexGrad_id23(float2 p)
{
    const float SKEWFACTOR = 0.36602540378443864676372317075294;
    const float UNSKEWFACTOR = 0.21132486540518711774542560974902;
    const float SIMPLEX_TRI_HEIGHT = 0.70710678118654752440084436210485;
    const float3 SIMPLEX_POINTS = float3(1.0 - UNSKEWFACTOR, -UNSKEWFACTOR, 1.0 - 2.0 * UNSKEWFACTOR);
    p *= SIMPLEX_TRI_HEIGHT;
    float2 Pi = floor(p + dot(p, float2(SKEWFACTOR.xx)));
    float4 Pt = float4(Pi.xy, Pi.xy + 1.0);
    Pt = Pt - floor(Pt * (1.0 / 71.0)) * 71.0;
    Pt += float2(26.0, 161.0).xyxy;
    Pt *= Pt;
    Pt = Pt.xzxz * Pt.yyww;
    float4 hash_x = frac(Pt * (1.0 / 951.135664));
    float4 hash_y = frac(Pt * (1.0 / 642.949883));
    float2 v0 = Pi - dot(Pi, float2(UNSKEWFACTOR.xx)) - p;
    float4 v1pos_v1hash = (v0.x < v0.y) ? float4(SIMPLEX_POINTS.xy, hash_x.y, hash_y.y) : float4(SIMPLEX_POINTS.yx, hash_x.z, hash_y.z);
    float4 v12 = float4(v1pos_v1hash.xy, SIMPLEX_POINTS.zz) + v0.xyxy;
    float3 grad_x = float3(hash_x.x, v1pos_v1hash.z, hash_x.w) - 0.49999;
    float3 grad_y = float3(hash_y.x, v1pos_v1hash.w, hash_y.w) - 0.49999;
    float3 norm = rsqrt(grad_x * grad_x + grad_y * grad_y);
    grad_x *= norm;
    grad_y *= norm;
    float3 grad_results = grad_x * float3(v0.x, v12.xz) + grad_y * float3(v0.y, v12.yw);
    float3 m = float3(v0.x, v12.xz) * float3(v0.x, v12.xz) + float3(v0.y, v12.yw) * float3(v0.y, v12.yw);
    m = max(0.5 - m, 0.0);
    float3 m2 = m * m;
    float3 m4 = m2 * m2;
    float3 temp = 8.0 * m2 * m * grad_results;
    float xderiv = dot(temp, float3(v0.x, v12.xz)) - dot(m4, grad_x);
    float yderiv = dot(temp, float3(v0.y, v12.yw)) - dot(m4, grad_y);
    const float FINAL_NORMALIZATION = 99.204334582718712976990005025589;
    return float3(dot(m4, grad_results), xderiv, yderiv) * FINAL_NORMALIZATION;
}
float worleyFast_id22(float2 p)
{
    const float JITTER_WINDOW = 0.25;
    float2 Pi = floor(p);
    float2 Pf = p - Pi;
    float4 Pt = float4(Pi.xy, Pi.xy + 1.0);
    Pt = Pt - floor(Pt * (1.0 / 71.0)) * 71.0;
    Pt += float2(26.0, 161.0).xyxy;
    Pt *= Pt;
    Pt = Pt.xzxz * Pt.yyww;
    float4 hash_x = frac(Pt * (1.0 / 951.135664));
    float4 hash_y = frac(Pt * (1.0 / 642.949883));
    hash_x = hash_x * 2.0 - 1.0;
    hash_y = hash_y * 2.0 - 1.0;
    hash_x = ((hash_x * hash_x * hash_x) - sign(hash_x)) * JITTER_WINDOW + float4(0.0, 1.0, 0.0, 1.0);
    hash_y = ((hash_y * hash_y * hash_y) - sign(hash_y)) * JITTER_WINDOW + float4(0.0, 0.0, 1.0, 1.0);
    float4 dx = Pf.xxxx - hash_x;
    float4 dy = Pf.yyyy - hash_y;
    float4 d = dx * dx + dy * dy;
    d.xy = min(d.xy, d.zw);
    return min(d.x, d.y) * (1.0 / 1.125);
}
float3 worleyFastGrad_id21(float2 p)
{
    const float JITTER_WINDOW = 0.25;
    float2 Pi = floor(p);
    float2 Pf = p - Pi;
    float4 Pt = float4(Pi.xy, Pi.xy + 1.0);
    Pt = Pt - floor(Pt * (1.0 / 71.0)) * 71.0;
    Pt += float2(26.0, 161.0).xyxy;
    Pt *= Pt;
    Pt = Pt.xzxz * Pt.yyww;
    float4 hash_x = frac(Pt * (1.0 / 951.135664));
    float4 hash_y = frac(Pt * (1.0 / 642.949883));
    hash_x = hash_x * 2.0 - 1.0;
    hash_y = hash_y * 2.0 - 1.0;
    hash_x = ((hash_x * hash_x * hash_x) - sign(hash_x)) * JITTER_WINDOW + float4(0.0, 1.0, 0.0, 1.0);
    hash_y = ((hash_y * hash_y * hash_y) - sign(hash_y)) * JITTER_WINDOW + float4(0.0, 0.0, 1.0, 1.0);
    float4 dx = Pf.xxxx - hash_x;
    float4 dy = Pf.yyyy - hash_y;
    float4 d = dx * dx + dy * dy;
    float3 t1 = d.x < d.y ? float3(d.x, dx.x, dy.x) : float3(d.y, dx.y, dy.y);
    float3 t2 = d.z < d.w ? float3(d.z, dx.z, dy.z) : float3(d.w, dx.w, dy.w);
    return (t1.x < t2.x ? t1 : t2) * float3(1.0, 2.0, 2.0) * (1.0 / 1.125);
}
float4 Shading_id20(inout PS_STREAMS streams)
{
    float2 uv = streams.TexCoord_id62;
    if (NoiseType_id78 == 0)
        return perlin_id28((uv + Offset_id77) / Scale_id76);
    else if (NoiseType_id78 == 1)
        return float4(perlinGrad_id27((uv + Offset_id77) / Scale_id76), 1.0);
    else if (NoiseType_id78 == 2)
        return valueNoise_id26((uv + Offset_id77) / Scale_id76);
    else if (NoiseType_id78 == 3)
        return float4(valueNoiseGrad_id25((uv + Offset_id77) / Scale_id76), 1.0);
    else if (NoiseType_id78 == 4)
        return simplex_id24((uv + Offset_id77) / Scale_id76);
    else if (NoiseType_id78 == 5)
        return float4(simplexGrad_id23((uv + Offset_id77) / Scale_id76), 1.0);
    else if (NoiseType_id78 == 6)
        return worleyFast_id22((uv + Offset_id77) / Scale_id76);
    else if (NoiseType_id78 == 7)
        return float4(worleyFastGrad_id21((uv + Offset_id77) / Scale_id76), 1.0);
    else
        return float4(1, 0, 1, 1);
}
PS_OUTPUT PSMain(PS_INPUT __input__)
{
    PS_STREAMS streams = (PS_STREAMS)0;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ColorTarget_id2 = Shading_id20(streams);
    PS_OUTPUT __output__ = (PS_OUTPUT)0;
    __output__.ColorTarget_id2 = streams.ColorTarget_id2;
    return __output__;
}
VS_OUTPUT VSMain(VS_INPUT __input__)
{
    VS_STREAMS streams = (VS_STREAMS)0;
    streams.Position_id72 = __input__.Position_id72;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ShadingPosition_id0 = mul(streams.Position_id72, MatrixTransform_id73);
    VS_OUTPUT __output__ = (VS_OUTPUT)0;
    __output__.ShadingPosition_id0 = streams.ShadingPosition_id0;
    __output__.TexCoord_id62 = streams.TexCoord_id62;
    return __output__;
}
