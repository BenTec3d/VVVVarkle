<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stride.Core.Design</name>
    </assembly>
    <members>
        <member name="T:Stride.Core.AbsoluteId">
            <summary>
            Represents the absolute identifier of an identifiable object in an asset.
            </summary>
        </member>
        <member name="M:Stride.Core.AbsoluteId.#ctor(Stride.Core.Assets.AssetId,System.Guid)">
            <summary>
            Initializes a new instance of <see cref="T:Stride.Core.AbsoluteId"/>.
            </summary>
            <param name="assetId"></param>
            <param name="objectId"></param>
            <exception cref="T:System.ArgumentException"><paramref name="assetId"/> and <paramref name="objectId"/> cannot both be empty.</exception>
        </member>
        <member name="P:Stride.Core.AbsoluteId.AssetId">
            <summary>
            The identifier of the containing asset.
            </summary>
        </member>
        <member name="P:Stride.Core.AbsoluteId.ObjectId">
            <summary>
            The identifier of the object in the asset.
            </summary>
        </member>
        <member name="M:Stride.Core.AbsoluteId.Equals(Stride.Core.AbsoluteId)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.AbsoluteId.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.AbsoluteId.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.AbsoluteId.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example>
            <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code>
            </example>
        </member>
        <member name="T:Stride.Core.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            </summary>
        </member>
        <member name="F:Stride.Core.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:Stride.Core.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:Stride.Core.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:Stride.Core.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:Stride.Core.Annotations.MustUseReturnValueAttribute">
            <summary>
            Indicates that the return value of method invocation must be used.
            </summary>
        </member>
        <member name="T:Stride.Core.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that <see cref="T:System.Collections.Generic.IEnumerable`1"/>, passed as parameter, is never
            enumerated.
            </summary>
        </member>
        <member name="T:Stride.Core.Extensions.AnonymousEqualityComparer`1">
            <summary>
            This class allows implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> using anonymous functions.
            </summary>
            <typeparam name="T">The type of object this comparer can compare.</typeparam>
        </member>
        <member name="M:Stride.Core.Extensions.AnonymousEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Extensions.AnonymousEqualityComparer`1"/> class.
            </summary>
            <param name="equals">The equality function to use for this equality comparer.</param>
            <param name="getHashCode">The function to use to compute hash codes for the objects to compare.</param>
        </member>
        <member name="M:Stride.Core.Extensions.AnonymousEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Extensions.AnonymousEqualityComparer`1"/> class using the default <see cref="M:System.Object.GetHashCode"/> method to get hash codes.
            </summary>
            <param name="equals">The equality function to use for this equality comparer.</param>
        </member>
        <member name="M:Stride.Core.Extensions.AnonymousEqualityComparer`1.Equals(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Extensions.AnonymousEqualityComparer`1.GetHashCode(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Extensions.DesignExtensions.IsReadOnly(System.Collections.IEnumerable)">
            <summary>
            Checks whether the IEnumerable represents a readonly data source.
            </summary>
            <param name="source">The IEnumerable to check.</param>
            <returns>Returns true if the data source is readonly, false otherwise.</returns>
        </member>
        <member name="M:Stride.Core.Extensions.DesignExtensions.Enumerate``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Allow to directly iterate over an enumerator type.
            </summary>
            <typeparam name="T">Type of items provided by the enumerator.</typeparam>
            <param name="enumerator">Enumerator instance to iterate on.</param>
            <returns>Returns an enumerable that can be consume in a foreach statement.</returns>
        </member>
        <member name="M:Stride.Core.Extensions.DesignExtensions.Enumerate``1(System.Collections.IEnumerator)">
            <summary>
            Allow to directly iterate over an enumerator type.
            </summary>
            <typeparam name="T">Type of items provided by the enumerator.</typeparam>
            <param name="enumerator">Enumerator instance to iterate on. (subtype is casted to T)</param>
            <returns>Returns a typed enumerable that can be consume in a foreach statement.</returns>
        </member>
        <member name="M:Stride.Core.Extensions.DesignExtensions.SelectDeep``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Iterates over all elements of source and their children recursively.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="childrenSelector">The children selector.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Core.Extensions.DesignExtensions.BreadthFirst``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Iterates over all elements of source and their children in breadth-first order.
            </summary>
            <typeparam name="T">Type of the elements.</typeparam>
            <param name="source">The root enumeration.</param>
            <param name="childrenSelector">A function that returns the children of an element.</param>
            <returns>An enumeration of all elements of source and their children in breadth-first order.</returns>
        </member>
        <member name="M:Stride.Core.Extensions.DesignExtensions.DepthFirst``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Iterates over all elements of source and their children in depth-first order.
            </summary>
            <typeparam name="T">Type of the elements.</typeparam>
            <param name="source">The root enumeration.</param>
            <param name="childrenSelector">A function that returns the children of an element.</param>
            <returns>An enumeration of all elements of source and their children in depth-first order.</returns>
        </member>
        <member name="M:Stride.Core.Extensions.DesignExtensions.GetOrCreateValue``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Returns the value corresponding to the given key.
            If the key is absent from the dictionary, it is added with a new instance of the <typeparamref name="TValue"/> type.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key of the value we are looking for.</param>
            <returns>The value attached to key, if key already exists in the dictionary; otherwise, a new instance of the <typeparamref name="TValue"/> type.</returns>
            <seealso cref="M:Stride.Core.Extensions.DesignExtensions.GetOrCreateValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})"/>
        </member>
        <member name="M:Stride.Core.Extensions.DesignExtensions.GetOrCreateValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Returns the value corresponding to the given key.
            If the key is absent from the dictionary, the method invokes a callback function to create a value that is bound to the specified key.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key of the value we are looking for.</param>
            <param name="createValueFunc">A function that can create a value for the given key. It has a single parameter of type <typeparamref name="TKey"/>, and returns a value of type <typeparamref name="TValue"/>.</param>
            <returns>The value attached to key, if key already exists in the dictionary; otherwise, the new value returned by the <paramref name="createValueFunc"/>.</returns>
        </member>
        <member name="T:Stride.Core.Extensions.EnumExtensions">
            <summary>
            Helper functions to process enum flags.
            </summary>
        </member>
        <member name="M:Stride.Core.Extensions.EnumExtensions.GetIndividualFlags(System.Type)">
            <summary>
            Returns an enumerable of all values in the flag enum, excluding values of zero and values matching multiple bytes.
            </summary>
            <param name="enumType">The type of flag enum.</param>
            <returns>An enumerable of all values in the flag enum, excluding values of zero and values matching multiple bytes.</returns>
        </member>
        <member name="M:Stride.Core.Extensions.EnumExtensions.GetAllFlags(System.Enum)">
            <summary>
            Returns all the flags that are contained in the given value, including zero flags and flags that contains more than a single bit.
            </summary>
            <param name="value">The value for which to return matching flags</param>
            <returns>An enumerable of all the flags that are contained in the given value.</returns>
        </member>
        <member name="M:Stride.Core.Extensions.EnumExtensions.GetIndividualFlags(System.Enum)">
            <summary>
            Returns all the individual flags that are contained in the given value, excluding zero flags and flags that contains more than a single bit.
            </summary>
            <param name="value">The value for which to return matching flags</param>
            <returns>An enumerable of all the flags that are contained in the given value.</returns>
        </member>
        <member name="M:Stride.Core.Extensions.EnumExtensions.GetEnum(System.Type,System.Collections.Generic.IEnumerable{System.Enum})">
            <summary>
            Returns an enum value of all the given flags set together with the bitwise OR operator.
            </summary>
            <param name="enumType">The type of enum.</param>
            <param name="flags">The list of flags to set together.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Core.Extensions.EnumExtensions.GetFlags(System.Enum,System.Collections.Generic.IList{System.Enum})">
            <summary>
            Returns all the flags from the given list of flags that are contained in the given value, using the bitwise AND operator.
            </summary>
            <param name="value">The value for which to return matching flags</param>
            <param name="flags">The list of flags to test.</param>
            <returns>An enumerable of flags from the list of flags that are contained in the given value.</returns>
        </member>
        <member name="F:Stride.Core.Extensions.ExceptionExtensions.MaxStackTraceLines">
            <summary>
            Represents the maximum number of lines to include in the stack trace when formatting a exception to be displayed in a dialog.
            </summary>
        </member>
        <member name="M:Stride.Core.Extensions.ExceptionExtensions.Ignore(System.Exception)">
            <summary>
            Explicitly ignores the exception. This method does nothing but suppress warnings related to a catch block doing nothing.
            </summary>
            <param name="exception">The exception to ignore.</param>
        </member>
        <member name="M:Stride.Core.Extensions.ExceptionExtensions.FormatSummary(System.Exception,System.Boolean)">
            <summary>
            Formats the exception to be displayed in a dialog message. This methods will limit the number of lines to the value of <see cref="F:Stride.Core.Extensions.ExceptionExtensions.MaxStackTraceLines"/>.
            </summary>
            <param name="exception">The exception to format</param>
            <param name="startWithNewLine">Indicate whether a <see cref="P:System.Environment.NewLine"/> symbol should be included at the beginning of the resulting string.</param>
            <returns>A string representing the exception formatted for dialog message.</returns>
        </member>
        <member name="M:Stride.Core.Extensions.ExceptionExtensions.FormatFull(System.Exception,System.Int32,System.Int32)">
            <summary>
            Formats the exception to be displayed in a log or report. This method will process <see cref="T:System.AggregateException"/>,
            expand <see cref="P:System.Exception.InnerException"/>, and does not limit the number of line of the resulting string.
            </summary>
            <param name="exception">The exception to format</param>
            <param name="indentIncrement">The number of spaces to add to the current indent when printing an inner exception.</param>
            <param name="indent">The number of spaces to insert at the beginning of each line.</param>
            <returns>A string representing the exception formatted for log or report.</returns>
        </member>
        <member name="M:Stride.Core.Extensions.ExceptionExtensions.ExtractStackTrace(System.Exception,System.Int32,System.Int32)">
            <summary>
            Extracts the stack trace from an exception, formatting it correctly and limiting the number of lines if needed.
            </summary>
            <param name="exception">The exception from which to extract the stack trace.</param>
            <param name="indent">The number of spaces to insert at the beginning of each line.</param>
            <param name="maxLines">The maximum number of lines to return in the resulting string. Zero or negative numbers mean no limit.</param>
            <returns>A properly formated string containing the stack trace.</returns>
        </member>
        <member name="T:Stride.Core.Extensions.ObjectExtensions">
            <summary>
            A static class that provides extension methods on the <see cref="T:System.Object"/> type.
            </summary>
        </member>
        <member name="M:Stride.Core.Extensions.ObjectExtensions.ToStringSafe(System.Object)">
            <summary>
            An extension method that checks for nullity before invoking <see cref="M:System.Object.ToString"/> on a given object and catches exception thrown by this method.
            </summary>
            <param name="obj">The object.</param>
            <returns>The return value of <see cref="M:System.Object.ToString"/>, or "(null)" if <see ref="obj"/> is null, or (ExceptionInToString)" if <see cref="M:System.Object.ToString"/> thrown an exception.</returns>
        </member>
        <member name="M:Stride.Core.Extensions.ObjectExtensions.Yield``1(``0)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the given object as its single item.
            </summary>
            <typeparam name="T">The type argument for the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to generate</typeparam>
            <param name="obj">The object to yield.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the given object as its single item.</returns>
            <remarks>This method uses <b>yield return</b> to return the given object as an enumerable.</remarks>
        </member>
        <member name="M:Stride.Core.Extensions.ObjectExtensions.ToEnumerable``1(System.Object)">
            <summary>
            Returns the given object if it is an enumerable. Otherwise, returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the given object as its single item.
            </summary>
            <typeparam name="T">The type argument for the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to generate</typeparam>
            <param name="obj">The object to convert to an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>the given object if it is an enumerable, an <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the given object as its single item otherwise.</returns>
            <remarks>This method uses <see cref="M:Stride.Core.Extensions.ObjectExtensions.Yield``1(``0)"/> to return the given object as an enumerable.</remarks>
        </member>
        <member name="M:Stride.Core.Extensions.ObjectExtensions.SafeArgument``1(``0,System.String)">
            <summary>
            This method checks if the given <c>this</c> object is <c>null</c>, and throws a <see cref="T:System.ArgumentNullException"/> with the given argument name if so.
            It returns the given this object.
            </summary>
            <typeparam name="T">The type of object to test.</typeparam>
            <param name="obj">The object to test.</param>
            <param name="argumentName">The name of the argument, in case an <see cref="T:System.ArgumentNullException"/> must be thrown.</param>
            <returns>The given object.</returns>
            <remarks>This method can be used to test for null argument when forwarding members of the object to the <c>base</c> or <c>this</c> constructor.</remarks>
        </member>
        <member name="M:Stride.Core.Extensions.ProcessExtensions.WaitForExitAsync(System.Diagnostics.Process,System.Threading.CancellationToken)">
            <summary>
            Waits asynchronously for the process to exit.
            </summary>
            <param name="process">The process to wait for cancellation.</param>
            <param name="cancellationToken">A cancellation token. If invoked, the task will return
            immediately as cancelled.</param>
            <returns>A Task representing waiting for the process to end.</returns>
        </member>
        <member name="M:Stride.Core.Extensions.TypeDescriptorExtensions.GetInnerCollectionType(Stride.Core.Reflection.ITypeDescriptor)">
            <summary>
            Attempts to return the type of inner values of an <see cref="T:Stride.Core.Reflection.ITypeDescriptor"/>, if it represents an enumerable type. If the given type descriptor is
            a <see cref="T:Stride.Core.Reflection.CollectionDescriptor"/>, this method will return its <see cref="P:Stride.Core.Reflection.CollectionDescriptor.ElementType"/> property. If the given type descriptor
            is a <see cref="T:Stride.Core.Reflection.DictionaryDescriptor"/>, this method will return its <see cref="P:Stride.Core.Reflection.DictionaryDescriptor.ValueType"/>. Otherwise, it will return the
            <see cref="P:Stride.Core.Reflection.ITypeDescriptor.Type"/> property.
            </summary>
            <param name="typeDescriptor">The type descriptor.</param>
            <returns>The type of inner values of an <see cref="T:Stride.Core.Reflection.ITypeDescriptor"/>.</returns>
        </member>
        <member name="T:Stride.Core.IAsyncDisposable">
            <summary>
            An interface allowing to dispose an object asynchronously.
            </summary>
        </member>
        <member name="M:Stride.Core.IAsyncDisposable.DisposeAsync">
            <summary>
            Disposes the given instance asynchronously.
            </summary>
            <returns>A task that completes when this instance has been disposed.</returns>
        </member>
        <member name="T:Stride.Core.IDestroyable">
            <summary>
            Similar to the <see cref="T:System.IDisposable"/> but only deals with managed resources.
            </summary>
            <remarks>
            Class implementing both <see cref="T:Stride.Core.IDestroyable"/> and <see cref="T:System.IDisposable"/> should call <see cref="M:Stride.Core.IDestroyable.Destroy"/>
            from the <see cref="M:System.IDisposable.Dispose"/> method when appropriate.
            </remarks>
        </member>
        <member name="M:Stride.Core.IDestroyable.Destroy">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting managed resources.
            </summary>
        </member>
        <member name="T:Stride.Core.IO.UDirectory">
            <summary>
            Defines a normalized directory path. See <see cref="T:Stride.Core.IO.UPath"/> for details. This class cannot be inherited.
            </summary>
        </member>
        <member name="F:Stride.Core.IO.UDirectory.Empty">
            <summary>
            An empty directory.
            </summary>
        </member>
        <member name="F:Stride.Core.IO.UDirectory.This">
            <summary>
            A this '.' directory.
            </summary>
        </member>
        <member name="M:Stride.Core.IO.UDirectory.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.IO.UDirectory"/> class.
            </summary>
            <param name="directoryPath">The directory path.</param>
        </member>
        <member name="M:Stride.Core.IO.UDirectory.GetDirectoryName">
            <summary>
            Gets the name of the directory.
            </summary>
            <returns>The name of the directory.</returns>
        </member>
        <member name="M:Stride.Core.IO.UDirectory.MakeRelative(Stride.Core.IO.UDirectory)">
            <summary>
            Makes this instance relative to the specified anchor directory.
            </summary>
            <param name="anchorDirectory">The anchor directory.</param>
            <returns>A relative path of this instance to the anchor directory.</returns>
        </member>
        <member name="M:Stride.Core.IO.UDirectory.op_Implicit(System.String)~Stride.Core.IO.UDirectory">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Stride.Core.IO.UPath"/>.
            </summary>
            <param name="fullPath">The full path.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Stride.Core.IO.UDirectory.Combine(Stride.Core.IO.UDirectory,Stride.Core.IO.UDirectory)">
            <summary>
            Combines the specified left uniform location and right location and return a new <see cref="T:Stride.Core.IO.UDirectory"/>
            </summary>
            <param name="leftPath">The left path.</param>
            <param name="rightPath">The right path.</param>
            <returns>The combination of both paths.</returns>
        </member>
        <member name="M:Stride.Core.IO.UDirectory.Contains(Stride.Core.IO.UPath)">
            <summary>
            Determines whether this directory contains the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns><c>true</c> if this directory contains the specified path; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.IO.UDirectorySerializer.Serialize(Stride.Core.IO.UDirectory@,Stride.Core.Serialization.ArchiveMode,Stride.Core.Serialization.SerializationStream)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.IO.UFile">
            <summary>
            Defines a normalized file path. See <see cref="T:Stride.Core.IO.UPath"/> for details. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Stride.Core.IO.UFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.IO.UFile"/> class.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Stride.Core.IO.UFile.GetFileName">
            <summary>
            Gets the name of the file with its extension. Can be null.
            </summary>
            <returns>The name.</returns>
        </member>
        <member name="M:Stride.Core.IO.UFile.GetFileNameWithoutExtension">
            <summary>
            Gets the name of the file without its extension.
            </summary>
            <value>The name of file.</value>
        </member>
        <member name="M:Stride.Core.IO.UFile.GetDirectoryAndFileName">
            <summary>
            Gets the file path (<see cref="M:Stride.Core.IO.UPath.GetDirectory"/> + '/' + <see cref="M:Stride.Core.IO.UFile.GetFileName"/>) with the extension or drive. Can be an null if no filepath.
            </summary>
            <returns>The path.</returns>
        </member>
        <member name="M:Stride.Core.IO.UFile.GetDirectoryAndFileNameWithoutExtension">
            <summary>
            Gets the file path (<see cref="M:Stride.Core.IO.UPath.GetDirectory"/> + '/' + <see cref="M:Stride.Core.IO.UFile.GetFileName"/>) without the extension or drive. Can be an null if no filepath.
            </summary>
            <returns>The path.</returns>
        </member>
        <member name="M:Stride.Core.IO.UFile.GetFileExtension">
            <summary>
            Gets the extension of the file. Can be null.
            </summary>
            <returns>The extension.</returns>
        </member>
        <member name="M:Stride.Core.IO.UFile.GetFullPathWithoutExtension">
            <summary>
            Gets the name of the file with its extension.
            </summary>
            <value>The name of file.</value>
        </member>
        <member name="M:Stride.Core.IO.UFile.Combine(Stride.Core.IO.UDirectory,Stride.Core.IO.UFile)">
            <summary>
            Combines the specified left uniform location and right location and return a new <see cref="T:Stride.Core.IO.UFile"/>
            </summary>
            <param name="leftPath">The left path.</param>
            <param name="rightPath">The right path.</param>
            <returns>The combination of both paths.</returns>
        </member>
        <member name="M:Stride.Core.IO.UFile.MakeRelative(Stride.Core.IO.UDirectory)">
            <summary>
            Makes this instance relative to the specified anchor directory.
            </summary>
            <param name="anchorDirectory">The anchor directory.</param>
            <returns>A relative path of this instance to the anchor directory.</returns>
        </member>
        <member name="M:Stride.Core.IO.UFile.IsValid(System.String)">
            <summary>
            Determines whether the specified path is a valid <see cref="T:Stride.Core.IO.UFile"/>
            </summary>
            <param name="path">The path.</param>
            <returns><c>true</c> if the specified path is a valid <see cref="T:Stride.Core.IO.UFile"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.IO.UFile.op_Implicit(System.String)~Stride.Core.IO.UFile">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Stride.Core.IO.UPath"/>.
            </summary>
            <param name="fullPath">The full path.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Stride.Core.IO.UFileSerializer">
            <summary>
            Data serializer for Guid.
            </summary>
        </member>
        <member name="M:Stride.Core.IO.UFileSerializer.Serialize(Stride.Core.IO.UFile@,Stride.Core.Serialization.ArchiveMode,Stride.Core.Serialization.SerializationStream)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.IO.UPath">
            <summary>
            Base class that describes a uniform path and provides method to manipulate them. Concrete class are <see cref="T:Stride.Core.IO.UFile"/> and <see cref="T:Stride.Core.IO.UDirectory"/>.
            This class is immutable and its descendants are immutable. See remarks.
            </summary>
            <remarks>
            <para>A uniform path contains only characters '/' to separate directories and doesn't contain any successive
            '/' or './'. This class is used to represent a path, relative or absolute to a directory or filename.</para>
            <para>This class can be used to represent uniforms paths both on windows or unix platforms</para>
            TODO Provide more documentation on how to use this class
            </remarks>
        </member>
        <member name="F:Stride.Core.IO.UPath.DirectorySeparatorChar">
            <summary>
            The directory separator char '/' used to separate directory in an url.
            </summary>
        </member>
        <member name="F:Stride.Core.IO.UPath.DirectorySeparatorCharAlt">
            <summary>
            The directory separator char '\' used to separate directory in an url.
            </summary>
        </member>
        <member name="F:Stride.Core.IO.UPath.DirectorySeparatorString">
            <summary>
            The directory separator string '/' used to separate directory in an url.
            </summary>
        </member>
        <member name="F:Stride.Core.IO.UPath.DirectorySeparatorStringAlt">
            <summary>
            The directory separator string '\' used to separate directory in an url.
            </summary>
        </member>
        <member name="M:Stride.Core.IO.UPath.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.IO.UPath" /> class from a file path.
            </summary>
            <param name="filePath">The full path to a file.</param>
            <param name="isDirectory">if set to <c>true</c> the filePath is considered as a directory and not a filename.</param>
        </member>
        <member name="P:Stride.Core.IO.UPath.FullPath">
            <summary>
            Gets the full path ((drive?)(directory?/)(name.ext?)). An empty path is an empty string.
            </summary>
            <value>The full path.</value>
            <remarks>This property cannot be null.</remarks>
        </member>
        <member name="P:Stride.Core.IO.UPath.HasDrive">
            <summary>
            Gets a value indicating whether this instance has a <see cref="M:Stride.Core.IO.UPath.GetDrive"/> != null.
            </summary>
            <value><c>true</c> if this instance has drive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.IO.UPath.HasDirectory">
            <summary>
            Gets a value indicating whether this instance has a <see cref="M:Stride.Core.IO.UPath.GetDirectory"/> != null;
            </summary>
            <value><c>true</c> if this instance has directory; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.IO.UPath.IsRelative">
            <summary>
            Gets a value indicating whether this location is a relative location.
            </summary>
            <value><c>true</c> if this instance is relative; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.IO.UPath.IsAbsolute">
            <summary>
            Determines whether this instance is absolute.
            </summary>
            <returns><c>true</c> if this instance is absolute; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Stride.Core.IO.UPath.IsFile">
            <summary>
            Gets a value indicating whether this instance is a location to a file. Can be null.
            </summary>
            <value><c>true</c> if this instance is file; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.IO.UPath.PathType">
            <summary>
            Gets the type of the path (absolute or relative).
            </summary>
            <value>The type of the path.</value>
        </member>
        <member name="M:Stride.Core.IO.UPath.IsNullOrEmpty(Stride.Core.IO.UPath)">
            <summary>
            Indicates whether the specified <see cref="T:Stride.Core.IO.UPath"/> is null or empty.
            </summary>
            <param name="path">The path to test</param>
            <returns><c>true</c> if the value parameter is null or empty, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.IO.UPath.GetDrive">
            <summary>
            Gets the drive (contains the ':' if any), can be null.
            </summary>
            <returns>The drive.</returns>
        </member>
        <member name="M:Stride.Core.IO.UPath.GetDirectory">
            <summary>
            Gets the directory. Can be null. It won't contain the drive if one is specified.
            </summary>
            <returns>The directory.</returns>
        </member>
        <member name="M:Stride.Core.IO.UPath.GetParent">
            <summary>
            Gets the parent directory of this instance. For a file, this is the directory directly containing the file.
            For a directory, this is the parent directory.
            </summary>
            <returns>The parent directory or <see cref="F:Stride.Core.IO.UDirectory.Empty"/> if no directory found.</returns>
        </member>
        <member name="M:Stride.Core.IO.UPath.GetComponents">
            <summary>
            Decomposition of this instance in its subcomponents which are made of the drive if any,
            the directories and the filename (including its extension).
            </summary>
            <returns>An IEnumerable of all the components of this instance.</returns>
        </member>
        <member name="M:Stride.Core.IO.UPath.GetFullDirectory">
            <summary>
            Gets the full directory with <see cref="M:Stride.Core.IO.UPath.GetDrive"/> + <see cref="M:Stride.Core.IO.UPath.GetDirectory"/> or empty directory.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Stride.Core.IO.UPath.ToWindowsPath">
            <summary>
            Converts this path to a Windows path (/ replaced by \)
            </summary>
            <returns>A string representation of this path in windows form.</returns>
        </member>
        <member name="M:Stride.Core.IO.UPath.op_Equality(Stride.Core.IO.UPath,Stride.Core.IO.UPath)">
            <summary>
            Implements the ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Stride.Core.IO.UPath.op_Inequality(Stride.Core.IO.UPath,Stride.Core.IO.UPath)">
            <summary>
            Implements the !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Stride.Core.IO.UPath.Combine``1(Stride.Core.IO.UDirectory,``0)">
            <summary>
            Combines the specified left uniform location and right location and return a new <see cref="T:Stride.Core.IO.UPath"/>
            </summary>
            <param name="leftPath">The left path.</param>
            <param name="rightPath">The right path.</param>
            <returns>The combination of both paths.</returns>
        </member>
        <member name="M:Stride.Core.IO.UPath.MakeRelative(Stride.Core.IO.UDirectory)">
            <summary>
            Makes this instance relative to the specified anchor directory.
            </summary>
            <param name="anchorDirectory">The anchor directory.</param>
            <returns>A relative path of this instance to the anchor directory.</returns>
        </member>
        <member name="M:Stride.Core.IO.UPath.op_Implicit(Stride.Core.IO.UPath)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Stride.Core.IO.UPath"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="url">The URL.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Stride.Core.IO.UPath.HasDirectoryChars(System.String)">
            <summary>
            Determines whether the specified path contains some directory characeters '\' or '/'
            </summary>
            <param name="path">The path.</param>
            <returns><c>true</c> if the specified path contains some directory characeters '\' or '/'; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.IO.UPath.IsValid(System.String)">
            <summary>
            Determines whether the specified path is a valid <see cref="T:Stride.Core.IO.UPath"/>
            </summary>
            <param name="path">The path.</param>
            <returns><c>true</c> if the specified path is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.IO.UPath.Normalize(System.String)">
            <summary>
            Normalize a path by replacing '\' by '/' and transforming relative '..' or current path '.' to an absolute path. See remarks.
            </summary>
            <param name="pathToNormalize">The path automatic normalize.</param>
            <returns>A normalized path.</returns>
            <exception cref="T:System.ArgumentException">If path is invalid</exception>
            <remarks>Unlike <see cref="T:System.IO.Path" /> , this doesn't make a path absolute to the actual file system.</remarks>
        </member>
        <member name="M:Stride.Core.IO.UPath.Normalize(System.String,System.String@)">
            <summary>
            Normalize a path by replacing '\' by '/' and transforming relative '..' or current path '.' to an absolute path. See remarks.
            </summary>
            <param name="pathToNormalize">The path automatic normalize.</param>
            <param name="error">The error or null if no errors.</param>
            <returns>A normalized path or null if there is an error.</returns>
            <remarks>Unlike <see cref="T:System.IO.Path" /> , this doesn't make a path absolute to the actual file system.</remarks>
        </member>
        <member name="T:Stride.Core.IO.UPath.NormalizationState">
            <summary>
            Possible state when normalizing a path.
            </summary>
        </member>
        <member name="M:Stride.Core.IO.UPath.Normalize(System.String,Stride.Core.StringSpan@,Stride.Core.StringSpan@,Stride.Core.StringSpan@,System.String@)">
            <summary>
            Normalize a path by replacing '\' by '/' and transforming relative '..' or current path '.' to an absolute path. See remarks.
            </summary>
            <param name="pathToNormalize">The path automatic normalize.</param>
            <param name="drive">The drive character region.</param>
            <param name="directoryOrFileName">The directory.</param>
            <param name="fileName">Name of the file.</param>
            <param name="error">The error or null if no errors.</param>
            <returns>A normalized path or null if there is an error.</returns>
            <remarks>Unlike <see cref="T:System.IO.Path" /> , this doesn't make a path absolute to the actual file system.</remarks>
        </member>
        <member name="M:Stride.Core.IO.UPath.IsParentComponentPath(System.Text.StringBuilder,Stride.Core.StringSpan)">
            <summary>
            Does `builder.Substring(path)` represent either '..' or '../'?
            </summary>
            <param name="builder">String holding path.</param>
            <param name="path">Span of component to compare against.</param>
            <returns>True if it represents a parent directory.</returns>
        </member>
        <member name="M:Stride.Core.IO.UPath.IsRelativeCurrentComponentPath(System.Text.StringBuilder,Stride.Core.StringSpan)">
            <summary>
            Does `builder.Substring(path)` represent either '.' or './'?
            </summary>
            <param name="builder">String holding path.</param>
            <param name="path">Span of component to compare against.</param>
            <returns>True if it represents a parent directory.</returns>
        </member>
        <member name="M:Stride.Core.IO.UPath.TrimParentAndSelfPath(System.Text.StringBuilder,System.Int32@,Stride.Core.StringSpan*,System.Boolean,System.Boolean)">
            <summary>
            Trims the path by removing unecessary '..' and '.' path items.
            </summary>
            <param name="builder">The builder.</param>
            <param name="currentPath">The current path.</param>
            <param name="paths">The paths.</param>
            <param name="hasDrivePath">Does path has a drive letter in it?</param>
            <param name="isLastTrim">if set to <c>true</c> is last trim to occur.</param>
        </member>
        <member name="T:Stride.Core.IO.UPathType">
            <summary>
            Describes if a <see cref="T:Stride.Core.IO.UPath"/> is relative or absolute.
            </summary>
        </member>
        <member name="F:Stride.Core.IO.UPathType.Absolute">
            <summary>
            The path is absolute
            </summary>
        </member>
        <member name="F:Stride.Core.IO.UPathType.Relative">
            <summary>
            The path is relative
            </summary>
        </member>
        <member name="T:Stride.Core.IO.UPathTypeConverter`1">
            <summary>
            An abstract implementation of <see cref="T:System.ComponentModel.TypeConverter"/> used for types derived from <see cref="T:Stride.Core.IO.UPath"/> in order to convert then from a string.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Stride.Core.IO.UPathTypeConverter`1.Convert(System.String)">
            <summary>
            Performs the actual string conversion.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Stride.Core.IO.UPathTypeConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.IO.UPathTypeConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.IO.UFileTypeConverter">
            <summary>
            The implementation of <see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="T:Stride.Core.IO.UFile"/> that implements conversion from strings.
            </summary>
        </member>
        <member name="M:Stride.Core.IO.UFileTypeConverter.Convert(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.IO.UDirectoryTypeConverter">
            <summary>
            The implementation of <see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="T:Stride.Core.IO.UDirectory"/> that implements conversion from strings.
            </summary>
        </member>
        <member name="M:Stride.Core.IO.UDirectoryTypeConverter.Convert(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.ISyncLockable">
            <summary>
            An interface representing a token of a <see cref="T:Stride.Core.MicroThreadLock"/> that can be synchronously locked.
            </summary>
        </member>
        <member name="M:Stride.Core.ISyncLockable.Lock">
            <summary>
            Takes the synchronous lock on the related <see cref="T:Stride.Core.MicroThreadLock"/>. The lock will be bound to the calling thread, similarly to a <see cref="T:System.Threading.Monitor"/>,
            and will be released when the returned object is disposed. This must occur on the same thread.
            </summary>
            <returns>A disposable object that will release the lock when disposed.</returns>
        </member>
        <member name="M:Stride.Core.KeyValuePair.Create``2(``0,``1)">
            <summary>
            Creates a new key/value pair.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Stride.Core.MicroThreadLock">
            <summary>
            An hybrid lock that allows to do asynchrounous work when acquired from a <see cref="T:Stride.Core.MicroThreading.MicroThread"/>, and still allow to await for acquisition out of a
            microthread. This lock support re-entrancy.
            </summary>
        </member>
        <member name="M:Stride.Core.MicroThreadLock.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.MicroThreadLock.ReserveSyncLock">
            <summary>
            Reserves the lock in order to use synchronous locking. The lock will be bound to the calling thread and therefore should be released on the same thread.
            </summary>
            <returns>A task that completes when the lock is reserved. The result of the task is an <see cref="T:Stride.Core.ISyncLockable"/> object allowing to do the lock.</returns>
        </member>
        <member name="M:Stride.Core.MicroThreadLock.LockAsync">
            <summary>
            Acquires an asynchronous lock. The lock will be tied to the current <see cref="T:Stride.Core.MicroThreading.MicroThread"/> to allow re-entrancy.
            </summary>
            <returns>A task that completes when the lock is acquired.</returns>
            <remarks>This way of acquiring the lock is only valid when in a <see cref="T:Stride.Core.MicroThreading.MicroThread"/>.</remarks>
        </member>
        <member name="T:Stride.Core.Design.NamespaceDoc">
            <summary>
            The <see cref="N:Stride.Core.Design"/> namepace contains types used at design-time.
            </summary>
        </member>
        <member name="T:Stride.Core.NamingHelper">
            <summary>
            Helper to verify naming conventions.
            </summary>
        </member>
        <member name="T:Stride.Core.NamingHelper.ContainsLocationDelegate">
            <summary>
            Delegate to test if the specified location is already used.
            </summary>
            <param name="location">The location to try to use.</param>
            <returns><c>true</c> if the specified location is already used, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stride.Core.NamingHelper.IsValidNamespace(System.String)">
            <summary>
            Determines whether the specified string is valid namespace identifier.
            </summary>
            <param name="text">The namespace text.</param>
            <returns><c>true</c> if is a valid namespace identifier; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.NamingHelper.IsValidNamespace(System.String,System.String@)">
            <summary>
            Determines whether the specified string is valid namespace identifier.
            </summary>
            <param name="text">The namespace text.</param>
            <param name="error">The error if return is false.</param>
            <returns><c>true</c> if is a valid namespace identifier; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.NamingHelper.IsIdentifier(System.String)">
            <summary>
            Determines whether the specified text is a C# identifier.
            </summary>
            <param name="text">The text.</param>
            <returns><c>true</c> if the specified text is an identifier; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">text</exception>
        </member>
        <member name="M:Stride.Core.NamingHelper.ComputeNewName``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
            Generate a name for a new object that is guaranteed to be unique among a collection of existing objects. To generate such name, a base name and a pattern for variations must be provided.
            </summary>
            <typeparam name="T">The type of object in the collection of existing object.</typeparam>
            <param name="baseName">The base name used to generate the new name. If the name is available in the collection, it will be returned as-is. Otherwise, a name following the given pattern will be returned.</param>
            <param name="existingItems">The collection of existing items, used to verify that the name being generated is not already used.</param>
            <param name="existingNameFunc">A function used to extract the name of an object of the given collection. If null, the <see cref="M:System.Object.ToString"/> method will be used.</param>
            <param name="namePattern">The pattern used to generate the new name, when the base name is unavailable. This pattern must contains the token '{0}' that will be replaced by the base name, and the token '{1}' that will be replaced by the smallest numerical value that can generate an available name, starting from 2. If null, <see cref="F:Stride.Core.NamingHelper.DefaultNamePattern"/> will be used instead.</param>
            <returns><see cref="!:baseName"/> if no item of <see cref="!:existingItems"/> returns this value through <see cref="!:existingNameFunc"/>. Otherwise, a string formatted with <see cref="!:namePattern"/>, using <see cref="!:baseName"/> as token '{0}' and the smallest numerical value that can generate an available name, starting from 2</returns>
        </member>
        <member name="M:Stride.Core.NamingHelper.ComputeNewName(System.String,Stride.Core.NamingHelper.ContainsLocationDelegate,System.String)">
            <summary>
            Generate a name for a new object that is guaranteed to be unique for the provided "contains predicate". To generate such name, a base name and a pattern for variations must be provided.
            </summary>
            <param name="baseName">The base name used to generate the new name. If the name is available in the collection, it will be returned as-is. Otherwise, a name following the given pattern will be returned.</param>
            <param name="containsDelegate">The delegate used to determine if the asset is already existing</param>
            <param name="namePattern">The pattern used to generate the new name, when the base name is unavailable. This pattern must contains the token '{0}' that will be replaced by the base name, and the token '{1}' that will be replaced by the smallest numerical value that can generate an available name, starting from 2. If null, <see cref="F:Stride.Core.NamingHelper.DefaultNamePattern"/> will be used instead.</param>
            <returns><see cref="!:baseName"/> if the "contains predicate" returns false. Otherwise, a string formatted with <see cref="!:namePattern"/>, using <see cref="!:baseName"/> as token '{0}' and the smallest numerical value that can generate an available name, starting from 2</returns>
        </member>
        <member name="T:Stride.Core.ObjectCache`2">
            <summary>
            A thread-safe cache of indexed objects that will keep the most recently accessed instance around in a fixed size buffer.
            </summary>
            <typeparam name="TKey">The type of keys used to index objects.</typeparam>
            <typeparam name="TValue">The type of objects contained in the cache.</typeparam>
        </member>
        <member name="F:Stride.Core.ObjectCache`2.DefaultCacheSize">
            <summary>
            The default size of the cache when an instance of <see cref="T:Stride.Core.ObjectCache`2"/> is created with the parameterless constructor.
            </summary>
        </member>
        <member name="M:Stride.Core.ObjectCache`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.ObjectCache`2"/> class with a custom comparer for the keys.
            </summary>
            <param name="size">The size of this cache.</param>
            <param name="comparer">The comparer to use to compare keys.</param>
        </member>
        <member name="M:Stride.Core.ObjectCache`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.ObjectCache`2"/> class.
            </summary>
            <param name="size">The size of this cache.</param>
        </member>
        <member name="M:Stride.Core.ObjectCache`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.ObjectCache`2"/> class with a default size equal to <see cref="F:Stride.Core.ObjectCache`2.DefaultCacheSize"/>.
            </summary>
        </member>
        <member name="P:Stride.Core.ObjectCache`2.Size">
            <summary>
            Gets or sets the size of the cache.
            </summary>
            <remarks>If the new value is smaller than the current size, oldest accessed items will be removed from the cache immediately.</remarks>
        </member>
        <member name="M:Stride.Core.ObjectCache`2.TryGet(`0)">
            <summary>
            Tries to retrieve the object corresponding to the given key in the cache.
            </summary>
            <param name="key">The key of the item to look for.</param>
            <returns>The object corresponding to the given key if it's available in the cache, <c>Null</c> otherwise.</returns>
        </member>
        <member name="M:Stride.Core.ObjectCache`2.Cache(`0,`1)">
            <summary>
            Adds the given indexed object in the cache.
            </summary>
            <param name="key">The key of the object.</param>
            <param name="value">The object to cache.</param>
        </member>
        <member name="T:Stride.Core.PackageVersion">
            <summary>
            A hybrid implementation of SemVer that supports semantic versioning as described at http://semver.org while not strictly enforcing it to
            allow older 4-digit versioning schemes to continue working.
            </summary>
        </member>
        <member name="F:Stride.Core.PackageVersion.Zero">
            <summary>
            Defines version 0.
            </summary>
        </member>
        <member name="M:Stride.Core.PackageVersion.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.PackageVersion"/> class.
            </summary>
            <param name="version">The version.</param>
        </member>
        <member name="M:Stride.Core.PackageVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.PackageVersion"/> class.
            </summary>
            <param name="major">The major.</param>
            <param name="minor">The minor.</param>
            <param name="build">The build.</param>
            <param name="revision">The revision.</param>
        </member>
        <member name="M:Stride.Core.PackageVersion.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.PackageVersion"/> class.
            </summary>
            <param name="major">The major.</param>
            <param name="minor">The minor.</param>
            <param name="build">The build.</param>
            <param name="specialVersion">The special version.</param>
        </member>
        <member name="M:Stride.Core.PackageVersion.#ctor(System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.PackageVersion"/> class.
            </summary>
            <param name="version">The version.</param>
        </member>
        <member name="M:Stride.Core.PackageVersion.#ctor(System.Version,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.PackageVersion"/> class.
            </summary>
            <param name="version">The version.</param>
            <param name="specialVersion">The special version.</param>
        </member>
        <member name="P:Stride.Core.PackageVersion.Version">
            <summary>
            Gets the normalized version portion.
            </summary>
        </member>
        <member name="P:Stride.Core.PackageVersion.SpecialVersion">
            <summary>
            Gets the optional special version.
            </summary>
        </member>
        <member name="M:Stride.Core.PackageVersion.Parse(System.String)">
            <summary>
            Parses a version string using loose semantic versioning rules that allows 2-4 version components followed by an optional special version.
            </summary>
        </member>
        <member name="M:Stride.Core.PackageVersion.TryParse(System.String,Stride.Core.PackageVersion@)">
            <summary>
            Parses a version string using loose semantic versioning rules that allows 2-4 version components followed by an optional special version.
            </summary>
        </member>
        <member name="M:Stride.Core.PackageVersion.TryParseStrict(System.String,Stride.Core.PackageVersion@)">
            <summary>
            Parses a version string using strict semantic versioning rules that allows exactly 3 components and an optional special version.
            </summary>
        </member>
        <member name="M:Stride.Core.PackageVersion.ParseOptionalVersion(System.String)">
            <summary>
            Attempts to parse the version token as a SemanticVersion.
            </summary>
            <returns>An instance of SemanticVersion if it parses correctly, null otherwise.</returns>
        </member>
        <member name="M:Stride.Core.PackageVersion.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.PackageVersion.Equals(Stride.Core.PackageVersion)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.PackageVersion.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.PackageVersion.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.PackageVersion.PackageVersionDataSerializer.IsBlittable">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.PackageVersion.PackageVersionDataSerializer.Serialize(Stride.Core.PackageVersion@,Stride.Core.Serialization.ArchiveMode,Stride.Core.Serialization.SerializationStream)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.PackageVersionRange">
            <summary>
            A dependency to a range of version.
            </summary>
            <remarks>
             The version string is either a simple version or an arithmetic range
            <code>
                e.g.
                1.0         --> 1.0 ≤ x
                (,1.0]      --> x ≤ 1.0
                (,1.0)      --> x &lt; 1.0
                [1.0]       --> x == 1.0
                (1.0,)      --> 1.0 &lt; x
                (1.0, 2.0)   --> 1.0 &lt; x &lt; 2.0
                [1.0, 2.0]   --> 1.0 ≤ x ≤ 2.0
            </code>
            </remarks>
        </member>
        <member name="M:Stride.Core.PackageVersionRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.PackageVersionRange"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.PackageVersionRange.#ctor(Stride.Core.PackageVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.PackageVersionRange"/> class with only one possible version.
            </summary>
            <param name="version">The exact version.</param>
        </member>
        <member name="M:Stride.Core.PackageVersionRange.#ctor(Stride.Core.PackageVersion,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.PackageVersionRange" /> class with just a lower bound
            <paramref name="minVersion"/> that can be inclusive or not depending on <paramref name="minVersionInclusive"/>.
            </summary>
            <param name="minVersion">The minimum version.</param>
            <param name="minVersionInclusive">if set to <c>true</c> the minimum version is inclusive</param>
        </member>
        <member name="M:Stride.Core.PackageVersionRange.#ctor(Stride.Core.PackageVersion,System.Boolean,Stride.Core.PackageVersion,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.PackageVersionRange" /> class.
            </summary>
            <param name="minVersion">The minimum version.</param>
            <param name="minVersionInclusive">if set to <c>true</c> the minimum version is inclusive</param>
            <param name="maxVersion">The maximum version.</param>
            <param name="maxVersionInclusive">if set to <c>true</c> the maximum version is inclusive</param>
        </member>
        <member name="P:Stride.Core.PackageVersionRange.MinVersion">
            <summary>
            Gets or sets the minimum version.
            </summary>
            <value>The minimum version.</value>
        </member>
        <member name="P:Stride.Core.PackageVersionRange.IsMinInclusive">
            <summary>
            Gets or sets a value indicating whether the min version is inclusive.
            </summary>
            <value><c>true</c> if the min version is inclusive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.PackageVersionRange.MaxVersion">
            <summary>
            Gets or sets the maximum version.
            </summary>
            <value>The maximum version.</value>
        </member>
        <member name="P:Stride.Core.PackageVersionRange.IsMaxInclusive">
            <summary>
            Gets or sets a value indicating whether the max version is inclusive.
            </summary>
            <value><c>true</c> if the max version is inclusive; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Stride.Core.PackageVersionRange.Contains(Stride.Core.PackageVersion)">
            <summary>
            Determines whether this version range contains the specified version.
            </summary>
            <param name="version">The version to check.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Core.PackageVersionRange.GetSafeRange(Stride.Core.PackageVersion)">
            <summary>
            The safe range is defined as the highest build and revision for a given major and minor version
            </summary>
        </member>
        <member name="M:Stride.Core.PackageVersionRange.TryParse(System.String,Stride.Core.PackageVersionRange@)">
            <summary>
            Tries to parse a version dependency.
            </summary>
            <param name="value">The version dependency as a string.</param>
            <param name="result">The parsed result.</param>
            <returns><c>true</c> if successfuly parsed, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="M:Stride.Core.PackageVersionRange.ToPrettyPrint">
            <summary>
            Display a pretty version of the dependency.
            </summary>
            <returns>A pretty version of the dependency.</returns>
        </member>
        <member name="M:Stride.Core.PackageVersionRange.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.PackageVersionRange.Equals(Stride.Core.PackageVersionRange)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.PackageVersionRange.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="F:Stride.Core.Reflection.AssemblyContainer.Default">
            <summary>
            The default assembly container loader.
            </summary>
        </member>
        <member name="P:Stride.Core.Reflection.AssemblyContainer.LoadedAssemblies">
            <summary>
            Gets a copy of the list of loaded assemblies.
            </summary>
            <value>
            The loaded assemblies.
            </value>
        </member>
        <member name="T:Stride.Core.Reflection.DataVisitorBase">
            <summary>
            A visitor for serializable data (binary, yaml and editor).
            </summary>
        </member>
        <member name="M:Stride.Core.Reflection.DataVisitorBase.#ctor(Stride.Core.Reflection.IAttributeRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Reflection.DataVisitorBase"/> class.
            </summary>
            <param name="attributeRegistry">The attribute registry.</param>
        </member>
        <member name="M:Stride.Core.Reflection.DataVisitorBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Reflection.DataVisitorBase"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Reflection.DataVisitorBase.#ctor(Stride.Core.Reflection.ITypeDescriptorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Reflection.DataVisitorBase"/> class.
            </summary>
            <param name="typeDescriptorFactory">The type descriptor factory.</param>
            <exception cref="T:System.ArgumentNullException">typeDescriptorFactory</exception>
        </member>
        <member name="P:Stride.Core.Reflection.DataVisitorBase.TypeDescriptorFactory">
            <summary>
            Gets the type descriptor factory.
            </summary>
            <value>The type descriptor factory.</value>
        </member>
        <member name="P:Stride.Core.Reflection.DataVisitorBase.CustomVisitors">
            <summary>
            Gets or sets the custom visitors.
            </summary>
            <value>The custom visitors.</value>
        </member>
        <member name="P:Stride.Core.Reflection.DataVisitorBase.CurrentPath">
            <summary>
            Gets the current member path being visited.
            </summary>
            <value>The current path.</value>
        </member>
        <member name="P:Stride.Core.Reflection.DataVisitorBase.AttributeRegistry">
            <summary>
            Gets the attribute registry.
            </summary>
            <value>The attribute registry.</value>
        </member>
        <member name="M:Stride.Core.Reflection.DataVisitorBase.Reset">
            <summary>
            Resets this instance (clears the cache of visited objects).
            </summary>
        </member>
        <member name="M:Stride.Core.Reflection.DataVisitorBase.Visit(System.Object)">
            <summary>
            Visits the specified object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Stride.Core.Reflection.DataVisitorBase.Visit(System.Object,Stride.Core.Reflection.ITypeDescriptor)">
            <summary>
            Visits the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="descriptor">The descriptor.</param>
            <exception cref="T:System.ArgumentNullException">
            obj
            or
            descriptor
            </exception>
            <exception cref="T:System.ArgumentException">Descriptor [{0}] type doesn't correspond to object type [{1}].ToFormat(descriptor.Type, obj.GetType())</exception>
        </member>
        <member name="M:Stride.Core.Reflection.DataVisitorBase.VisitNull">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Reflection.DataVisitorBase.VisitPrimitive(System.Object,Stride.Core.Reflection.PrimitiveDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Reflection.DataVisitorBase.VisitObject(System.Object,Stride.Core.Reflection.ObjectDescriptor,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Reflection.DataVisitorBase.VisitObjectMember(System.Object,Stride.Core.Reflection.ObjectDescriptor,Stride.Core.Reflection.IMemberDescriptor,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Reflection.DataVisitorBase.VisitArray(System.Array,Stride.Core.Reflection.ArrayDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Reflection.DataVisitorBase.VisitArrayItem(System.Array,Stride.Core.Reflection.ArrayDescriptor,System.Int32,System.Object,Stride.Core.Reflection.ITypeDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Reflection.DataVisitorBase.VisitCollection(System.Collections.IEnumerable,Stride.Core.Reflection.CollectionDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Reflection.DataVisitorBase.VisitCollectionItem(System.Collections.IEnumerable,Stride.Core.Reflection.CollectionDescriptor,System.Int32,System.Object,Stride.Core.Reflection.ITypeDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Reflection.DataVisitorBase.VisitDictionary(System.Object,Stride.Core.Reflection.DictionaryDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Reflection.DataVisitorBase.VisitDictionaryKeyValue(System.Object,Stride.Core.Reflection.DictionaryDescriptor,System.Object,Stride.Core.Reflection.ITypeDescriptor,System.Object,Stride.Core.Reflection.ITypeDescriptor)">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.Reflection.IDataCustomVisitor">
            <summary>
            A custom visitor used by <see cref="T:Stride.Core.Reflection.DataVisitorBase"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Reflection.IDataCustomVisitor.CanVisit(System.Type)">
            <summary>
            Determines whether this instance can visit the specified object.
            </summary>
            <param name="type"></param>
            <returns><c>true</c> if this instance can visit the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.Reflection.IDataCustomVisitor.Visit(Stride.Core.Reflection.VisitorContext@)">
            <summary>
            Visits the specified object.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Stride.Core.Reflection.IDataVisitor">
            <summary>
            Interface for visiting serializable data (binary, yaml and editor).
            </summary>
        </member>
        <member name="M:Stride.Core.Reflection.IDataVisitor.VisitNull">
            <summary>
            Visits a null.
            </summary>
        </member>
        <member name="M:Stride.Core.Reflection.IDataVisitor.VisitPrimitive(System.Object,Stride.Core.Reflection.PrimitiveDescriptor)">
            <summary>
            Visits a primitive (int, float, string...etc.)
            </summary>
            <param name="primitive">The primitive.</param>
            <param name="descriptor">The descriptor.</param>
        </member>
        <member name="M:Stride.Core.Reflection.IDataVisitor.VisitObject(System.Object,Stride.Core.Reflection.ObjectDescriptor,System.Boolean)">
            <summary>
            Visits an object (either a class or a struct)
            </summary>
            <param name="obj">The object.</param>
            <param name="descriptor">The descriptor.</param>
            <param name="visitMembers"></param>
        </member>
        <member name="M:Stride.Core.Reflection.IDataVisitor.VisitObjectMember(System.Object,Stride.Core.Reflection.ObjectDescriptor,Stride.Core.Reflection.IMemberDescriptor,System.Object)">
            <summary>
            Visits an object member.
            </summary>
            <param name="container">The container.</param>
            <param name="containerDescriptor">The container descriptor.</param>
            <param name="member">The member.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Stride.Core.Reflection.IDataVisitor.VisitArray(System.Array,Stride.Core.Reflection.ArrayDescriptor)">
            <summary>
            Visits an array.
            </summary>
            <param name="array">The array.</param>
            <param name="descriptor">The descriptor.</param>
        </member>
        <member name="M:Stride.Core.Reflection.IDataVisitor.VisitArrayItem(System.Array,Stride.Core.Reflection.ArrayDescriptor,System.Int32,System.Object,Stride.Core.Reflection.ITypeDescriptor)">
            <summary>
            Visits an array item.
            </summary>
            <param name="array">The array.</param>
            <param name="descriptor">The descriptor.</param>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
            <param name="itemDescriptor">The item descriptor.</param>
        </member>
        <member name="M:Stride.Core.Reflection.IDataVisitor.VisitCollection(System.Collections.IEnumerable,Stride.Core.Reflection.CollectionDescriptor)">
            <summary>
            Visits a collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="descriptor">The descriptor.</param>
        </member>
        <member name="M:Stride.Core.Reflection.IDataVisitor.VisitCollectionItem(System.Collections.IEnumerable,Stride.Core.Reflection.CollectionDescriptor,System.Int32,System.Object,Stride.Core.Reflection.ITypeDescriptor)">
            <summary>
            Visits a collection item.
            </summary>
            <param name="collection">The collection.</param>
            <param name="descriptor">The descriptor.</param>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
            <param name="itemDescriptor">The item descriptor.</param>
        </member>
        <member name="M:Stride.Core.Reflection.IDataVisitor.VisitDictionary(System.Object,Stride.Core.Reflection.DictionaryDescriptor)">
            <summary>
            Visits a dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="descriptor">The descriptor.</param>
        </member>
        <member name="M:Stride.Core.Reflection.IDataVisitor.VisitDictionaryKeyValue(System.Object,Stride.Core.Reflection.DictionaryDescriptor,System.Object,Stride.Core.Reflection.ITypeDescriptor,System.Object,Stride.Core.Reflection.ITypeDescriptor)">
            <summary>
            Visits a dictionary key-value.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="descriptor">The descriptor.</param>
            <param name="key">The key.</param>
            <param name="keyDescriptor">The key descriptor.</param>
            <param name="value">The value.</param>
            <param name="valueDescriptor">The value descriptor.</param>
        </member>
        <member name="T:Stride.Core.Reflection.ShadowObject">
            <summary>
            Allows to attach dynamic properties to an object at runtime. Note that in order to use this object at runtime, you need to set to <c>true</c> the <see cref="P:Stride.Core.Reflection.ShadowObject.Enable"/> property.
            </summary>
        </member>
        <member name="P:Stride.Core.Reflection.ShadowObject.Enable">
            <summary>
            Gets or sets a boolean to enable or disable shadow object.
            </summary>
            <remarks>
            When disabled, method <see cref="M:Stride.Core.Reflection.ShadowObject.Get(System.Object)"/> or <see cref="M:Stride.Core.Reflection.ShadowObject.GetOrCreate(System.Object)"/>
            </remarks>
        </member>
        <member name="M:Stride.Core.Reflection.ShadowObject.TryGet(System.Object,Stride.Core.Reflection.ShadowObject@)">
            <summary>
            Tries to get the <see cref="T:Stride.Core.Reflection.ShadowObject"/> instance associated.
            </summary>
            <param name="instance">The live instance</param>
            <param name="shadow">The shadow object</param>
            <returns><c>true</c> if the shadow object was found, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Stride.Core.Reflection.ShadowObject.Get(System.Object)">
            <summary>
            Gets the <see cref="T:Stride.Core.Reflection.ShadowObject"/> instance if it exists or <c>null</c> otherwise.
            </summary>
            <param name="instance">The live instance.</param>
            <returns>The shadow instance or <c>null</c> if none</returns>
        </member>
        <member name="M:Stride.Core.Reflection.ShadowObject.GetOrCreate(System.Object)">
            <summary>
            Gets the <see cref="T:Stride.Core.Reflection.ShadowObject"/> instance. Creates it if it does not exist.
            </summary>
            <param name="instance">The live instance.</param>
            <returns>The shadow instance</returns>
        </member>
        <member name="M:Stride.Core.Reflection.ShadowObject.Copy(System.Object,System.Object)">
            <summary>
            Copies all dynamic properties from an instance to another instance.
            </summary>
            <param name="fromInstance">The instance to copy the shadow attributes from</param>
            <param name="toInstance">The instance to copy the shadow attributes to</param>
        </member>
        <member name="T:Stride.Core.Reflection.ShadowObjectPropertyKey">
            <summary>
            A key used to attach/retrieve property values from a <see cref="T:Stride.Core.Reflection.ShadowObject"/>
            </summary>
            <remarks>
            This key allow to associate two pseudo-keys together.
            </remarks>
        </member>
        <member name="M:Stride.Core.Reflection.ShadowObjectPropertyKey.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Stride.Core.Reflection.ShadowObjectPropertyKey"/>
            </summary>
            <param name="item1">The first part of this key. Cannot be null</param>
            <param name="copyValueOnClone">Indicate whether this shadow object property should be copied when the host object is cloned.</param>
        </member>
        <member name="M:Stride.Core.Reflection.ShadowObjectPropertyKey.#ctor(System.Object,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Stride.Core.Reflection.ShadowObjectPropertyKey"/>
            </summary>
            <param name="item1">The first part of this key. Cannot be null</param>
            <param name="item2">The second part of this key. Can be null</param>
            <param name="copyValueOnClone">Indicate whether this shadow object property should be copied when the host object is cloned.</param>
        </member>
        <member name="F:Stride.Core.Reflection.ShadowObjectPropertyKey.Item1">
            <summary>
            First part of this key.
            </summary>
        </member>
        <member name="F:Stride.Core.Reflection.ShadowObjectPropertyKey.Item2">
            <summary>
            Second part of this key.
            </summary>
        </member>
        <member name="F:Stride.Core.Reflection.ShadowObjectPropertyKey.CopyValueOnClone">
            <summary>
            Indicate whether this shadow object property should be copied when the host object is cloned.
            </summary>
        </member>
        <member name="T:Stride.Core.Settings.AppSettingsProvider">
            <summary>
            Implementation of <see cref="T:Stride.Core.Settings.IAppSettingsProvider"/> which uses YAML deserializer to read the settings file.
            </summary>
        </member>
        <member name="M:Stride.Core.Settings.AppSettingsProvider.LoadAppSettings">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Settings.ChangesValidatedEventArgs">
            <summary>
            Arguments of the <see cref="E:Stride.Core.Settings.SettingsKey.ChangesValidated"/> event.
            </summary>
        </member>
        <member name="M:Stride.Core.Settings.ChangesValidatedEventArgs.#ctor(Stride.Core.Settings.SettingsProfile)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Settings.ChangesValidatedEventArgs"/> class.
            </summary>
            <param name="profile">The profile in which changes have been validated.</param>
        </member>
        <member name="P:Stride.Core.Settings.ChangesValidatedEventArgs.Profile">
            <summary>
            Gets the <see cref="T:Stride.Core.Settings.SettingsProfile"/> in which changes have been validated.
            </summary>
        </member>
        <member name="T:Stride.Core.Settings.FileModifiedEventArgs">
            <summary>
            Arguments of the <see cref="E:Stride.Core.Settings.SettingsProfile.FileModified"/> event.
            </summary>
        </member>
        <member name="M:Stride.Core.Settings.FileModifiedEventArgs.#ctor(Stride.Core.Settings.SettingsProfile)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Settings.FileModifiedEventArgs"/>
            </summary>
            <param name="profile">The profile corresponding to the file that has been modified.</param>
        </member>
        <member name="P:Stride.Core.Settings.FileModifiedEventArgs.Profile">
            <summary>
            Gets the profile corresponding to the file that has been modified..
            </summary>
        </member>
        <member name="P:Stride.Core.Settings.FileModifiedEventArgs.ReloadFile">
            <summary>
            Gets or sets whether the modified file should be reloaded. False by default.
            </summary>
        </member>
        <member name="T:Stride.Core.Settings.NamespaceDoc">
            <summary>
            The <see cref="N:Stride.Core.Settings"/> namespace contains types to handle application settings. It supports multiple
            settings profiles, profile inheritance, profile saving and loading, and it is thread-safe. It uses YAML serialization to write settings
            files.
            </summary>
        </member>
        <member name="T:Stride.Core.Settings.SettingsContainer">
            <summary>
            A container object that contains a collection of <see cref="T:Stride.Core.Settings.SettingsKey"/>. Each settings key can store a corresponding value into a <see cref="T:Stride.Core.Settings.SettingsProfile"/>.
            When a <see cref="T:Stride.Core.Settings.SettingsContainer"/> is created, it will contain a default root <see cref="T:Stride.Core.Settings.SettingsProfile"/>. This profile has no parent, and every profile created
            or loaded afterward will have the default profile as parent, unless another non-null parent is specified.
            </summary>
        </member>
        <member name="F:Stride.Core.Settings.SettingsContainer.settingsKeys">
            <summary>
            A dictionary containing every existing <see cref="T:Stride.Core.Settings.SettingsKey"/>.
            </summary>
        </member>
        <member name="F:Stride.Core.Settings.SettingsContainer.profileList">
            <summary>
            A list containing every <see cref="T:Stride.Core.Settings.SettingsProfile"/> registered in the <see cref="T:Stride.Core.Settings.SettingsContainer"/>.
            </summary>
        </member>
        <member name="F:Stride.Core.Settings.SettingsContainer.currentProfile">
            <summary>
            The settings profile that is currently active.
            </summary>
        </member>
        <member name="P:Stride.Core.Settings.SettingsContainer.Logger">
            <summary>
            Gets the logger associated to the <see cref="T:Stride.Core.Settings.SettingsContainer"/>.
            </summary>
        </member>
        <member name="P:Stride.Core.Settings.SettingsContainer.RootProfile">
            <summary>
            Gets the root profile of this settings container.
            </summary>
            <remarks>
            The root profile is a <see cref="T:Stride.Core.Settings.SettingsProfile"/> that contains the default value of all registered <see cref="T:Stride.Core.Settings.SettingsKey"/>.
            </remarks>
        </member>
        <member name="P:Stride.Core.Settings.SettingsContainer.CurrentProfile">
            <summary>
            Gets or sets the <see cref="T:Stride.Core.Settings.SettingsProfile"/> that is currently active.
            </summary>
        </member>
        <member name="P:Stride.Core.Settings.SettingsContainer.Profiles">
            <summary>
            Gets the list of registered profiles.
            </summary>
        </member>
        <member name="E:Stride.Core.Settings.SettingsContainer.SettingsFileLoaded">
            <summary>
            Raised when a settings file has been loaded.
            </summary>
        </member>
        <member name="M:Stride.Core.Settings.SettingsContainer.GetAllSettingsKeys">
            <summary>
            Gets a list of all registered <see cref="T:Stride.Core.Settings.SettingsKey"/> instances.
            </summary>
            <returns>A list of all registered <see cref="T:Stride.Core.Settings.SettingsKey"/> instances.</returns>
        </member>
        <member name="M:Stride.Core.Settings.SettingsContainer.CreateSettingsProfile(System.Boolean,Stride.Core.Settings.SettingsProfile,System.Boolean)">
            <summary>
            Creates a new settings profile.
            </summary>
            <param name="setAsCurrent">If <c>true</c>, the created profile will also be set as <see cref="P:Stride.Core.Settings.SettingsContainer.CurrentProfile"/>.</param>
            <param name="parent">The parent profile of the settings to create. If <c>null</c>, the default profile will be used.</param>
            <param name="registerInContainer">If true, the profile will be registered in this container. Otherwise it will be disconnected from the container.</param>
            <returns>A new instance of the <see cref="T:Stride.Core.Settings.SettingsProfile"/> class.</returns>
            <remarks>
            If the profile is not registered to the container, it won't be able to receive <see cref="T:Stride.Core.Settings.SettingsKey"/> that are registered after its
            creation. If the profile is registered to the container, <see cref="M:Stride.Core.Settings.SettingsContainer.UnloadSettingsProfile(Stride.Core.Settings.SettingsProfile)"/> must be call in order to unregister it.
            </remarks>
        </member>
        <member name="M:Stride.Core.Settings.SettingsContainer.LoadSettingsProfile(Stride.Core.IO.UFile,System.Boolean,Stride.Core.Settings.SettingsProfile,System.Boolean)">
            <summary>
            Loads a settings profile from the given file.
            </summary>
            <param name="filePath">The path of the file from which to load settings.</param>
            <param name="setAsCurrent">If <c>true</c>, the loaded profile will also be set as <see cref="P:Stride.Core.Settings.SettingsContainer.CurrentProfile"/>.</param>
            <param name="parent">The profile to use as parent for the loaded profile. If <c>null</c>, a default profile will be used.</param>
            <param name="registerInContainer">If true, the profile will be registered in this container. Otherwise it will be disconnected from the container.</param>
            <returns><c>true</c> if settings were correctly loaded, <c>false</c> otherwise.</returns>
            <remarks>
            If the profile is not registered to the container, it won't be able to receive <see cref="T:Stride.Core.Settings.SettingsKey"/> that are registered after its
            creation. If the profile is registered to the container, <see cref="M:Stride.Core.Settings.SettingsContainer.UnloadSettingsProfile(Stride.Core.Settings.SettingsProfile)"/> must be call in order to unregister it.
            </remarks>
        </member>
        <member name="M:Stride.Core.Settings.SettingsContainer.ReloadSettingsProfile(Stride.Core.Settings.SettingsProfile)">
            <summary>
            Reloads a profile from its file, updating the value that have changed.
            </summary>
            <param name="profile">The profile to reload.</param>
        </member>
        <member name="M:Stride.Core.Settings.SettingsContainer.UnloadSettingsProfile(Stride.Core.Settings.SettingsProfile)">
            <summary>
            Unloads a profile that was previously loaded.
            </summary>
            <param name="profile">The profile to unload.</param>
        </member>
        <member name="M:Stride.Core.Settings.SettingsContainer.SaveSettingsProfile(Stride.Core.Settings.SettingsProfile,Stride.Core.IO.UFile)">
            <summary>
            Saves the given settings profile to a file at the given path.
            </summary>
            <param name="profile">The profile to save.</param>
            <param name="filePath">The path of the file.</param>
            <returns><c>true</c> if the file was correctly saved, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stride.Core.Settings.SettingsContainer.GetSettingsKey(Stride.Core.IO.UFile)">
            <summary>
            Gets the settings key that matches the given name.
            </summary>
            <param name="name">The name of the settings property to fetch.</param>
            <returns>The settings key that matches the given name, or <c>null</c>.</returns>
        </member>
        <member name="M:Stride.Core.Settings.SettingsContainer.ClearSettings">
            <summary>
            Clears the current settings, by removing registered <see cref="T:Stride.Core.Settings.SettingsKey"/> and <see cref="T:Stride.Core.Settings.SettingsProfile"/> instances. This method should be used only for tests.
            </summary>
        </member>
        <member name="T:Stride.Core.Settings.SettingsDictionary">
            <summary>
            An internal dictionary class used to serialize a <see cref="T:Stride.Core.Settings.SettingsProfile"/>.
            </summary>
        </member>
        <member name="T:Stride.Core.Settings.SettingsEntry">
            <summary>
            An internal object that represent a value for a settings key into a <see cref="T:Stride.Core.Settings.SettingsProfile"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Settings.SettingsEntry.#ctor(Stride.Core.Settings.SettingsProfile,Stride.Core.IO.UFile)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Settings.SettingsEntry"/> class.
            </summary>
            <param name="profile">The profile this <see cref="T:Stride.Core.Settings.SettingsEntry"/>belongs to.</param>
            <param name="name">The name associated to this <see cref="T:Stride.Core.Settings.SettingsEntry"/>.</param>
        </member>
        <member name="P:Stride.Core.Settings.SettingsEntry.Name">
            <summary>
            Gets the name of this <see cref="T:Stride.Core.Settings.SettingsEntry"/>.
            </summary>
        </member>
        <member name="P:Stride.Core.Settings.SettingsEntry.Value">
            <summary>
            Gets or sets the value of this <see cref="T:Stride.Core.Settings.SettingsEntry"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Settings.SettingsEntry.CreateFromValue(Stride.Core.Settings.SettingsProfile,Stride.Core.IO.UFile,System.Object)">
            <summary>
            Creates a new instance of a class derived from <see cref="T:Stride.Core.Settings.SettingsEntry"/> that matches the type of the given value.
            </summary>
            <param name="profile">The profile the <see cref="T:Stride.Core.Settings.SettingsEntry"/> to create belongs to.</param>
            <param name="name">The name associated to the <see cref="T:Stride.Core.Settings.SettingsEntry"/> to create.</param>
            <param name="value">The value to associate to the <see cref="T:Stride.Core.Settings.SettingsEntry"/> to create.</param>
            <returns>A new instance of a <see cref="T:Stride.Core.Settings.SettingsEntry"/> class.</returns>
        </member>
        <member name="M:Stride.Core.Settings.SettingsEntry.GetSerializableValue(Stride.Core.Settings.SettingsKey)">
            <summary>
            Gets the value of this entry converted to a serializable type.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Stride.Core.Settings.SettingsEntryChangeValueOperation">
            <summary>
            An internal object allowing to rollback/rollforward changes in a <see cref="T:Stride.Core.Settings.SettingsEntry"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Settings.SettingsEntryChangeValueOperation.#ctor(Stride.Core.Settings.SettingsEntry,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Settings.SettingsEntryChangeValueOperation"/> class.
            </summary>
            <param name="entry">The settings entry that has been modified.</param>
            <param name="oldValue">The value of the settings entry before the modification.</param>
        </member>
        <member name="M:Stride.Core.Settings.SettingsEntryChangeValueOperation.Rollback">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Settings.SettingsEntryChangeValueOperation.Rollforward">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Settings.SettingsEntryValue">
            <summary>
            An internal object that represent a single value for a settings key into a <see cref="T:Stride.Core.Settings.SettingsProfile"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Settings.SettingsEntryValue.#ctor(Stride.Core.Settings.SettingsProfile,Stride.Core.IO.UFile,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Settings.SettingsEntryValue"/> class.
            </summary>
            <param name="profile">The profile this <see cref="T:Stride.Core.Settings.SettingsEntryValue"/>belongs to.</param>
            <param name="name">The name associated to this <see cref="T:Stride.Core.Settings.SettingsEntryValue"/>.</param>
            <param name="value">The value to associate to this <see cref="T:Stride.Core.Settings.SettingsEntryValue"/>.</param>
        </member>
        <member name="M:Stride.Core.Settings.SettingsEntryValue.GetSerializableValue(Stride.Core.Settings.SettingsKey)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Settings.SettingsFile">
            <summary>
            An internal class that represents a set of settings that can be stored in a file.
            </summary>
        </member>
        <member name="M:Stride.Core.Settings.SettingsFile.#ctor(Stride.Core.Settings.SettingsProfile)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Settings.SettingsFile"/> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Settings.SettingsFile.Settings">
            <summary>
            Gets the settings profile to serialize.
            </summary>
        </member>
        <member name="T:Stride.Core.Settings.SettingsFileLoadedEventArgs">
            <summary>
            Arguments of the <see cref="E:Stride.Core.Settings.SettingsContainer.SettingsFileLoaded"/> event.
            </summary>
        </member>
        <member name="M:Stride.Core.Settings.SettingsFileLoadedEventArgs.#ctor(Stride.Core.IO.UFile)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Settings.SettingsFileLoadedEventArgs"/> class.
            </summary>
            <param name="path"></param>
        </member>
        <member name="P:Stride.Core.Settings.SettingsFileLoadedEventArgs.FilePath">
            <summary>
            Gets the path of the file that has been loaded.
            </summary>
        </member>
        <member name="T:Stride.Core.Settings.SettingsKey">
            <summary>
            This class represents property to store in the settings that is identified by a key.
            </summary>
        </member>
        <member name="F:Stride.Core.Settings.SettingsKey.DefaultObjectValue">
            <summary>
            The default value of the settings key.
            </summary>
        </member>
        <member name="F:Stride.Core.Settings.SettingsKey.DefaultObjectValueCallback">
            <summary>
            The default value of the settings key.
            </summary>
        </member>
        <member name="M:Stride.Core.Settings.SettingsKey.#ctor(Stride.Core.IO.UFile,Stride.Core.Settings.SettingsContainer,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Settings.SettingsKey"/> class.
            </summary>
            <param name="name">The name of this settings key. Must be unique amongst the application.</param>
            <param name="container">The <see cref="T:Stride.Core.Settings.SettingsContainer"/> containing this <see cref="T:Stride.Core.Settings.SettingsKey"/>.</param>
            <param name="defaultValue">The default value associated to this settings key.</param>
        </member>
        <member name="M:Stride.Core.Settings.SettingsKey.#ctor(Stride.Core.IO.UFile,Stride.Core.Settings.SettingsContainer,System.Func{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Settings.SettingsKey"/> class.
            </summary>
            <param name="name">The name of this settings key. Must be unique amongst the application.</param>
            <param name="container">The <see cref="T:Stride.Core.Settings.SettingsContainer"/> containing this <see cref="T:Stride.Core.Settings.SettingsKey"/>.</param>
            <param name="defaultValueCallback">A function that returns the default value associated to this settings key.</param>
        </member>
        <member name="P:Stride.Core.Settings.SettingsKey.Name">
            <summary>
            Gets the name of this <see cref="T:Stride.Core.Settings.SettingsKey"/>.
            </summary>
        </member>
        <member name="P:Stride.Core.Settings.SettingsKey.Type">
            <summary>
            Gets the type of this <see cref="T:Stride.Core.Settings.SettingsKey"/>.
            </summary>
        </member>
        <member name="P:Stride.Core.Settings.SettingsKey.Container">
            <summary>
            Gets the <see cref="T:Stride.Core.Settings.SettingsContainer"/> containing this <see cref="T:Stride.Core.Settings.SettingsKey"/>.
            </summary>
        </member>
        <member name="P:Stride.Core.Settings.SettingsKey.DisplayName">
            <summary>
            Gets or sets the display name of the <see cref="T:Stride.Core.Settings.SettingsKey"/>.
            </summary>
            <remarks>The default value is the name parameter given to the constructor of this class.</remarks>
        </member>
        <member name="P:Stride.Core.Settings.SettingsKey.Description">
            <summary>
            Gets or sets the description of this <see cref="T:Stride.Core.Settings.SettingsKey"/>.
            </summary>
        </member>
        <member name="P:Stride.Core.Settings.SettingsKey.AcceptableValues">
            <summary>
            Gets an enumeration of acceptable values for this <see cref="T:Stride.Core.Settings.SettingsKey"/>.
            </summary>
        </member>
        <member name="P:Stride.Core.Settings.SettingsKey.FallbackDeserializers">
            <summary>
            Gets a collection of fallback deserializer methods in case the default deserialization throws an exception.
            </summary>
            <remarks>Fallback deserializers can be useful for migration of settings keys when the type of settings has changed.</remarks>
        </member>
        <member name="E:Stride.Core.Settings.SettingsKey.ChangesValidated">
            <summary>
            Raised when the value of the settings key has been modified and the method <see cref="M:Stride.Core.Settings.SettingsProfile.ValidateSettingsChanges"/> has been invoked.
            </summary>
        </member>
        <member name="M:Stride.Core.Settings.SettingsKey.ConvertValue(System.Collections.Generic.List{Stride.Core.Yaml.Events.ParsingEvent})">
            <summary>
            Converts a value of a different type to the type associated with this <see cref="T:Stride.Core.Settings.SettingsKey"/>. If the conversion is not possible,
            this method will return the default value of the SettingsKey.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value if the conversion is possible, the default value otherwise.</returns>
        </member>
        <member name="M:Stride.Core.Settings.SettingsKey.NotifyChangesValidated(Stride.Core.Settings.SettingsProfile)">
            <summary>
            Notifes that the changes have been validated by <see cref="M:Stride.Core.Settings.SettingsProfile.ValidateSettingsChanges"/>.
            </summary>
            <param name="profile">The profile in which the change has been validated.</param>
        </member>
        <member name="M:Stride.Core.Settings.SettingsKey.ResolveProfile(Stride.Core.Settings.SettingsProfile)">
            <summary>
            Resolves the profile to use, returning the current profile if the given profile is null and checking the consistency of related <see cref="T:Stride.Core.Settings.SettingsContainer"/>.
            </summary>
            <param name="profile">The profile to resolve.</param>
            <returns>The resolved profile.</returns>
        </member>
        <member name="T:Stride.Core.Settings.SettingsKey`1">
            <summary>
            This class represents a <see cref="T:Stride.Core.Settings.SettingsKey"/> containing a value of the specified type <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The type of value contained in this settings key.</typeparam>
        </member>
        <member name="M:Stride.Core.Settings.SettingsKey`1.#ctor(Stride.Core.IO.UFile,Stride.Core.Settings.SettingsContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Settings.SettingsKey`1"/> class.
            </summary>
            <param name="name">The name of the settings key. Must be unique amongst an application.</param>
            <param name="container">The <see cref="T:Stride.Core.Settings.SettingsContainer"/> containing this <see cref="T:Stride.Core.Settings.SettingsKey"/>.</param>
        </member>
        <member name="M:Stride.Core.Settings.SettingsKey`1.#ctor(Stride.Core.IO.UFile,Stride.Core.Settings.SettingsContainer,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Settings.SettingsKey`1"/> class.
            </summary>
            <param name="name">The name of the settings key. Must be unique amongst an application.</param>
            <param name="container">The <see cref="T:Stride.Core.Settings.SettingsContainer"/> containing this <see cref="T:Stride.Core.Settings.SettingsKey"/>.</param>
            <param name="defaultValue">The default value for this settings key.</param>
        </member>
        <member name="M:Stride.Core.Settings.SettingsKey`1.#ctor(Stride.Core.IO.UFile,Stride.Core.Settings.SettingsContainer,System.Func{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Settings.SettingsKey`1"/> class.
            </summary>
            <param name="name">The name of this settings key. Must be unique amongst the application.</param>
            <param name="container">The <see cref="T:Stride.Core.Settings.SettingsContainer"/> containing this <see cref="T:Stride.Core.Settings.SettingsKey"/>.</param>
            <param name="defaultValueCallback">A function that returns the default value associated to this settings key.</param>
        </member>
        <member name="P:Stride.Core.Settings.SettingsKey`1.Type">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Settings.SettingsKey`1.DefaultValue">
            <summary>
            Gets the default value of this settings key.
            </summary>
        </member>
        <member name="P:Stride.Core.Settings.SettingsKey`1.GetAcceptableValues">
            <summary>
            Gets or sets a function that returns an enumation of acceptable values for this <see cref="T:Stride.Core.Settings.SettingsKey`1"/>.
            </summary>
        </member>
        <member name="P:Stride.Core.Settings.SettingsKey`1.AcceptableValues">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Settings.SettingsKey`1.GetValue(Stride.Core.Settings.SettingsProfile,System.Boolean)">
            <summary>
            Gets the value of this settings key in the given profile.
            </summary>
            <param name="profile">The profile in which to look for the value. If <c>null</c>, it will look in the <see cref="P:Stride.Core.Settings.SettingsContainer.CurrentProfile"/>.</param>
            <param name="searchInParentProfile">If true, the settings service will look in the parent profile of the given profile if the settings key is not defined into it.</param>
            <returns>The value of this settings key.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No value can be found in the given profile matching this settings key.</exception>
        </member>
        <member name="M:Stride.Core.Settings.SettingsKey`1.GetValue">
            <summary>
            Gets the value of this settings key in the current profile.
            </summary>
            <returns>The value of this settings key.</returns>
        </member>
        <member name="M:Stride.Core.Settings.SettingsKey`1.SetValue(`0,Stride.Core.Settings.SettingsProfile)">
            <summary>
            Sets the value of this settings key in the given profile.
            </summary>
            <param name="value">The new value to set.</param>
            <param name="profile">The profile in which to set the value. Must be a non-null that uses the same <see cref="T:Stride.Core.Settings.SettingsContainer"/> that this <see cref="T:Stride.Core.Settings.SettingsKey"/>.</param>
        </member>
        <member name="M:Stride.Core.Settings.SettingsKey`1.SetValue(`0)">
            <summary>
            Sets the value of this settings key in the current profile.
            </summary>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:Stride.Core.Settings.SettingsKey`1.ConvertValue(System.Collections.Generic.List{Stride.Core.Yaml.Events.ParsingEvent})">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Settings.SettingsProfile">
            <summary>
            This class represents a collection of values for all registered <see cref="T:Stride.Core.Settings.SettingsKey"/>. It may also contains values for settings keys that
            are not currently registered, if they exist in the file from which the profile was loaded.
            </summary>
        </member>
        <member name="M:Stride.Core.Settings.SettingsProfile.#ctor(Stride.Core.Settings.SettingsContainer,Stride.Core.Settings.SettingsProfile)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Settings.SettingsProfile"/> class.
            </summary>
            <param name="container">The <see cref="T:Stride.Core.Settings.SettingsContainer"/> containing this profile.</param>
            <param name="parentProfile">The parent profile.</param>
        </member>
        <member name="P:Stride.Core.Settings.SettingsProfile.Container">
            <summary>
            Gets the <see cref="T:Stride.Core.Settings.SettingsContainer"/> containing this profile.
            </summary>
        </member>
        <member name="P:Stride.Core.Settings.SettingsProfile.FilePath">
            <summary>
            Gets the path of the file in which this profile has been saved.
            </summary>
        </member>
        <member name="P:Stride.Core.Settings.SettingsProfile.MonitorFileModification">
            <summary>
            Gets or sets whether to monitor external modification of the file in which this profile is stored. If <c>true</c>, The <see cref="E:Stride.Core.Settings.SettingsProfile.FileModified"/> event might be raised.
            </summary>
        </member>
        <member name="E:Stride.Core.Settings.SettingsProfile.FileModified">
            <summary>
            Raised when the file corresponding to this profile is modified on the disk, and <see cref="P:Stride.Core.Settings.SettingsProfile.MonitorFileModification"/> is <c>true</c>.
            </summary>
        </member>
        <member name="P:Stride.Core.Settings.SettingsProfile.Settings">
            <summary>
            Gets the collection of <see cref="T:Stride.Core.Settings.SettingsEntry"/> currently existing in this <see cref="T:Stride.Core.Settings.SettingsProfile"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Settings.SettingsProfile.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Settings.SettingsProfile.ContainsKey(Stride.Core.Settings.SettingsKey)">
            <summary>
            Indicates whether this settings profile directly contains the given settings key, without
            looking into its parent profile.
            </summary>
            <param name="key">The settings key to look for.</param>
            <returns><c>True</c> if the profile contains the given settings key, <c>False</c> otherwise.</returns>
        </member>
        <member name="M:Stride.Core.Settings.SettingsProfile.ContainsKey(Stride.Core.IO.UFile)">
            <summary>
            Indicates whether this settings profile directly contains the a settings key with the given name, without
            looking into its parent profile.
            </summary>
            <param name="name">The name of the settings key to look for.</param>
            <returns><c>True</c> if the profile contains the given settings key, <c>False</c> otherwise.</returns>
        </member>
        <member name="M:Stride.Core.Settings.SettingsProfile.Remove(Stride.Core.Settings.SettingsKey)">
            <summary>
            Removes the given settings key.
            </summary>
            <param name="key">The settings key to remove.</param>
            <returns><c>True</c> if the settings key was removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stride.Core.Settings.SettingsProfile.Remove(Stride.Core.IO.UFile)">
            <summary>
            Removes the settings key that match the given name.
            </summary>
            <param name="name">The name of the settings key to remove.</param>
            <returns><c>True</c> if the settings key was removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stride.Core.Settings.SettingsProfile.CopyTo(Stride.Core.Settings.SettingsProfile,System.Boolean)">
            <summary>
            Copies the values of this profile into another profile.
            </summary>
            <param name="profile">The profile in which to copy the values.</param>
            <param name="overrideValues">If <c>false</c>, the values already present in the targt profile won't be overriden.</param>
        </member>
        <member name="M:Stride.Core.Settings.SettingsProfile.RegisterEntry(Stride.Core.Settings.SettingsEntry)">
            <summary>
            Registers an entry that has not been registered before.
            </summary>
            <param name="entry">The entry to register.</param>
        </member>
        <member name="M:Stride.Core.Settings.SettingsProfile.GetValue(Stride.Core.IO.UFile,System.Object@,System.Boolean,System.Boolean)">
            <summary>
            Gets the settings value that matches the given name.
            </summary>
            <param name="name">The name of the <see cref="T:Stride.Core.Settings.SettingsEntry"/> to fetch.</param>
            <param name="value">The resulting value if the name is found, <c>null</c> otherwise.</param>
            <param name="searchInParent">Indicates whether to search in the parent profile, if the name is not found in this profile.</param>
            <param name="createInCurrentProfile">If true, the list will be created in the current profile, from the value of its parent profile.</param>
            <returns><c>true</c> if an entry matching the name is found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stride.Core.Settings.SettingsProfile.SetValue(Stride.Core.IO.UFile,System.Object)">
            <summary>
            Set the value of the entry that match the given name.
            </summary>
            <param name="name">The name to match.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Stride.Core.Settings.SettingsProfile.NotifyEntryChanged(Stride.Core.IO.UFile)">
            <summary>
            Notifies that the entry with the given name has changed.
            </summary>
            <param name="name">The name of the entry that has changed.</param>
        </member>
        <member name="M:Stride.Core.Settings.SettingsProfile.GetEntry(Stride.Core.IO.UFile,System.Boolean,System.Boolean)">
            <summary>
            Gets the <see cref="T:Stride.Core.Settings.SettingsEntry"/> that matches the given name.
            </summary>
            <param name="name">The name of the <see cref="T:Stride.Core.Settings.SettingsEntry"/> to fetch.</param>
            <param name="searchInParent">Indicates whether to search in the parent profile, if the name is not found in this profile.</param>
            <param name="createInCurrentProfile"></param>
            <returns>An instance of <see cref="T:Stride.Core.Settings.SettingsEntry"/> that matches the name, or <c>null</c>.</returns>
        </member>
        <member name="T:Stride.Core.Settings.SettingsYamlSerializer">
            <summary>
            Default Yaml serializer used to serialize assets by default.
            </summary>
        </member>
        <member name="M:Stride.Core.Settings.SettingsYamlSerializer.Deserialize(System.IO.Stream,System.Object)">
            <summary>
            Deserializes an object from the specified stream (expecting a YAML string) into an existing object.
            </summary>
            <param name="stream">A YAML string from a stream.</param>
            <param name="existingObject">The object to deserialize into.</param>
            <returns>An instance of the YAML data.</returns>
        </member>
        <member name="M:Stride.Core.Settings.SettingsYamlSerializer.Deserialize(Stride.Core.Yaml.EventReader,System.Type)">
            <summary>
            Deserializes an object from the specified stream (expecting a YAML string).
            </summary>
            <param name="eventReader">A YAML event reader.</param>
            <param name="expectedType">The expected type.</param>
            <returns>An instance of the YAML data.</returns>
        </member>
        <member name="M:Stride.Core.Settings.SettingsYamlSerializer.Serialize(Stride.Core.Yaml.IEmitter,System.Object,System.Type)">
            <summary>
            Serializes an object to specified stream in YAML format.
            </summary>
            <param name="emitter">The emitter.</param>
            <param name="instance">The object to serialize.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Stride.Core.Settings.SettingsYamlSerializer.Serialize(System.IO.Stream,System.Object,System.Boolean)">
            <summary>
            Serializes an object to specified stream in YAML format.
            </summary>
            <param name="stream">The stream to receive the YAML representation of the object.</param>
            <param name="instance">The instance.</param>
            <param name="generateIds"><c>true</c> to generate ~Id for class objects</param>
        </member>
        <member name="M:Stride.Core.Settings.SettingsYamlSerializer.CreateSelector">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.Settings.Utils.SetAndInvokeIfChanged``1(``0@,``0,System.Action)">
            <summary>
            Updates the given field to the given value. If the field changes, invoke the given action.
            </summary>
            <typeparam name="T">The type of the field and the value.</typeparam>
            <param name="field">The field to update.</param>
            <param name="value">The value to set.</param>
            <param name="action">The action to invoke if the field has changed.</param>
        </member>
        <member name="T:Stride.Core.StringSpan">
            <summary>
            A region of character in a string.
            </summary>
        </member>
        <member name="M:Stride.Core.StringSpan.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.StringSpan"/> struct.
            </summary>
            <param name="start">The start.</param>
            <param name="length">The length.</param>
        </member>
        <member name="F:Stride.Core.StringSpan.Start">
            <summary>
            The start offset of the span.
            </summary>
        </member>
        <member name="F:Stride.Core.StringSpan.Length">
            <summary>
            The length of the span
            </summary>
        </member>
        <member name="P:Stride.Core.StringSpan.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid (Start greater or equal to 0, and Length greater than 0)
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.StringSpan.Next">
            <summary>
            Gets the next position = Start + Length.
            </summary>
            <value>The next.</value>
        </member>
        <member name="P:Stride.Core.StringSpan.End">
            <summary>
            The end offset of the span.
            </summary>
        </member>
        <member name="M:Stride.Core.StringSpanExtensions.Substring(System.String,Stride.Core.StringSpan)">
            <summary>
            Gets the substring with the specified span. If the span is invalid, return null.
            </summary>
            <param name="str">The string.</param>
            <param name="span">The span.</param>
            <returns>A substring with the specified span or null if span is empty.</returns>
        </member>
        <member name="T:Stride.Core.Threading.AsyncLock">
            <summary>
            A mutual exclusion lock that is compatible with async. Note that this lock is <b>not</b> recursive!
            </summary>
        </member>
        <member name="F:Stride.Core.Threading.AsyncLock.taken">
            <summary>
            Whether the lock is taken by a task.
            </summary>
        </member>
        <member name="F:Stride.Core.Threading.AsyncLock.queue">
            <summary>
            The queue of TCSs that other tasks are awaiting to acquire the lock.
            </summary>
        </member>
        <member name="F:Stride.Core.Threading.AsyncLock.cachedKeyTask">
            <summary>
            A task that is completed with the key object for this lock.
            </summary>
        </member>
        <member name="F:Stride.Core.Threading.AsyncLock.id">
            <summary>
            The semi-unique identifier for this instance. This is 0 if the id has not yet been created.
            </summary>
        </member>
        <member name="F:Stride.Core.Threading.AsyncLock.mutex">
            <summary>
            The object used for mutual exclusion.
            </summary>
        </member>
        <member name="M:Stride.Core.Threading.AsyncLock.#ctor">
            <summary>
            Creates a new async-compatible mutual exclusion lock.
            </summary>
        </member>
        <member name="M:Stride.Core.Threading.AsyncLock.#ctor(Stride.Core.Threading.IAsyncWaitQueue{System.IDisposable})">
            <summary>
            Creates a new async-compatible mutual exclusion lock using the specified wait queue.
            </summary>
            <param name="queue">The wait queue used to manage waiters.</param>
        </member>
        <member name="P:Stride.Core.Threading.AsyncLock.Id">
            <summary>
            Gets a semi-unique identifier for this asynchronous lock.
            </summary>
        </member>
        <member name="M:Stride.Core.Threading.AsyncLock.LockAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously acquires the lock. Returns a disposable that releases the lock when disposed.
            </summary>
            <param name="cancellationToken">The cancellation token used to cancel the lock. If this is already set, then this method will attempt to take the lock immediately (succeeding if the lock is currently available).</param>
            <returns>A disposable that releases the lock when disposed.</returns>
        </member>
        <member name="M:Stride.Core.Threading.AsyncLock.Lock(System.Threading.CancellationToken)">
            <summary>
            Synchronously acquires the lock. Returns a disposable that releases the lock when disposed. This method may block the calling thread.
            </summary>
            <param name="cancellationToken">The cancellation token used to cancel the lock. If this is already set, then this method will attempt to take the lock immediately (succeeding if the lock is currently available).</param>
        </member>
        <member name="M:Stride.Core.Threading.AsyncLock.LockAsync">
            <summary>
            Asynchronously acquires the lock. Returns a disposable that releases the lock when disposed.
            </summary>
            <returns>A disposable that releases the lock when disposed.</returns>
        </member>
        <member name="M:Stride.Core.Threading.AsyncLock.Lock">
            <summary>
            Synchronously acquires the lock. Returns a disposable that releases the lock when disposed. This method may block the calling thread.
            </summary>
        </member>
        <member name="M:Stride.Core.Threading.AsyncLock.ReleaseLock">
            <summary>
            Releases the lock.
            </summary>
        </member>
        <member name="T:Stride.Core.Threading.AsyncLock.Key">
            <summary>
            The disposable which releases the lock.
            </summary>
        </member>
        <member name="F:Stride.Core.Threading.AsyncLock.Key.asyncLock">
            <summary>
            The lock to release.
            </summary>
        </member>
        <member name="M:Stride.Core.Threading.AsyncLock.Key.#ctor(Stride.Core.Threading.AsyncLock)">
            <summary>
            Creates the key for a lock.
            </summary>
            <param name="asyncLock">The lock to release. May not be <c>null</c>.</param>
        </member>
        <member name="M:Stride.Core.Threading.AsyncLock.Key.Dispose">
            <summary>
            Release the lock.
            </summary>
        </member>
        <member name="T:Stride.Core.Threading.AwaitableDisposable`1">
            <summary>
            An awaitable wrapper around a task whose result is disposable. The wrapper is not disposable, so this prevents usage errors like "using (MyAsync())" when the appropriate usage should be "using (await MyAsync())".
            </summary>
            <typeparam name="T">The type of the result of the underlying task.</typeparam>
        </member>
        <member name="F:Stride.Core.Threading.AwaitableDisposable`1.task">
            <summary>
            The underlying task.
            </summary>
        </member>
        <member name="M:Stride.Core.Threading.AwaitableDisposable`1.#ctor(System.Threading.Tasks.Task{`0})">
            <summary>
            Initializes a new awaitable wrapper around the specified task.
            </summary>
            <param name="task">The underlying task to wrap.</param>
        </member>
        <member name="M:Stride.Core.Threading.AwaitableDisposable`1.AsTask">
            <summary>
            Returns the underlying task.
            </summary>
        </member>
        <member name="M:Stride.Core.Threading.AwaitableDisposable`1.op_Implicit(Stride.Core.Threading.AwaitableDisposable{`0})~System.Threading.Tasks.Task{`0}">
            <summary>
            Implicit conversion to the underlying task.
            </summary>
            <param name="source">The awaitable wrapper.</param>
        </member>
        <member name="M:Stride.Core.Threading.AwaitableDisposable`1.GetAwaiter">
            <summary>
            Infrastructure. Returns the task awaiter for the underlying task.
            </summary>
        </member>
        <member name="M:Stride.Core.Threading.AwaitableDisposable`1.ConfigureAwait(System.Boolean)">
            <summary>
            Infrastructure. Returns a configured task awaiter for the underlying task.
            </summary>
            <param name="continueOnCapturedContext">Whether to attempt to marshal the continuation back to the captured context.</param>
        </member>
        <member name="T:Stride.Core.Threading.IAsyncWaitQueue`1">
            <summary>
            A collection of cancelable <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> instances. Implementations must be threadsafe <b>and</b> must work correctly if the caller is holding a lock.
            </summary>
            <typeparam name="T">The type of the results. If this isn't needed, use <see cref="T:System.Object"/>.</typeparam>
        </member>
        <member name="P:Stride.Core.Threading.IAsyncWaitQueue`1.IsEmpty">
            <summary>
            Gets whether the queue is empty.
            </summary>
        </member>
        <member name="M:Stride.Core.Threading.IAsyncWaitQueue`1.Enqueue">
            <summary>
            Creates a new entry and queues it to this wait queue. The returned task must support both synchronous and asynchronous waits.
            </summary>
            <returns>The queued task.</returns>
        </member>
        <member name="M:Stride.Core.Threading.IAsyncWaitQueue`1.Dequeue(`0)">
            <summary>
            Removes a single entry in the wait queue. Returns a disposable that completes that entry.
            </summary>
            <param name="result">The result used to complete the wait queue entry. If this isn't needed, use <c>default(T)</c>.</param>
        </member>
        <member name="M:Stride.Core.Threading.IAsyncWaitQueue`1.DequeueAll(`0)">
            <summary>
            Removes all entries in the wait queue. Returns a disposable that completes all entries.
            </summary>
            <param name="result">The result used to complete the wait queue entries. If this isn't needed, use <c>default(T)</c>.</param>
        </member>
        <member name="M:Stride.Core.Threading.IAsyncWaitQueue`1.TryCancel(System.Threading.Tasks.Task)">
            <summary>
            Attempts to remove an entry from the wait queue. Returns a disposable that cancels the entry.
            </summary>
            <param name="task">The task to cancel.</param>
            <returns>A value indicating whether the entry was found and canceled.</returns>
        </member>
        <member name="M:Stride.Core.Threading.IAsyncWaitQueue`1.CancelAll">
            <summary>
            Removes all entries from the wait queue. Returns a disposable that cancels all entries.
            </summary>
        </member>
        <member name="T:Stride.Core.Threading.AsyncWaitQueueExtensions">
            <summary>
            Provides extension methods for wait queues.
            </summary>
        </member>
        <member name="M:Stride.Core.Threading.AsyncWaitQueueExtensions.Enqueue``1(Stride.Core.Threading.IAsyncWaitQueue{``0},System.Object,System.Threading.CancellationToken)">
            <summary>
            Creates a new entry and queues it to this wait queue. If the cancellation token is already canceled, this method immediately returns a canceled task without modifying the wait queue.
            </summary>
            <param name="this">The wait queue.</param>
            <param name="syncObject">A synchronization object taken while cancelling the entry.</param>
            <param name="token">The token used to cancel the wait.</param>
            <returns>The queued task.</returns>
        </member>
        <member name="T:Stride.Core.Threading.DefaultAsyncWaitQueue`1">
            <summary>
            The default wait queue implementation, which uses a double-ended queue.
            </summary>
            <typeparam name="T">The type of the results. If this isn't needed, use <see cref="T:System.Object"/>.</typeparam>
        </member>
        <member name="T:Stride.Core.Threading.Deque`1">
            <summary>
            A double-ended queue (deque), which provides O(1) indexed access, O(1) removals from the front and back, amortized O(1) insertions to the front and back, and O(N) insertions and removals anywhere else (with the operations getting slower as the index approaches the middle).
            </summary>
            <typeparam name="T">The type of elements contained in the deque.</typeparam>
        </member>
        <member name="F:Stride.Core.Threading.Deque`1.DefaultCapacity">
            <summary>
            The default capacity.
            </summary>
        </member>
        <member name="F:Stride.Core.Threading.Deque`1.buffer">
            <summary>
            The circular buffer that holds the view.
            </summary>
        </member>
        <member name="F:Stride.Core.Threading.Deque`1.offset">
            <summary>
            The offset into <see cref="F:Stride.Core.Threading.Deque`1.buffer"/> where the view begins.
            </summary>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Threading.Deque`1"/> class with the specified capacity.
            </summary>
            <param name="capacity">The initial capacity. Must be greater than <c>0</c>.</param>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Threading.Deque`1"/> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Threading.Deque`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether this list is read-only. This implementation always returns <c>false</c>.
            </summary>
            <returns>true if this list is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Stride.Core.Threading.Deque`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">The index of the item to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in this list.</exception>
            <exception cref="T:System.NotSupportedException">This property is set and the list is read-only.</exception>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to this list at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into this list.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in this list.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in this list.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in this list.
            </summary>
            <param name="item">The object to locate in this list.</param>
            <returns>The index of <paramref name="item"/> if found in this list; otherwise, -1.</returns>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds an item to the end of this list.
            </summary>
            <param name="item">The object to add to this list.</param>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
            <summary>
            Determines whether this list contains a specific value.
            </summary>
            <param name="item">The object to locate in this list.</param>
            <returns>
            true if <paramref name="item"/> is found in this list; otherwise, false.
            </returns>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of this list to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from this slice. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from this list.
            </summary>
            <param name="item">The object to remove from this list.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from this list; otherwise, false. This method also returns false if <paramref name="item"/> is not found in this list.
            </returns>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.CheckNewIndexArgument(System.Int32,System.Int32)">
            <summary>
            Checks the <paramref name="index"/> argument to see if it refers to a valid insertion point in a source of a given length.
            </summary>
            <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
            <param name="index">The index into the source.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index to an insertion point for the source.</exception>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.CheckExistingIndexArgument(System.Int32,System.Int32)">
            <summary>
            Checks the <paramref name="index"/> argument to see if it refers to an existing element in a source of a given length.
            </summary>
            <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
            <param name="index">The index into the source.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index to an existing element for the source.</exception>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.CheckRangeArguments(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks the <paramref name="offset"/> and <paramref name="count"/> arguments for validity when applied to a source of a given length. Allows 0-element ranges, including a 0-element range at the end of the source.
            </summary>
            <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
            <param name="offset">The index into source at which the range begins.</param>
            <param name="count">The number of elements in the range.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="offset"/> or <paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The range [offset, offset + count) is not within the range [0, sourceLength).</exception>
        </member>
        <member name="P:Stride.Core.Threading.Deque`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
        </member>
        <member name="P:Stride.Core.Threading.Deque`1.IsFull">
            <summary>
            Gets a value indicating whether this instance is at full capacity.
            </summary>
        </member>
        <member name="P:Stride.Core.Threading.Deque`1.IsSplit">
            <summary>
            Gets a value indicating whether the buffer is "split" (meaning the beginning of the view is at a later index in <see cref="F:Stride.Core.Threading.Deque`1.buffer"/> than the end).
            </summary>
        </member>
        <member name="P:Stride.Core.Threading.Deque`1.Capacity">
            <summary>
            Gets or sets the capacity for this deque. This value must always be greater than zero, and this property cannot be set to a value less than <see cref="P:Stride.Core.Threading.Deque`1.Count"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException"><c>Capacity</c> cannot be set to a value less than <see cref="P:Stride.Core.Threading.Deque`1.Count"/>.</exception>
        </member>
        <member name="P:Stride.Core.Threading.Deque`1.Count">
            <summary>
            Gets the number of elements contained in this deque.
            </summary>
            <returns>The number of elements contained in this deque.</returns>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.DequeIndexToBufferIndex(System.Int32)">
            <summary>
            Applies the offset to <paramref name="index"/>, resulting in a buffer index.
            </summary>
            <param name="index">The deque index.</param>
            <returns>The buffer index.</returns>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.DoGetItem(System.Int32)">
            <summary>
            Gets an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.DoSetItem(System.Int32,`0)">
            <summary>
            Sets an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.DoInsert(System.Int32,`0)">
            <summary>
            Inserts an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index at which the element should be inserted. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.DoRemoveAt(System.Int32)">
            <summary>
            Removes an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to remove. This index is guaranteed to be valid.</param>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.PostIncrement(System.Int32)">
            <summary>
            Increments <see cref="F:Stride.Core.Threading.Deque`1.offset"/> by <paramref name="value"/> using modulo-<see cref="P:Stride.Core.Threading.Deque`1.Capacity"/> arithmetic.
            </summary>
            <param name="value">The value by which to increase <see cref="F:Stride.Core.Threading.Deque`1.offset"/>. May not be negative.</param>
            <returns>The value of <see cref="F:Stride.Core.Threading.Deque`1.offset"/> after it was incremented.</returns>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.PreDecrement(System.Int32)">
            <summary>
            Decrements <see cref="F:Stride.Core.Threading.Deque`1.offset"/> by <paramref name="value"/> using modulo-<see cref="P:Stride.Core.Threading.Deque`1.Capacity"/> arithmetic.
            </summary>
            <param name="value">The value by which to reduce <see cref="F:Stride.Core.Threading.Deque`1.offset"/>. May not be negative or greater than <see cref="P:Stride.Core.Threading.Deque`1.Capacity"/>.</param>
            <returns>The value of <see cref="F:Stride.Core.Threading.Deque`1.offset"/> before it was decremented.</returns>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.DoAddToBack(`0)">
            <summary>
            Inserts a single element to the back of the view. <see cref="P:Stride.Core.Threading.Deque`1.IsFull"/> must be false when this method is called.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.DoAddToFront(`0)">
            <summary>
            Inserts a single element to the front of the view. <see cref="P:Stride.Core.Threading.Deque`1.IsFull"/> must be false when this method is called.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.DoRemoveFromBack">
            <summary>
            Removes and returns the last element in the view. <see cref="P:Stride.Core.Threading.Deque`1.IsEmpty"/> must be false when this method is called.
            </summary>
            <returns>The former last element.</returns>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.DoRemoveFromFront">
            <summary>
            Removes and returns the first element in the view. <see cref="P:Stride.Core.Threading.Deque`1.IsEmpty"/> must be false when this method is called.
            </summary>
            <returns>The former first element.</returns>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.DoInsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Inserts a range of elements into the view.
            </summary>
            <param name="index">The index into the view at which the elements are to be inserted.</param>
            <param name="collection">The elements to insert.</param>
            <param name="collectionCount">The number of elements in <paramref name="collection"/>. Must be greater than zero, and the sum of <paramref name="collectionCount"/> and <see cref="P:Stride.Core.Threading.Deque`1.Count"/> must be less than or equal to <see cref="P:Stride.Core.Threading.Deque`1.Capacity"/>.</param>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.DoRemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the view.
            </summary>
            <param name="index">The index into the view at which the range begins.</param>
            <param name="collectionCount">The number of elements in the range. This must be greater than 0 and less than or equal to <see cref="P:Stride.Core.Threading.Deque`1.Count"/>.</param>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.EnsureCapacityForOneElement">
            <summary>
            Doubles the capacity if necessary to make room for one more element. When this method returns, <see cref="P:Stride.Core.Threading.Deque`1.IsFull"/> is false.
            </summary>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.AddToBack(`0)">
            <summary>
            Inserts a single element at the back of this deque.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.AddToFront(`0)">
            <summary>
            Inserts a single element at the front of this deque.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts a collection of elements into this deque.
            </summary>
            <param name="index">The index at which the collection is inserted.</param>
            <param name="collection">The collection of elements to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index to an insertion point for the source.</exception>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from this deque.
            </summary>
            <param name="offset">The index into the deque at which the range begins.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="offset"/> or <paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The range [<paramref name="offset"/>, <paramref name="offset"/> + <paramref name="count"/>) is not within the range [0, <see cref="P:Stride.Core.Threading.Deque`1.Count"/>).</exception>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.RemoveFromBack">
            <summary>
            Removes and returns the last element of this deque.
            </summary>
            <returns>The former last element.</returns>
            <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.RemoveFromFront">
            <summary>
            Removes and returns the first element of this deque.
            </summary>
            <returns>The former first element.</returns>
            <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
        </member>
        <member name="M:Stride.Core.Threading.Deque`1.Clear">
            <summary>
            Removes all items from this deque.
            </summary>
        </member>
        <member name="T:Stride.Core.Threading.ExceptionHelpers">
            <summary>
            Provides helper (non-extension) methods dealing with exceptions.
            </summary>
        </member>
        <member name="M:Stride.Core.Threading.ExceptionHelpers.PrepareForRethrow(System.Exception)">
            <summary>
            Attempts to prepare the exception for re-throwing by preserving the stack trace. The returned exception should be immediately thrown.
            </summary>
            <param name="exception">The exception. May not be <c>null</c>.</param>
            <returns>The <see cref="T:System.Exception"/> that was passed into this method.</returns>
        </member>
        <member name="T:Stride.Core.Threading.IdManager`1">
            <summary>
            Allocates Ids for instances on demand. 0 is an invalid/unassigned Id. Ids may be non-unique in very long-running systems.
            This is similar to the Id system used by <see cref="T:System.Threading.Tasks.Task"/> and <see cref="T:System.Threading.Tasks.TaskScheduler"/>.
            </summary>
            <typeparam name="TTag">The type for which ids are generated.</typeparam>
        </member>
        <member name="F:Stride.Core.Threading.IdManager`1.lastId">
            <summary>
            The last id generated for this type. This is 0 if no ids have been generated.
            </summary>
        </member>
        <member name="M:Stride.Core.Threading.IdManager`1.GetId(System.Int32@)">
            <summary>
            Returns the id, allocating it if necessary.
            </summary>
            <param name="id">A reference to the field containing the id.</param>
        </member>
        <member name="T:Stride.Core.Threading.TaskCompletionSourceExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Threading.TaskCompletionSourceExtensions.TrySetResultWithBackgroundContinuations``1(System.Threading.Tasks.TaskCompletionSource{``0},``0)">
            <summary>
            Attempts to complete a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> with the specified value, forcing all continuations onto a threadpool thread even if they specified <c>ExecuteSynchronously</c>.
            </summary>
            <typeparam name="TResult">The type of the result of the asynchronous operation.</typeparam>
            <param name="this">The task completion source. May not be <c>null</c>.</param>
            <param name="result">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Stride.Core.Threading.TaskCompletionSourceExtensions.TrySetCanceledWithBackgroundContinuations``1(System.Threading.Tasks.TaskCompletionSource{``0})">
            <summary>
            Attempts to complete a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> as canceled, forcing all continuations onto a threadpool thread even if they specified <c>ExecuteSynchronously</c>.
            </summary>
            <typeparam name="TResult">The type of the result of the asynchronous operation.</typeparam>
            <param name="this">The task completion source. May not be <c>null</c>.</param>
        </member>
        <member name="T:Stride.Core.Transactions.DiscardReason">
            <summary>
            A enum listing the possible reasons for transactions to be discarded from an <see cref="T:Stride.Core.Transactions.ITransactionStack"/>.
            </summary>
        </member>
        <member name="F:Stride.Core.Transactions.DiscardReason.StackFull">
            <summary>
            Transactions have been discarded because the stack is full.
            </summary>
        </member>
        <member name="F:Stride.Core.Transactions.DiscardReason.StackPurged">
            <summary>
            Transactions have been discarded because the top of the stack has been purged.
            </summary>
        </member>
        <member name="T:Stride.Core.Transactions.IAsyncTransaction">
            <summary>
            An interface representing an asynchronous transaction. An asynchronous transaction is a transaction that can be completed asynchronously. It
            provides additional safety such as preventing another asynchronous transaction to be created when there is one already in progress.
            </summary>
        </member>
        <member name="M:Stride.Core.Transactions.IMergeableOperation.CanMerge(Stride.Core.Transactions.IMergeableOperation)">
            <summary>
            Indicates whether the given operation can be merged into this operation.
            </summary>
            <param name="otherOperation">The operation to merge into this operation.</param>
            <returns><c>True</c> if the operation can be merged, <c>False</c> otherwise.</returns>
            <remarks>The operation given as argument is supposed to have occurred after this one.</remarks>
        </member>
        <member name="M:Stride.Core.Transactions.IMergeableOperation.Merge(Stride.Core.Transactions.Operation)">
            <summary>
            Merges the given operation into this operation.
            </summary>
            <param name="otherOperation">The operation to merge into this operation.</param>
            <remarks>The operation given as argument is supposed to have occurred after this one.</remarks>
        </member>
        <member name="T:Stride.Core.Transactions.IOperation">
            <summary>
            An internal interface to interact with <see cref="T:Stride.Core.Transactions.Operation"/> instances from a <see cref="T:Stride.Core.Transactions.TransactionStack"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Transactions.IOperation.Freeze">
            <summary>
            Freezes the operation, preventing it to be rollbacked or rollforwarded again.
            </summary>
            <remarks>This operation should release any reference that is not needed anymore by the operation.</remarks>
        </member>
        <member name="M:Stride.Core.Transactions.IOperation.Rollback">
            <summary>
            Rollbacks the operation, restoring the state of object as they were before the operation.
            </summary>
        </member>
        <member name="M:Stride.Core.Transactions.IOperation.Rollforward">
            <summary>
            Rollforwards the operation, restoring the state of object as they were after the operation.
            </summary>
        </member>
        <member name="T:Stride.Core.Transactions.IReadOnlyTransaction">
            <summary>
            An completed interface that cannot be modified anymore, but can be rollbacked or rollforwarded.
            </summary>
        </member>
        <member name="P:Stride.Core.Transactions.IReadOnlyTransaction.Id">
            <summary>
            Gets an unique identifier for the transaction.
            </summary>
        </member>
        <member name="P:Stride.Core.Transactions.IReadOnlyTransaction.Operations">
            <summary>
            Gets the operations executed during the transaction.
            </summary>
        </member>
        <member name="P:Stride.Core.Transactions.IReadOnlyTransaction.Flags">
            <summary>
            Gets the transaction flags.
            </summary>
        </member>
        <member name="T:Stride.Core.Transactions.ITransaction">
            <summary>
            An interface representing a transaction currently in progress. The transaction must be
            completed in the same <see cref="T:System.Threading.SynchronizationContext"/> it was created.
            </summary>
        </member>
        <member name="P:Stride.Core.Transactions.ITransaction.Id">
            <summary>
            Gets an unique identifier for the transaction.
            </summary>
        </member>
        <member name="P:Stride.Core.Transactions.ITransaction.IsEmpty">
            <summary>
            Gets whether this transaction is empty.
            </summary>
        </member>
        <member name="M:Stride.Core.Transactions.ITransaction.Continue">
            <summary>
            Continues the transaction when the current <see cref="T:System.Threading.SynchronizationContext"/> has changed, allowing to push additional operations or complete it.
            </summary>
        </member>
        <member name="M:Stride.Core.Transactions.ITransaction.Complete">
            <summary>
            Completes the transaction by closing it and adding it to the transaction stack.
            </summary>
            <remarks>This method is invoked by the <see cref="M:System.IDisposable.Dispose"/> method.</remarks>
        </member>
        <member name="M:Stride.Core.Transactions.ITransaction.AddReference">
            <summary>
            Keep the transaction alive until an additional call to <see cref="M:Stride.Core.Transactions.ITransaction.Complete"/> is done.
            </summary>
        </member>
        <member name="T:Stride.Core.Transactions.ITransactionStack">
            <summary>
            An interface representing a transaction stack.
            </summary>
            <remarks>
            A transaction stack is a stack with a predefined <see cref="P:Stride.Core.Transactions.ITransactionStack.Capacity"/>. Transactions that are completed
            are added to the top of the stack.
            When the stack is full, any new transaction that is added will discard the transaction at the bottom of the stack
            (which is the oldest transaction still in the stack) in order to create a slot to add itself on the top.
            Transaction can be rollbacked to restore previous states, and also rollforwarded again. Rollbacked transactions
            remain on the stack, but if a new transaction is added, they will be discarded (purged) from the stack and the
            new transaction will be added on the top of last non-rollbacked transaction.
            Any transaction that is discarded will be frozen, a mechanism that allows to release references to related object
            and allow garbage collecting them. Freezing is similar to disposing but is a different interface since the
            <see cref="T:System.IDisposable"/> interface is used to complete transactions in order to make then compatible with the
            <c>using</c> statement.
            </remarks>
        </member>
        <member name="P:Stride.Core.Transactions.ITransactionStack.TransactionInProgress">
            <summary>
            Gets whether there is a transaction currently in progress.
            </summary>
        </member>
        <member name="P:Stride.Core.Transactions.ITransactionStack.RollInProgress">
            <summary>
            Gets whether there is a transaction rollback or rollforward currently in progress.
            </summary>
        </member>
        <member name="P:Stride.Core.Transactions.ITransactionStack.Capacity">
            <summary>
            Gets the capacity of the transaction stack.
            </summary>
        </member>
        <member name="P:Stride.Core.Transactions.ITransactionStack.IsEmpty">
            <summary>
            Gets whether the transaction stack is currently empty.
            </summary>
        </member>
        <member name="P:Stride.Core.Transactions.ITransactionStack.IsFull">
            <summary>
            Gets whether the transaction stack is currently full.
            </summary>
        </member>
        <member name="P:Stride.Core.Transactions.ITransactionStack.CanRollback">
            <summary>
            Gets whether the transaction stack is in a state that allows it to trigger a rollback.
            </summary>
        </member>
        <member name="P:Stride.Core.Transactions.ITransactionStack.CanRollforward">
            <summary>
            Gets whether the transaction stack is in a state that allows it to trigger a rollforward.
            </summary>
        </member>
        <member name="E:Stride.Core.Transactions.ITransactionStack.TransactionCompleted">
            <summary>
            Raised when a transaction has been completed and added to the transaction stack.
            </summary>
        </member>
        <member name="E:Stride.Core.Transactions.ITransactionStack.TransactionRollbacked">
            <summary>
            Raised when a transaction has been rollbacked.
            </summary>
        </member>
        <member name="E:Stride.Core.Transactions.ITransactionStack.TransactionRollforwarded">
            <summary>
            Raised when a transation has been rollforwarded.
            </summary>
        </member>
        <member name="E:Stride.Core.Transactions.ITransactionStack.TransactionDiscarded">
            <summary>
            Raised when a transaction has been discarded, either because the stack is full, or because the stack has been purged.
            </summary>
        </member>
        <member name="E:Stride.Core.Transactions.ITransactionStack.Cleared">
            <summary>
            Raised when the transaction stack has been cleared.
            </summary>
        </member>
        <member name="M:Stride.Core.Transactions.ITransactionStack.CreateTransaction(Stride.Core.Transactions.TransactionFlags)">
            <summary>
            Creates a new transaction. If a transaction is already in progress, this transaction will be nested into the latest
            created transaction.
            </summary>
            <remarks>The transaction will be completed when the returned <see cref="T:Stride.Core.Transactions.ITransaction"/> object is disposed or when <see cref="M:Stride.Core.Transactions.ITransaction.Complete"/> is called.</remarks>
            <param name="flags">The flags to set on the new transaction.</param>
            <returns>A transaction object that must be completed in order to add the transaction to the stack.</returns>
        </member>
        <member name="M:Stride.Core.Transactions.ITransactionStack.Clear">
            <summary>
            Clears the transaction stack.
            </summary>
        </member>
        <member name="M:Stride.Core.Transactions.ITransactionStack.RetrieveAllTransactions">
            <summary>
            Retrieves the collection of transactions registered to this stack.
            </summary>
            <returns>A collection of transactions registered into this stack.</returns>
        </member>
        <member name="M:Stride.Core.Transactions.ITransactionStack.PushOperation(Stride.Core.Transactions.Operation)">
            <summary>
            Pushes an operation to the current transaction.
            </summary>
            <param name="operation">The operation to push.</param>
        </member>
        <member name="M:Stride.Core.Transactions.ITransactionStack.Rollback">
            <summary>
            Rollbacks the latest active transaction of the stack.
            </summary>
        </member>
        <member name="M:Stride.Core.Transactions.ITransactionStack.Rollforward">
            <summary>
            Rollforwards the first inactive transaction of the stack.
            </summary>
        </member>
        <member name="M:Stride.Core.Transactions.ITransactionStack.Resize(System.Int32)">
            <summary>
            Resizes the transaction stack.
            </summary>
            <param name="newCapacity">The new capacity of the stack.</param>
        </member>
        <member name="T:Stride.Core.Transactions.Operation">
            <summary>
            A base class for operations that are executed during a transaction.
            </summary>
            <remarks>
            After an operation has been executed, an <see cref="T:Stride.Core.Transactions.Operation"/> instance must be created in order to be able
            to rollback and rollforward the operation. Implementations of this objects just need the code to rollback and
            rollforward the operation, the initial operation itself can be done outside of this class. Any instance of
            this class that has been created must be pushed to the transaction stack with the method
            <see cref="M:Stride.Core.Transactions.ITransactionStack.PushOperation(Stride.Core.Transactions.Operation)"/>.
            </remarks>
        </member>
        <member name="P:Stride.Core.Transactions.Operation.Id">
            <summary>
            Gets an unique identifier for the transaction.
            </summary>
        </member>
        <member name="P:Stride.Core.Transactions.Operation.HasEffect">
            <summary>
            Gets whether this operation has any effect. If this property returns false, the operation will be discarded.
            </summary>
        </member>
        <member name="P:Stride.Core.Transactions.Operation.IsFrozen">
            <summary>
            Gets whether this operation has been frozen.
            </summary>
            <remarks>An operation is frozen after it has been discarded of the transaction stack.</remarks>
        </member>
        <member name="P:Stride.Core.Transactions.Operation.Interface">
            <summary>
            Gets the <see cref="T:Stride.Core.Transactions.IOperation"/> interface used to interact with the transaction stack.
            </summary>
        </member>
        <member name="M:Stride.Core.Transactions.Operation.Rollback">
            <summary>
            Rollbacks the operation, restoring the state of object as they were before the operation.
            </summary>
        </member>
        <member name="M:Stride.Core.Transactions.Operation.Rollforward">
            <summary>
            Rollforwards the operation, restoring the state of object as they were after the operation.
            </summary>
        </member>
        <member name="M:Stride.Core.Transactions.Operation.FreezeContent">
            <summary>
            Freezes the content of this operation, forbidding any subsequent rollback and rollforward.
            </summary>
            <remarks>This operation should release any reference that is not needed anymore by the operation.</remarks>
        </member>
        <member name="M:Stride.Core.Transactions.Operation.Stride#Core#Transactions#IOperation#Freeze">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Transactions.Operation.Stride#Core#Transactions#IOperation#Rollback">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Transactions.Operation.Stride#Core#Transactions#IOperation#Rollforward">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Transactions.Transaction">
            <summary>
            This class is the internal implementation of transaction.
            </summary>
        </member>
        <member name="M:Stride.Core.Transactions.Transaction.#ctor(Stride.Core.Transactions.TransactionStack,Stride.Core.Transactions.TransactionFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Transactions.Transaction"/> class.
            </summary>
            <param name="transactionStack">The <see cref="T:Stride.Core.Transactions.TransactionStack"/> associated to this transaction.</param>
            <param name="flags">The flags to apply to this transaction.</param>.
        </member>
        <member name="P:Stride.Core.Transactions.Transaction.IsEmpty">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Transactions.Transaction.Operations">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Transactions.Transaction.Flags">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Transactions.Transaction.Dispose">
            <summary>
            Disposes the transaction by completing it and registering it to the transaction stack.
            </summary>
            <seealso cref="M:Stride.Core.Transactions.Transaction.Complete"/>
        </member>
        <member name="M:Stride.Core.Transactions.Transaction.Continue">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Transactions.Transaction.AddReference">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Transactions.Transaction.Complete">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Transactions.Transaction.PushOperation(Stride.Core.Transactions.Operation)">
            <summary>
            Pushes an operation in this transaction.
            </summary>
            <param name="operation">The operation to push.</param>
            <remarks>This method should be invoked by <seealso cref="T:Stride.Core.Transactions.TransactionStack"/> only.</remarks>
        </member>
        <member name="M:Stride.Core.Transactions.Transaction.Rollback">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Transactions.Transaction.Rollforward">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Transactions.Transaction.FreezeContent">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.Transactions.TransactionEventArgs">
            <summary>
            Arguments of events triggered by <see cref="T:Stride.Core.Transactions.ITransactionStack"/> instances that affect a single transaction.
            </summary>
        </member>
        <member name="M:Stride.Core.Transactions.TransactionEventArgs.#ctor(Stride.Core.Transactions.IReadOnlyTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Transactions.TransactionEventArgs"/> class.
            </summary>
            <param name="transaction">The transaction associated to this event.</param>
        </member>
        <member name="P:Stride.Core.Transactions.TransactionEventArgs.Transaction">
            <summary>
            Gets the transaction associated to this event.
            </summary>
        </member>
        <member name="T:Stride.Core.Transactions.TransactionException">
            <summary>
            An exception triggered when an invalid operation related to a transaction stack occurs.
            </summary>
        </member>
        <member name="M:Stride.Core.Transactions.TransactionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <seealso cref="T:Stride.Core.Transactions.TransactionException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="F:Stride.Core.Transactions.TransactionFlags.KeepParentsAlive">
            <summary>
            Keep parent transaction alive (useful to start async inner transactions).
            </summary>
        </member>
        <member name="T:Stride.Core.Transactions.TransactionsDiscardedEventArgs">
            <summary>
            Arguments of events triggered by <see cref="T:Stride.Core.Transactions.ITransactionStack"/> instances that discard one or multiple transactions.
            </summary>
        </member>
        <member name="M:Stride.Core.Transactions.TransactionsDiscardedEventArgs.#ctor(Stride.Core.Transactions.IReadOnlyTransaction[],Stride.Core.Transactions.DiscardReason)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Transactions.TransactionsDiscardedEventArgs"/> class.
            </summary>
            <param name="transactions">The transactions that have been discarded.</param>
            <param name="reason">The reason why the transactions have been discarded.</param>
        </member>
        <member name="M:Stride.Core.Transactions.TransactionsDiscardedEventArgs.#ctor(Stride.Core.Transactions.IReadOnlyTransaction,Stride.Core.Transactions.DiscardReason)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Transactions.TransactionsDiscardedEventArgs"/> class.
            </summary>
            <param name="transaction">The transaction that have been discarded.</param>
            <param name="reason">The reason why the transaction have been discarded.</param>
        </member>
        <member name="P:Stride.Core.Transactions.TransactionsDiscardedEventArgs.Transactions">
            <summary>
            Gets the transactions that have been discarded.
            </summary>
        </member>
        <member name="P:Stride.Core.Transactions.TransactionsDiscardedEventArgs.Reason">
            <summary>
            Gets the reason why the transactions have been discarded.
            </summary>
        </member>
        <member name="T:Stride.Core.Transactions.TransactionStack">
            <summary>
            Internal implementation of the <see cref="T:Stride.Core.Transactions.ITransactionStack"/> interface.
            </summary>
        </member>
        <member name="M:Stride.Core.Transactions.TransactionStack.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Transactions.TransactionStack"/> class.
            </summary>
            <param name="capacity">The capacity of the stack.</param>
        </member>
        <member name="P:Stride.Core.Transactions.TransactionStack.Transactions">
            <summary>
            Gets the collection of transactions currently on the stack.
            </summary>
        </member>
        <member name="P:Stride.Core.Transactions.TransactionStack.TransactionInProgress">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Transactions.TransactionStack.RollInProgress">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Transactions.TransactionStack.Capacity">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Transactions.TransactionStack.IsEmpty">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Transactions.TransactionStack.IsFull">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Transactions.TransactionStack.CanRollback">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Core.Transactions.TransactionStack.CanRollforward">
            <inheritdoc/>
        </member>
        <member name="E:Stride.Core.Transactions.TransactionStack.TransactionCompleted">
            <inheritdoc/>
        </member>
        <member name="E:Stride.Core.Transactions.TransactionStack.TransactionRollbacked">
            <inheritdoc/>
        </member>
        <member name="E:Stride.Core.Transactions.TransactionStack.TransactionRollforwarded">
            <inheritdoc/>
        </member>
        <member name="E:Stride.Core.Transactions.TransactionStack.TransactionDiscarded">
            <inheritdoc/>
        </member>
        <member name="E:Stride.Core.Transactions.TransactionStack.Cleared">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Transactions.TransactionStack.CreateTransaction(Stride.Core.Transactions.TransactionFlags)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Transactions.TransactionStack.PushOperation(Stride.Core.Transactions.Operation)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Transactions.TransactionStack.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Transactions.TransactionStack.RetrieveAllTransactions">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Transactions.TransactionStack.Rollback">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Transactions.TransactionStack.Rollforward">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.Transactions.TransactionStack.PurgeFromIndex(System.Int32)">
            <summary>
            Purges the stack from the given index (included) to the top of the stack.
            </summary>
            <param name="index">The index from which to purge the stack.</param>
        </member>
        <member name="T:Stride.Core.Transactions.TransactionStackFactory">
            <summary>
            A static factory to create <see cref="T:Stride.Core.Transactions.ITransactionStack"/> instances.
            </summary>
        </member>
        <member name="T:Stride.Core.TypeConverters.BaseConverter">
            <summary>
            Provides a base class for mathematical type converters.
            </summary>
        </member>
        <member name="P:Stride.Core.TypeConverters.BaseConverter.Properties">
            <summary>
            Gets or sets the collection of exposed properties.
            </summary>
            <value>The collection of exposed properties.</value>
        </member>
        <member name="M:Stride.Core.TypeConverters.BaseConverter.ConvertFromValues``1(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,``0[])">
            <summary>
            Converts values to a string.
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="values">The values.</param>
            <returns>A string representing the values</returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.BaseConverter.ConvertToValues``1(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts a string to values.
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="strValue">The string value.</param>
            <returns>An array of value or null if strValue is not a string.</returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.BaseConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.BaseConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.BaseConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether changing a value on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"/> to create a new value, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true if changing a property on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"/> to create a new value; otherwise, false.
            </returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.BaseConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets a value indicating whether this object supports properties using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true because <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object. This method never returns false.
            </returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.BaseConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Gets a collection of properties for the type of object specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of object to get the properties for.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that will be used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for the component, or null if there are no properties.
            </returns>
        </member>
        <member name="T:Stride.Core.TypeConverters.Color3Converter">
            <summary>
            Defines a type converter for <see cref="T:Stride.Core.Mathematics.Color3"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.TypeConverters.Color3Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.TypeConverters.Color3Converter"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.TypeConverters.Color3Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.TypeConverters.Color3Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.TypeConverters.Color3Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.TypeConverters.Color3Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.TypeConverters.Color3Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.TypeConverters.Color4Converter">
            <summary>
            Defines a type converter for <see cref="T:Stride.Core.Mathematics.Color4"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.TypeConverters.Color4Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.TypeConverters.Color4Converter"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.TypeConverters.Color4Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.TypeConverters.Color4Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.TypeConverters.Color4Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.TypeConverters.Color4Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.TypeConverters.Color4Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.TypeConverters.ColorConverter">
            <summary>
            Defines a type converter for <see cref="T:Stride.Core.Mathematics.Color"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.TypeConverters.ColorConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.TypeConverters.ColorConverter"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.TypeConverters.ColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.TypeConverters.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.TypeConverters.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.TypeConverters.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.TypeConverters.ColorConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.TypeConverters.FieldPropertyDescriptor.Equals(Stride.Core.TypeConverters.FieldPropertyDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.TypeConverters.FieldPropertyDescriptor.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Stride.Core.TypeConverters.FieldPropertyDescriptor.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Stride.Core.TypeConverters.Half2Converter">
            <summary>
              Provides a type converter to convert <see cref = "T:SharpDX.Half2" /> objects to and from various
              other representations.
            </summary>
        </member>
        <member name="M:Stride.Core.TypeConverters.Half2Converter.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Stride.Core.TypeConverters.Half2Converter"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.TypeConverters.Half2Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
              Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "sourceType">A System::Type that represents the type you want to convert from.</param>
            <returns>
              <c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.Half2Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
              Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "destinationType">A <see cref = "T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>
              <c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.Half2Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
              Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "culture">A <see cref = "T:System.Globalization.CultureInfo" />. If <c>null</c> is passed, the current culture is assumed.</param>
            <param name = "value">The <see cref = "T:System.Object" /> to convert.</param>
            <returns>An <see cref = "T:System.Object" /> that represents the converted value.</returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.Half2Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
              Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "culture">A <see cref = "T:System.Globalization.CultureInfo" />. If <c>null</c> is passed, the current culture is assumed.</param>
            <param name = "value">The <see cref = "T:System.Object" /> to convert.</param>
            <param name = "destinationType">A <see cref = "T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>An <see cref = "T:System.Object" /> that represents the converted value.</returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.Half2Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
              Creates an instance of the type that this <see cref = "T:System.ComponentModel.TypeConverter" /> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "propertyValues">An <see cref = "T:System.Collections.IDictionary" /> of new property values.</param>
            <returns>An <see cref = "T:System.Object" /> representing the given <see cref = "T:System.Collections.IDictionary" />, or <c>null</c> if the object cannot be created.</returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.Half2Converter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
              Returns whether changing a value on this object requires a call to <c>System::ComponentModel::TypeConverter::CreateInstance(System::Collections::IDictionary^)</c>
              to create a new value, using the specified context.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <returns>
              <c>false</c> if changing a property on this object requires a call to <c>System::ComponentModel::TypeConverter::CreateInstance(System::Collections::IDictionary^)</c> to create a new value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.Half2Converter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
              Creates an instance of the type that this <see cref = "T:System.ComponentModel.TypeConverter" /> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "value">An <see cref = "T:System.Object" /> that specifies the type of array for which to get properties. </param>
            <param name = "attributes">An array of type <see cref = "T:System.Attribute" /> that is used as a filter.</param>
            <returns>A <see cref = "T:System.ComponentModel.PropertyDescriptorCollection" /> with the properties that are exposed for this data type, or a null reference (<c>Nothing</c> in Visual Basic) if there are no properties.</returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.Half2Converter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
              Returns whether this object supports properties, using the specified context.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <returns>
              <c>true</c> if GetProperties should be called to find the properties of this object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Stride.Core.TypeConverters.Half3Converter">
            <summary>
              Provides a type converter to convert <see cref = "T:SharpDX.Half3" /> objects to and from various
              other representations.
            </summary>
        </member>
        <member name="M:Stride.Core.TypeConverters.Half3Converter.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Stride.Core.TypeConverters.Half3Converter"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.TypeConverters.Half3Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
              Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "sourceType">A System.Type that represents the type you want to convert from.</param>
            <returns>
              <c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.Half3Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
              Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "destinationType">A <see cref = "T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>
              <c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.Half3Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
              Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "culture">A <see cref = "T:System.Globalization.CultureInfo" />. If <c>null</c> is passed, the current culture is assumed.</param>
            <param name = "value">The <see cref = "T:System.Object" /> to convert.</param>
            <returns>An <see cref = "T:System.Object" /> that represents the converted value.</returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.Half3Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
              Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "culture">A <see cref = "T:System.Globalization.CultureInfo" />. If <c>null</c> is passed, the current culture is assumed.</param>
            <param name = "value">The <see cref = "T:System.Object" /> to convert.</param>
            <param name = "destinationType">A <see cref = "T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>An <see cref = "T:System.Object" /> that represents the converted value.</returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.Half3Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
              Creates an instance of the type that this <see cref = "T:System.ComponentModel.TypeConverter" /> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "propertyValues">An <see cref = "T:System.Collections.IDictionary" /> of new property values.</param>
            <returns>An <see cref = "T:System.Object" /> representing the given <see cref = "T:System.Collections.IDictionary" />, or <c>null</c> if the object cannot be created.</returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.Half3Converter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
              Returns whether changing a value on this object requires a call to <c>System::ComponentModel::TypeConverter::CreateInstance(System::Collections::IDictionary^)</c>
              to create a new value, using the specified context.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <returns>
              <c>false</c> if changing a property on this object requires a call to <c>System.ComponentModel::TypeConverter::CreateInstance(System::Collections::IDictionary^)</c> to create a new value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.Half3Converter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
              Creates an instance of the type that this <see cref = "T:System.ComponentModel.TypeConverter" /> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "value">An <see cref = "T:System.Object" /> that specifies the type of array for which to get properties. </param>
            <param name = "attributes">An array of type <see cref = "T:System.Attribute" /> that is used as a filter.</param>
            <returns>A <see cref = "T:System.ComponentModel.PropertyDescriptorCollection" /> with the properties that are exposed for this data type, or a null reference (<c>Nothing</c> in Visual Basic) if there are no properties.</returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.Half3Converter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
              Returns whether this object supports properties, using the specified context.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <returns>
              <c>true</c> if GetProperties should be called to find the properties of this object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Stride.Core.TypeConverters.Half4Converter">
            <summary>
              Provides a type converter to convert <see cref = "T:SharpDX.Half4" /> objects to and from various
              other representations.
            </summary>
        </member>
        <member name="M:Stride.Core.TypeConverters.Half4Converter.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Stride.Core.TypeConverters.Half4Converter"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.TypeConverters.Half4Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
              Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "sourceType">A System::Type that represents the type you want to convert from.</param>
            <returns>
              <c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.Half4Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
              Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "destinationType">A <see cref = "T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>
              <c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.Half4Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
              Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "culture">A <see cref = "T:System.Globalization.CultureInfo" />. If <c>null</c> is passed, the current culture is assumed.</param>
            <param name = "value">The <see cref = "T:System.Object" /> to convert.</param>
            <returns>An <see cref = "T:System.Object" /> that represents the converted value.</returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.Half4Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
              Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "culture">A <see cref = "T:System.Globalization.CultureInfo" />. If <c>null</c> is passed, the current culture is assumed.</param>
            <param name = "value">The <see cref = "T:System.Object" /> to convert.</param>
            <param name = "destinationType">A <see cref = "T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>An <see cref = "T:System.Object" /> that represents the converted value.</returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.Half4Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
              Creates an instance of the type that this <see cref = "T:System.ComponentModel.TypeConverter" /> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "propertyValues">An <see cref = "T:System.Collections.IDictionary" /> of new property values.</param>
            <returns>An <see cref = "T:System.Object" /> representing the given <see cref = "T:System.Collections.IDictionary" />, or <c>null</c> if the object cannot be created.</returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.Half4Converter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
              Returns whether changing a value on this object requires a call to <c>System::ComponentModel::TypeConverter::CreateInstance(System::Collections::IDictionary^)</c>
              to create a new value, using the specified context.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <returns>
              <c>false</c> if changing a property on this object requires a call to <c>System::ComponentModel::TypeConverter::CreateInstance(System::Collections::IDictionary^)</c></returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.Half4Converter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
              Creates an instance of the type that this <see cref = "T:System.ComponentModel.TypeConverter" /> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name = "value">An <see cref = "T:System.Object" /> that specifies the type of array for which to get properties. </param>
            <param name = "attributes">An array of type <see cref = "T:System.Attribute" /> that is used as a filter.</param>
            <returns>A <see cref = "T:System.ComponentModel.PropertyDescriptorCollection" /> with the properties that are exposed for this data type, or a null reference (<c>Nothing</c> in Visual Basic) if there are no properties.</returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.Half4Converter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
              Returns whether this object supports properties, using the specified context.
            </summary>
            <param name = "context">A <see cref = "T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <returns>
              <c>true</c> if GetProperties should be called to find the properties of this object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Stride.Core.TypeConverters.HalfConverter">
            <summary>
            Provides a type converter to convert <see cref="T:SlimDX.Half" /> objects to and from various
            other representations.
            </summary>
        </member>
        <member name="M:Stride.Core.TypeConverters.HalfConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="sourceType">A System::Type that represents the type you want to convert from.</param>
            <returns>
            <c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.HalfConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>
            <c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.HalfConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If <c>null</c> is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object" /> to convert.</param>
            <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.HalfConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If <c>null</c> is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object" /> to convert.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
        </member>
        <member name="T:Stride.Core.TypeConverters.MatrixConverter">
            <summary>
            Defines a type converter for <see cref="T:Stride.Core.Mathematics.Matrix"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.TypeConverters.MatrixConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.TypeConverters.MatrixConverter"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.TypeConverters.MatrixConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.TypeConverters.MatrixConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.TypeConverters.MatrixConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.TypeConverters.NamespaceDoc">
            <summary>
            The <see cref="N:Stride.Core.TypeConverters"/> namespace contains design-time converters for all vectors structures.
            </summary>
        </member>
        <member name="T:Stride.Core.TypeConverters.QuaternionConverter">
            <summary>
            Defines a type converter for <see cref="T:Stride.Core.Mathematics.Quaternion"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.TypeConverters.QuaternionConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.TypeConverters.QuaternionConverter"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.TypeConverters.QuaternionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.TypeConverters.QuaternionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.TypeConverters.QuaternionConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.TypeConverters.TypeConverterHelper.CanConvert(System.Type,System.Type)">
            <summary>
            Returns whether an instance of <paramref name="sourceType"/> can be converted to an instance of <paramref name="destinationType"/>.
            </summary>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns><c>true</c> if such a conversion exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.TypeConverters.TypeConverterHelper.TryConvert(System.Object,System.Type,System.Object@)">
            <summary>
            Tries to convert the <paramref name="source"/> to the <paramref name="destinationType"/>.
            </summary>
            <param name="source">The object to convert</param>
            <param name="destinationType">The type to convert to</param>
            <param name="target">The converted object</param>
            <returns><c>true</c> if the <paramref name="source"/> could be converted to the <paramref name="destinationType"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Stride.Core.TypeConverters.UrlReferenceConverter">
            <summary>
            Defines a type converter for <see cref="T:Stride.Core.Serialization.IUrlReference"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.TypeConverters.UrlReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.TypeConverters.UrlReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.TypeConverters.Vector2Converter">
            <summary>
            Defines a type converter for <see cref="T:Stride.Core.Mathematics.Vector2"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.TypeConverters.Vector2Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.TypeConverters.Vector2Converter"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.TypeConverters.Vector2Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.TypeConverters.Vector2Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.Core.TypeConverters.Vector2Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Core.TypeConverters.Vector3Converter">
            <summary>
            Defines a type converter for <see cref="T:Stride.Core.Mathematics.Vector3"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.TypeConverters.Vector3Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.TypeConverters.Vector3Converter"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.TypeConverters.Vector3Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Stride.Core.TypeConverters.Vector3Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Stride.Core.TypeConverters.Vector3Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
            <returns>
            An <see cref="T:System.Object"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method always returns null.
            </returns>
        </member>
        <member name="T:Stride.Core.TypeConverters.Vector4Converter">
            <summary>
            Defines a type converter for <see cref="T:Stride.Core.Mathematics.Vector4"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.TypeConverters.Vector4Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.TypeConverters.Vector4Converter"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.TypeConverters.Vector4Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Stride.Core.TypeConverters.Vector4Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Stride.Core.TypeConverters.Vector4Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
            <returns>
            An <see cref="T:System.Object"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method always returns null.
            </returns>
        </member>
        <member name="M:Stride.Core.VisualStudio.KeyedCollectionExtensions.AddRange``2(System.Collections.ObjectModel.KeyedCollection{``0,``1},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Adds the specified enumeration of values to this collection.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="collection">The collection to add the value to.</param>
            <param name="items">The items to add to the collection.</param>
        </member>
        <member name="T:Stride.Core.VisualStudio.Project">
            <summary>
            A project referenced by a VisualStudio solution.
            </summary>
        </member>
        <member name="M:Stride.Core.VisualStudio.Project.#ctor(System.Guid,System.Guid,System.String,System.String,System.Guid,System.Collections.Generic.IEnumerable{Stride.Core.VisualStudio.Section},System.Collections.Generic.IEnumerable{Stride.Core.VisualStudio.PropertyItem},System.Collections.Generic.IEnumerable{Stride.Core.VisualStudio.PropertyItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.VisualStudio.Project"/> class.
            </summary>
            <param name="guid">The unique identifier.</param>
            <param name="typeGuid">The type unique identifier.</param>
            <param name="name">The name.</param>
            <param name="fullPath">The relative path.</param>
            <param name="parentGuid">The parent unique identifier.</param>
            <param name="projectSections">The project sections.</param>
            <param name="versionControlLines">The version control lines.</param>
            <param name="projectConfigurationPlatformsLines">The project configuration platforms lines.</param>
            <exception cref="T:System.ArgumentNullException">
            solution
            or
            guid
            or
            typeGuid
            or
            name
            </exception>
        </member>
        <member name="M:Stride.Core.VisualStudio.Project.GetAllDescendants(Stride.Core.VisualStudio.Solution)">
            <summary>
            Gets all descendants <see cref="T:Stride.Core.VisualStudio.Project"/>
            </summary>
            <value>All descendants.</value>
        </member>
        <member name="P:Stride.Core.VisualStudio.Project.IsSolutionFolder">
            <summary>
            Gets a value indicating whether this instance is solution folder.
            </summary>
            <value><c>true</c> if this instance is solution folder; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Stride.Core.VisualStudio.Project.GetChildren(Stride.Core.VisualStudio.Solution)">
            <summary>
            Gets all direct child <see cref="T:Stride.Core.VisualStudio.Project"/>
            </summary>
            <value>The children.</value>
        </member>
        <member name="M:Stride.Core.VisualStudio.Project.GetDependencies(Stride.Core.VisualStudio.Solution)">
            <summary>
            Gets all project dependencies.
            </summary>
            <value>The dependencies.</value>
            <exception cref="T:Stride.Core.VisualStudio.SolutionFileException">
            </exception>
        </member>
        <member name="P:Stride.Core.VisualStudio.Project.FullPath">
            <summary>
            Gets the full path.
            </summary>
            <value>The full path.</value>
        </member>
        <member name="M:Stride.Core.VisualStudio.Project.GetParentProject(Stride.Core.VisualStudio.Solution)">
            <summary>
            Gets the parent project.
            </summary>
            <value>The parent project.</value>
        </member>
        <member name="P:Stride.Core.VisualStudio.Project.ParentGuid">
            <summary>
            Gets or sets the parent folder unique identifier.
            </summary>
            <value>The parent folder unique identifier.</value>
        </member>
        <member name="M:Stride.Core.VisualStudio.Project.GetFullName(Stride.Core.VisualStudio.Solution)">
            <summary>
            Gets the full name of the project.
            </summary>
            <value>The full name of the project.</value>
        </member>
        <member name="P:Stride.Core.VisualStudio.Project.Guid">
            <summary>
            Gets the project unique identifier.
            </summary>
            <value>The project unique identifier.</value>
        </member>
        <member name="P:Stride.Core.VisualStudio.Project.Name">
            <summary>
            Gets or sets the name of the project.
            </summary>
            <value>The name of the project.</value>
        </member>
        <member name="P:Stride.Core.VisualStudio.Project.PlatformProperties">
            <summary>
            Gets the project platform properties.
            </summary>
            <value>The project platform properties.</value>
        </member>
        <member name="P:Stride.Core.VisualStudio.Project.Sections">
            <summary>
            Gets the project sections.
            </summary>
            <value>The project sections.</value>
        </member>
        <member name="P:Stride.Core.VisualStudio.Project.TypeGuid">
            <summary>
            Gets or sets the type unique identifier.
            </summary>
            <value>The type unique identifier.</value>
        </member>
        <member name="M:Stride.Core.VisualStudio.Project.GetRelativePath(Stride.Core.VisualStudio.Solution)">
            <summary>
            Gets or sets the relative path.
            </summary>
            <value>The relative path.</value>
        </member>
        <member name="P:Stride.Core.VisualStudio.Project.VersionControlProperties">
            <summary>
            Gets the version control properties.
            </summary>
            <value>The version control properties.</value>
        </member>
        <member name="T:Stride.Core.VisualStudio.ProjectCollection">
            <summary>
            A collection of <see cref="T:Stride.Core.VisualStudio.Project"/>
            </summary>
        </member>
        <member name="M:Stride.Core.VisualStudio.ProjectCollection.#ctor(Stride.Core.VisualStudio.Solution)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.VisualStudio.ProjectCollection"/> class.
            </summary>
            <param name="container">The container.</param>
            <exception cref="T:System.ArgumentNullException">container</exception>
        </member>
        <member name="M:Stride.Core.VisualStudio.ProjectCollection.#ctor(Stride.Core.VisualStudio.Solution,System.Collections.Generic.IEnumerable{Stride.Core.VisualStudio.Project})">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.VisualStudio.ProjectCollection"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="items">The items.</param>
        </member>
        <member name="P:Stride.Core.VisualStudio.ProjectCollection.Solution">
            <summary>
            Gets the solution this project is attached to.
            </summary>
            <value>The solution.</value>
        </member>
        <member name="M:Stride.Core.VisualStudio.ProjectCollection.FindByFullName(System.String)">
            <summary>
            Finds a project by its full name.
            </summary>
            <param name="projectFullName">Full name of the project.</param>
            <returns>The Project or null if not found.</returns>
        </member>
        <member name="M:Stride.Core.VisualStudio.ProjectCollection.FindByGuid(System.Guid)">
            <summary>
            Finds a project by its unique identifier.
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns>The project or null if not found.</returns>
        </member>
        <member name="M:Stride.Core.VisualStudio.ProjectCollection.Sort">
            <summary>
            Sorts this instance.
            </summary>
        </member>
        <member name="T:Stride.Core.VisualStudio.PropertyItem">
            <summary>
            A key/value pair used by <see cref="T:Stride.Core.VisualStudio.PropertyItemCollection" />
            </summary>
        </member>
        <member name="M:Stride.Core.VisualStudio.PropertyItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.VisualStudio.PropertyItem"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Stride.Core.VisualStudio.PropertyItem.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Stride.Core.VisualStudio.PropertyItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:Stride.Core.VisualStudio.PropertyItem.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>PropertyItem.</returns>
        </member>
        <member name="T:Stride.Core.VisualStudio.PropertyItemCollection">
            <summary>
            A collection of <see cref="T:Stride.Core.VisualStudio.PropertyItem"/>
            </summary>
        </member>
        <member name="M:Stride.Core.VisualStudio.PropertyItemCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.VisualStudio.PropertyItemCollection"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.VisualStudio.PropertyItemCollection.#ctor(System.Collections.Generic.IEnumerable{Stride.Core.VisualStudio.PropertyItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.VisualStudio.PropertyItemCollection"/> class.
            </summary>
            <param name="items">The items to copy from.</param>
        </member>
        <member name="T:Stride.Core.VisualStudio.Section">
            <summary>
            A section defined in a <see cref="T:Stride.Core.VisualStudio.Project"/>
            </summary>
        </member>
        <member name="M:Stride.Core.VisualStudio.Section.#ctor(Stride.Core.VisualStudio.Section)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.VisualStudio.Section"/> class.
            </summary>
            <param name="original">The original section to copy from.</param>
        </member>
        <member name="M:Stride.Core.VisualStudio.Section.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Stride.Core.VisualStudio.PropertyItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.VisualStudio.Section"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="sectionType">Type of the section.</param>
            <param name="step">The step.</param>
            <param name="properties">The property lines.</param>
        </member>
        <member name="P:Stride.Core.VisualStudio.Section.Name">
            <summary>
            Gets the name of the section.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Stride.Core.VisualStudio.Section.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:Stride.Core.VisualStudio.Section.SectionType">
            <summary>
            Gets or sets the type of the section.
            </summary>
            <value>The type of the section.</value>
        </member>
        <member name="P:Stride.Core.VisualStudio.Section.Step">
            <summary>
            Gets or sets the step.
            </summary>
            <value>The step.</value>
        </member>
        <member name="M:Stride.Core.VisualStudio.Section.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Section.</returns>
        </member>
        <member name="T:Stride.Core.VisualStudio.SectionCollection">
            <summary>
            A collection of <see cref="T:Stride.Core.VisualStudio.Section"/>
            </summary>
        </member>
        <member name="M:Stride.Core.VisualStudio.SectionCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.VisualStudio.SectionCollection"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.VisualStudio.SectionCollection.#ctor(System.Collections.Generic.IEnumerable{Stride.Core.VisualStudio.Section})">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.VisualStudio.SectionCollection"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="T:Stride.Core.VisualStudio.Solution">
            <summary>
            A VisualStudio solution.
            </summary>
        </member>
        <member name="M:Stride.Core.VisualStudio.Solution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.VisualStudio.Solution"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.VisualStudio.Solution.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Stride.Core.VisualStudio.Project},System.Collections.Generic.IEnumerable{Stride.Core.VisualStudio.Section},System.Collections.Generic.IEnumerable{Stride.Core.VisualStudio.PropertyItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.VisualStudio.Solution" /> class.
            </summary>
            <param name="fullpath">The fullpath.</param>
            <param name="headers">The headers.</param>
            <param name="projects">The projects.</param>
            <param name="globalSections">The global sections.</param>
            <param name="properties">The properties.</param>
        </member>
        <member name="P:Stride.Core.VisualStudio.Solution.FullPath">
            <summary>
            Gets or sets the full path. If it's a solution folder, it should just be the name of the folder.
            </summary>
            <value>The full path.</value>
        </member>
        <member name="P:Stride.Core.VisualStudio.Solution.Children">
            <summary>
            Gets all projects that are not folders.
            </summary>
            <value>The children.</value>
        </member>
        <member name="P:Stride.Core.VisualStudio.Solution.GlobalSections">
            <summary>
            Gets the global sections.
            </summary>
            <value>The global sections.</value>
        </member>
        <member name="P:Stride.Core.VisualStudio.Solution.Headers">
            <summary>
            Gets the headers.
            </summary>
            <value>The headers.</value>
        </member>
        <member name="P:Stride.Core.VisualStudio.Solution.Projects">
            <summary>
            Gets all projects.
            </summary>
            <value>The projects.</value>
        </member>
        <member name="P:Stride.Core.VisualStudio.Solution.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="M:Stride.Core.VisualStudio.Solution.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Solution.</returns>
        </member>
        <member name="M:Stride.Core.VisualStudio.Solution.Save">
            <summary>
            Saves this instance to the <see cref="P:Stride.Core.VisualStudio.Solution.FullPath"/> path.
            </summary>
        </member>
        <member name="M:Stride.Core.VisualStudio.Solution.SaveAs(System.String)">
            <summary>
            Saves this instance to the specified path.
            </summary>
            <param name="solutionPath">The solution path.</param>
        </member>
        <member name="M:Stride.Core.VisualStudio.Solution.FromFile(System.String)">
            <summary>
            Loads the solution from the specified file.
            </summary>
            <param name="solutionFullPath">The solution full path.</param>
            <returns>Solution.</returns>
        </member>
        <member name="M:Stride.Core.VisualStudio.Solution.FromStream(System.String,System.IO.Stream)">
            <summary>
            Loads the solution from the specified stream.
            </summary>
            <param name="solutionFullPath">The solution full path.</param>
            <param name="stream">The stream.</param>
            <returns>Solution.</returns>
        </member>
        <member name="P:Stride.Core.VisualStudio.IDEInfo.BuildToolsPath">
            <summary>
            The path to the build tools of this IDE, or <c>null</c>.
            </summary>
        </member>
        <member name="P:Stride.Core.VisualStudio.IDEInfo.DevenvPath">
            <summary>
            The path to the development environment executable of this IDE, or <c>null</c>.
            </summary>
        </member>
        <member name="P:Stride.Core.VisualStudio.IDEInfo.InstallationPath">
            <summary>
            The root installation path of this IDE.
            </summary>
            <remarks>
            Can be empty but not <c>null</c>.
            </remarks>
        </member>
        <member name="P:Stride.Core.VisualStudio.IDEInfo.VsixInstallerPath">
            <summary>
            The path to the VSIX installer of this IDE, or <c>null</c>.
            </summary>
        </member>
        <member name="P:Stride.Core.VisualStudio.IDEInfo.HasBuildTools">
            <summary>
            <c>true</c> if this IDE has integrated build tools; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:Stride.Core.VisualStudio.IDEInfo.HasDevenv">
            <summary>
            <c>true</c> if this IDE has a development environment; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:Stride.Core.VisualStudio.IDEInfo.HasVsixInstaller">
            <summary>
            <c>true</c> if this IDE has a VSIX installer; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="M:Stride.Core.VisualStudio.IDEInfo.ToString">
            <inheritdoc />
        </member>
        <member name="P:Stride.Core.VisualStudio.VisualStudioVersions.AvailableVisualStudioInstances">
            <summary>
            Only lists VS2019+ (previous versions are not supported due to lack of buildTransitive targets).
            </summary>
        </member>
        <member name="P:Stride.Core.VisualStudio.VisualStudioVersions.AllAvailableVisualStudioInstances">
            <summary>
            List all versions of VS2017+ (might be needed by installer process).
            </summary>
        </member>
        <member name="T:Stride.Core.Windows.FileLock">
            <summary>
            A class representing an thread-safe, process-safe file lock.
            </summary>
        </member>
        <member name="M:Stride.Core.Windows.FileLock.#ctor(System.IO.FileStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Windows.FileLock"/> class.
            </summary>
            <param name="lockFile">A file that was locked.</param>
        </member>
        <member name="M:Stride.Core.Windows.FileLock.Dispose">
            <summary>
            Releases the file lock.
            </summary>
        </member>
        <member name="M:Stride.Core.Windows.FileLock.TryLock(System.String)">
            <summary>
            Tries to take ownership of the file lock without waiting.
            </summary>
            Tries to take ownership of the file lock within a given delay.
            <returns>A new instance of <see cref="T:Stride.Core.Windows.FileLock"/> if the ownership could be taken, <c>null</c> otherwise.</returns>
            <remarks>The returned <see cref="T:Stride.Core.Windows.FileLock"/> must be disposed to release the mutex.</remarks>
        </member>
        <member name="M:Stride.Core.Windows.FileLock.Wait(System.String)">
            <summary>
            Waits indefinitely to take ownership of the file lock.
            </summary>
            Tries to take ownership of the file lock within a given delay.
            <returns>A new instance of <see cref="T:Stride.Core.Windows.FileLock"/> if the ownership could be taken, <c>null</c> otherwise.</returns>
            <remarks>The returned <see cref="T:Stride.Core.Windows.FileLock"/> must be disposed to release the file lock.</remarks>
        </member>
        <member name="M:Stride.Core.Windows.FileLock.Wait(System.String,System.Int32)">
            <summary>
            Tries to take ownership of the file lock within a given delay.
            </summary>
            <param name="name">A unique name identifying the file lock.</param>
            <param name="millisecondsTimeout">The maximum delay to wait before returning, in milliseconds.</param>
            <returns>A new instance of <see cref="T:Stride.Core.Windows.FileLock"/> if the ownership could be taken, <c>null</c> otherwise.</returns>
            <remarks>
            The returned <see cref="T:Stride.Core.Windows.FileLock"/> must be disposed to release the file lock.
            Calling this method with 0 for <see paramref="millisecondsTimeout"/> is equivalent to call <see cref="M:Stride.Core.Windows.FileLock.TryLock(System.String)"/>.
            Calling this method with a negative value for <see paramref="millisecondsTimeout"/> is equivalent to call <see cref="M:Stride.Core.Windows.FileLock.Wait(System.String)"/>.
            </remarks>
        </member>
        <member name="T:Stride.Core.Windows.GlobalMutex">
            <summary>
            A class representing an thread-safe, process-safe mutex.
            </summary>
        </member>
        <member name="M:Stride.Core.Windows.GlobalMutex.#ctor(System.Threading.Mutex)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Windows.GlobalMutex"/> class.
            </summary>
            <param name="mutex">A mutex for which the current thread has ownership.</param>
        </member>
        <member name="M:Stride.Core.Windows.GlobalMutex.Dispose">
            <summary>
            Releases the mutex.
            </summary>
        </member>
        <member name="M:Stride.Core.Windows.GlobalMutex.TryLock(System.String)">
            <summary>
            Tries to take ownership of the mutex without waiting.
            </summary>
            Tries to take ownership of the mutex within a given delay.
            <returns>A new instance of <see cref="T:Stride.Core.Windows.GlobalMutex"/> if the ownership could be taken, <c>null</c> otherwise.</returns>
            <remarks>The returned <see cref="T:Stride.Core.Windows.GlobalMutex"/> must be disposed to release the mutex.</remarks>
        </member>
        <member name="M:Stride.Core.Windows.GlobalMutex.Wait(System.String)">
            <summary>
            Waits indefinitely to take ownership of the mutex.
            </summary>
            Tries to take ownership of the mutex within a given delay.
            <returns>A new instance of <see cref="T:Stride.Core.Windows.GlobalMutex"/> if the ownership could be taken, <c>null</c> otherwise.</returns>
            <remarks>The returned <see cref="T:Stride.Core.Windows.GlobalMutex"/> must be disposed to release the mutex.</remarks>
        </member>
        <member name="M:Stride.Core.Windows.GlobalMutex.Wait(System.String,System.Int32)">
            <summary>
            Tries to take ownership of the mutex within a given delay.
            </summary>
            <param name="name">A unique name identifying the global mutex.</param>
            <param name="millisecondsTimeout">The maximum delay to wait before returning, in milliseconds.</param>
            <returns>A new instance of <see cref="T:Stride.Core.Windows.GlobalMutex"/> if the ownership could be taken, <c>null</c> otherwise.</returns>
            <remarks>
            The returned <see cref="T:Stride.Core.Windows.GlobalMutex"/> must be disposed to release the mutex.
            Calling this method with 0 for <see paramref="millisecondsTimeout"/> is equivalent to call <see cref="M:Stride.Core.Windows.GlobalMutex.TryLock(System.String)"/>.
            Calling this method with a negative value for <see paramref="millisecondsTimeout"/> is equivalent to call <see cref="M:Stride.Core.Windows.GlobalMutex.Wait(System.String)"/>.
            </remarks>
        </member>
        <member name="T:Stride.Core.Yaml.AssetIdSerializer">
            <summary>
            A Yaml serializer for <see cref="T:System.Guid"/>
            </summary>
        </member>
        <member name="T:Stride.Core.Yaml.GuidSerializer">
            <summary>
            A Yaml serializer for <see cref="T:System.Guid"/>
            </summary>
        </member>
        <member name="T:Stride.Core.Yaml.ObjectIdSerializer">
            <summary>
            A Yaml serializer for <see cref="T:Stride.Core.Storage.ObjectId"/>
            </summary>
        </member>
        <member name="T:Stride.Core.Yaml.UDirectorySerializer">
            <summary>
            A Yaml serializer for <see cref="T:Stride.Core.IO.UDirectory"/>
            </summary>
        </member>
        <member name="T:Stride.Core.Yaml.UFileSerializer">
            <summary>
            A Yaml serializer for <see cref="T:Stride.Core.IO.UFile"/>.
            </summary>
        </member>
        <member name="T:Stride.Core.Yaml.YamlSerializer">
            <summary>
            Default Yaml serializer used to serialize assets by default.
            </summary>
        </member>
        <member name="M:Stride.Core.Yaml.YamlSerializer.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes an object from the specified stream (expecting a YAML string).
            </summary>
            <param name="stream">A YAML string from a stream.</param>
            <returns>An instance of the YAML data.</returns>
        </member>
        <member name="M:Stride.Core.Yaml.YamlSerializer.ResetCache">
            <summary>
            Reset the assembly cache used by this class.
            </summary>
        </member>
        <member name="T:Stride.Core.Yaml.YamlSerializerBase">
            <summary>
            Base class for Yaml serializer
            </summary>
        </member>
        <member name="M:Stride.Core.Yaml.YamlSerializerBase.ResetCache">
            <summary>
            Reset the assembly cache used by this class.
            </summary>
        </member>
        <member name="T:Stride.StrideVersion">
            <summary>
            Internal version used to identify Stride version.
            </summary>
            <remarks>
            During package build, PackageUpdateVersionTask is updating that file and expect some specific text regex so be careful if you change any of this.
            </remarks>
        </member>
        <member name="F:Stride.StrideVersion.PublicVersion">
            <summary>
            The version used by editor for display purpose. 4th digit needs to be at least 1 if used (due to NuGet special cases).
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.AssemblyVersion">
            <summary>
            The current assembly version as text, currently same as <see cref="F:Stride.StrideVersion.PublicVersion"/>.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersionSimple">
            <summary>
            The NuGet package version without special tags.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersion">
            <summary>
            The NuGet package version.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersionSuffix">
            <summary>
            The NuGet package suffix (i.e. -beta01). Automatically set by Stride.GitVersioning.GenerateVersionFile.
            Three possible values:
            - Empty: official release
            - -betaXX: development version (XX should corespond to development asset versioning)
            - -betaXX-YYYY: beta release (YYYY is the git height since current version has been bumped)
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.BuildMetadata">
            <summary>
            The build metadata, usually +g[git_hash] during package. Automatically set by Stride.GitVersioning.GenerateVersionFile.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.AssemblyInformationalVersion">
            <summary>
            The informational assembly version, containing -beta01 or +g[git_hash] during package.
            </summary>
        </member>
        <member name="T:Stride.PublicKeys">
            <summary>
            Assembly signing information.
            </summary>
        </member>
        <member name="F:Stride.PublicKeys.Default">
            <summary>
            Assembly name suffix that contains signing information.
            </summary>
        </member>
    </members>
</doc>
