<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stride.VirtualReality</name>
    </assembly>
    <members>
        <member name="T:Stride.VirtualReality.DeviceClass">
            <summary>
            Describes what kind of object is being tracked at a given ID
            </summary>
        </member>
        <member name="F:Stride.VirtualReality.DeviceClass.Invalid">
            <summary>
            There is no device at this index
            </summary>
        </member>
        <member name="F:Stride.VirtualReality.DeviceClass.HMD">
            <summary>
            The device at this index is an HMD
            </summary>
        </member>
        <member name="F:Stride.VirtualReality.DeviceClass.Controller">
            <summary>
            The device is a controller
            </summary>
        </member>
        <member name="F:Stride.VirtualReality.DeviceClass.GenericTracker">
            <summary>
            The device is a tracker
            </summary>
        </member>
        <member name="F:Stride.VirtualReality.DeviceClass.TrackingReference">
            <summary>
            The device is a camera, Lighthouse base station, or other device that supplies tracking ground truth.
            </summary>
        </member>
        <member name="F:Stride.VirtualReality.DeviceClass.DisplayRedirect">
            <summary>
            Accessories that aren't necessarily tracked themselves, but may redirect video output from other tracked devices
            </summary>
        </member>
        <member name="F:Stride.VirtualReality.DummyDevice.UseGyroscope">
            <summary>
            Use the gyroscope of the device to simulate device orientation changes.
            </summary>
        </member>
        <member name="F:Stride.VirtualReality.DummyDevice.BuildMirror">
            <summary>
            If true, build the mirror view.
            </summary>
        </member>
        <member name="F:Stride.VirtualReality.OculusOvr.SessionStatus.IsVisible">
            <summary>
            True if the process has VR focus and thus is visible in the HMD.
            </summary>
        </member>
        <member name="F:Stride.VirtualReality.OculusOvr.SessionStatus.HmdPresent">
            <summary>
            True if an HMD is present.
            </summary>
        </member>
        <member name="F:Stride.VirtualReality.OculusOvr.SessionStatus.HmdMounted">
            <summary>
            True if the HMD is on the user's head.
            </summary>
        </member>
        <member name="F:Stride.VirtualReality.OculusOvr.SessionStatus.DisplayLost">
            <summary>
            True if the session is in a display-lost state. See ovr_SubmitFrame.
            </summary>
        </member>
        <member name="F:Stride.VirtualReality.OculusOvr.SessionStatus.ShouldQuit">
            <summary>
            True if the application should initiate shutdown.    
            </summary>
        </member>
        <member name="F:Stride.VirtualReality.OculusOvr.SessionStatus.ShouldRecenter">
            <summary>
            True if UX has requested re-centering. 
            </summary>
        </member>
        <member name="M:Stride.VirtualReality.TouchController.IsPressedDown(Stride.VirtualReality.TouchControllerButton)">
            <summary>
            Returns true if in this frame the button switched to pressed state
            </summary>
            <param name="button"></param>
            <returns></returns>
        </member>
        <member name="M:Stride.VirtualReality.TouchController.IsPressed(Stride.VirtualReality.TouchControllerButton)">
            <summary>
            Returns true if button switched is in the pressed state
            </summary>
            <param name="button"></param>
            <returns></returns>
        </member>
        <member name="M:Stride.VirtualReality.TouchController.IsPressReleased(Stride.VirtualReality.TouchControllerButton)">
            <summary>
            Returns true if in this frame the button was released
            </summary>
            <param name="button"></param>
            <returns></returns>
        </member>
        <member name="M:Stride.VirtualReality.TouchController.IsTouchedDown(Stride.VirtualReality.TouchControllerButton)">
            <summary>
            Returns true if in this frame the button switched to pressed state
            </summary>
            <param name="button"></param>
            <returns></returns>
        </member>
        <member name="M:Stride.VirtualReality.TouchController.IsTouched(Stride.VirtualReality.TouchControllerButton)">
            <summary>
            Returns true if button switched is in the pressed state
            </summary>
            <param name="button"></param>
            <returns></returns>
        </member>
        <member name="M:Stride.VirtualReality.TouchController.IsTouchReleased(Stride.VirtualReality.TouchControllerButton)">
            <summary>
            Returns true if in this frame the button was released
            </summary>
            <param name="button"></param>
            <returns></returns>
        </member>
        <member name="F:Stride.VirtualReality.TouchControllerButton.Thumbstick">
            <summary>
            Oculus: Thumbstick
            Vive: Thumb trackpad
            Windows Mixed Reality: Thumbstick
            </summary>
        </member>
        <member name="F:Stride.VirtualReality.TouchControllerButton.Touchpad">
            <summary>
            Oculus: Thumbstick
            Vive: Thumb trackpad
            Windows Mixed Reality: Touchpad
            </summary>
        </member>
        <member name="F:Stride.VirtualReality.TouchControllerButton.A">
            <summary>
            Oculus: A
            Windows Mixed Reality: Right half of right touchpad
            </summary>
        </member>
        <member name="F:Stride.VirtualReality.TouchControllerButton.B">
            <summary>
            Oculus: B
            Windows Mixed Reality: Left half of right touchpad
            </summary>
        </member>
        <member name="F:Stride.VirtualReality.TouchControllerButton.X">
            <summary>
            Oculus: X
            Windows Mixed Reality: Left half of left touchpad
            </summary>
        </member>
        <member name="F:Stride.VirtualReality.TouchControllerButton.Y">
            <summary>
            Oculus: Y
            Windows Mixed Reality: Right half of left touchpad
            </summary>
        </member>
        <member name="F:Stride.VirtualReality.TouchControllerButton.Trigger">
            <summary>
            Oculus: Trigger
            Vive : Trigger
            Windows Mixed Reality: Trigger
            </summary>
        </member>
        <member name="F:Stride.VirtualReality.TouchControllerButton.Grip">
            <summary>
            Oculus: Grip
            Vive: Grip
            Windows Mixed Reality: Grip
            </summary>
        </member>
        <member name="F:Stride.VirtualReality.TouchControllerButton.Menu">
            <summary>
            Oculus: Left controller menu button
            Vive: Both controllers menu button
            Windows Mixed Reality: Both controllers menu button
            </summary>
        </member>
        <member name="T:Stride.VirtualReality.TrackingSpace">
            <summary>
            Identifies which style of tracking origin the application wants to use for the poses it is requesting
            </summary>
        </member>
        <member name="F:Stride.VirtualReality.TrackingSpace.Seated">
            <summary>
            Poses are provided relative to the seated zero pose
            </summary>
        </member>
        <member name="F:Stride.VirtualReality.TrackingSpace.Standing">
            <summary>
            Poses are provided relative to the safe bounds configured by the user
            </summary>
        </member>
        <member name="F:Stride.VirtualReality.TrackingSpace.RawAndUncalibrated">
            <summary>
            Poses are provided in the coordinate system defined by the driver.  It has Y up and is unified for devices of the same driver. You usually don't want this one.
            </summary>
        </member>
        <member name="P:Stride.VirtualReality.VRDevice.ViewScaling">
            <summary>
            Allows you to scale the view, effectively it will change the size of the player in respect to the world, turning it into a giant or a tiny ant.
            </summary>
            <remarks>This will reduce the near clip plane of the cameras, it might induce depth issues.</remarks>
        </member>
        <member name="T:Stride.StrideVersion">
            <summary>
            Internal version used to identify Stride version.
            </summary>
            <remarks>
            During package build, PackageUpdateVersionTask is updating that file and expect some specific text regex so be careful if you change any of this.
            </remarks>
        </member>
        <member name="F:Stride.StrideVersion.PublicVersion">
            <summary>
            The version used by editor for display purpose. 4th digit needs to be at least 1 if used (due to NuGet special cases).
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.AssemblyVersion">
            <summary>
            The current assembly version as text, currently same as <see cref="F:Stride.StrideVersion.PublicVersion"/>.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersionSimple">
            <summary>
            The NuGet package version without special tags.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersion">
            <summary>
            The NuGet package version.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersionSuffix">
            <summary>
            The NuGet package suffix (i.e. -beta01). Automatically set by Stride.GitVersioning.GenerateVersionFile.
            Three possible values:
            - Empty: official release
            - -betaXX: development version (XX should corespond to development asset versioning)
            - -betaXX-YYYY: beta release (YYYY is the git height since current version has been bumped)
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.BuildMetadata">
            <summary>
            The build metadata, usually +g[git_hash] during package. Automatically set by Stride.GitVersioning.GenerateVersionFile.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.AssemblyInformationalVersion">
            <summary>
            The informational assembly version, containing -beta01 or +g[git_hash] during package.
            </summary>
        </member>
        <member name="T:Stride.PublicKeys">
            <summary>
            Assembly signing information.
            </summary>
        </member>
        <member name="F:Stride.PublicKeys.Default">
            <summary>
            Assembly name suffix that contains signing information.
            </summary>
        </member>
        <member name="M:Valve.VR.OpenVR.Init(Valve.VR.EVRInitError@,Valve.VR.EVRApplicationType,System.String)">
            Finds the active installation of vrclient.dll and initializes it 
        </member>
        <member name="M:Valve.VR.OpenVR.Shutdown">
            unloads vrclient.dll. Any interface pointers from the interface are
            invalid after this point 
        </member>
    </members>
</doc>
