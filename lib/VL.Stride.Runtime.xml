<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VL.Stride.Runtime</name>
    </assembly>
    <members>
        <member name="M:VL.Stride.Audio.AudioEmitterExtensions.AddSound(Stride.Engine.AudioEmitterComponent,Stride.Audio.Sound)">
            <summary>
            Adds a sound to the audio emitter.
            </summary>
            <remarks>
            It uses the name of the sound as key for the sound controller. So set the Name property of the sound to something meaningful before. 
            </remarks>
            <param name="audioEmitter">The audio emitter.</param>
            <param name="sound">The sound.</param>
            <returns></returns>
        </member>
        <member name="M:VL.Stride.Documentation.GetEventInfosWithAttribute``1(System.Reflection.Assembly)">
            <summary>Enumerates through all the events with a custom attribute.</summary>
            <typeparam name="AttributeType">The type of the custom attribute.</typeparam>
            <param name="assembly">The assembly to iterate through the events of.</param>
            <returns>The IEnumerable of the events with the provided attribute type.</returns>
        </member>
        <member name="M:VL.Stride.Documentation.GetConstructorInfosWithAttribute``1(System.Reflection.Assembly)">
            <summary>Enumerates through all the constructors with a custom attribute.</summary>
            <typeparam name="AttributeType">The type of the custom attribute.</typeparam>
            <param name="assembly">The assembly to iterate through the constructors of.</param>
            <returns>The IEnumerable of the constructors with the provided attribute type.</returns>
        </member>
        <member name="M:VL.Stride.Documentation.GetPropertyInfosWithAttribute``1(System.Reflection.Assembly)">
            <summary>Enumerates through all the properties with a custom attribute.</summary>
            <typeparam name="AttributeType">The type of the custom attribute.</typeparam>
            <param name="assembly">The assembly to iterate through the properties of.</param>
            <returns>The IEnumerable of the properties with the provided attribute type.</returns>
        </member>
        <member name="M:VL.Stride.Documentation.GetFieldInfosWithAttribute``1(System.Reflection.Assembly)">
            <summary>Enumerates through all the fields with a custom attribute.</summary>
            <typeparam name="AttributeType">The type of the custom attribute.</typeparam>
            <param name="assembly">The assembly to iterate through the fields of.</param>
            <returns>The IEnumerable of the fields with the provided attribute type.</returns>
        </member>
        <member name="M:VL.Stride.Documentation.GetMethodInfosWithAttribute``1(System.Reflection.Assembly)">
            <summary>Enumerates through all the methods with a custom attribute.</summary>
            <typeparam name="AttributeType">The type of the custom attribute.</typeparam>
            <param name="assembly">The assembly to iterate through the methods of.</param>
            <returns>The IEnumerable of the methods with the provided attribute type.</returns>
        </member>
        <member name="M:VL.Stride.Documentation.GetTypesWithAttribute``1(System.Reflection.Assembly)">
            <summary>Enumerates through all the types with a custom attribute.</summary>
            <typeparam name="AttributeType">The type of the custom attribute.</typeparam>
            <param name="assembly">The assembly to iterate through the types of.</param>
            <returns>The IEnumerable of the types with the provided attribute type.</returns>
        </member>
        <member name="M:VL.Stride.Documentation.GetDerivedTypes``1(System.Reflection.Assembly)">
            <summary>Gets all the types in an assembly that derive from a base.</summary>
            <typeparam name="Base">The base type to get the deriving types of.</typeparam>
            <param name="assembly">The assmebly to perform the search on.</param>
            <returns>The IEnumerable of the types that derive from the provided base.</returns>
        </member>
        <member name="M:VL.Stride.Documentation.GetDirectoryPath(System.Reflection.Assembly)">
            <summary>Gets the file path of an assembly.</summary>
            <param name="assembly">The assembly to get the file path of.</param>
            <returns>The file path of the assembly.</returns>
        </member>
        <member name="M:VL.Stride.Documentation.ClearXmlDocumentation">
            <summary>Clears the currently loaded XML documentation.</summary>
        </member>
        <member name="M:VL.Stride.Documentation.GetDocumentation(System.Type)">
            <summary>Gets the XML documentation on a type.</summary>
            <param name="type">The type to get the XML documentation of.</param>
            <returns>The XML documentation on the type.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:VL.Stride.Documentation.GetDocumentation(System.Reflection.MethodInfo)">
            <summary>Gets the XML documentation on a method.</summary>
            <param name="methodInfo">The method to get the XML documentation of.</param>
            <returns>The XML documentation on the method.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:VL.Stride.Documentation.GetDocumentation(System.Reflection.ConstructorInfo)">
            <summary>Gets the XML documentation on a constructor.</summary>
            <param name="constructorInfo">The constructor to get the XML documentation of.</param>
            <returns>The XML documentation on the constructor.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:VL.Stride.Documentation.GetDocumentation(System.Reflection.PropertyInfo)">
            <summary>Gets the XML documentation on a property.</summary>
            <param name="propertyInfo">The property to get the XML documentation of.</param>
            <returns>The XML documentation on the property.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:VL.Stride.Documentation.GetDocumentation(System.Reflection.FieldInfo)">
            <summary>Gets the XML documentation on a field.</summary>
            <param name="fieldInfo">The field to get the XML documentation of.</param>
            <returns>The XML documentation on the field.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:VL.Stride.Documentation.GetDocumentation(System.Reflection.EventInfo)">
            <summary>Gets the XML documentation on an event.</summary>
            <param name="eventInfo">The event to get the XML documentation of.</param>
            <returns>The XML documentation on the event.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:VL.Stride.Documentation.GetDocumentation(System.Reflection.MemberInfo)">
            <summary>Gets the XML documentation on a member.</summary>
            <param name="memberInfo">The member to get the XML documentation of.</param>
            <returns>The XML documentation on the member.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:VL.Stride.Documentation.GetDocumentation(System.Reflection.ParameterInfo)">
            <summary>Gets the XML documentation for a parameter.</summary>
            <param name="parameterInfo">The parameter to get the XML documentation for.</param>
            <returns>The XML documenation of the parameter.</returns>
        </member>
        <member name="T:VL.Stride.Engine.EntityLink">
            <summary>
            Establishes a parent-child relationship between a parent and a child <see cref="T:Stride.Engine.Entity"/>.
            </summary>
        </member>
        <member name="T:VL.Stride.Engine.EntitySceneLink">
            <summary>
            Establishes a parent-child relationship between a parent <see cref="T:Stride.Engine.Scene"/> and a child <see cref="T:Stride.Engine.Entity"/>.
            </summary>
        </member>
        <member name="T:VL.Stride.Engine.SceneLink">
            <summary>
            Establishes a parent-child relationship between a parent and a child <see cref="T:Stride.Engine.Scene"/>.
            </summary>
        </member>
        <member name="T:VL.Stride.Engine.ComponentLink">
            <summary>
            Establishes a link between a <see cref="T:Stride.Engine.EntityComponent"/> and its <see cref="T:Stride.Engine.Entity"/>.
            </summary>
        </member>
        <member name="T:VL.Stride.Engine.ChildrenManagerBase`3">
            <summary>
            Manages the children.
            </summary>
        </member>
        <member name="T:VL.Stride.Engine.EntityChildrenManager">
            <summary>
            Manages the children of an <see cref="T:Stride.Engine.Entity"/>.
            </summary>
        </member>
        <member name="T:VL.Stride.Engine.EntityComponentsManager">
            <summary>
            Manages the components of an <see cref="T:Stride.Engine.Entity"/>.
            </summary>
        </member>
        <member name="T:VL.Stride.Engine.SceneEntitiesManager">
            <summary>
            Manages the entities of a <see cref="T:Stride.Engine.Scene"/>.
            </summary>
        </member>
        <member name="T:VL.Stride.Engine.SceneChildrenManager">
            <summary>
            Manages the child scenes of a <see cref="T:Stride.Engine.Scene"/>.
            </summary>
        </member>
        <member name="T:VL.Stride.Engine.SceneInstanceRenderer">
            <summary>
            Renders a scene instance with a graphics compositor.
            </summary>
        </member>
        <member name="F:VL.Stride.Engine.SceneInstanceRenderer.fallbackSceneInstance">
            <summary>
            The fallback scene to use in case no scene is connected. 
            This is needed because we clear the render target through the compositor which in turn expects visibility groups only provided by the scene instance.
            </summary>
        </member>
        <member name="P:VL.Stride.Engine.SceneInstanceRenderer.SceneInstance">
            <summary>
            Gets or sets the scene instance.
            </summary>
        </member>
        <member name="P:VL.Stride.Engine.SceneInstanceRenderer.GraphicsCompositor">
            <summary>
            Gets or sets the graphics compositor.
            </summary>
        </member>
        <member name="T:VL.Stride.Engine.SceneInstanceSystem">
            <summary>
            A game system that updates a scene instance. Drawing is done separately by the <see cref="T:VL.Stride.Engine.SceneInstanceRenderer"/>.
            This allows you to render the same scene multiple times.
            </summary>
        </member>
        <member name="P:VL.Stride.Engine.SceneInstanceSystem.SceneInstance">
            <summary>
            Gets the scene instance.
            </summary>
        </member>
        <member name="T:VL.Stride.Engine.SchedulerSystem">
            <summary>
            Allows to schedule game systems (e.g. a SceneSystem or a LayerSystem) as well as layers.
            </summary>
        </member>
        <member name="M:VL.Stride.Engine.SchedulerSystem.Schedule(Stride.Games.GameSystemBase)">
            <summary>
            Schedule a game system to be processed in this frame.
            </summary>
            <param name="gameSystem">The game system to schedule.</param>
        </member>
        <member name="M:VL.Stride.Engine.SchedulerSystem.Schedule(Stride.Rendering.IGraphicsRendererBase)">
            <summary>
            Schedules a layer for rendering.
            </summary>
            <param name="layer">The layer to schedule.</param>
        </member>
        <member name="M:VL.Stride.Engine.ScreenshotBuilder.SaveScreenshot(Stride.Games.GameBase,System.String,System.Int32,System.Int32,Stride.Graphics.PixelFormat,Stride.Graphics.PixelFormat,Stride.Graphics.ImageFileType)">
            <summary>
            Request a screenshot and save it to disc.
            </summary>
            <param name="game">The game.</param>
            <param name="screenShotUrl">The screenshot URL.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="pixelFormat">The pixel format.</param>
            <param name="depthBufferFormat">The depth buffer format.</param>
            <param name="fileType">Type of the file.</param>
            <returns>
            True on success
            </returns>
        </member>
        <member name="T:VL.Stride.Games.GameWindowRenderer">
            <summary>
            A GameSystem that allows to draw to another window or control. Currently only valid on desktop with Windows.Forms.
            </summary>
        </member>
        <member name="M:VL.Stride.Games.GameWindowRenderer.#ctor(Stride.Core.IServiceRegistry,Stride.Games.GameContext)">
            <summary>
            Initializes a new instance of the <see cref="T:VL.Stride.Games.GameWindowRenderer" /> class.
            </summary>
            <param name="registry">The registry.</param>
            <param name="gameContext">The window context.</param>
        </member>
        <member name="P:VL.Stride.Games.GameWindowRenderer.GameContext">
            <summary>
            Gets the underlying native window.
            </summary>
            <value>The underlying native window.</value>
        </member>
        <member name="P:VL.Stride.Games.GameWindowRenderer.Window">
            <summary>
            Gets the window.
            </summary>
            <value>The window.</value>
        </member>
        <member name="P:VL.Stride.Games.GameWindowRenderer.Presenter">
            <summary>
            Gets or sets the presenter.
            </summary>
            <value>The presenter.</value>
        </member>
        <member name="P:VL.Stride.Games.GameWindowRenderer.WindowManager">
            <summary>
            Gets the window manager.
            </summary>
            <value>
            The window manager.
            </value>
        </member>
        <member name="T:VL.Stride.Games.GameWindowRendererManager">
            <summary>
            Manages the <see cref="P:VL.Stride.Games.GameWindowRendererManager.GraphicsDevice"/> lifecycle.
            </summary>
        </member>
        <member name="F:VL.Stride.Games.GameWindowRendererManager.DefaultBackBufferWidth">
            <summary>
            Default width for the back buffer.
            </summary>
        </member>
        <member name="F:VL.Stride.Games.GameWindowRendererManager.DefaultBackBufferHeight">
            <summary>
            Default height for the back buffer.
            </summary>
        </member>
        <member name="M:VL.Stride.Games.GameWindowRendererManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Games.GraphicsDeviceManager" /> class.
            </summary>
            <param name="game">The game.</param>
            <exception cref="T:System.ArgumentNullException">The game instance cannot be null.</exception>
        </member>
        <member name="P:VL.Stride.Games.GameWindowRendererManager.PreferredGraphicsProfile">
            <summary>
            Gets or sets the list of graphics profile to select from the best feature to the lower feature. See remarks.
            </summary>
            <value>The graphics profile.</value>
            <remarks>
            By default, the PreferredGraphicsProfile is set to { <see cref="F:Stride.Graphics.GraphicsProfile.Level_11_1"/>, 
            <see cref="F:Stride.Graphics.GraphicsProfile.Level_11_0"/>,
            <see cref="F:Stride.Graphics.GraphicsProfile.Level_10_1"/>,
            <see cref="F:Stride.Graphics.GraphicsProfile.Level_10_0"/>,
            <see cref="F:Stride.Graphics.GraphicsProfile.Level_9_3"/>,
            <see cref="F:Stride.Graphics.GraphicsProfile.Level_9_2"/>,
            <see cref="F:Stride.Graphics.GraphicsProfile.Level_9_1"/>}
            </remarks>
        </member>
        <member name="P:VL.Stride.Games.GameWindowRendererManager.ShaderProfile">
            <summary>
            Gets or sets the shader graphics profile that will be used to compile shaders. See remarks.
            </summary>
            <value>The shader graphics profile.</value>
            <remarks>If this property is not set, the profile used to compile the shader will be taken from the <see cref="P:VL.Stride.Games.GameWindowRendererManager.GraphicsDevice"/> 
            based on the list provided by <see cref="P:VL.Stride.Games.GameWindowRendererManager.PreferredGraphicsProfile"/></remarks>
        </member>
        <member name="P:VL.Stride.Games.GameWindowRendererManager.DeviceCreationFlags">
            <summary>
            Gets or sets the device creation flags that will be used to create the <see cref="P:VL.Stride.Games.GameWindowRendererManager.GraphicsDevice"/>
            </summary>
            <value>The device creation flags.</value>
        </member>
        <member name="P:VL.Stride.Games.GameWindowRendererManager.RequiredAdapterUid">
            <summary>
            If populated the engine will try to initialize the device with the same unique id
            </summary>
        </member>
        <member name="P:VL.Stride.Games.GameWindowRendererManager.PreferredColorSpace">
            <summary>
            Gets or sets the default color space.
            </summary>
            <value>The default color space.</value>
        </member>
        <member name="M:VL.Stride.Games.GameWindowRendererManager.SetPreferredGraphicsProfile(Stride.Graphics.GraphicsProfile[])">
            <summary>
            Sets the preferred graphics profile.
            </summary>
            <param name="levels">The levels.</param>
            <seealso cref="P:VL.Stride.Games.GameWindowRendererManager.PreferredGraphicsProfile"/>
        </member>
        <member name="P:VL.Stride.Games.GameWindowRendererManager.IsFullScreen">
            <summary>
            Gets or sets a value indicating whether this instance is full screen.
            </summary>
            <value><c>true</c> if this instance is full screen; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:VL.Stride.Games.GameWindowRendererManager.PreferredMultisampleCount">
            <summary>
            Gets or sets a value indicating whether [prefer multi sampling].
            </summary>
            <value><c>true</c> if [prefer multi sampling]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:VL.Stride.Games.GameWindowRendererManager.PreferredBackBufferFormat">
            <summary>
            Gets or sets the preferred back buffer format.
            </summary>
            <value>The preferred back buffer format.</value>
        </member>
        <member name="P:VL.Stride.Games.GameWindowRendererManager.PreferredBackBufferHeight">
            <summary>
            Gets or sets the height of the preferred back buffer.
            </summary>
            <value>The height of the preferred back buffer.</value>
        </member>
        <member name="P:VL.Stride.Games.GameWindowRendererManager.PreferredBackBufferWidth">
            <summary>
            Gets or sets the width of the preferred back buffer.
            </summary>
            <value>The width of the preferred back buffer.</value>
        </member>
        <member name="P:VL.Stride.Games.GameWindowRendererManager.PreferredDepthStencilFormat">
            <summary>
            Gets or sets the preferred depth stencil format.
            </summary>
            <value>The preferred depth stencil format.</value>
        </member>
        <member name="P:VL.Stride.Games.GameWindowRendererManager.PreferredRefreshRate">
            <summary>
            Gets or sets the preferred refresh rate.
            </summary>
            <value>The preferred refresh rate.</value>
        </member>
        <member name="P:VL.Stride.Games.GameWindowRendererManager.PreferredFullScreenOutputIndex">
            <summary>
            The output (monitor) index to use when switching to fullscreen mode. Doesn't have any effect when windowed mode is used.
            </summary>
        </member>
        <member name="P:VL.Stride.Games.GameWindowRendererManager.SupportedOrientations">
            <summary>
            Gets or sets the supported orientations.
            </summary>
            <value>The supported orientations.</value>
        </member>
        <member name="P:VL.Stride.Games.GameWindowRendererManager.SynchronizeWithVerticalRetrace">
            <summary>
            Gets or sets a value indicating whether [synchronize with vertical retrace].
            </summary>
            <value><c>true</c> if [synchronize with vertical retrace]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:VL.Stride.Games.GameWindowRendererManager.ApplyRequestedChanges">
            <summary>
            Applies the changes from this instance and change or create the <see cref="P:VL.Stride.Games.GameWindowRendererManager.GraphicsDevice"/> according to the new values.
            </summary>
        </member>
        <member name="M:VL.Stride.Games.GameWindowRendererManager.CanResetDevice(Stride.Games.GraphicsDeviceInformation)">
            <summary>
            Determines whether this instance is compatible with the the specified new <see cref="T:Stride.Games.GraphicsDeviceInformation"/>.
            </summary>
            <param name="newDeviceInfo">The new device info.</param>
            <returns><c>true</c> if this instance this instance is compatible with the the specified new <see cref="T:Stride.Games.GraphicsDeviceInformation"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:VL.Stride.Games.GameWindowRendererManager.FindBestDevice(System.Boolean)">
            <summary>
            Finds the best device that is compatible with the preferences defined in this instance.
            </summary>
            <param name="anySuitableDevice">if set to <c>true</c> a device can be selected from any existing adapters, otherwise, it will select only from default adapter.</param>
            <returns>The graphics device information.</returns>
        </member>
        <member name="M:VL.Stride.Games.GameWindowRendererManager.RankDevices(System.Collections.Generic.List{Stride.Games.GraphicsDeviceInformation})">
            <summary>
            Ranks a list of <see cref="T:Stride.Games.GraphicsDeviceInformation"/> before creating a new device.
            </summary>
            <param name="foundDevices">The list of devices that can be reorder.</param>
        </member>
        <member name="M:VL.Stride.Games.VLGame.RawTickProducer">
            <summary>
            As per https://github.com/stride3d/stride/pull/497 this is the entry point to modify the update logic.
            This is the same code as in the base class except that the elapsed time is given by our clock.
            </summary>
        </member>
        <member name="T:VL.Stride.Graphics.BlendStateDescriptions">
            <summary>
            Some predefined blend state descriptions.
            </summary>
        </member>
        <member name="F:VL.Stride.Graphics.BlendStateDescriptions.None">
            <summary>
            No blending.
            </summary>
        </member>
        <member name="F:VL.Stride.Graphics.BlendStateDescriptions.Additive">
            <summary>
            The sourc and destination get added.
            </summary>
            <remarks>
            Color = Src.RGB + Dst.RGB
            Alpha = Src.A + Dst.A
            </remarks>
        </member>
        <member name="F:VL.Stride.Graphics.BlendStateDescriptions.AlphaBlend">
            <summary>
            The source and destination get blended using the alpha value of the source assuming straight alpha.
            </summary>
            <remarks>
            Color = Src.RGB * Src.A + Dst.RGB * (1 - Src.A)
            Alpha = Src.A + Dst.A * (1 - Src.A)
            </remarks>
        </member>
        <member name="F:VL.Stride.Graphics.BlendStateDescriptions.AlphaBlendPremultiplied">
            <summary>
            The source and destination get blended using the alpha value of the source assuming premultiplied alpha.
            </summary>
            <remarks>
            Color = Src.RGB + Dst.RGB * (1 - Src.A)
            Alpha = Src.A + Dst.A * (1 - Src.A)
            </remarks>
        </member>
        <member name="M:VL.Stride.Graphics.BufferExtensions.SetData``1(Stride.Graphics.Buffer,Stride.Graphics.CommandList,VL.Core.IHasMemory{``0},System.Int32)">
            <summary>
            Copies the <paramref name="fromData"/> to the given <paramref name="buffer"/> on GPU memory.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="buffer">The <see cref="T:Stride.Graphics.Buffer"/>.</param>
            <param name="commandList">The <see cref="T:Stride.Graphics.CommandList"/>.</param>
            <param name="fromData">The data to copy from.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <remarks>
            See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
            <returns>The GPU buffer.</returns>
        </member>
        <member name="M:VL.Stride.Graphics.BufferExtensions.SetData``1(Stride.Graphics.Buffer,Stride.Graphics.CommandList,System.ReadOnlyMemory{``0},System.Int32)">
            <summary>
            Copies the <paramref name="memory"/> to the given <paramref name="buffer"/> on GPU memory.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="buffer">The <see cref="T:Stride.Graphics.Buffer"/>.</param>
            <param name="commandList">The <see cref="T:Stride.Graphics.CommandList"/>.</param>
            <param name="memory">The memory to copy from.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <remarks>
            See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
            <returns>The GPU buffer.</returns>
        </member>
        <member name="M:VL.Stride.Graphics.BufferExtensions.New``1(Stride.Graphics.GraphicsDevice,VL.Core.IHasMemory{``0},Stride.Graphics.BufferFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:Stride.Graphics.Buffer"/> initialized with a copy of the given data.
            </summary>
            <typeparam name="TData">The element type.</typeparam>
            <param name="device">The graphics device.</param>
            <param name="fromData">The data to use to initialize the buffer.</param>
            <param name="bufferFlags">The buffer flags.</param>
            <param name="usage">The buffer usage.</param>
            <exception cref="T:System.ArgumentException">If retrieval of read-only memory failed.</exception>
            <returns>The newly created buffer.</returns>
        </member>
        <member name="M:VL.Stride.Graphics.BufferExtensions.New``1(Stride.Graphics.GraphicsDevice,System.ReadOnlyMemory{``0},Stride.Graphics.BufferFlags,Stride.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:Stride.Graphics.Buffer"/> initialized with a copy of the given data.
            </summary>
            <typeparam name="TData">The element type.</typeparam>
            <param name="device">The graphics device.</param>
            <param name="memory">The data to use to initialize the buffer.</param>
            <param name="bufferFlags">The buffer flags.</param>
            <param name="usage">The buffer usage.</param>
            <exception cref="T:System.ArgumentException">If retrieval of read-only memory failed.</exception>
            <returns>The newly created buffer.</returns>
        </member>
        <member name="T:VL.Stride.Graphics.DepthStencilStateDescriptions">
            <summary>
            Some predefined depth stencil state descriptions.
            </summary>
        </member>
        <member name="F:VL.Stride.Graphics.DepthStencilStateDescriptions.Default">
            <summary>
            Use a depth stencil buffer.
            </summary>
        </member>
        <member name="F:VL.Stride.Graphics.DepthStencilStateDescriptions.DefaultInverse">
            <summary>
            Default settings using greater comparison for Z.
            </summary>
        </member>
        <member name="F:VL.Stride.Graphics.DepthStencilStateDescriptions.DepthRead">
            <summary>
            Enables a read-only depth stencil buffer.
            </summary>
        </member>
        <member name="F:VL.Stride.Graphics.DepthStencilStateDescriptions.None">
            <summary>
            Don't use a depth stencil buffer.
            </summary>
        </member>
        <member name="T:VL.Stride.Graphics.RasterizerStateDescriptions">
            <summary>
            Some predefined rasterizer state descriptions.
            </summary>
        </member>
        <member name="F:VL.Stride.Graphics.RasterizerStateDescriptions.Default">
            <summary>
            The default description.
            </summary>
        </member>
        <member name="F:VL.Stride.Graphics.RasterizerStateDescriptions.CullFront">
            <summary>
            Culling of primitives with clockwise winding order.
            </summary>
        </member>
        <member name="F:VL.Stride.Graphics.RasterizerStateDescriptions.CullBack">
            <summary>
            Culling of primitives with counter-clockwise winding order.
            </summary>
        </member>
        <member name="F:VL.Stride.Graphics.RasterizerStateDescriptions.CullNone">
            <summary>
            No culling.
            </summary>
        </member>
        <member name="F:VL.Stride.Graphics.RasterizerStateDescriptions.WireframeCullFront">
            <summary>
            Wireframe rendering with culling of primitives in clockwise winding order.
            </summary>
        </member>
        <member name="F:VL.Stride.Graphics.RasterizerStateDescriptions.WireframeCullBack">
            <summary>
            Wireframe rendering with culling of primitives in counter-clockwise winding order.
            </summary>
        </member>
        <member name="F:VL.Stride.Graphics.RasterizerStateDescriptions.Wireframe">
            <summary>
            Wireframe rendering with no culling.
            </summary>
        </member>
        <member name="M:VL.Stride.Graphics.TextureExtensions.SetData``1(Stride.Graphics.Texture,Stride.Graphics.CommandList,VL.Lib.Collections.Spread{``0},System.Int32,System.Int32,System.Nullable{Stride.Graphics.ResourceRegion})">
            <summary>
            Copies the <paramref name="fromData"/> to the given <paramref name="buffer"/> on GPU memory.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="buffer">The <see cref="T:Stride.Graphics.Buffer"/>.</param>
            <param name="commandList">The <see cref="T:Stride.Graphics.CommandList"/>.</param>
            <param name="fromData">The data to copy from.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <remarks>
            See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
            <returns>The GPU buffer.</returns>
        </member>
        <member name="M:VL.Stride.Graphics.TextureExtensions.Load(Stride.Graphics.GraphicsDevice,System.String,Stride.Graphics.TextureFlags,Stride.Graphics.GraphicsResourceUsage,System.Boolean)">
            <summary>
            Similiar to <see cref="M:Stride.Graphics.Texture.Load(Stride.Graphics.GraphicsDevice,System.IO.Stream,Stride.Graphics.TextureFlags,Stride.Graphics.GraphicsResourceUsage,System.Boolean)"/> but allocates memory on unmanaged heap only.
            </summary>
        </member>
        <member name="F:VL.Stride.Input.InputExtensions.WindowInputSource">
            <summary>
            A property key to get the window input source from the <see cref="F:Stride.Core.ComponentBase.Tags"/>.
            </summary>
        </member>
        <member name="T:VL.Stride.Input.InputNodes">
            <summary>
            A few static methods with null checks for easy usability.
            </summary>
        </member>
        <member name="M:VL.Stride.Input.InputNodes.IsKeyPressed(Stride.Input.IKeyboardDevice,Stride.Input.Keys)">
            <summary>
            Determines whether the specified key is pressed since the previous update.
            </summary>
            <param name="input">The keyboard</param>
            <param name="key">The key</param>
            <returns><c>true</c> if the specified key is pressed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:VL.Stride.Input.InputNodes.IsKeyReleased(Stride.Input.IKeyboardDevice,Stride.Input.Keys)">
            <summary>
            Determines whether the specified key is released since the previous update.
            </summary>
            <param name="input">The keyboard</param>
            <param name="key">The key</param>
            <returns><c>true</c> if the specified key is released; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:VL.Stride.Input.InputNodes.IsKeyDown(Stride.Input.IKeyboardDevice,Stride.Input.Keys)">
            <summary>
            Determines whether the specified key is being pressed down
            </summary>
            <param name="input">The keyboard</param>
            <param name="key">The key</param>
            <returns><c>true</c> if the specified key is being pressed down; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:VL.Stride.Input.InputNodes.IsButtonPressed(Stride.Input.IMouseDevice,Stride.Input.MouseButton)">
            <summary>
            Determines whether the specified mouse button is pressed since the previous update.
            </summary>
            <param name="input">The mouse</param>
            <param name="mouseButton">The mouse button</param>
            <returns><c>true</c> if the specified mouse button is pressed since the previous update; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:VL.Stride.Input.InputNodes.IsButtonReleased(Stride.Input.IMouseDevice,Stride.Input.MouseButton)">
            <summary>
            Determines whether the specified mouse button is released.
            </summary>
            <param name="input">The mouse</param>
            <param name="mouseButton">The mouse button</param>
            <returns><c>true</c> if the specified mouse button is released; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:VL.Stride.Input.InputNodes.IsButtonDown(Stride.Input.IMouseDevice,Stride.Input.MouseButton)">
            <summary>
            Determines whether the specified button is being pressed down
            </summary>
            <param name="input">The mouse</param>
            <param name="mouseButton">The mouse button</param>
            <returns><c>true</c> if the specified button is being pressed down; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:VL.Stride.Input.InputSourceProcessor.OnEntityComponentRemoved(Stride.Engine.Entity,VL.Stride.Input.InputSourceComponent,VL.Stride.Input.InputSourceProcessor.AssociatedData)">
            <summary>Run when a matching entity is removed from this entity processor.</summary>
            <param name="entity">The entity.</param>
            <param name="component"></param>
            <param name="data">  The associated data.</param>
        </member>
        <member name="M:VL.Stride.Interop.SizeOf``1(``0)">
            <summary>
            Returns the size of the object in bytes.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="object">The object.</param>
            <returns>The size of the object in bytes.</returns>
        </member>
        <member name="F:VL.Stride.Rendering.Compositing.PredefinedSortMode.BackToFront">
            <summary>
             Sort elements according to the pattern: [RenderFeature Sort Key 8 bits] [Distance back to front 32 bits] [RenderObject states 24 bits]
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.Compositing.PredefinedSortMode.FrontToBack">
            <summary>
             Sort elements according to the pattern: [RenderFeature Sort Key 8 bits] [Distance front to back 16 bits] [RenderObject states 32 bits]
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.Compositing.PredefinedSortMode.StateChange">
            <summary>
            Sort elements according to the pattern: [RenderFeature Sort Key 8 bits] RenderObject states 32 bits] [Distance front to back 16 bits]
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.Compositing.PredefinedSortMode.FarToNear">
            <summary>
             Sort elements according to the pattern: [RenderFeature Sort Key 8 bits] [Distance far to near 16 bits] [RenderObject states 32 bits]
            </summary>
        </member>
        <member name="T:VL.Stride.Rendering.CustomRenderer`1">
            <summary>
            A renderer which can provide <see cref="M:VL.Stride.Rendering.RendererBase.Draw(Stride.Rendering.RenderDrawContext)"/> implementation with a stateful region.
            </summary>
        </member>
        <member name="T:VL.Stride.Rendering.ComputeEffect.ComputeEffectShader2">
            <summary>
            A compute effect allowing to customize the dispatch method through <see cref="T:VL.Stride.Rendering.ComputeEffect.IComputeEffectDispatcher"/>.
            </summary>
        </member>
        <member name="P:VL.Stride.Rendering.ComputeEffect.ComputeEffectShader2.EffectInstance">
            <summary>
            The current effect instance.
            </summary>
        </member>
        <member name="P:VL.Stride.Rendering.ComputeEffect.ComputeEffectShader2.ThreadGroupSize">
            <summary>
            Gets or sets the number of threads per thread group.
            This will be set as the [numthreads(X, Y, Z)] attribute in the shader.
            </summary>
        </member>
        <member name="P:VL.Stride.Rendering.ComputeEffect.ComputeEffectShader2.Dispatcher">
            <summary>
            Gets or sets the dispatcher.
            </summary>
        </member>
        <member name="M:VL.Stride.Rendering.ComputeEffect.ComputeEffectShader2.SetDefaultParameters">
            <summary>
            Sets the default parameters (called at constructor time and if <see cref="M:Stride.Rendering.DrawEffect.Reset"/> is called)
            </summary>
        </member>
        <member name="M:VL.Stride.Rendering.ComputeEffect.ComputeEffectShader2.UpdateParameters(Stride.Rendering.RenderDrawContext)">
            <summary>
            Updates the effect <see cref="P:Stride.Rendering.DrawEffect.Parameters"/> from properties defined in this instance.
            </summary>
        </member>
        <member name="T:VL.Stride.Rendering.ComputeEffect.CustomComputeEffectDispatcher">
            <summary>
            A commpute effect dispatcher using a delegate to compute the thread group count.
            </summary>
        </member>
        <member name="P:VL.Stride.Rendering.ComputeEffect.CustomComputeEffectDispatcher.ThreadGroupCountsSelector">
            <summary>
            The selector function to compute the thread group count based on the thread group size defined by the shader.
            </summary>
        </member>
        <member name="T:VL.Stride.Rendering.ComputeEffect.DirectComputeEffectDispatcher">
            <summary>
            A compute effect dispatcher doing a direct dispatch with the given thread group count.
            </summary>
        </member>
        <member name="P:VL.Stride.Rendering.ComputeEffect.DirectComputeEffectDispatcher.ThreadGroupCount">
            <summary>
            Gets or sets the number of thread groups to dispatch.
            </summary>
        </member>
        <member name="T:VL.Stride.Rendering.ComputeEffect.IComputeEffectDispatcher">
            <summary>
            A compute effect dispatcher is used by the compute effects to implement the shader dispatch (direct or indirect).
            </summary>
        </member>
        <member name="M:VL.Stride.Rendering.ComputeEffect.IComputeEffectDispatcher.UpdateParameters(Stride.Rendering.ParameterCollection,Stride.Core.Mathematics.Int3)">
            <summary>
            Updates the parameter collection of the shader.
            </summary>
            <param name="parameters">The parameter collection of the shader.</param>
            <param name="threadGroupSize">The thread group size as defined by the shader in the [numthreads(X, Y, Z)] attribute.</param>
        </member>
        <member name="M:VL.Stride.Rendering.ComputeEffect.IComputeEffectDispatcher.Dispatch(Stride.Rendering.RenderDrawContext)">
            <summary>
            Dispatches the shader.
            </summary>
            <param name="context">The render draw context.</param>
        </member>
        <member name="T:VL.Stride.Rendering.ComputeEffect.IndirectComputeEffectDispatcher">
            <summary>
            A compute effect dispatcher doing an indirect dispatch using the given argument buffer containing the thread group count at the given byte offset.
            </summary>
        </member>
        <member name="P:VL.Stride.Rendering.ComputeEffect.IndirectComputeEffectDispatcher.ArgumentBuffer">
            <summary>
            The argument buffer containing the thread group count the shader should be dispatched to.
            </summary>
        </member>
        <member name="P:VL.Stride.Rendering.ComputeEffect.IndirectComputeEffectDispatcher.OffsetInBytes">
            <summary>
            The offset in bytes into the argument buffer.
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.PerViewParameters.View">
            <summary>
            View matrix. Default to Matrix.Identity.
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.PerViewParameters.ViewInverse">
            <summary>
            Inverse View matrix. Default to Matrix.Inverse(View)
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.PerViewParameters.Projection">
            <summary>
            Projection matrix. Default to Matrix.Identity.
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.PerViewParameters.ProjectionInverse">
            <summary>
            Projection matrix. Default to Matrix.Inverse(Projection).
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.PerViewParameters.ViewProjection">
            <summary>
            ViewProjection matrix. Default to = View * Projection.
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.PerViewParameters.ProjScreenRay">
            <summary>
            Screen projected ray vector.  Default to = new Vector2(-1.0f / Projection.M11, 1.0f / Projection.M22);
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.PerViewParameters.Eye">
            <summary>
            Eye vector. Default to = View^-1[M41,M42,M43,1.0]
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.PerDrawParameters.World">
            <summary>
            World matrix. Default to Matrix.Identity.
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.PerDrawParameters.WorldInverse">
            <summary>
            Inverse World matrix. Default to Matrix.Inverse(World).
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.PerDrawParameters.WorldInverseTranspose">
            <summary>
            Inverse Transpose World matrix. Default to Matrix.Transpose(Matrix.Inverse(World)).
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.PerDrawParameters.WorldView">
            <summary>
            WorldView matrix. Default to = World * View.
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.PerDrawParameters.WorldViewInverse">
            <summary>
            Inverse WorldView matrix. Default to Matrix.Inverse(WorldView)
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.PerDrawParameters.WorldViewProjection">
            <summary>
            WorldViewProjection matrix. Default to = World * ViewProjection.
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.PerDrawParameters.WorldScale">
            <summary>
            The scale of the World. Default to Vector2.One.
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.PerDrawParameters.EyeMS">
            <summary>
            Eye vector in model space. Default to = (World*View)^-1[M41,M42,M43,1.0]
            </summary>
        </member>
        <member name="T:VL.Stride.Rendering.EntityRendererComponent">
            <summary>
            Renderer components get picked up by the <see cref="T:VL.Stride.Rendering.EntityRendererProcessor"/> for low level rendering.
            </summary>
        </member>
        <member name="P:VL.Stride.Rendering.EntityRendererComponent.SingleCallPerFrame">
            <summary>
            Gets or sets a value indicating whether this renderer should only render once per frame.
            i.e. not for each eye in a VR rendering setup.
            </summary>
        </member>
        <member name="P:VL.Stride.Rendering.EntityRendererComponent.RenderStage">
            <summary>
            Gets or sets a value indicating on which render stage this renderer should be rendered.
            </summary>
        </member>
        <member name="P:VL.Stride.Rendering.EntityRendererComponent.RenderGroup">
            <summary>
            The render group for this component.
            </summary>
        </member>
        <member name="P:VL.Stride.Rendering.EntityRendererComponent.Renderer">
            <summary>
            The renderer which does the rendering.
            </summary>
        </member>
        <member name="T:VL.Stride.Rendering.EntityRendererProcessor">
            <summary>
            The entity renderer processor installs for each <see cref="T:VL.Stride.Rendering.EntityRendererComponent"/> a <see cref="T:VL.Stride.Rendering.RenderRenderer"/> object in its visibility group.
            </summary>
        </member>
        <member name="T:VL.Stride.Rendering.GraphicsRendererGroup">
            <summary>
            Groups a sequence of <see cref="T:Stride.Rendering.IGraphicsRendererBase"/> into one.
            </summary>
        </member>
        <member name="T:VL.Stride.Rendering.Lights.SkyboxPreFilteringDiffuseOrder">
            <summary>
            Order of a Spherical Harmonic used for the skybox
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.Lights.SkyboxPreFilteringDiffuseOrder.Order3">
            <summary>
            An order 3 SH.
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.Lights.SkyboxPreFilteringDiffuseOrder.Order5">
            <summary>
            An orde 5 SH.
            </summary>
        </member>
        <member name="P:VL.Stride.Rendering.Lights.LightNodes.SkyboxRenderer.CubeMap">
            <summary>
            Gets or sets the type of skybox.
            </summary>
            <value>The type of skybox.</value>
            <userdoc>The texture to use as skybox (eg a cubemap or panoramic texture)</userdoc>
        </member>
        <member name="P:VL.Stride.Rendering.Lights.LightNodes.SkyboxRenderer.IsSpecularOnly">
            <summary>
            Gets or set if this skybox affects specular only, if <c>false</c> this skybox will affect ambient lighting
            </summary>
            <userdoc>
            Use the skybox only for specular lighting
            </userdoc>
        </member>
        <member name="P:VL.Stride.Rendering.Lights.LightNodes.SkyboxRenderer.DiffuseSHOrder">
            <summary>
            Gets or sets the diffuse sh order.
            </summary>
            <value>The diffuse sh order.</value>
            <userdoc>The level of detail of the compressed skybox, used for diffuse lighting (dull materials). Order5 is more detailed than Order3.</userdoc>
        </member>
        <member name="P:VL.Stride.Rendering.Lights.LightNodes.SkyboxRenderer.SpecularCubeMapSize">
            <summary>
            Gets or sets the specular cubemap size
            </summary>
            <value>The specular cubemap size.</value>
            <userdoc>The cubemap size used for specular lighting. Larger cubemap have more detail.</userdoc>
        </member>
        <member name="P:VL.Stride.Rendering.Lights.LightNodes.SkyboxRenderer.ForceBuild">
            <summary>
            Forces a re-build of the skybox environment map.
            By default the skybox will only be built when one of its parameters changes.
            </summary>
        </member>
        <member name="T:VL.Stride.Rendering.Materials.MaterialBuilder">
            <summary>
            A material defines the appearance of a 3D model surface and how it reacts to light.
            </summary>
        </member>
        <member name="P:VL.Stride.Rendering.Materials.MaterialBuilder.Geometry">
            <summary>
            The shape of the material.
            </summary>
        </member>
        <member name="P:VL.Stride.Rendering.Materials.MaterialBuilder.Shading">
            <summary>
            The color characteristics of the material and how it reacts to light.
            </summary>
        </member>
        <member name="P:VL.Stride.Rendering.Materials.MaterialBuilder.Misc">
            <summary>
            Occlusion, transparency and clear coat shading.
            </summary>
        </member>
        <member name="P:VL.Stride.Rendering.Materials.MaterialBuilder.Layers">
            <summary>
            The material layers to build more complex materials.
            </summary>
        </member>
        <member name="T:VL.Stride.Rendering.Materials.GeometryAttributes">
            <summary>
            The material geometry attributes define the shape of a material.
            </summary>
        </member>
        <member name="P:VL.Stride.Rendering.Materials.GeometryAttributes.Tessellation">
            <summary>
            Gets or sets the tessellation.
            </summary>
            <value>The tessellation.</value>
            <userdoc>The method used for tessellation (subdividing model poligons to increase realism)</userdoc>
        </member>
        <member name="P:VL.Stride.Rendering.Materials.GeometryAttributes.Displacement">
            <summary>
            Gets or sets the displacement.
            </summary>
            <value>The displacement.</value>
            <userdoc>The method used for displacement (altering vertex positions by adding offsets)</userdoc>
        </member>
        <member name="P:VL.Stride.Rendering.Materials.GeometryAttributes.Surface">
            <summary>
            Gets or sets the surface.
            </summary>
            <value>The surface.</value>
            <userdoc>The method used to alter macrosurface aspects (eg perturbing the normals of the model)</userdoc>
        </member>
        <member name="P:VL.Stride.Rendering.Materials.GeometryAttributes.MicroSurface">
            <summary>
            Gets or sets the micro surface.
            </summary>
            <value>The micro surface.</value>
            <userdoc>The method used to alter the material microsurface</userdoc>
        </member>
        <member name="T:VL.Stride.Rendering.Materials.ShadingAttributes">
            <summary>
            The material shading attributes define the color characteristics of the material and how it reacts to light.
            </summary>
        </member>
        <member name="P:VL.Stride.Rendering.Materials.ShadingAttributes.Diffuse">
            <summary>
            Gets or sets the diffuse.
            </summary>
            <value>The diffuse.</value>
            <userdoc>The method used to determine the diffuse color of the material. 
            The diffuse color is the essential (pure) color of the object without reflections.</userdoc>
        </member>
        <member name="P:VL.Stride.Rendering.Materials.ShadingAttributes.DiffuseModel">
            <summary>
            Gets or sets the diffuse model.
            </summary>
            <value>The diffuse model.</value>
            <userdoc>The shading model used to render the diffuse color.</userdoc>
        </member>
        <member name="P:VL.Stride.Rendering.Materials.ShadingAttributes.Specular">
            <summary>
            Gets or sets the specular.
            </summary>
            <value>The specular.</value>
            <userdoc>The method used to determine the specular color. 
            This is the color produced by the reflection of a white light on the object.</userdoc>
        </member>
        <member name="P:VL.Stride.Rendering.Materials.ShadingAttributes.SpecularModel">
            <summary>
            Gets or sets the specular model.
            </summary>
            <value>The specular model.</value>
            <userdoc>The shading model used to render the material specular color</userdoc>
        </member>
        <member name="P:VL.Stride.Rendering.Materials.ShadingAttributes.Emissive">
            <summary>
            Gets or sets the emissive.
            </summary>
            <value>The emissive.</value>
            <userdoc>The method used to determine the emissive color (the color emitted by the object)
            </userdoc>
        </member>
        <member name="T:VL.Stride.Rendering.Materials.MiscAttributes">
            <summary>
            The material misc attributes allow to set the occulsion, transparency and material layers.
            </summary>
        </member>
        <member name="P:VL.Stride.Rendering.Materials.MiscAttributes.Occlusion">
            <summary>
            Gets or sets the occlusion.
            </summary>
            <value>The occlusion.</value>
            <userdoc>The occlusion method. Occlusions modulate the ambient and direct lighting of the material to simulate shadows or cavity artifacts.
            </userdoc>
        </member>
        <member name="P:VL.Stride.Rendering.Materials.MiscAttributes.Transparency">
            <summary>
            Gets or sets the transparency.
            </summary>
            <value>The transparency.</value>
            <userdoc>The method used to determine the transparency</userdoc>
        </member>
        <member name="P:VL.Stride.Rendering.Materials.MiscAttributes.Overrides">
            <summary>
            Gets or sets the overrides.
            </summary>
            <value>The overrides.</value>
            <userdoc>Override properties of the current material</userdoc>
        </member>
        <member name="P:VL.Stride.Rendering.Materials.MiscAttributes.CullMode">
            <summary>
            Gets or sets the cull mode used for the material.
            </summary>
            <userdoc>Cull some faces of the model depending on orientation</userdoc>
        </member>
        <member name="P:VL.Stride.Rendering.Materials.MiscAttributes.ClearCoat">
            <summary>
            Gets or sets the clear coat shading features for the material.
            </summary>
            <userdoc>Use clear-coat shading to simulate vehicle paint</userdoc>
        </member>
        <member name="T:VL.Stride.Rendering.MaterialExtensions">
            <summary>
            Extension methods for <see cref="T:Stride.Rendering.Material"/>.
            </summary>
        </member>
        <member name="M:VL.Stride.Rendering.MaterialExtensions.Clone(Stride.Rendering.Material)">
            <summary>
            Clone the <see cref="T:Stride.Rendering.Material"/>.
            </summary>
            <param name="material">The material to clone.</param>
            <returns>The cloned material.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="material"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:VL.Stride.Rendering.MaterialExtensions.New(Stride.Graphics.GraphicsDevice,Stride.Rendering.Materials.MaterialDescriptor,Stride.Core.Serialization.Contents.ContentManager)">
            <summary>
            Same as Material.New loading referenced content in parameter collection (like EnvironmentLightingDFG_LUT)
            </summary>
        </member>
        <member name="T:VL.Stride.Rendering.MipMapGenerator">
            <summary>
            Generates a texture with the desired amount of mipmaps for a given input texture.
            </summary>
        </member>
        <member name="P:VL.Stride.Rendering.MipMapGenerator.InputTexture">
            <summary>
            The input texture.
            </summary>
        </member>
        <member name="P:VL.Stride.Rendering.MipMapGenerator.MaxMipMapCount">
            <summary>
            The maximum amount of mipmaps to generate. Use zero to generate all.
            </summary>
        </member>
        <member name="P:VL.Stride.Rendering.MipMapGenerator.OutputTexture">
            <summary>
            The output texture with the generated mipmaps.
            </summary>
        </member>
        <member name="M:VL.Stride.Rendering.MipMapGenerator.ScheduleForRendering">
            <summary>
            Places this renderer in the rendering queue.
            </summary>
        </member>
        <member name="M:VL.Stride.Rendering.ModelHelpers.CalculateVertexNormals(Stride.Core.Mathematics.Vector3[],System.Int32[],Stride.Core.Mathematics.Vector3[],System.Boolean)">
            <summary>
            Calculates the vertex normals per triangle. If vertices are shared between triangles, they get an average normal weighted by face size.
            From: https://gamedev.stackexchange.com/questions/152991/how-can-i-calculate-normals-using-a-vertex-and-index-buffer
            </summary>
            <param name="vertexPositions">The vertex positions.</param>
            <param name="triangleIndices">The triangle indices.</param>
            <param name="vertexNormals">The vertex normals.</param>
        </member>
        <member name="M:VL.Stride.Rendering.RendererBase.DrawInternal(Stride.Rendering.RenderDrawContext)">
            <summary>
            Gets called if the input is assigned or <see cref="P:VL.Stride.Rendering.RendererBase.AlwaysRender"/> is true.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:VL.Stride.Rendering.CommonSpace">
            <summary>
            Objects are placed inside a space. Setting a space results in setting View and Projection matrices.
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.CommonSpace.World">
            <summary>
            The Space objects normally are placed within. 
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.CommonSpace.View">
            <summary>
            Place objects relative to the camera. (downstream View Matrix get ignored)
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.CommonSpace.Projection">
            <summary>
            Place objects relative to the projection. (downstream View and Projection Matrices get ignored)
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.CommonSpace.Normalized">
            <summary>
            Height goes from 1 Top to -1 Bottom. The origin is located in the center. 
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.CommonSpace.DIP">
            <summary>
            Works with device independant pixels. One unit equals 100 actual DIP. The origin is located in the center. Y-Axis points upwards.
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.CommonSpace.DIPTopLeft">
            <summary>
            Works with device independant pixels. One unit equals 100 actual DIP. The origin is located at the top left. Y-Axis points upwards.
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.CommonSpace.PixelTopLeft">
            <summary>
            Works with pixels. One unit equals 100 actual pixels. The origin is located at the top left. Y-Axis points upwards.
            </summary>
        </member>
        <member name="T:VL.Stride.Rendering.EntityRendererRenderFeature">
            <summary>
            The render feature redirects low level rendering calls to the <see cref="T:Stride.Rendering.IGraphicsRendererBase"/> 
            </summary>
        </member>
        <member name="F:VL.Stride.Rendering.EntityRendererRenderFeature.CurrentParentTransformation">
            <summary>
            A property key to get the current parent transformation from the <see cref="!:RenderContext.Tags"/>.
            </summary>
        </member>
        <member name="T:VL.Stride.Rendering.RenderRenderer">
            <summary>
            The render object used by the low level rendering system.
            </summary>
        </member>
        <member name="P:VL.Stride.ProfilerInteraction.RefreshTime">
            <summary>
            The time between two refreshes of the profiling information in milliseconds.
            </summary>
        </member>
        <member name="P:VL.Stride.ProfilerInteraction.SortingMode">
            <summary>
            Gets or set the sorting mode of the profiling entries
            </summary>
        </member>
        <member name="P:VL.Stride.ProfilerInteraction.FilteringMode">
            <summary>
            Gets or sets the type of the profiling to display: CPU or GPU
            </summary>
        </member>
        <member name="P:VL.Stride.ProfilerInteraction.ResultPage">
            <summary>
            Gets or sets the current profiling result page to display.
            </summary>
        </member>
        <member name="P:VL.Stride.Shaders.ComputeEffectDispatcher.EffectInstance">
            <summary>
            The current effect instance.
            </summary>
        </member>
        <member name="P:VL.Stride.Shaders.ComputeEffectDispatcher.ThreadGroupCounts">
            <summary>
            Gets or sets the number of group counts the shader should be dispatched to.
            </summary>
        </member>
        <member name="P:VL.Stride.Shaders.ComputeEffectDispatcher.ThreadNumbers">
            <summary>
            Gets or sets the number of threads desired by thread group.
            </summary>
        </member>
        <member name="P:VL.Stride.Shaders.ComputeEffectDispatcher.ShaderSourceName">
            <summary>
            Gets or sets the name of the input compute shader file (.xksl)
            </summary>
        </member>
        <member name="M:VL.Stride.Shaders.ComputeEffectDispatcher.SetDefaultParameters">
            <summary>
            Sets the default parameters (called at constructor time and if <see cref="M:Stride.Rendering.DrawEffect.Reset"/> is called)
            </summary>
        </member>
        <member name="M:VL.Stride.Shaders.ComputeEffectDispatcher.UpdateParameters">
            <summary>
            Updates the effect <see cref="!:ComputeEffectDispatcher.Parameters" /> from properties defined in this instance. See remarks.
            </summary>
        </member>
        <member name="M:VL.Stride.Shaders.ComputeEffectDispatcher.DrawIteration">
            <summary>
            Dispatches the compute shader and sets the counter value, change per iteration effect parameters right before this call.
            </summary>
        </member>
        <member name="T:VL.Stride.Shaders.RuntimeShaderMixinBuilder">
            <summary>
            Builds a shader mixin at runtime based on the shader AST.
            Can also be used to collect all the compiler parameters of a shader.
            </summary>
        </member>
        <member name="T:VL.Stride.Shaders.RuntimeShaderMixinBuilder.ShaderBlockVisitor">
            <summary>
            Internal visitor to precalculate all available Parameters in the context
            </summary>
        </member>
        <member name="T:VL.Stride.Shaders.ShaderFX.Functions.ReconstructPointCloud">
            <summary>
            Represents the ReconstructPointcloud shader
            </summary>
        </member>
        <member name="T:VL.Stride.Shaders.ShaderFX.Functions.OpSDF">
            <summary>
            Represents any shader that implements SDF3D with input compositions
            </summary>
        </member>
        <member name="T:VL.Stride.Shaders.ShaderFX.Functions.OpSF2D">
            <summary>
            Represents any shader that implements SDF3D with input compositions
            </summary>
        </member>
        <member name="T:VL.Stride.Shaders.ShaderFX.Functions.SDF3D">
            <summary>
            Represents any shader that implements SDF3D with input compositions
            </summary>
        </member>
        <member name="T:VL.Stride.Shaders.ShaderFX.Functions.SF2D">
            <summary>
            Represents any shader that implements SDF3D with input compositions
            </summary>
        </member>
        <member name="T:VL.Stride.Shaders.ShaderFX.Functions.VF3D">
            <summary>
            Represents any shader that implements SDF3D with input compositions
            </summary>
        </member>
        <member name="P:VL.Stride.Shaders.ShaderFX.ComputeOrder.Computes">
            <summary>
            The left (background) child node.
            </summary>
            <userdoc>
            The map used for the left (background) node.
            </userdoc>
        </member>
        <member name="P:VL.Stride.Shaders.ShaderFX.DeclResource`1.Resource">
            <summary>
            Can be updated from mainloop
            </summary>
        </member>
        <member name="P:VL.Stride.Shaders.ShaderFX.InputValue`1.Input">
            <summary>
            Can be updated from mainloop
            </summary>
        </member>
        <member name="P:VL.Stride.Shaders.ShaderFX.RaymarcherMatcap.Input">
            <summary>
            Can be updated from mainloop
            </summary>
        </member>
        <member name="M:VL.Stride.Shaders.ShaderFX.ShaderFXUtils.DeclAndSetVar``1(VL.Stride.Shaders.ShaderFX.IComputeValue{``0})">
            <summary>
            Declare a shader variable with name "Var" and initialize it with a value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="valueGetter"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Stride.Shaders.ShaderFX.ShaderFXUtils.DeclAndSetVar``1(System.String,VL.Stride.Shaders.ShaderFX.IComputeValue{``0})">
            <summary>
            Declare a shader variable with a give name and initialize it with a value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="varName"></param>
            <param name="valueGetter"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Stride.Shaders.ShaderFX.ShaderFXUtils.SetVar``1(VL.Stride.Shaders.ShaderFX.SetVar{``0},VL.Stride.Shaders.ShaderFX.IComputeValue{``0})">
            <summary>
            Assigns a new value to an existing shader variable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="existingVar"></param>
            <param name="valueGetter"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Stride.Shaders.ShaderFX.ShaderFXUtils.GetVarValue``1(VL.Stride.Shaders.ShaderFX.SetVar{``0})">
            <summary>
            Retrieves the current value of an existing shader variable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="existingVar"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Stride.Shaders.ShaderFX.ShaderFXUtils.GetShaderMixinSource(Stride.Shaders.ShaderSource)">
            <summary>
            Build a encapsulating ShaderMixinSource if necessary.
            </summary>
            <param name="shaderSource">The input ShaderSource.</param>
            <returns>A ShaderMixinSource</returns>
        </member>
        <member name="T:VL.Stride.Shaders.ShaderFX.DeclVar`1">
            <summary>
            Contains information about a stream variable and generates a unique but stable ID when the shader gets compiled.
            </summary>
        </member>
        <member name="T:VL.Stride.Shaders.ShaderFX.SetVar`1">
            <summary>
            Defines a variable and assigns a value to it. Can also re-assign an existing Var.
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:VL.Stride.Shaders.ShaderFX.IComputeVoid" />
        </member>
        <member name="T:VL.Stride.Shaders.ShaderFX.VarBase`1">
            <summary>
            Base class for get or assign a value to a stream variable.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:VL.Stride.Utils.ModelUtils.MergeDrawData(System.Collections.Generic.IList{Stride.Rendering.MeshDraw},System.Boolean,Stride.Graphics.CommandList)">
            <summary>
            Transform a vertex buffer positions, normals, tangents and bitangents using the given matrix.
            </summary>
            <param name="meshDrawDatas">The mesh draw datas.</param>
            <param name="can32BitIndex">A flag stating if 32 bit index buffers.</param>
        </member>
        <member name="M:VL.Stride.Utils.ModelUtils.CreateDeclarationMergeGroup(System.Collections.Generic.IList{Stride.Rendering.MeshDraw})">
            <summary>
            Group meshes that can be merged because they have the same vertex declaration.
            </summary>
            <param name="meshDrawDatas">The list of meshes.</param>
            <returns>A list of grouped meshes.</returns>
        </member>
        <member name="M:VL.Stride.Utils.ModelUtils.CreateOptimizedMergeGroups(System.Collections.Generic.IList{Stride.Rendering.MeshDraw},System.Boolean)">
            <summary>
            Create group of MeshDrawData that will be merged.
            </summary>
            <param name="meshDrawDatas">List of MehsDrawData to merge.</param>
            <param name="can32BitIndex">A flag stating if 32 bit index buffers are allowed.</param>
            <returns>A List of groups to merge internally.</returns>
        </member>
        <member name="M:VL.Stride.Utils.ModelUtils.CreateShortIndexBuffer(System.Int32,System.Int32,System.Byte[],System.Boolean)">
            <summary>
            Create an short typed index buffer.
            </summary>
            <param name="offset">The offset to apply to the indices.</param>
            <param name="count">The number of indices.</param>
            <param name="baseIndices">A possible base index buffer</param>
            <param name="is32Bit">Stating if baseIndices is filled with 32 bits int</param>
            <returns>A new index buffer.</returns>
        </member>
        <member name="M:VL.Stride.Utils.ModelUtils.CreateIntIndexBuffer(System.Int32,System.Int32,System.Byte[],System.Boolean)">
            <summary>
            Create an int typed index buffer.
            </summary>
            <param name="offset">The offset to apply to the indices.</param>
            <param name="count">The number of indices.</param>
            <param name="baseIndices">A possible base index buffer</param>
            <param name="is32Bits">Stating if baseIndices is filled with 32 bits int</param>
            <returns>A new index buffer.</returns>
        </member>
        <member name="M:VL.Stride.Utils.ModelUtils.IsIndexed(System.Collections.Generic.IList{Stride.Rendering.MeshDraw})">
            <summary>
            Check if a index buffer will be needed for this merge group.
            </summary>
            <param name="meshDrawDatas">The list of MeshDrawdata to merge.</param>
            <returns>True if an index is needed, false otherwise.</returns>
        </member>
        <member name="M:VL.Stride.Utils.ModelUtils.GroupDrawData(System.Collections.Generic.IList{Stride.Rendering.MeshDraw},System.Boolean,Stride.Graphics.CommandList)">
            <summary>
            Group the meshes.
            </summary>
            <param name="meshDrawDatas">The list of meshes to group.</param>
            <param name="can32BitIndex">A flag stating if 32 bit index buffers are allowed</param>
            <returns>The list of merged meshes.</returns>
        </member>
        <member name="T:VL.Stride.SharedServices">
            <summary>
            Used to share one common service registry between our node factories.
            </summary>
        </member>
        <member name="T:MyGame.BasicCameraController">
            <summary>
            A script that allows to move and rotate an entity through keyboard, mouse and touch input to provide basic camera navigation.
            </summary>
            <remarks>
            The entity can be moved using W, A, S, D, Q and E, arrow keys, a gamepad's left stick or dragging/scaling using multi-touch.
            Rotation is achieved using the Numpad, the mouse while holding the right mouse button, a gamepad's right stick, or dragging using single-touch.
            </remarks>
        </member>
    </members>
</doc>
