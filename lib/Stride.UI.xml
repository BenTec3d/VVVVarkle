<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stride.UI</name>
    </assembly>
    <members>
        <member name="M:Stride.UI.Attributes.DefaultThicknessValueAttribute.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the Thickness structure that has specific lengths applied to each side of the cuboid.
            </summary>
            <param name="bottom">The thickness for the lower side of the cuboid.</param>
            <param name="left">The thickness for the left side of the cuboid.</param>
            <param name="right">The thickness for the right side of the cuboid</param>
            <param name="top">The thickness for the upper side of the cuboid.</param>
            <param name="front">The thickness for the front side of the cuboid.</param>
            <param name="back">The thickness for the Back side of the cuboid.</param>
        </member>
        <member name="P:Stride.UI.Attributes.DefaultThicknessValueAttribute.Back">
            <summary>
            The Back side of the bounding cuboid.
            </summary>
        </member>
        <member name="F:Stride.UI.Attributes.DefaultThicknessValueAttribute.Bottom">
            <summary>
            The bottom side of the bounding rectangle or cuboid.
            </summary>
        </member>
        <member name="P:Stride.UI.Attributes.DefaultThicknessValueAttribute.Front">
            <summary>
            The front side of the bounding cuboid.
            </summary>
        </member>
        <member name="P:Stride.UI.Attributes.DefaultThicknessValueAttribute.Left">
            <summary>
            The left side of the bounding rectangle or cuboid.
            </summary>
        </member>
        <member name="P:Stride.UI.Attributes.DefaultThicknessValueAttribute.Right">
            <summary>
            The right side of the bounding rectangle or cuboid.
            </summary>
        </member>
        <member name="P:Stride.UI.Attributes.DefaultThicknessValueAttribute.Top">
            <summary>
            The upper side of the bounding rectangle or cuboid.
            </summary>
        </member>
        <member name="T:Stride.UI.ClickMode">
            <summary>
            Specifies when the Click event should be raised.
            </summary>
        </member>
        <member name="F:Stride.UI.ClickMode.Press">
            <summary>
            Specifies that the Click event should be raised as soon as a button is pressed.
            </summary>
            <userdoc>Specifies that the Click event should be raised as soon as a button is pressed.</userdoc>
        </member>
        <member name="F:Stride.UI.ClickMode.Release">
            <summary>
            Specifies that the Click event should be raised when a button is pressed and released.
            </summary>
            <userdoc>Specifies that the Click event should be raised when a button is pressed and released.</userdoc>
        </member>
        <member name="T:Stride.UI.Controls.Border">
            <summary>
            A border element adds an uniform color border around its content.
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.Border.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
            <userdoc>The color of the border.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.Border.BorderThickness">
            <summary>
            Gets or sets the thickness of the border.
            </summary>
            <userdoc>The thickness of the border.</userdoc>
        </member>
        <member name="T:Stride.UI.Controls.Button">
            <summary>
            Represents a Windows button control, which reacts to the Click event.
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.Button.IsPressed">
            <inheritdoc/>
        </member>
        <member name="P:Stride.UI.Controls.Button.PressedImage">
            <summary>
            Gets or sets the image displayed when the button is pressed.
            </summary>
            <userdoc>Image displayed when the button is pressed.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.Button.NotPressedImage">
            <summary>
            Gets or sets the image displayed when the button is not pressed.
            </summary>
            <userdoc>Image displayed when the button is not pressed.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.Button.MouseOverImage">
            <summary>
            Gets or sets the image displayed when the mouse hovers over the button.
            </summary>
            <userdoc>Image displayed when the mouse hovers over the button.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.Button.ImageStretchType">
            <summary>
            Gets or sets a value that describes how the button image should be stretched to fill the destination rectangle.
            </summary>
            <remarks>This property has no effect is <see cref="P:Stride.UI.Controls.Button.SizeToContent"/> is <c>true</c>.</remarks>
            <userdoc>Describes how the button image should be stretched to fill the destination rectangle.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.Button.ImageStretchDirection">
            <summary>
            Gets or sets a value that indicates how the button image is scaled.
            </summary>
            <remarks>This property has no effect is <see cref="P:Stride.UI.Controls.Button.SizeToContent"/> is <c>true</c>.</remarks>
            <userdoc>Indicates how the button image is scaled.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.Button.SizeToContent">
            <summary>
            Gets or sets whether the size depends on the Content. The default is <c>true</c>.
            </summary>
            <userdoc>True if this button's size depends of its content, false otherwise.</userdoc>
        </member>
        <member name="M:Stride.UI.Controls.Button.ArrangeOverride(Stride.Core.Mathematics.Vector3)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.UI.Controls.Button.MeasureOverride(Stride.Core.Mathematics.Vector3)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.UI.Controls.Button.OnAspectImageInvalidated">
            <summary>
            Function triggered when one of the <see cref="P:Stride.UI.Controls.Button.PressedImage"/> and <see cref="P:Stride.UI.Controls.Button.NotPressedImage"/> images are invalidated.
            This function can be overridden in inherited classes.
            </summary>
        </member>
        <member name="T:Stride.UI.Controls.ButtonBase">
            <summary>
            Represents the base primitive for all the button-like controls
            </summary>
        </member>
        <member name="M:Stride.UI.Controls.ButtonBase.#ctor">
            <summary>
            Create an instance of button.
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.ButtonBase.ClickMode">
            <summary>
            Gets or sets when the Click event occurs.
            </summary>
            <userdoc>Indicates when the click event occurs.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.ButtonBase.IsPressed">
            <summary>
            Gets a value that indicates whether the button is currently down.
            </summary>
        </member>
        <member name="E:Stride.UI.Controls.ButtonBase.Click">
            <summary>
            Occurs when a <see cref="T:Stride.UI.Controls.Button"/> is clicked.
            </summary>
            <remarks>A click event is bubbling</remarks>
        </member>
        <member name="F:Stride.UI.Controls.ButtonBase.ClickEvent">
            <summary>
            Identifies the <see cref="E:Stride.UI.Controls.ButtonBase.Click"/> routed event.
            </summary>
        </member>
        <member name="M:Stride.UI.Controls.ButtonBase.OnClick(Stride.UI.Events.RoutedEventArgs)">
            <summary>
            The class handler of the event <see cref="E:Stride.UI.Controls.ButtonBase.Click"/>.
            This method can be overridden in inherited classes to perform actions common to all instances of a class.
            </summary>
            <param name="args">The arguments of the event</param>
        </member>
        <member name="T:Stride.UI.Controls.ContentControl">
            <summary>
            Represents a control with a single piece of content of any type.
            </summary>
        </member>
        <member name="F:Stride.UI.Controls.ContentControl.ContentArrangeMatrixPropertyKey">
            <summary>
            The key to the ContentArrangeMatrix dependency property.
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.ContentControl.Content">
            <summary>
            Gets or sets the content of the ContentControl.
            </summary>
            <exception cref="T:System.InvalidOperationException">The value passed has already a parent.</exception>
            <userdoc>The content of the Content Control.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.ContentControl.VisualContent">
            <summary>
            Gets the visual content of the ContentControl.
            </summary>
        </member>
        <member name="M:Stride.UI.Controls.ContentControl.EnumerateChildren">
            <inheritdoc/>
        </member>
        <member name="T:Stride.UI.Controls.ContentDecorator">
            <summary>
            A <see cref="T:Stride.UI.Controls.ContentControl"/> decorating its <see cref="P:Stride.UI.Controls.ContentControl.Content"/> with a background image.
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.ContentDecorator.BackgroundImage">
            <summary>
            Gets or sets the background image.
            </summary>
            <userdoc>The background image.</userdoc>
        </member>
        <member name="T:Stride.UI.Controls.ContentPresenter">
            <summary>
            A class aiming at presenting another <see cref="T:Stride.UI.UIElement"/>.
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.ContentPresenter.Content">
            <summary>
            Gets or sets the content of the presenter.
            </summary>
            <userdoc>The content of the presenter.</userdoc>
        </member>
        <member name="M:Stride.UI.Controls.ContentPresenter.EnumerateChildren">
            <inheritdoc/>
        </member>
        <member name="T:Stride.UI.Controls.Control">
            <summary>
            Represents the base class for user interface (UI) controls. 
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.Control.Padding">
            <summary>
            Gets or sets the padding inside a control.
            </summary>
            <userdoc>The padding inside a control.</userdoc>
        </member>
        <member name="T:Stride.UI.Controls.EditText">
            <summary>
            Represent an edit text where the user can enter text.
            </summary>
        </member>
        <member name="F:Stride.UI.Controls.EditText.InputTypeFlags.None">
            <summary>
            No specific input type for the <see cref="T:Stride.UI.Controls.EditText"/>.
            </summary>
            <userdoc>No specific input type for the Edit Text.</userdoc>
        </member>
        <member name="F:Stride.UI.Controls.EditText.InputTypeFlags.Password">
            <summary>
            A password input type. Password text is hidden while editing.
            </summary>
            <userdoc>A password input type. Password text is hidden while editing.</userdoc>
        </member>
        <member name="M:Stride.UI.Controls.EditText.OnIsReadOnlyChanged">
            <summary>
            Function triggered when the value of <see cref="P:Stride.UI.Controls.EditText.IsReadOnly"/> changed.
            </summary>
        </member>
        <member name="M:Stride.UI.Controls.EditText.OnMaxLengthChanged">
            <summary>
            Function triggered when the value of <see cref="P:Stride.UI.Controls.EditText.MaxLength"/> changed.
            </summary>
        </member>
        <member name="M:Stride.UI.Controls.EditText.OnMaxLinesChanged">
            <summary>
            Function triggered when the value of <see cref="P:Stride.UI.Controls.EditText.MaxLines"/> changed.
            </summary>
        </member>
        <member name="M:Stride.UI.Controls.EditText.OnMinLinesChanged">
            <summary>
            Function triggered when the value of <see cref="P:Stride.UI.Controls.EditText.MinLines"/> changed.
            </summary>
        </member>
        <member name="M:Stride.UI.Controls.EditText.#ctor">
            <summary>
            Create a new instance of <see cref="T:Stride.UI.Controls.EditText"/>.
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.EditText.IsSelectionActive">
            <summary>
            Gets a value that indicates whether the text box has focus and selected text.
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.EditText.SynchronousCharacterGeneration">
            <summary>
            Gets or sets the value indicating if the text block should generate <see cref="T:Stride.Graphics.Font.RuntimeRasterizedSpriteFont"/> characters synchronously or asynchronously.
            </summary>
            <remarks>If synchronous generation is activated, the game will be block until all the characters have finished to be generate.
            If asynchronous generation is activated, some characters can appears with one or two frames of delay.</remarks>
            <userdoc>True if dynamic characters should be generated synchronously, false otherwise.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.EditText.ShouldHideText">
            <summary>
            Gets a value indicating if the text should be hidden when displayed.
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.EditText.Font">
            <summary>
            Gets or sets the font of the text block.
            </summary>
            <userdoc>The font of the text block.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.EditText.TextSize">
            <summary>
            Gets or sets the size of the text in virtual pixels unit.
            </summary>
            <remarks>The value is coerced in the range [0, <see cref="F:System.Single.MaxValue"/>].</remarks>
            <userdoc>The size of the text in virtual pixels unit.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.EditText.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <userdoc>The color of the text.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.EditText.TextAlignment">
            <summary>
            Gets or sets the alignment of the text to display.
            </summary>
            <userdoc>The alignment of the text to display.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.EditText.ActiveImage">
            <summary>
            Gets or sets the image that is displayed in background when the edit is active.
            </summary>
            <userdoc>The image that is displayed in background when the edit is active.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.EditText.InactiveImage">
            <summary>
            Gets or sets the image that is displayed in background when the edit is inactive.
            </summary>
            <userdoc>The image that is displayed in background when the edit is inactive.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.EditText.MouseOverImage">
            <summary>
            Gets or sets the image that the button displays when the mouse is over it.
            </summary>
            <userdoc>The image that the button displays when the mouse is over it.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.EditText.CaretColor">
            <summary>
            Gets or sets the color of the caret.
            </summary>
            <userdoc>The color of the caret.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.EditText.CaretWidth">
            <summary>
            Gets or sets the width of the edit text's cursor (in virtual pixels).
            </summary>
            <remarks>The value is coerced in the range [0, <see cref="F:System.Single.MaxValue"/>].</remarks>
            <userdoc>The width of the edit text's cursor (in virtual pixels).</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.EditText.SelectionColor">
            <summary>
            Gets or sets the color of the selection.
            </summary>
            <userdoc>The color of the selection.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.EditText.IMESelectionColor">
            <summary>
            Gets or sets the color of the IME composition selection.
            </summary>
            <userdoc>The color of the selection.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.EditText.IsReadOnly">
            <summary>
            Gets or sets whether the control is read-only, or not.
            </summary>
            <userdoc>True if the control is read-only, false otherwise.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.EditText.InputType">
            <summary>
            Gets or sets the edit text input type by setting a combination of <see cref="T:Stride.UI.Controls.EditText.InputTypeFlags"/>.
            </summary>
            <userdoc>The edit text input type.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.EditText.MaxLength">
            <summary>
            Gets or sets the maximum number of characters that can be manually entered into the text box.
            </summary>
            <remarks>The value is coerced in the range [1, <see cref="F:System.Int32.MaxValue"/>].</remarks>
            <userdoc>The maximum number of characters that can be manually entered into the text box.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.EditText.MinLines">
            <summary>
            Gets or sets the minimum number of visible lines.
            </summary>
            <remarks>The value is coerced in the range [1, <see cref="F:System.Int32.MaxValue"/>].</remarks>
            <userdoc>The minimum number of visible lines.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.EditText.MaxLines">
            <summary>
            Gets or sets the maximum number of visible lines.
            </summary>
            <remarks>The value is coerced in the range [int, <see cref="F:System.Int32.MaxValue"/>].</remarks>
            <userdoc>The maximum number of visible lines.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.EditText.DoNotSnapText">
            <summary>
            Gets or sets the value indicating if the snapping of the <see cref="P:Stride.UI.Controls.EditText.Text"/> of the <see cref="T:Stride.UI.Controls.TextBlock"/> to the closest screen pixel should be skipped.
            </summary>
            <remarks>When <value>true</value>, the element's text is never snapped. 
            When <value>false</value>, it is snapped only if the font is dynamic and the element is rendered by a SceneUIRenderer.</remarks>
            <userdoc>True if the snapping of the Text to the closest screen pixel should be skipped, false otherwise.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.EditText.CaretFrequency">
            <summary>
            Gets or sets the caret blinking frequency.
            </summary>
            <remarks>The value is coerced in the range [0, <see cref="F:System.Single.MaxValue"/>].</remarks>
            <userdoc>The caret blinking frequency.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.EditText.CaretPosition">
            <summary>
            Gets or sets the caret position in the <see cref="T:Stride.UI.Controls.EditText"/>'s text.
            </summary>
            <userdoc>The caret position.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.EditText.IsCaretVisible">
            <summary>
            Gets the value indicating if the blinking caret is currently visible or not.
            </summary>
        </member>
        <member name="M:Stride.UI.Controls.EditText.ResetCaretBlinking">
            <summary>
            Reset the caret blinking to initial state (visible).
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.EditText.LineCount">
            <summary>
            Gets the total number of lines in the text box.
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.EditText.CharacterFilterPredicate">
            <summary>
            Gets or sets the filter used to determine whether the inputed characters are valid or not.
            Accepted character are characters that the provided predicate function returns <value>true</value>.
            </summary>
            <remarks>If <see cref="P:Stride.UI.Controls.EditText.CharacterFilterPredicate"/> is not set all characters are accepted.</remarks>
        </member>
        <member name="P:Stride.UI.Controls.EditText.SelectedText">
            <summary>
            Gets or sets the content of the current selection in the text box.
            </summary>
            <exception cref="T:System.ArgumentNullException">The provided string value is null</exception>
        </member>
        <member name="P:Stride.UI.Controls.EditText.SelectionLength">
            <summary>
            Gets or sets a value indicating the number of characters in the current selection in the text box.
            </summary>
            <remarks>If the provided length of the selection is too big, the selection is extended until the end of the current text</remarks>
        </member>
        <member name="P:Stride.UI.Controls.EditText.SelectionStart">
            <summary>
            Gets or sets a character index for the beginning of the current selection.
            </summary>
            <remarks>If the provided selection start index is too big, the caret is placed at the end of the current text</remarks>
        </member>
        <member name="P:Stride.UI.Controls.EditText.Text">
            <summary>
            Gets or sets the text content of the text box.
            </summary>
            <remarks>Setting explicitly the text sets the cursor at the end of the new text.</remarks>
            <userdoc>The text content of the text box.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.EditText.IsTouchedDown">
            <summary>
            Gets a value that indicates whether the is currently touched down.
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.EditText.ActualTextSize">
            <summary>
            Returns the actual size of the text in virtual pixels unit.
            </summary>
            <remarks>If <see cref="P:Stride.UI.Controls.EditText.TextSize"/> is <see cref="M:System.Single.IsNaN(System.Single)"/>, returns the default size of the <see cref="P:Stride.UI.Controls.EditText.Font"/>.</remarks>
            <seealso cref="P:Stride.UI.Controls.EditText.TextSize"/>
            <seealso cref="P:Stride.Graphics.SpriteFont.Size"/>
        </member>
        <member name="P:Stride.UI.Controls.EditText.TextToDisplay">
            <summary>
            The actual text to show into the edit text.
            </summary>
        </member>
        <member name="M:Stride.UI.Controls.EditText.AppendText(System.String)">
            <summary>
            Appends a string to the contents of a text control.
            </summary>
            <param name="textData">A string that specifies the text to append to the current contents of the text control.</param>
        </member>
        <member name="M:Stride.UI.Controls.EditText.SelectAll(System.Boolean)">
            <summary>
            Selects all the contents of the text editing control.
            </summary>
            <param name="caretAtBeginning">Indicate if the caret should be at the beginning or the end of the selection</param>
        </member>
        <member name="M:Stride.UI.Controls.EditText.Clear">
            <summary>
            Clears all the content from the text box.
            </summary>
        </member>
        <member name="M:Stride.UI.Controls.EditText.Select(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Selects a range of text in the text box.
            </summary>
            <param name="start">The zero-based character index of the first character in the selection.</param>
            <param name="length">The length of the selection, in characters.</param>
            <param name="caretAtBeginning">Indicate if the caret should be at the beginning or the end of the selection</param>
            <remarks>If the value of start is too big the caret is positioned at the end of the current text.
            If the value of length is too big the selection is extended to the end current text.</remarks>
        </member>
        <member name="M:Stride.UI.Controls.EditText.CalculateTextSize">
            <summary>
            Calculate and returns the size of the <see cref="P:Stride.UI.Controls.EditText.Text"/> in virtual pixels size.
            </summary>
            <returns>The size of the Text in virtual pixels.</returns>
        </member>
        <member name="M:Stride.UI.Controls.EditText.CalculateTextSize(System.String)">
            <summary>
            Calculate and returns the size of the provided <paramref name="textToMeasure"/>"/> in virtual pixels size.
            </summary>
            <param name="textToMeasure">The text to measure</param>
            <returns>The size of the text in virtual pixels</returns>
        </member>
        <member name="E:Stride.UI.Controls.EditText.TextChanged">
            <summary>
            Occurs when the text selection has changed.
            </summary>
            <remarks>A click event is bubbling</remarks>
        </member>
        <member name="F:Stride.UI.Controls.EditText.TextChangedEvent">
            <summary>
            Identifies the <see cref="E:Stride.UI.Controls.EditText.TextChanged"/> routed event.
            </summary>
        </member>
        <member name="M:Stride.UI.Controls.EditText.OnTextChanged(Stride.UI.Events.RoutedEventArgs)">
            <summary>
            The class handler of the event <see cref="E:Stride.UI.Controls.EditText.TextChanged"/>.
            This method can be overridden in inherited classes to perform actions common to all instances of a class.
            </summary>
            <param name="args">The arguments of the event</param>
        </member>
        <member name="M:Stride.UI.Controls.EditText.FindNearestCharacterIndex(Stride.Core.Mathematics.Vector2)">
            <summary>
            Find the index of the nearest character to the provided position.
            </summary>
            <param name="position">The position in edit text space</param>
            <returns>The 0-based index of the nearest character</returns>
        </member>
        <member name="T:Stride.UI.Controls.ImageButton">
            <summary>
            A <see cref="T:Stride.UI.Controls.Button"/> whose <see cref="P:Stride.UI.Controls.ContentControl.Content"/> are the <see cref="P:Stride.UI.Controls.Button.PressedImage"/> and <see cref="P:Stride.UI.Controls.Button.NotPressedImage"/>.
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.ImageButton.Content">
            <summary>
            The current content of the <see cref="T:Stride.UI.Controls.ImageButton"/>, that is the current image used.
            </summary>
            <remarks>The <see cref="P:Stride.UI.Controls.ImageButton.Content"/> of a <see cref="T:Stride.UI.Controls.ImageButton"/> is determined by its state (pressed/not pressed) and the value of
            <see cref="P:Stride.UI.Controls.Button.PressedImage"/> and <see cref="P:Stride.UI.Controls.Button.NotPressedImage"/>. 
            The <see cref="P:Stride.UI.Controls.ImageButton.Content"/> cannot be set manually by the user.</remarks>
            <exception cref="T:System.InvalidOperationException">The user tried to modify the <see cref="T:Stride.UI.Controls.ImageButton"/> content.</exception>
        </member>
        <member name="T:Stride.UI.Controls.ImageElement">
            <summary>
            Represents a control that displays an image.
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.ImageElement.Source">
            <summary>
            Gets or sets the <see cref="T:Stride.Engine.ISpriteProvider"/> for the image.
            </summary>
            <userdoc>The provider for the image.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.ImageElement.Color">
            <summary>
            Gets or set the color used to tint the image. Default value is White/>.
            </summary>
            <remarks>The initial image color is multiplied by this color.</remarks>
            <userdoc>The color used to tint the image. The default value is white.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.ImageElement.StretchType">
            <summary>
            Gets or sets a value that describes how the image should be stretched to fill the destination rectangle.
            </summary>
            <userdoc>Indicates how the image should be stretched to fill the destination rectangle.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.ImageElement.StretchDirection">
            <summary>
            Gets or sets a value that indicates how the image is scaled.
            </summary>
            <userdoc>Indicates how the image is scaled.</userdoc>
        </member>
        <member name="T:Stride.UI.Controls.ModalElement">
            <summary>
            Represents a modal element that puts an overlay upon the underneath elements and freeze their input.
            </summary>
        </member>
        <member name="E:Stride.UI.Controls.ModalElement.OutsideClick">
            <summary>
            Occurs when the element is modal and the user click outside of the modal element.
            </summary>
            <remarks>A click event is bubbling</remarks>
        </member>
        <member name="F:Stride.UI.Controls.ModalElement.OutsideClickEvent">
            <summary>
            Identifies the <see cref="E:Stride.UI.Controls.ModalElement.OutsideClick"/> routed event.
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.ModalElement.OverlayColor">
            <summary>
            The color of the overlay drawn upon underneath elements.
            </summary>
            <userdoc>he color of the overlay drawn upon underneath elements.</userdoc>
            <userdoc>he color of the overlay drawn upon underneath elements.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.ModalElement.IsModal">
            <summary>
            Determine if the control should block the input of underneath elements or not.
            </summary>
            <userdoc>True if the control should block the input of underneath elements, false otherwise.</userdoc>
        </member>
        <member name="T:Stride.UI.Controls.ScrollBar">
            <summary>
            Represents a scroll bar.
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.ScrollBar.BarColor">
            <summary>
            The color of the bar.
            </summary>
            <userdoc>The color of the bar.</userdoc>
        </member>
        <member name="T:Stride.UI.Controls.ScrollingText">
            <summary>
            A text viewer that scrolls automatically the text from right to left.
            </summary>
        </member>
        <member name="F:Stride.UI.Controls.ScrollingText.nextLetterIndex">
            <summary>
            The index in <see cref="P:Stride.UI.Controls.TextBlock.Text"/> defining the position of the next letter to add to <see cref="P:Stride.UI.Controls.ScrollingText.TextToDisplay"/>.
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.ScrollingText.ScrollingOffset">
            <summary>
            The current offset of the text in the Ox axis.
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.ScrollingText.AccumulatedWidth">
            <summary>
            The total accumulated width of the scrolling text since the last call the <see cref="M:Stride.UI.Controls.ScrollingText.ResetDisplayingText"/>
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.ScrollingText.ScrollingSpeed">
            <summary>
            Gets or sets the scrolling speed of the text. The unit is in virtual pixels.
            </summary>
            <remarks>The value is coerced in the range [0, <see cref="F:System.Single.MaxValue"/>].</remarks>
            <userdoc>The scrolling speed of the text. The unit is in virtual pixels.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.ScrollingText.DesiredCharacterNumber">
            <summary>
            Gets or sets the desired number of character in average to display at a given time. This value is taken in account during the measurement stage of the element.
            </summary>
            <userdoc>The desired number of character in average to display at a given time. This value is taken in account during the measurement stage of the element.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.ScrollingText.RepeatText">
            <summary>
            Gets or sets the a value indicating if the text message must be repeated (wrapped) or not.
            </summary>
            <userdoc>True if the text message must be repeated (wrapped), false otherwise.</userdoc>
        </member>
        <member name="M:Stride.UI.Controls.ScrollingText.AppendText(System.String)">
            <summary>
            Append the provided text to the end of the current <see cref="P:Stride.UI.Controls.TextBlock.Text"/> without restarting the display to the begin of the <see cref="P:Stride.UI.Controls.TextBlock.Text"/>.
            </summary>
            <param name="text">The text to append</param>
        </member>
        <member name="M:Stride.UI.Controls.ScrollingText.ClearText">
            <summary>
            Clear the currently scrolling text.
            </summary>
        </member>
        <member name="M:Stride.UI.Controls.ScrollingText.CalculateTextToDisplayWidth">
            <summary>
            Calculate the width of the text to display in virtual pixels size.
            </summary>
            <returns>The size of the text in virtual pixels</returns>
        </member>
        <member name="M:Stride.UI.Controls.ScrollingText.MeasureSize">
            <summary>
            Measure the size of the <see cref="T:Stride.UI.Controls.ScrollingText"/> element.
            </summary>
            <returns>The size of the element</returns>
        </member>
        <member name="T:Stride.UI.Controls.ScrollViewer">
            <summary>
            Represents a scroll viewer.
            A scroll viewer element has an infinite virtual size defined by its <see cref="T:Stride.UI.ScrollingMode"/>.
            The user can move in that virtual size by touching and panning on the screen.
            </summary>
        </member>
        <member name="F:Stride.UI.Controls.ScrollViewer.ScrollOffsets">
            <summary>
            The current offsets (in virtual pixels) generated by the scrolling on the <see cref="P:Stride.UI.Controls.ContentControl.Content"/> element.
            </summary>
        </member>
        <member name="F:Stride.UI.Controls.ScrollViewer.CurrentScrollingSpeed">
            <summary>
            The current speed of the scrolling in virtual pixels.
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.ScrollViewer.IsUserScrollingViewer">
            <summary>
            Indicate if the user is currently touching the scroll viewer and performing a scroll gesture with its finger.
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.ScrollViewer.ViewPort">
            <summary>
            The viewport of the <see cref="T:Stride.UI.Controls.ScrollViewer"/> in virtual pixels.
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.ScrollViewer.ScrollBarColor">
            <summary>
            Gets or sets the color of the scrolling bar.
            </summary>
            <userdoc>The color of the scrolling bar.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.ScrollViewer.ScrollBarThickness">
            <summary>
            Gets or sets the scrolling bar thickness in virtual pixels.
            </summary>
            <userdoc>The scrolling bar thickness in virtual pixels.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.ScrollViewer.ScrollMode">
            <summary>
            The viewer allowed scrolling mode.
            </summary>
            <userdoc>The viewer allowed scrolling mode.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.ScrollViewer.ScrollStartThreshold">
            <summary>
            Gets or sets the threshold distance over which a touch move starts scrolling.
            </summary>
            <userdoc>The threshold distance over which a touch move starts scrolling.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.ScrollViewer.Deceleration">
            <summary>
            The automatic deceleration of the scroll after the user remove its finger from the screen. The unit is in virtual pixels.
            </summary>
            <userdoc>The automatic deceleration of the scroll after the user remove its finger from the screen. The unit is in virtual pixels.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.ScrollViewer.TouchScrollingEnabled">
            <summary>
            Gets or sets the scrolling behavior on touches. True to allow the user to scroll by touching, false to forbid it.
            </summary>
            <userdoc>True to allow the user to scroll by touching, false to forbid it.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.ScrollViewer.SnapToAnchors">
            <summary>
            Gets or sets the value indicating if the element should snap its scrolling to anchors.
            </summary>
            <remarks>Snapping will work only if <see cref="P:Stride.UI.Controls.ScrollViewer.Content"/> implements interface <see cref="T:Stride.UI.IScrollAnchorInfo"/></remarks>
            <userdoc>True if the element should snap its scrolling to anchors, false otherwise.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.ScrollViewer.ContentAsScrollInfo">
            <summary>
            The current content casted as <see cref="T:Stride.UI.IScrollInfo"/>.
            </summary>
            <remarks><value>Null</value> if the <see cref="P:Stride.UI.Controls.ScrollViewer.Content"/> does not implement the interface</remarks>
        </member>
        <member name="P:Stride.UI.Controls.ScrollViewer.ContentAsAnchorInfo">
            <summary>
            The current content casted as <see cref="T:Stride.UI.IScrollAnchorInfo"/>
            </summary>
            <remarks><value>Null</value> if the <see cref="P:Stride.UI.Controls.ScrollViewer.Content"/> does not implement the interface</remarks>
        </member>
        <member name="P:Stride.UI.Controls.ScrollViewer.ScrollPosition">
            <summary>
            The current scroll position (in virtual pixels) of the <see cref="T:Stride.UI.Controls.ScrollViewer"/>.
            That is, the position of the left-top-front corner of the <see cref="T:Stride.UI.Controls.ScrollViewer"/> in its <see cref="P:Stride.UI.Controls.ScrollViewer.Content"/>.
            </summary>
            <remarks>
            <para>If the <see cref="P:Stride.UI.Controls.ScrollViewer.Content"/> of the scroll viewer implements the <see cref="T:Stride.UI.IScrollInfo"/> interface,
            the <see cref="P:Stride.UI.Controls.ScrollViewer.ScrollPosition"/> will be <value>0</value> in all directions where <see cref="M:Stride.UI.IScrollInfo.CanScroll(Stride.UI.Orientation)"/> is true.</para>
            <para>Note that <see cref="P:Stride.UI.Controls.ScrollViewer.ScrollPosition"/> is valid only when <see cref="P:Stride.UI.UIElement.IsArrangeValid"/> is <value>true</value>.
            If <see cref="P:Stride.UI.UIElement.IsArrangeValid"/> is <value>false</value>, <see cref="P:Stride.UI.Controls.ScrollViewer.ScrollPosition"/> contains the position of the scrolling
            before the action that actually invalidated the layout.</para>
            </remarks>
        </member>
        <member name="F:Stride.UI.Controls.ScrollViewer.scrollingRequests">
            <summary>
            The list of scrolling requests that need to be performed during the next <see cref="M:Stride.UI.Controls.ScrollViewer.ArrangeOverride(Stride.Core.Mathematics.Vector3)"/>
            </summary>
        </member>
        <member name="M:Stride.UI.Controls.ScrollViewer.StopCurrentScrolling">
            <summary>
            Stops the scrolling at the current position.
            </summary>
        </member>
        <member name="M:Stride.UI.Controls.ScrollViewer.CanScroll(Stride.UI.Orientation)">
            <summary>
            Indicate if the scroll viewer can scroll in the given direction.
            </summary>
            <param name="direction">The direction to use for the test</param>
            <returns><value>true</value> if the scroll viewer can scroll in the provided direction, or else <value>false</value></returns>
        </member>
        <member name="M:Stride.UI.Controls.ScrollViewer.OnScrollModeChanged">
            <summary>
            Method triggered when <see cref="P:Stride.UI.Controls.ScrollViewer.ScrollMode"/> changed.
            Can be overridden in inherited class to change the default behavior.
            </summary>
        </member>
        <member name="M:Stride.UI.Controls.ScrollViewer.OnTouchScrollingEnabledChanged">
            <summary>
            Method triggered when <see cref="P:Stride.UI.Controls.ScrollViewer.TouchScrollingEnabled"/> changed.
            Can be overridden in inherited class to change the default behavior.
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.ScrollViewer.LastFrameTranslation">
            <summary>
            Gets the scrolling translation that occurred during the last frame
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.ScrollViewer.IsTouchedDown">
            <summary>
            Gets a value that indicates whether the is currently touched down.
            </summary>
        </member>
        <member name="M:Stride.UI.Controls.ScrollViewer.ScrollToBeginning(Stride.UI.Orientation,System.Boolean)">
            <summary>
            Go to the beginning of the scroll viewer's content in the provided direction.
            </summary>
            <param name="direction">The direction in which to scroll</param>
            <param name="stopScrolling">Indicate if the scrolling should be stopped after the scroll action.</param>
        </member>
        <member name="M:Stride.UI.Controls.ScrollViewer.ScrollToEnd(Stride.UI.Orientation,System.Boolean)">
            <summary>
            Go to the end of the scroll viewer's content in the provided direction.
            </summary>
            <param name="direction">The direction in which to scroll</param>
            <param name="stopScrolling">Indicate if the scrolling should be stopped after the scroll action.</param>
        </member>
        <member name="M:Stride.UI.Controls.ScrollViewer.ScrollTo(Stride.Core.Mathematics.Vector3,System.Boolean)">
            <summary>
            Try to scroll to the provided position (in virtual pixels).
            If the provided translation is too important, it is clamped.
            </summary>
            <remarks>Note that the computational cost of <see cref="M:Stride.UI.Controls.ScrollViewer.ScrollTo(Stride.Core.Mathematics.Vector3,System.Boolean)"/> can be greatly higher than <see cref="M:Stride.UI.Controls.ScrollViewer.ScrollOf(Stride.Core.Mathematics.Vector3,System.Boolean)"/>
            when scrolling is delegated to a <see cref="P:Stride.UI.Controls.ScrollViewer.Content"/> virtualizing its items. When possible, prefer call to <see cref="M:Stride.UI.Controls.ScrollViewer.ScrollOf(Stride.Core.Mathematics.Vector3,System.Boolean)"/></remarks>
            <param name="scrollAbsolutePosition">The scroll offsets to apply</param>
            <param name="stopScrolling">Indicate if the scrolling should be stopped after the scroll action.</param>
        </member>
        <member name="M:Stride.UI.Controls.ScrollViewer.ScrollOf(Stride.Core.Mathematics.Vector3,System.Boolean)">
            <summary>
            Try to scroll of the provided scrolling translation value from the current position.
            If the provided translation is too important, it is clamped.
            </summary>
            <param name="scrollTranslation">The scroll translation to perform (in virtual pixels)</param>
            <param name="stopScrolling">Indicate if the scrolling should be stopped after the scroll action.</param>
        </member>
        <member name="M:Stride.UI.Controls.ScrollViewer.InvalidateScrollInfo">
            <summary>
            Called by an <see cref="T:Stride.UI.IScrollInfo"/> interface that is attached to a <see cref="T:Stride.UI.Controls.ScrollViewer"/> when the value of any scrolling property size changes.
            Scrolling properties include offset, extent, or viewport.
            </summary>
        </member>
        <member name="M:Stride.UI.Controls.ScrollViewer.InvalidateAnchorInfo">
            <summary>
            Called by an <see cref="T:Stride.UI.IScrollAnchorInfo"/> interface that attached to a <see cref="T:Stride.UI.Controls.ScrollViewer"/> when the value of any anchor changed.
            </summary>
        </member>
        <member name="T:Stride.UI.Controls.Slider">
            <summary>
            Represents a slider element.
            </summary>
        </member>
        <member name="M:Stride.UI.Controls.Slider.#ctor">
            <summary>
            Create a new instance of slider.
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.Slider.Value">
            <summary>
            Gets or sets the current value of the slider.
            </summary>
            <remarks>The value is coerced in the range [<see cref="P:Stride.UI.Controls.Slider.Minimum"/>, <see cref="P:Stride.UI.Controls.Slider.Maximum"/>].</remarks>
            <userdoc>The current value of the slider.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.Slider.Minimum">
            <summary>
            Gets or sets the smallest possible value of the slider.
            </summary>
            <remarks>The value is coerced in the range [<see cref="F:System.Single.MinValue"/>, <see cref="F:System.Single.MaxValue"/>].</remarks>
            <userdoc>The smallest possible value of the slider.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.Slider.Maximum">
            <summary>
            Gets or sets the greatest possible value of the slider.
            </summary>
            <remarks>The value is coerced in the range [<see cref="P:Stride.UI.Controls.Slider.Minimum"/>, <see cref="F:System.Single.MaxValue"/>].</remarks>
            <userdoc>The greatest possible value of the slider.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.Slider.Step">
            <summary>
            Gets or sets the step of a <see cref="P:Stride.UI.Controls.Slider.Value"/> change.
            </summary>
            <remarks>The value is coerced in the range [0, <see cref="F:System.Single.MaxValue"/>].</remarks>
            <userdoc>The step of a change of the value.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.Slider.TrackBackgroundImage">
            <summary>
            Gets or sets the image to display as Track background.
            </summary>
            <userdoc>The image to display as Track background.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.Slider.TrackForegroundImage">
            <summary>
            Gets or sets the image to display as Track foreground.
            </summary>
            <userdoc>The image to display as Track foreground.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.Slider.TrackStartingOffsets">
            <summary>
            Gets or sets the left/right offsets specifying where the track region starts. 
            </summary>
            <userdoc>The left/right offsets specifying where the track region starts. </userdoc>
        </member>
        <member name="P:Stride.UI.Controls.Slider.ThumbImage">
            <summary>
            Gets or sets the image to display as slider thumb (button).
            </summary>
            <userdoc>The image to display as slider thumb (button).</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.Slider.MouseOverThumbImage">
            <summary>
            Gets or sets the image to display as slider thumb (button) when the mouse is over the slider.
            </summary>
            <userdoc>The image to display as slider thumb (button) when the mouse is over the slider.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.Slider.TickImage">
            <summary>
            Gets or sets the image to display as tick.
            </summary>
            <userdoc>The image to display as tick.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.Slider.AreTicksDisplayed">
            <summary>
            Gets or sets the value indicating if the ticks should be displayed or not.
            </summary>
            <userdoc>True if the ticks should be displayed, false otherwise.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.Slider.TickFrequency">
            <summary>
            Gets or sets the frequency of the ticks on the slider track.
            </summary>
            <remarks>The value is coerced in the range [1, <see cref="F:System.Single.MaxValue"/>].</remarks>
            <userdoc>The frequency of the ticks on the slider track.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.Slider.TickOffset">
            <summary>
            Gets or sets the offset in virtual pixels between the center of the track and center of the ticks (for an not-stretched slider).
            </summary>
            <remarks>The value is coerced in the range [0, <see cref="F:System.Single.MaxValue"/>].</remarks>
            <userdoc>The offset in virtual pixels between the center of the track and center of the ticks (for an not-stretched slider).</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.Slider.ShouldSnapToTicks">
            <summary>
            Gets or sets the value indicating if the slider <see cref="P:Stride.UI.Controls.Slider.Value"/> should be snapped to the ticks or not.
            </summary>
            <userdoc>True if the slider valuye should be snapped to the ticks, false otherwise.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.Slider.IsDirectionReversed">
            <summary>
            Gets or sets the value indicating if the default direction of the slider should reversed or not.
            </summary>
            <userdoc>True if the default direction of the slider should reversed, false otherwise.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.Slider.Orientation">
            <summary>
            Gets or sets the orientation of the slider.
            </summary>
            <userdoc>The orientation of the slider.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.Slider.IsTouchedDown">
            <summary>
            Gets a value that indicates whether the is currently touched down.
            </summary>
        </member>
        <member name="M:Stride.UI.Controls.Slider.SnapToClosestTick">
            <summary>
            Snap the current <see cref="P:Stride.UI.Controls.Slider.Value"/> to the closest tick.
            </summary>
        </member>
        <member name="M:Stride.UI.Controls.Slider.CalculateClosestTick(System.Single)">
            <summary>
            Calculate the value of the closest tick to the provided value.
            </summary>
            <param name="rawValue">The current raw value</param>
            <returns>The value adjusted to the closest tick</returns>
        </member>
        <member name="M:Stride.UI.Controls.Slider.Increase">
            <summary>
            Increase the <see cref="P:Stride.UI.Controls.Slider.Value"/> by <see cref="P:Stride.UI.Controls.Slider.Step"/>.
            </summary>
            <remarks>If <see cref="P:Stride.UI.Controls.Slider.ShouldSnapToTicks"/> is <value>True</value> then it increases of at least one tick.</remarks>
        </member>
        <member name="M:Stride.UI.Controls.Slider.Decrease">
            <summary>
            Decrease the <see cref="P:Stride.UI.Controls.Slider.Value"/> by <see cref="P:Stride.UI.Controls.Slider.Step"/>.
            </summary>
            <remarks>If <see cref="P:Stride.UI.Controls.Slider.ShouldSnapToTicks"/> is <value>True</value> then it decreases of at least one tick.</remarks>
        </member>
        <member name="E:Stride.UI.Controls.Slider.ValueChanged">
            <summary>
            Occurs when the value of the slider changed.
            </summary>
            <remarks>A ValueChanged event is bubbling</remarks>
        </member>
        <member name="F:Stride.UI.Controls.Slider.ValueChangedEvent">
            <summary>
            Identifies the <see cref="E:Stride.UI.Controls.Slider.ValueChanged"/> routed event.
            </summary>
        </member>
        <member name="M:Stride.UI.Controls.Slider.OnValueChanged(Stride.UI.Events.RoutedEventArgs)">
            <summary>
            The class handler of the event <see cref="E:Stride.UI.Controls.Slider.ValueChanged"/>.
            This method can be overridden in inherited classes to perform actions common to all instances of a class.
            </summary>
            <param name="args">The arguments of the event</param>
        </member>
        <member name="M:Stride.UI.Controls.Slider.SetValueFromTouchPosition(Stride.Core.Mathematics.Vector3)">
            <summary>
            Set <see cref="P:Stride.UI.Controls.Slider.Value"/> from the world position of a touch event.
            </summary>
            <param name="touchPostionWorld">The world position of the touch</param>
        </member>
        <member name="T:Stride.UI.Controls.TextBlock">
            <summary>
            Provides a lightweight control for displaying small amounts of text.
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.TextBlock.ActualTextSize">
            <summary>
            Returns the actual size of the text in virtual pixels unit.
            </summary>
            <remarks>If <see cref="P:Stride.UI.Controls.TextBlock.TextSize"/> is <see cref="M:System.Single.IsNaN(System.Single)"/>, returns the default size of the <see cref="P:Stride.UI.Controls.TextBlock.Font"/>.</remarks>
            <seealso cref="P:Stride.UI.Controls.TextBlock.TextSize"/>
            <seealso cref="P:Stride.Graphics.SpriteFont.Size"/>
        </member>
        <member name="P:Stride.UI.Controls.TextBlock.TextToDisplay">
            <summary>
            Returns the text to display during the draw call.
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.TextBlock.Text">
            <summary>
            Gets or sets the text of the text block.
            </summary>
            <userdoc>The text of the text block.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.TextBlock.Font">
            <summary>
            Gets or sets the font of the text block.
            </summary>
            <userdoc>The font of the text block.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.TextBlock.TextSize">
            <summary>
            Gets or sets the size of the text in virtual pixels unit.
            </summary>
            <remarks>If the value set is <c>null</c>, the default size of the <see cref="P:Stride.UI.Controls.TextBlock.Font"/> will be used instead.</remarks>
            <seealso cref="P:Stride.UI.Controls.TextBlock.ActualTextSize"/>
            <seealso cref="P:Stride.Graphics.SpriteFont.Size"/>
            <userdoc>The size of the text in virtual pixels unit.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.TextBlock.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <userdoc>The color of the text.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.TextBlock.TextAlignment">
            <summary>
            Gets or sets the alignment of the text to display.
            </summary>
            <userdoc>Alignment of the text.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.TextBlock.WrapText">
            <summary>
            Gets or sets the value indicating if the <see cref="P:Stride.UI.Controls.TextBlock.Text"/> of the <see cref="T:Stride.UI.Controls.TextBlock"/> 
            should automatically return to the beginning of the line when it is too long for the line width.
            </summary>
            <userdoc>True if the text should automatically return of the beginning of the line when it is too long to fit the line width, false otherwise.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.TextBlock.DoNotSnapText">
            <summary>
            Gets or sets the value indicating if the snapping of the <see cref="P:Stride.UI.Controls.TextBlock.Text"/> of the <see cref="T:Stride.UI.Controls.TextBlock"/> to the closest screen pixel should be skipped.
            </summary>
            <remarks>
            When <value>true</value>, the element's text is never snapped. 
            When <value>false</value>, it is snapped only if the font is dynamic and the element is rendered by a SceneUIRenderer.
            </remarks>
            <userdoc>True to never snap to the closest screen pixel, false to snap it (only works for dynamic font).</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.TextBlock.SynchronousCharacterGeneration">
            <summary>
            Gets or sets the value indicating if the text block should generate <see cref="T:Stride.Graphics.Font.RuntimeRasterizedSpriteFont"/> characters synchronously or asynchronously.
            </summary>
            <remarks>
            If synchronous generation is activated, the game will be block until all the characters have finished to be generate.
            If asynchronous generation is activated, some characters can appears with one or two frames of delay.
            </remarks>
            <userdoc>True if dynamic characters should be generated synchronously, false otherwise.</userdoc>
        </member>
        <member name="M:Stride.UI.Controls.TextBlock.CalculateTextSize">
            <summary>
            Calculate and returns the size of the <see cref="P:Stride.UI.Controls.TextBlock.Text"/> in virtual pixels size.
            </summary>
            <returns>The size of the Text in virtual pixels.</returns>
        </member>
        <member name="M:Stride.UI.Controls.TextBlock.ArrangeOverride(Stride.Core.Mathematics.Vector3)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.UI.Controls.TextBlock.CalculateTextSize(System.String)">
            <summary>
            Calculate and returns the size of the provided <paramref name="textToMeasure"/>"/> in virtual pixels size.
            </summary>
            <param name="textToMeasure">The text to measure</param>
            <returns>The size of the text in virtual pixels</returns>
        </member>
        <member name="M:Stride.UI.Controls.TextBlock.MeasureOverride(Stride.Core.Mathematics.Vector3)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.UI.Controls.TextBlock.OnTextChanged">
            <summary>
            Method triggered when the <see cref="P:Stride.UI.Controls.TextBlock.Text"/> changes.
            Can be overridden in inherited class to changed the default behavior.
            </summary>
        </member>
        <member name="T:Stride.UI.Controls.ToggleButton">
            <summary>
            Represent a UI toggle button. A toggle but can have two or three states depending on the <see cref="P:Stride.UI.Controls.ToggleButton.IsThreeState"/> property.
            </summary>
        </member>
        <member name="M:Stride.UI.Controls.ToggleButton.OnToggleImageInvalidated">
            <summary>
            Function triggered when one of the <see cref="P:Stride.UI.Controls.ToggleButton.CheckedImage"/>, <see cref="P:Stride.UI.Controls.ToggleButton.IndeterminateImage"/> and <see cref="P:Stride.UI.Controls.ToggleButton.UncheckedImage"/> images are invalidated.
            This function can be overridden in inherited classes.
            </summary>
        </member>
        <member name="P:Stride.UI.Controls.ToggleButton.CheckedImage">
            <summary>
            Gets or sets the image displayed when the button is checked.
            </summary>
            <userdoc>The image displayed when the button is checked.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.ToggleButton.UncheckedImage">
            <summary>
            Gets or sets the image displayed when the button is unchecked.
            </summary>
            <userdoc>The image displayed when the button is unchecked.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.ToggleButton.IndeterminateImage">
            <summary>
            Gets or sets the image displayed when the button state is undeterminate.
            </summary>
            <userdoc>The image displayed when the button state is undeterminate.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.ToggleButton.IsThreeState">
            <summary>
            Determines whether the control supports two or three states.
            </summary>
            <remarks>Setting <see cref="P:Stride.UI.Controls.ToggleButton.IsThreeState"/> to false changes the <see cref="P:Stride.UI.Controls.ToggleButton.State"/> of the toggle button if currently set to <see cref="F:Stride.UI.ToggleState.Indeterminate"/></remarks>
            <userdoc>True if the control support three states, false otherwise.</userdoc>
        </member>
        <member name="P:Stride.UI.Controls.ToggleButton.State">
            <summary>
            Gets or sets the state of the <see cref="T:Stride.UI.Controls.ToggleButton"/>
            </summary>
            <remarks>Setting the state of the toggle button to <see cref="F:Stride.UI.ToggleState.Indeterminate"/> sets <see cref="P:Stride.UI.Controls.ToggleButton.IsThreeState"/> to true.</remarks>
            <userdoc>The state of the button.</userdoc>
        </member>
        <member name="E:Stride.UI.Controls.ToggleButton.Checked">
            <summary>
            Occurs when a <see cref="T:Stride.UI.Controls.ToggleButton"/> is checked.
            </summary>
            <remarks>A checked event is bubbling</remarks>
        </member>
        <member name="E:Stride.UI.Controls.ToggleButton.Indeterminate">
            <summary>
            Occurs when a <see cref="T:Stride.UI.Controls.ToggleButton"/> is Indeterminate.
            </summary>
            <remarks>A Indeterminate event is bubbling</remarks>
        </member>
        <member name="E:Stride.UI.Controls.ToggleButton.Unchecked">
            <summary>
            Occurs when a <see cref="T:Stride.UI.Controls.ToggleButton"/> is Unchecked.
            </summary>
            <remarks>A Unchecked event is bubbling</remarks>
        </member>
        <member name="M:Stride.UI.Controls.ToggleButton.GoToNextState">
            <summary>
            Move the state of the toggle button to the next state. States order is: Unchecked -> Checked [-> Indeterminate] -> Unchecked -> ...
            </summary>
        </member>
        <member name="F:Stride.UI.Controls.ToggleButton.CheckedEvent">
            <summary>
            Identifies the <see cref="E:Stride.UI.Controls.ToggleButton.Checked"/> routed event.
            </summary>
        </member>
        <member name="F:Stride.UI.Controls.ToggleButton.IndeterminateEvent">
            <summary>
            Identifies the <see cref="E:Stride.UI.Controls.ToggleButton.Indeterminate"/> routed event.
            </summary>
        </member>
        <member name="F:Stride.UI.Controls.ToggleButton.UncheckedEvent">
            <summary>
            Identifies the <see cref="E:Stride.UI.Controls.ToggleButton.Unchecked"/> routed event.
            </summary>
        </member>
        <member name="M:Stride.UI.DependencyPropertyFactory.Register``1(System.String,System.Type,``0)">
            <summary>
            Registers a dependency property.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="name">The name of the property.</param>
            <param name="ownerType">The type that is registering the property.</param>
            <param name="defaultValue">The default value of the property.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.UI.DependencyPropertyFactory.Register``1(System.String,System.Type,``0,Stride.Core.ValidateValueCallback{``0})">
            <summary>
            Registers a dependency property.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="name">The name of the property.</param>
            <param name="ownerType">The type that is registering the property.</param>
            <param name="defaultValue">The default value of the property.</param>
            <param name="validateValueCallback">A callback for validation/coercision of the property's value.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.UI.DependencyPropertyFactory.Register``1(System.String,System.Type,``0,Stride.Core.ObjectInvalidationCallback{``0})">
            <summary>
            Registers a dependency property.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="name">The name of the property.</param>
            <param name="ownerType">The type that is registering the property.</param>
            <param name="defaultValue">The default value of the property.</param>
            <param name="invalidationCallback">A callback to invalidate an object state after a modification of the property's value.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.UI.DependencyPropertyFactory.Register``1(System.String,System.Type,``0,Stride.Core.ValidateValueCallback{``0},Stride.Core.ObjectInvalidationCallback{``0},Stride.Core.PropertyKeyMetadata[])">
            <summary>
            Registers a dependency property.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="name">The name of the property.</param>
            <param name="ownerType">The type that is registering the property.</param>
            <param name="defaultValue">The default value of the property.</param>
            <param name="validateValueCallback">A callback for validation/coercision of the property's value.</param>
            <param name="invalidationCallback">A callback to invalidate an object state after a modification of the property's value.</param>
            <param name="metadatas">The metadatas.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.UI.DependencyPropertyFactory.RegisterAttached``1(System.String,System.Type,``0)">
            <summary>
            Registers an attached dependency property.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="name">The name of the property.</param>
            <param name="ownerType">The type that is registering the property.</param>
            <param name="defaultValue">The default value of the property.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.UI.DependencyPropertyFactory.RegisterAttached``1(System.String,System.Type,``0,Stride.Core.ValidateValueCallback{``0})">
            <summary>
            Registers an attached dependency property.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="name">The name of the property.</param>
            <param name="ownerType">The type that is registering the property.</param>
            <param name="defaultValue">The default value of the property.</param>
            <param name="validateValueCallback">A callback for validation/coercision of the property's value.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.UI.DependencyPropertyFactory.RegisterAttached``1(System.String,System.Type,``0,Stride.Core.ObjectInvalidationCallback{``0})">
            <summary>
            Registers an attached dependency property.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="name">The name of the property.</param>
            <param name="ownerType">The type that is registering the property.</param>
            <param name="defaultValue">The default value of the property.</param>
            <param name="invalidationCallback">A callback to invalidate an object state after a modification of the property's value.</param>
            <returns></returns>
        </member>
        <member name="M:Stride.UI.DependencyPropertyFactory.RegisterAttached``1(System.String,System.Type,``0,Stride.Core.ValidateValueCallback{``0},Stride.Core.ObjectInvalidationCallback{``0},Stride.Core.PropertyKeyMetadata[])">
            <summary>
            Registers an attached dependency property.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="name">The name of the property.</param>
            <param name="ownerType">The type that is registering the property.</param>
            <param name="defaultValue">The default value of the property.</param>
            <param name="validateValueCallback">A callback for validation/coercision of the property's value.</param>
            <param name="invalidationCallback">A callback to invalidate an object state after a modification of the property's value.</param>
            <param name="metadatas">The metadatas.</param>
            <returns></returns>
        </member>
        <member name="T:Stride.UI.DepthAlignment">
            <summary>
            Describes how a child element is positioned in depth or stretched within a parent's layout slot.
            </summary>
        </member>
        <member name="F:Stride.UI.DepthAlignment.Front">
            <summary>
            The child element is aligned to the front of the parent's layout slot.
            </summary>
            <userdoc>The child element is aligned to the front of the parent's layout slot.</userdoc>
        </member>
        <member name="F:Stride.UI.DepthAlignment.Center">
            <summary>
            The child element is aligned to the center of the parent's layout slot.
            </summary>
            <userdoc>The child element is aligned to the center of the parent's layout slot.</userdoc>
        </member>
        <member name="F:Stride.UI.DepthAlignment.Back">
            <summary>
            The child element is aligned to the back of the parent's layout slot.
            </summary>
            <userdoc>The child element is aligned to the back of the parent's layout slot.</userdoc>
        </member>
        <member name="F:Stride.UI.DepthAlignment.Stretch">
            <summary>
            The child element stretches to fill the parent's layout slot.
            </summary>
            <userdoc>The child element stretches to fill the parent's layout slot.</userdoc>
        </member>
        <member name="T:Stride.UI.Events.EventManager">
            <summary>
            Provides event-related utility methods that register routed events for class owners and add class handlers.
            </summary>
        </member>
        <member name="M:Stride.UI.Events.EventManager.GetRoutedEvent(System.Type,System.String)">
            <summary>
            Finds the routed event identified by its name and owner.
            </summary>
            <param name="ownerType">The type to start the search with. Base classes are included in the search.</param>
            <param name="eventName">The event name.</param>
            <returns>The matching routed event identifier if any match is found; otherwise, null.</returns>
        </member>
        <member name="M:Stride.UI.Events.EventManager.GetRoutedEvents">
            <summary>
            Returns identifiers for routed events that have been registered to the event system.
            </summary>
            <returns>An array of type <see cref="T:Stride.UI.Events.RoutedEvent"/> that contains the registered objects.</returns>
        </member>
        <member name="M:Stride.UI.Events.EventManager.GetRoutedEventsForOwner(System.Type)">
            <summary>
            Finds all routed event identifiers for events that are registered with the provided owner type.
            </summary>
            <param name="ownerType">The type to start the search with. Base classes are included in the search.</param>
            <returns>An array of matching routed event identifiers if any match is found; otherwise, null.</returns>
        </member>
        <member name="M:Stride.UI.Events.EventManager.RegisterClassHandler``1(System.Type,Stride.UI.Events.RoutedEvent{``0},System.EventHandler{``0},System.Boolean)">
            <summary>
            Registers a class handler for a particular routed event, with the option to handle events where event data is already marked handled.
            </summary>
            <param name="classType">The type of the class that is declaring class handling.</param>
            <param name="routedEvent">The routed event identifier of the event to handle.</param>
            <param name="handler">A reference to the class handler implementation.</param>
            <param name="handledEventsToo">true to invoke this class handler even if arguments of the routed event have been marked as handled; 
            false to retain the default behavior of not invoking the handler on any marked-handled event.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="classType"/>, <paramref name="routedEvent"/>, or <paramref name="handler"/> is null.</exception>
        </member>
        <member name="M:Stride.UI.Events.EventManager.GetClassHandler(System.Type,Stride.UI.Events.RoutedEvent)">
            <summary>
            Get the class handler for the class <paramref name="classType"/> and routed event <paramref name="routedEvent"/>.
            </summary>
            <param name="classType">The type of the class that is handling the event.</param>
            <param name="routedEvent">The routed event to handle</param>
            <returns>The class handler</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="classType"/>, or <paramref name="routedEvent"/> is null.</exception>
        </member>
        <member name="M:Stride.UI.Events.EventManager.RegisterRoutedEvent``1(System.String,Stride.UI.Events.RoutingStrategy,System.Type)">
            <summary>
            Registers a new routed event.
            </summary>
            <param name="name">The name of the routed event. The name must be unique within the owner type (base class included) and cannot be null or an empty string.</param>
            <param name="routingStrategy">The routing strategy of the event as a value of the enumeration.</param>
            <param name="ownerType">The owner class type of the routed event. This cannot be null.</param>
            <returns>The identifier for the newly registered routed event. 
            This identifier object can now be stored as a static field in a class and then used as a parameter for methods that attach handlers to the event. 
            The routed event identifier is also used for other event system APIs.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> or <paramref name="ownerType"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if a routed event of name <paramref name="name"/> already exists for type <paramref name="ownerType"/> and parents.
            </exception>
        </member>
        <member name="M:Stride.UI.Events.EventManager.UnregisterRoutedEvent(Stride.UI.Events.RoutedEvent)">
            <summary>
            This functions reset all the registers and invalidate all the created routed events.
            It is mostly used for tests purposes.
            </summary>
        </member>
        <member name="T:Stride.UI.Events.RoutedEvent">
            <summary>
            Represents and identifies a routed event and declares its characteristics.
            </summary>
        </member>
        <member name="P:Stride.UI.Events.RoutedEvent.Name">
            <summary>
            Gets the identifying name of the routed event.
            </summary>
        </member>
        <member name="P:Stride.UI.Events.RoutedEvent.OwnerType">
            <summary>
            Gets the registered owner type of the routed event.
            </summary>
        </member>
        <member name="P:Stride.UI.Events.RoutedEvent.RoutingStrategy">
            <summary>
            Gets the routing strategy of the routed event.
            </summary>
        </member>
        <member name="T:Stride.UI.Events.RoutedEvent`1">
            <summary>
            A routed event typed with the <see cref="T:Stride.UI.Events.RoutedEventArgs"/> it triggers.
            </summary>
            <typeparam name="T">The type of <see cref="T:Stride.UI.Events.RoutedEventArgs"/> the routed event triggers</typeparam>
        </member>
        <member name="T:Stride.UI.Events.RoutedEventArgs">
            <summary>
            Contains state information and event data associated with a routed event.
            </summary>
        </member>
        <member name="P:Stride.UI.Events.RoutedEventArgs.Handled">
            <summary>
            Gets or sets a value that indicates the present state of the event handling for a routed event as it travels the route.
            </summary>
        </member>
        <member name="P:Stride.UI.Events.RoutedEventArgs.RoutedEvent">
            <summary>
            Gets or sets the <see cref="P:Stride.UI.Events.RoutedEventArgs.RoutedEvent"/> associated with this RoutedEventArgs instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">Attempted to change the RoutedEvent value while the event is being routed.</exception>
        </member>
        <member name="P:Stride.UI.Events.RoutedEventArgs.Source">
            <summary>
            Gets or sets a reference to the object that raised the event.
            </summary>
            <exception cref="T:System.InvalidOperationException">Attempted to change the source value while the event is being routed.</exception>
        </member>
        <member name="M:Stride.UI.Events.RoutedEventArgs.StartEventRouting">
            <summary>
            Indicate to the <see cref="T:Stride.UI.Events.RoutedEventArgs"/> that the event has started being routed.
            </summary>
        </member>
        <member name="M:Stride.UI.Events.RoutedEventArgs.EndEventRouting">
            <summary>
            Indicate to the <see cref="T:Stride.UI.Events.RoutedEventArgs"/> that the event has ended being routed.
            </summary>
        </member>
        <member name="M:Stride.UI.Events.RoutedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the RoutedEventArgs class.
            </summary>
            <remarks>
            When using this parameterless constructor, all public properties of the new <see cref="T:Stride.UI.Events.RoutedEventArgs"/> instance assume the following default values: 
            <see cref="P:Stride.UI.Events.RoutedEventArgs.RoutedEvent"/> = null, <see cref="P:Stride.UI.Events.RoutedEventArgs.Handled"/> = false, <see cref="P:Stride.UI.Events.RoutedEventArgs.Source"/> = null.
            Null values for <see cref="P:Stride.UI.Events.RoutedEventArgs.Source"/> only mean that the <see cref="T:Stride.UI.Events.RoutedEventArgs"/> data makes no attempt to specify the source. 
            When this instance is used in a call to <see cref="M:Stride.UI.UIElement.RaiseEvent(Stride.UI.Events.RoutedEventArgs)"/>,  the <see cref="P:Stride.UI.Events.RoutedEventArgs.Source"/> value is populated based on the element 
            that raised the event and are passed on to listeners through the routing.
            </remarks>
        </member>
        <member name="M:Stride.UI.Events.RoutedEventArgs.#ctor(Stride.UI.Events.RoutedEvent)">
            <summary>
            Initializes a new instance of the RoutedEventArgs class, using the supplied routed event identifier.
            </summary>
            <param name="routedEvent">The routed event identifier for this instance of the <see cref="T:Stride.UI.Events.RoutedEventArgs"/> class.</param>
            <remarks>
            When using this constructor, unspecified  public properties of the new <see cref="T:Stride.UI.Events.RoutedEventArgs"/> instance assume the following default values: 
            <see cref="P:Stride.UI.Events.RoutedEventArgs.Handled"/> = false, <see cref="P:Stride.UI.Events.RoutedEventArgs.Source"/> = null.
            Null values for <see cref="P:Stride.UI.Events.RoutedEventArgs.Source"/> only mean that the <see cref="T:Stride.UI.Events.RoutedEventArgs"/> data makes no attempt to specify the source. 
            When this instance is used in a call to <see cref="M:Stride.UI.UIElement.RaiseEvent(Stride.UI.Events.RoutedEventArgs)"/>,  the <see cref="P:Stride.UI.Events.RoutedEventArgs.Source"/> value is populated based on the element 
            that raised the event and are passed on to listeners through the routing.
            </remarks>
        </member>
        <member name="M:Stride.UI.Events.RoutedEventArgs.#ctor(Stride.UI.Events.RoutedEvent,Stride.UI.UIElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.UI.Events.RoutedEventArgs"/> class, using the supplied routed event identifier, and providing the opportunity to declare a different source for the event.
            </summary>
            <param name="routedEvent">The routed event identifier for this instance of the <see cref="T:Stride.UI.Events.RoutedEventArgs"/> class.</param>
            <param name="source">An alternate source that will be reported when the event is handled. This pre-populates the <see cref="P:Stride.UI.Events.RoutedEventArgs.Source"/> property.</param>
            <remarks>
            When using this constructor, unspecified public properties of the new <see cref="T:Stride.UI.Events.RoutedEventArgs"/> instance assume the following default values: 
            <see cref="P:Stride.UI.Events.RoutedEventArgs.Handled"/> = false.</remarks>
        </member>
        <member name="M:Stride.UI.Events.RoutedEventHandlerInfo.Equals(Stride.UI.Events.RoutedEventHandlerInfo)">
            <inheritdoc />
        </member>
        <member name="M:Stride.UI.Events.RoutedEventHandlerInfo.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.UI.Events.RoutedEventHandlerInfo.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:Stride.UI.Events.RoutedEventHandlerInfo`1.Handler">
            <inheritdoc/>
        </member>
        <member name="M:Stride.UI.Events.RoutedEventHandlerInfo`1.Invoke(System.Object,Stride.UI.Events.RoutedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Stride.UI.Events.RoutingStrategy">
            <summary>
            Indicates the routing strategy of a routed event.
            </summary>
        </member>
        <member name="F:Stride.UI.Events.RoutingStrategy.Bubble">
            <summary>
            The routed event uses a bubbling strategy, where the event instance routes upwards through the tree, from event source to root.
            </summary>
            <userdoc>The routed event uses a bubbling strategy, where the event instance routes upwards through the tree, from event source to root.</userdoc>
        </member>
        <member name="F:Stride.UI.Events.RoutingStrategy.Tunnel">
            <summary>
            The routed event uses a tunneling strategy, where the event instance routes downwards through the tree, from root to source element.
            </summary>
            <userdoc>The routed event uses a tunneling strategy, where the event instance routes downwards through the tree, from root to source element.</userdoc>
        </member>
        <member name="F:Stride.UI.Events.RoutingStrategy.Direct">
            <summary>
            The routed event does not route through an element tree, but does support other routed event capabilities such as class handling.
            </summary>
            <userdoc>The routed event does not route through an element tree, but does support other routed event capabilities such as class handling.</userdoc>
        </member>
        <member name="T:Stride.UI.HorizontalAlignment">
            <summary>
            Indicates where an element should be displayed on the horizontal axis relative to the allocated layout slot of the parent element.
            </summary>
        </member>
        <member name="F:Stride.UI.HorizontalAlignment.Left">
            <summary>
            An element aligned to the left of the layout slot for the parent element.
            </summary>
            <userdoc>An element aligned to the left of the layout slot for the parent element.</userdoc>
        </member>
        <member name="F:Stride.UI.HorizontalAlignment.Center">
            <summary>
            An element aligned to the center of the layout slot for the parent element.
            </summary>
            <userdoc>An element aligned to the center of the layout slot for the parent element.</userdoc>
        </member>
        <member name="F:Stride.UI.HorizontalAlignment.Right">
            <summary>
            An element aligned to the right of the layout slot for the parent element.
            </summary>
            <userdoc>An element aligned to the right of the layout slot for the parent element.</userdoc>
        </member>
        <member name="F:Stride.UI.HorizontalAlignment.Stretch">
            <summary>
            An element stretched to fill the entire layout slot of the parent element.
            </summary>
            <userdoc>An element stretched to fill the entire layout slot of the parent element.</userdoc>
        </member>
        <member name="M:Stride.UI.ImageSizeHelper.CalculateImageSizeFromAvailable(Stride.Graphics.Sprite,Stride.Core.Mathematics.Vector3,Stride.UI.StretchType,Stride.UI.StretchDirection,System.Boolean)">
            <summary>
            Calculates the actual image size from the size that is available.
            </summary>
            <param name="sprite"></param>
            <param name="availableSizeWithoutMargins"></param>
            <param name="stretchType"></param>
            <param name="stretchDirection"></param>
            <param name="isMeasuring"></param>
            <returns></returns>
        </member>
        <member name="T:Stride.UI.IScrollAnchorInfo">
            <summary>
            Interface providing anchor information to its <see cref="T:Stride.UI.Controls.ScrollViewer"/>.
            </summary>
        </member>
        <member name="M:Stride.UI.IScrollAnchorInfo.ShouldAnchor(Stride.UI.Orientation)">
            <summary>
            Indicate whether the <see cref="T:Stride.UI.Controls.ScrollViewer"/> managing this element should snap scrolling to anchors in the provided direction.
            </summary>
            <param name="direction">The direction in which to anchor</param>
        </member>
        <member name="M:Stride.UI.IScrollAnchorInfo.GetSurroudingAnchorDistances(Stride.UI.Orientation,System.Single)">
            <summary>
            Get the distances to the previous and next anchors in the provided direction and from given position.
            </summary>
            <param name="position">The current scrolling position</param>
            <param name="direction">The direction in which to anchor</param>
            <remarks>The distance contained in the X component of the returned vector is inferior or equal to 0 
            and the distance contained in the Y component is superior or equal to 0.</remarks>
            <returns>The distances to previous and next anchors from to current scroll position</returns>
        </member>
        <member name="P:Stride.UI.IScrollAnchorInfo.ScrollOwner">
            <summary>
            Gets or sets a <see cref="T:Stride.UI.Controls.ScrollViewer"/> element that controls scrolling behavior.
            </summary>
        </member>
        <member name="T:Stride.UI.IScrollInfo">
            <summary>
            Represents the main scrollable region inside a <see cref="T:Stride.UI.Controls.ScrollViewer"/> control.
            </summary>
        </member>
        <member name="M:Stride.UI.IScrollInfo.CanScroll(Stride.UI.Orientation)">
            <summary>
            Gets a value that indicates if the <see cref="T:Stride.UI.UIElement"/> can scroll in the provided direction.
            </summary>
            <param name="direction">The direction in which perform the scrolling</param>
        </member>
        <member name="P:Stride.UI.IScrollInfo.Extent">
            <summary>
            Gets the size of the extent. That is the virtual total size of the <see cref="T:Stride.UI.UIElement"/>.
            </summary>
        </member>
        <member name="P:Stride.UI.IScrollInfo.Offset">
            <summary>
            Gets the offset of the scrolled content.
            </summary>
        </member>
        <member name="P:Stride.UI.IScrollInfo.Viewport">
            <summary>
            Gets the size of the viewport for this content.
            </summary>
        </member>
        <member name="P:Stride.UI.IScrollInfo.ScrollOwner">
            <summary>
            Gets or sets a <see cref="T:Stride.UI.Controls.ScrollViewer"/> element that controls scrolling behavior.
            </summary>
        </member>
        <member name="P:Stride.UI.IScrollInfo.ScrollBarPositions">
            <summary>
            Get the position of the horizontal, vertical and in depth scroll bars.
            </summary>
            <returns>A value between <value>0</value> and <value>1</value> for each component indicating the position of the scroll bar</returns>
            <remarks>Return <value>0</value> for each direction the element cannot scroll</remarks>
        </member>
        <member name="M:Stride.UI.IScrollInfo.ScrollToNextLine(Stride.UI.Orientation)">
            <summary>
            Go to the next line in the given the direction.
            </summary>
            <param name="direction">The direction in which to scroll</param>
        </member>
        <member name="M:Stride.UI.IScrollInfo.ScrollToPreviousLine(Stride.UI.Orientation)">
            <summary>
            Go to the previous line in the given the direction.
            </summary>
            <param name="direction">The direction in which to scroll</param>
        </member>
        <member name="M:Stride.UI.IScrollInfo.ScrollToNextPage(Stride.UI.Orientation)">
            <summary>
            Go to the next page in the given the direction.
            </summary>
            <param name="direction">The direction in which to scroll</param>
        </member>
        <member name="M:Stride.UI.IScrollInfo.ScrollToPreviousPage(Stride.UI.Orientation)">
            <summary>
            Go to the previous page in the given the direction.
            </summary>
            <param name="direction">The direction in which to scroll</param>
        </member>
        <member name="M:Stride.UI.IScrollInfo.ScrollToBeginning(Stride.UI.Orientation)">
            <summary>
            Go to the beginning of the element in the given the direction.
            </summary>
            <param name="direction">The direction in which to scroll</param>
        </member>
        <member name="M:Stride.UI.IScrollInfo.ScrollToEnd(Stride.UI.Orientation)">
            <summary>
            Go to the end of the element in the given the direction.
            </summary>
            <param name="direction">The direction in which to scroll</param>
        </member>
        <member name="M:Stride.UI.IScrollInfo.ScrollOf(Stride.Core.Mathematics.Vector3)">
            <summary>
            Increase the amount of offset from the current scrolling position.
            </summary>
            <param name="offsets"></param>
        </member>
        <member name="T:Stride.UI.IUIElementChildren">
            <summary>
            Interfaces representing an <see cref="T:Stride.UI.UIElement"/> containing child elements.
            </summary>
        </member>
        <member name="P:Stride.UI.IUIElementChildren.Children">
            <summary>
            Gets the children of this element.
            </summary>
        </member>
        <member name="T:Stride.UI.IUIElementUpdate">
            <summary>
            Interface for the update of the UIElements.
            </summary>
        </member>
        <member name="M:Stride.UI.IUIElementUpdate.Update(Stride.Games.GameTime)">
            <summary>
            Update the time-based state of the <see cref="T:Stride.UI.UIElement"/>.
            </summary>
            <param name="time">The current time of the game</param>
        </member>
        <member name="M:Stride.UI.IUIElementUpdate.UpdateWorldMatrix(Stride.Core.Mathematics.Matrix@,System.Boolean)">
            <summary>
            Recursively update the world matrix of the <see cref="T:Stride.UI.UIElement"/>. 
            </summary>
            <param name="parentWorldMatrix">The world matrix of the parent.</param>
            <param name="parentWorldChanged">Boolean indicating if the world matrix provided by the parent changed</param>
        </member>
        <member name="M:Stride.UI.IUIElementUpdate.UpdateElementState(System.Int32)">
            <summary>
            Recursively update the <see cref="P:Stride.UI.UIElement.RenderOpacity"/>, <see cref="P:Stride.UI.UIElement.DepthBias"/> and <see cref="P:Stride.UI.UIElement.IsHierarchyEnabled"/> state fields of the <see cref="T:Stride.UI.UIElement"/>. 
            </summary>
            <param name="elementBias">The depth bias value for the current element computed by the parent</param>
        </member>
        <member name="T:Stride.UI.KeyEventArgs">
            <summary>
            The arguments associated to an key event.
            </summary>
        </member>
        <member name="P:Stride.UI.KeyEventArgs.Key">
            <summary>
            The key that triggered the event.
            </summary>
        </member>
        <member name="P:Stride.UI.KeyEventArgs.Input">
            <summary>
            A reference to the input system that can be used to check the status of the other keys.
            </summary>
        </member>
        <member name="T:Stride.UI.LayoutingContext">
            <summary>
            A context containing information for UI layouting.
            </summary>
        </member>
        <member name="P:Stride.UI.LayoutingContext.RealResolution">
            <summary>
            The resolution of the output target.
            </summary>
        </member>
        <member name="P:Stride.UI.LayoutingContext.VirtualResolution">
            <summary>
            The virtual resolution of the UI.
            </summary>
        </member>
        <member name="P:Stride.UI.LayoutingContext.RealVirtualResolutionRatio">
            <summary>
            The ratio between the real and virtual resolution (=real/virtual)
            </summary>
        </member>
        <member name="M:Stride.UI.LayoutingContext.Equals(Stride.UI.LayoutingContext)">
            <summary>
            Determine if two <see cref="T:Stride.UI.LayoutingContext"/> are equals.
            </summary>
            <param name="other">the other context</param>
            <returns><value>True</value> if the two contexts are equals</returns>
        </member>
        <member name="T:Stride.UI.MouseOverState">
            <summary>
            Describe the possible states of the mouse over an UI element.
            </summary>
        </member>
        <member name="F:Stride.UI.MouseOverState.MouseOverNone">
            <summary>
            The mouse is neither over the element nor one of its children.
            </summary>
            <userdoc>The mouse is neither over the element nor one of its children.</userdoc>
        </member>
        <member name="F:Stride.UI.MouseOverState.MouseOverChild">
            <summary>
            The mouse is over one of children of the element.
            </summary>
            <userdoc>The mouse is over one of children of the element.</userdoc>
        </member>
        <member name="F:Stride.UI.MouseOverState.MouseOverElement">
            <summary>
            The mouse is directly over the element.
            </summary>
            <userdoc>The mouse is directly over the element.</userdoc>
        </member>
        <member name="T:Stride.UI.NamespaceDoc">
            <summary>
            The <see cref="N:Stride.UI"/> namespace contains types to manage the UI.
            </summary>
        </member>
        <member name="T:Stride.UI.Orientation">
            <summary>
            Defines the different orientations that a control or layout can have.
            </summary>
        </member>
        <member name="F:Stride.UI.Orientation.Horizontal">
            <summary>
            Control or layout should be horizontally oriented.
            </summary>
            <userdoc> Control or layout should be horizontally oriented.</userdoc>
        </member>
        <member name="F:Stride.UI.Orientation.Vertical">
            <summary>
            Control or layout should be vertically oriented.
            </summary>
            <userdoc>Control or layout should be vertically oriented.</userdoc>
        </member>
        <member name="F:Stride.UI.Orientation.InDepth">
            <summary>
            Control or layout should be oriented along the depth axis.
            </summary>
            <userdoc>Control or layout should be oriented along the depth axis.</userdoc>
        </member>
        <member name="T:Stride.UI.Panels.Canvas">
            <summary> 
            Defines an area within which you can position and size child elements with respect to in the Canvas area size.
            </summary>
        </member>
        <member name="F:Stride.UI.Panels.Canvas.UseAbsolutePositionPropertyKey">
            <summary>
            The key to the UseAbsolutionPosition dependency property. This indicates whether to use the AbsolutePosition or the RelativePosition to place to element.
            </summary>
        </member>
        <member name="F:Stride.UI.Panels.Canvas.AbsolutePositionPropertyKey">
            <summary>
            The key to the AbsolutePosition dependency property. AbsolutePosition indicates where the <see cref="T:Stride.UI.UIElement"/> is pinned in the canvas.
            </summary>
        </member>
        <member name="F:Stride.UI.Panels.Canvas.RelativePositionPropertyKey">
            <summary>
            The key to the RelativePosition dependency property. RelativePosition indicates where the <see cref="T:Stride.UI.UIElement"/> is pinned in the canvas.
            </summary>
        </member>
        <member name="F:Stride.UI.Panels.Canvas.RelativeSizePropertyKey">
            <summary>
            The key to the RelativeSize dependency property. RelativeSize indicates the ratio of the size of the <see cref="T:Stride.UI.UIElement"/> with respect to the parent size.
            </summary>
            <remarks>Relative size must be strictly positive</remarks>
        </member>
        <member name="F:Stride.UI.Panels.Canvas.PinOriginPropertyKey">
            <summary>
            The key to the PinOrigin dependency property. The PinOrigin indicate which point of the <see cref="T:Stride.UI.UIElement"/> should be pinned to the canvas. 
            </summary>
            <remarks>
            Those values are normalized between 0 and 1. (0,0,0) represent the Left/Top/Back corner and (1,1,1) represent the Right/Bottom/Front corner. 
            <see cref="T:Stride.UI.UIElement"/>'s margins are included in the normalization. 
            Values beyond [0,1] are clamped.</remarks>
        </member>
        <member name="M:Stride.UI.Panels.Canvas.MeasureOverride(Stride.Core.Mathematics.Vector3)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.UI.Panels.Canvas.ArrangeOverride(Stride.Core.Mathematics.Vector3)">
            <inheritdoc/>
        </member>
        <member name="M:Stride.UI.Panels.Canvas.ComputeAbsolutePinPosition(Stride.UI.UIElement,Stride.Core.Mathematics.Vector3@)">
            <summary>
            Compute the child absolute position in the canvas according to parent size and the child layout properties.
            </summary>
            <param name="child">The child to place</param>
            <param name="parentSize">The parent size</param>
            <returns>The child absolute position offset</returns>
        </member>
        <member name="T:Stride.UI.Panels.Grid">
            <summary>
            Represents a grid control with adjustable columns, rows and layers.
            </summary>
        </member>
        <member name="F:Stride.UI.Panels.Grid.starDefinitionsCopy">
            <summary>
            A list use to make a copy of the star definition and then make a modification on this list.
            </summary>
        </member>
        <member name="F:Stride.UI.Panels.Grid.minSortedStarDefinitions">
            <summary>
            The list of the star definitions of an element sorted by increasing minimum size wrt their star value
            </summary>
            <remarks> This variable is declared as a field to avoid reallocations at each frame</remarks>
        </member>
        <member name="F:Stride.UI.Panels.Grid.maxSortedStarDefinitions">
            <summary>
            The list of the star definitions of an element sorted by increasing maximum size wrt their star value
            </summary>
            <remarks> This variable is declared as a field to avoid reallocations at each frame</remarks>
        </member>
        <member name="F:Stride.UI.Panels.Grid.maxBoundedStarDefinitions">
            <summary>
            The list of the star definitions that were bounded by their maximum values in the current iteration step.
            </summary>
            <remarks> This variable is declared as a field to avoid reallocations at each frame</remarks>
        </member>
        <member name="F:Stride.UI.Panels.Grid.minBoundedStarDefinitions">
            <summary>
            The list of the star definitions that were bounded by their minimum values in the current iteration step.
            </summary>
            <remarks> This variable is declared as a field to avoid reallocations at each frame</remarks>
        </member>
        <member name="F:Stride.UI.Panels.Grid.autoDefinedElements">
            <summary>
            The list of all elements contained in at least on auto-sized strip.
            </summary>
        </member>
        <member name="P:Stride.UI.Panels.Grid.ActualRowDefinitions">
            <summary>
            The actual definitions of the grid rows.
            </summary>
            <remarks>A grid always has at least one default row definition, even when <see cref="P:Stride.UI.Panels.Grid.RowDefinitions"/> is empty.</remarks>
        </member>
        <member name="P:Stride.UI.Panels.Grid.ActualColumnDefinitions">
            <summary>
            The actual definitions of the grid columns.
            </summary>
            <remarks>A grid always has at least one default row definition, even when <see cref="P:Stride.UI.Panels.Grid.ColumnDefinitions"/> is empty.</remarks>
        </member>
        <member name="P:Stride.UI.Panels.Grid.ActualLayerDefinitions">
            <summary>
            The actual definitions of the grid layers.
            </summary>
            <remarks>A grid always has at least one default row definition, even when <see cref="P:Stride.UI.Panels.Grid.LayerDefinitions"/> is empty.</remarks>
        </member>
        <member name="P:Stride.UI.Panels.Grid.RowDefinitions">
            <summary>
            The definitions of the grid rows.
            </summary>
            <userdoc>The definitions of the grid rows.</userdoc>
        </member>
        <member name="P:Stride.UI.Panels.Grid.ColumnDefinitions">
            <summary>
            The definitions of the grid columns.
            </summary>
            <userdoc>The definitions of the grid columns.</userdoc>
        </member>
        <member name="P:Stride.UI.Panels.Grid.LayerDefinitions">
            <summary>
            The definitions of the grid layers.
            </summary>
            <userdoc>The definitions of the grid layers.</userdoc>
        </member>
        <member name="M:Stride.UI.Panels.Grid.InitializeStripDefinitionActualSize(Stride.UI.StripDefinitionCollection)">
            <summary>
            Set the size of all the fix-sized strips, and initialize the size of auto/star-sized strips to their minimal size.
            </summary>
            <param name="definitions">The strip definitions</param>
        </member>
        <member name="T:Stride.UI.Panels.Grid.GridDimensionData">
            <summary>
            Helper container that stores all the strip data for a given dimension.
            </summary>
        </member>
        <member name="F:Stride.UI.Panels.Grid.GridDimensionData.StripIndexToNoStarElements">
            <summary>
            For index of strip, return the list of UIElement that are contained only in auto-sized strips
            </summary>
        </member>
        <member name="F:Stride.UI.Panels.Grid.GridDimensionData.ElementToStripDefinitions">
            <summary>
            For UIelement, returns the list of all the strip definition it is contained in ordered by increasing strip index
            </summary>
        </member>
        <member name="F:Stride.UI.Panels.Grid.GridDimensionData.PartialStarElementToStripDefinitions">
            <summary>
            For UIelement that is partially contained in star-sized strip, returns the list of all the strip definition it is contained in
            </summary>
        </member>
        <member name="F:Stride.UI.Panels.Grid.GridDimensionData.CachedStripIndexToStripPosition">
            <summary>
            For strip index, return the starting position of the strip.
            </summary>
        </member>
        <member name="F:Stride.UI.Panels.Grid.GridDimensionData.StarDefinitions">
            <summary>
            The list of the star definitions for the current dimension iteration (Ox, Oy or Oz).
            </summary>
        </member>
        <member name="T:Stride.UI.Panels.GridBase">
            <summary>
            Represents the base primitive for all the grid-like controls
            </summary>
        </member>
        <member name="F:Stride.UI.Panels.GridBase.RowPropertyKey">
            <summary>
            The key to the Row attached dependency property. This defines the row an item is inserted into.
            </summary>
            <remarks>The value is coerced in the range [0, <see cref="F:System.Int32.MaxValue"/>].</remarks>
            <remarks>First row has 0 as index</remarks>
        </member>
        <member name="F:Stride.UI.Panels.GridBase.RowSpanPropertyKey">
            <summary>
            The key to the RowSpan attached dependency property. This defines the number of rows an item takes.
            </summary>
            <remarks>The value is coerced in the range [1, <see cref="F:System.Int32.MaxValue"/>].</remarks>
        </member>
        <member name="F:Stride.UI.Panels.GridBase.ColumnPropertyKey">
            <summary>
            The key to the Column attached dependency property. This defines the column an item is inserted into.
            </summary>
            <remarks>The value is coerced in the range [0, <see cref="F:System.Int32.MaxValue"/>].</remarks>
            <remarks>First column has 0 as index</remarks>
        </member>
        <member name="F:Stride.UI.Panels.GridBase.ColumnSpanPropertyKey">
            <summary>
            The key to the ColumnSpan attached dependency property. This defines the number of columns an item takes.
            </summary>
            <remarks>The value is coerced in the range [1, <see cref="F:System.Int32.MaxValue"/>].</remarks>
        </member>
        <member name="F:Stride.UI.Panels.GridBase.LayerPropertyKey">
            <summary>
            The key to the Layer attached dependency property. This defines the layer an item is inserted into.
            </summary>
            <remarks>The value is coerced in the range [0, <see cref="F:System.Int32.MaxValue"/>].</remarks>
            <remarks>First layer has 0 as index</remarks>
        </member>
        <member name="F:Stride.UI.Panels.GridBase.LayerSpanPropertyKey">
            <summary>
            The key to the LayerSpan attached dependency property. This defines the number of layers an item takes.
            </summary>
            <remarks>The value is coerced in the range [1, <see cref="F:System.Int32.MaxValue"/>].</remarks>
        </member>
        <member name="M:Stride.UI.Panels.GridBase.CoerceGridPositionsValue(System.Int32@)">
            <summary>
            Coerce the value of <see cref="F:Stride.UI.Panels.GridBase.ColumnPropertyKey"/> <see cref="F:Stride.UI.Panels.GridBase.LayerPropertyKey"/>, or <see cref="F:Stride.UI.Panels.GridBase.RowPropertyKey"/> between 0 and <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Stride.UI.Panels.GridBase.CoerceSpanValue(System.Int32@)">
            <summary>
            Coerce the value of <see cref="F:Stride.UI.Panels.GridBase.ColumnSpanPropertyKey"/> <see cref="F:Stride.UI.Panels.GridBase.LayerSpanPropertyKey"/>, ir <see cref="F:Stride.UI.Panels.GridBase.RowSpanPropertyKey"/> between 1 and <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Stride.UI.Panels.GridBase.GetElementSpanValues(Stride.UI.UIElement)">
            <summary>
            Get an element span values as an <see cref="T:Stride.Core.Mathematics.Int3"/>.
            </summary>
            <param name="element">The element from which extract the span values</param>
            <returns>The span values of the element</returns>
        </member>
        <member name="M:Stride.UI.Panels.GridBase.GetElementGridPositions(Stride.UI.UIElement)">
            <summary>
            Get the positions of an element in the grid as an <see cref="T:Stride.Core.Mathematics.Int3"/>.
            </summary>
            <param name="element">The element from which extract the position values</param>
            <returns>The position of the element</returns>
        </member>
        <member name="T:Stride.UI.Panels.Panel">
            <summary>
            Provides a base class for all Panel elements. Use Panel elements to position and arrange child objects Stride applications.
            </summary>
        </member>
        <member name="F:Stride.UI.Panels.Panel.ZIndexPropertyKey">
            <summary>
            The key to the ZIndex dependency property.
            </summary>
        </member>
        <member name="F:Stride.UI.Panels.Panel.PanelArrangeMatrixPropertyKey">
            <summary>
            The key to the PanelArrangeMatrix dependency property. This property can be used by panels to arrange they children as they want.
            </summary>
        </member>
        <member name="T:Stride.UI.Panels.Panel.PanelChildrenComparer">
            <summary>
            A comparer sorting the <see cref="T:Stride.UI.Panels.Panel"/> children by increasing Z-Index.
            </summary>
        </member>
        <member name="F:Stride.UI.Panels.Panel.PanelChildrenSorter">
            <summary>
            A instance of <see cref="T:Stride.UI.Panels.Panel.PanelChildrenComparer"/> that can be used to sort panels children by increasing Z-Indices.
            </summary>
        </member>
        <member name="P:Stride.UI.Panels.Panel.Children">
            <summary>
            Gets the <see cref="T:Stride.UI.UIElementCollection"/> of child elements of this Panel.
            </summary>
        </member>
        <member name="M:Stride.UI.Panels.Panel.EnumerateChildren">
            <inheritdoc/>
        </member>
        <member name="M:Stride.UI.Panels.Panel.PanelZSortedChildInvalidator(System.Object,Stride.Core.PropertyKey{System.Int32},System.Int32)">
            <summary>
            Invalidation callback that sort panel children back after a modification of a child ZIndex.
            </summary>
            <param name="element">The element which had is ZIndex modified</param>
            <param name="key">The key of the modified property</param>
            <param name="oldValue">The value of the property before modification</param>
        </member>
        <member name="M:Stride.UI.Panels.Panel.#ctor">
            <summary>
            Creates a new empty Panel.
            </summary>
        </member>
        <member name="M:Stride.UI.Panels.Panel.LogicalChildrenChanged(System.Object,Stride.Core.Collections.TrackingCollectionChangedEventArgs)">
            <summary>
            Action to take when the Children collection is modified.
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="trackingCollectionChangedEventArgs">Argument indicating what changed in the collection</param>
        </member>
        <member name="M:Stride.UI.Panels.Panel.OnLogicalChildRemoved(Stride.UI.UIElement,System.Int32)">
            <summary>
            Action to perform when a logical child is removed.
            </summary>
            <param name="oldElement">The element that has been removed</param>
            <param name="index">The index of the child removed in the collection</param>
        </member>
        <member name="M:Stride.UI.Panels.Panel.OnLogicalChildAdded(Stride.UI.UIElement,System.Int32)">
            <summary>
            Action to perform when a logical child is added.
            </summary>
            <param name="newElement">The element that has been added</param>
            <param name="index">The index in the collection where the child has been added</param>
        </member>
        <member name="M:Stride.UI.Panels.Panel.ActivateAnchoring(Stride.UI.Orientation,System.Boolean)">
            <summary>
            Change the anchoring activation state of the given direction.
            </summary>
            <param name="direction">The direction in which activate or deactivate the anchoring</param>
            <param name="enable"><value>true</value> to enable anchoring, <value>false</value> to disable the anchoring</param>
        </member>
        <member name="T:Stride.UI.Panels.StackPanel">
            <summary>
            Arranges child elements into a single line that can be oriented horizontally or vertically.
            </summary>
        </member>
        <member name="F:Stride.UI.Panels.StackPanel.OrientationToMaximizeIndex1">
            <summary>
            Indicate the first index of Vector3 to use to maximize depending on the stack panel orientation.
            </summary>
        </member>
        <member name="F:Stride.UI.Panels.StackPanel.OrientationToMaximizeIndex2">
            <summary>
            Indicate the second index of Vector3 to use to accumulate depending on the stack panel orientation.
            </summary>
        </member>
        <member name="F:Stride.UI.Panels.StackPanel.ScrollingModeToInfiniteAxis">
            <summary>
            Indicate the axis along which the measure zone is infinite depending on the scroll owner scrolling mode.
            </summary>
        </member>
        <member name="F:Stride.UI.Panels.StackPanel.scrollPosition">
            <summary>
            The current scroll position of the top/left corner.
            </summary>
        </member>
        <member name="P:Stride.UI.Panels.StackPanel.ScrollPosition">
            <summary>
            The current scroll position of the left/top corner of the stack panel.
            </summary>
            <remarks>The stack panel scroll position is expressed element index units.
            For example: 0 represents the first element, 1 represents the second element, 1.33 represents a third of the second element, etc...</remarks>
        </member>
        <member name="F:Stride.UI.Panels.StackPanel.visibleChildren">
            <summary>
            The list of the visible children having the same order as in <see cref="P:Stride.UI.Panels.Panel.Children"/>. 
            </summary>
            <remarks>This list is valid on when <see cref="P:Stride.UI.Panels.StackPanel.ItemVirtualizationEnabled"/> is <value>true</value></remarks>
        </member>
        <member name="F:Stride.UI.Panels.StackPanel.indexElementMaxScrolling">
            <summary>
            The 0-based index of the last element that can be scrolled to. This value is valid only if <see cref="P:Stride.UI.Panels.StackPanel.ItemVirtualizationEnabled"/> is false.
            </summary>
        </member>
        <member name="P:Stride.UI.Panels.StackPanel.ItemVirtualizationEnabled">
            <summary>
            Gets or sets the value indicating if the <see cref="T:Stride.UI.Panels.StackPanel"/> children must be virtualized or not.
            When children virtualization is activated, hidden children's measurement, arrangement and draw are avoided.
            </summary>
            <userdoc>True if the Stack Panel's children must be virtualized, false otherwise.</userdoc>
        </member>
        <member name="P:Stride.UI.Panels.StackPanel.Orientation">
            <summary>
            Gets or sets a value that indicates the orientation by which child elements are stacked.
            </summary>
            <userdoc>The orientation by which children are stacked.</userdoc>
        </member>
        <member name="M:Stride.UI.Panels.StackPanel.EstimateExtentLength">
            <summary>
            Estimate the length of the extent from the visible elements.
            </summary>
            <remarks>This should be used only when item virtualization is enabled</remarks>
            <returns>The estimated size of the extent</returns>
        </member>
        <member name="M:Stride.UI.Panels.StackPanel.ScrolllToElement(System.Single)">
            <summary>
            Jump to the element having the provided index.
            </summary>
            <param name="elementIndex">The index (0-based) of the element in the stack panel to jump to</param>
        </member>
        <member name="M:Stride.UI.Panels.StackPanel.ScrollOf(System.Single)">
            <summary>
            Scroll of the provided offset from the current position in the direction given by the stack panel <see cref="P:Stride.UI.Panels.StackPanel.Orientation"/> .
            </summary>
            <param name="offsetToApply">The value to scroll off</param>
        </member>
        <member name="M:Stride.UI.Panels.StackPanel.ScrollToNextLine">
            <summary>
            Scroll to the next element of the <see cref="T:Stride.UI.Panels.StackPanel"/>.
            </summary>
            <remarks>Equivalent to <see cref="M:Stride.UI.Panels.StackPanel.ScrollToNextLine(Stride.UI.Orientation)"/> called with the value <see cref="P:Stride.UI.Panels.StackPanel.Orientation"/></remarks>
        </member>
        <member name="M:Stride.UI.Panels.StackPanel.ScrollToPreviousLine">
            <summary>
            Scroll to the previous element of the <see cref="T:Stride.UI.Panels.StackPanel"/>.
            </summary>
            <remarks>Equivalent to <see cref="M:Stride.UI.Panels.StackPanel.ScrollToPreviousLine(Stride.UI.Orientation)"/> called with the value <see cref="P:Stride.UI.Panels.StackPanel.Orientation"/></remarks>
        </member>
        <member name="M:Stride.UI.Panels.StackPanel.ScrollToNextPage">
            <summary>
            Scroll to the next page of elements of the <see cref="T:Stride.UI.Panels.StackPanel"/>.
            </summary>
            <remarks>Equivalent to <see cref="M:Stride.UI.Panels.StackPanel.ScrollToNextPage(Stride.UI.Orientation)"/> called with the value <see cref="P:Stride.UI.Panels.StackPanel.Orientation"/></remarks>
        </member>
        <member name="M:Stride.UI.Panels.StackPanel.ScrollToPreviousPage">
            <summary>
            Scroll to the previous page of elements of the <see cref="T:Stride.UI.Panels.StackPanel"/>.
            </summary>
            <remarks>Equivalent to <see cref="M:Stride.UI.Panels.StackPanel.ScrollToPreviousPage(Stride.UI.Orientation)"/> called with the value <see cref="P:Stride.UI.Panels.StackPanel.Orientation"/></remarks>
        </member>
        <member name="M:Stride.UI.Panels.StackPanel.ScrollToBeginning">
            <summary>
            Scroll to the beginning of the <see cref="T:Stride.UI.Panels.StackPanel"/>.
            </summary>
            <remarks>Equivalent to <see cref="M:Stride.UI.Panels.StackPanel.ScrollToBeginning(Stride.UI.Orientation)"/> called with the value <see cref="P:Stride.UI.Panels.StackPanel.Orientation"/></remarks>
        </member>
        <member name="M:Stride.UI.Panels.StackPanel.ScrollToEnd">
            <summary>
            Scroll to the end of the <see cref="T:Stride.UI.Panels.StackPanel"/>.
            </summary>
            <remarks>Equivalent to <see cref="M:Stride.UI.Panels.StackPanel.ScrollToEnd(Stride.UI.Orientation)"/> called with the value <see cref="P:Stride.UI.Panels.StackPanel.Orientation"/></remarks>
        </member>
        <member name="M:Stride.UI.Panels.StackPanel.AdjustOffsetsAndVisualChildren(System.Single)">
            <summary>
            This function adjust the current first element index, the current offsets and the current visual children collection to have a valid stack display.
            </summary>
        </member>
        <member name="T:Stride.UI.Panels.UniformGrid">
            <summary>
            Represents the grid where all the rows and columns have an uniform size.
            </summary>
        </member>
        <member name="F:Stride.UI.Panels.UniformGrid.finalForOneCell">
            <summary>
            The final size of one cell
            </summary>
        </member>
        <member name="P:Stride.UI.Panels.UniformGrid.Rows">
            <summary>
            Gets or sets the number of rows that the <see cref="T:Stride.UI.Panels.UniformGrid"/> has.
            </summary>
            <remarks>The value is coerced in the range [1, <see cref="F:System.Int32.MaxValue"/>].</remarks>
            <userdoc>The number of rows.</userdoc>
        </member>
        <member name="P:Stride.UI.Panels.UniformGrid.Columns">
            <summary>
            Gets or sets the number of columns that the <see cref="T:Stride.UI.Panels.UniformGrid"/> has.
            </summary>
            <remarks>The value is coerced in the range [1, <see cref="F:System.Int32.MaxValue"/>].</remarks>
            <userdoc>The number of columns.</userdoc>
        </member>
        <member name="P:Stride.UI.Panels.UniformGrid.Layers">
            <summary>
            Gets or sets the number of layers that the <see cref="T:Stride.UI.Panels.UniformGrid"/> has.
            </summary>
            <remarks>The value is coerced in the range [1, <see cref="F:System.Int32.MaxValue"/>].</remarks>
            <userdoc>The number of layers.</userdoc>
        </member>
        <member name="M:Stride.UI.Panels.UniformGrid.GetElementSpanValuesAsFloat(Stride.UI.UIElement)">
            <summary>
            Get an element span values as an <see cref="T:Stride.Core.Mathematics.Vector3"/>.
            </summary>
            <param name="element">The element from which extract the span values</param>
            <returns>The span values of the element</returns>
        </member>
        <member name="M:Stride.UI.Panels.UniformGrid.GetElementGridPositionsAsFloat(Stride.UI.UIElement)">
            <summary>
            Get the positions of an element in the grid as an <see cref="T:Stride.Core.Mathematics.Vector3"/>.
            </summary>
            <param name="element">The element from which extract the position values</param>
            <returns>The position of the element</returns>
        </member>
        <member name="T:Stride.UI.PropertyChangedArgs`1">
            <summary>
            An argument class containing information about a property that changed.
            </summary>
            <typeparam name="T">The type of the property that changed</typeparam>
        </member>
        <member name="T:Stride.UI.Renderers.DefaultBorderRenderer">
            <summary>
            The default renderer for <see cref="T:Stride.UI.Controls.Border"/>.
            </summary>
        </member>
        <member name="T:Stride.UI.Renderers.DefaultButtonRenderer">
            <summary>
            The default renderer for <see cref="T:Stride.UI.Controls.Button"/>.
            </summary>
        </member>
        <member name="T:Stride.UI.Renderers.DefaultContentDecoratorRenderer">
            <summary>
            The default renderer for <see cref="T:Stride.UI.Controls.ContentDecorator"/>.
            </summary>
        </member>
        <member name="T:Stride.UI.Renderers.DefaultEditTextRenderer">
            <summary>
            The default renderer for <see cref="T:Stride.UI.Controls.EditText"/>.
            </summary>
        </member>
        <member name="T:Stride.UI.Renderers.DefaultImageRenderer">
            <summary>
            The default renderer for <see cref="T:Stride.UI.Controls.ImageElement"/>.
            </summary>
        </member>
        <member name="T:Stride.UI.Renderers.DefaultModalElementRenderer">
            <summary>
            The default renderer for <see cref="T:Stride.UI.Controls.ModalElement"/>.
            </summary>
        </member>
        <member name="T:Stride.UI.Renderers.DefaultRenderersFactory">
            <summary>
            A factory that create the default renderer for each <see cref="T:Stride.UI.UIElement"/> type.
            </summary>
        </member>
        <member name="T:Stride.UI.Renderers.DefaultScrollBarRenderer">
            <summary>
            The default renderer for <see cref="T:Stride.UI.Controls.ScrollBar"/>.
            </summary>
        </member>
        <member name="T:Stride.UI.Renderers.DefaultScrollingTextRenderer">
            <summary>
            The default renderer for <see cref="T:Stride.UI.Controls.TextBlock"/>.
            </summary>
        </member>
        <member name="T:Stride.UI.Renderers.DefaultSliderRenderer">
            <summary>
            The default renderer for <see cref="T:Stride.UI.Controls.Slider"/>.
            </summary>
        </member>
        <member name="M:Stride.UI.Renderers.DefaultSliderRenderer.GetAdjustedWorldMatrix(Stride.Core.Mathematics.Matrix@,System.Boolean)">
            <summary>
            Get a copy of the world matrix and rotate it by 180 degree if necessary.
            </summary>
            <param name="worldMatrix"></param>
            <param name="shouldRotate"></param>
            <returns></returns>
        </member>
        <member name="T:Stride.UI.Renderers.DefaultTextBlockRenderer">
            <summary>
            The default renderer for <see cref="T:Stride.UI.Controls.TextBlock"/>.
            </summary>
        </member>
        <member name="T:Stride.UI.Renderers.DefaultToggleButtonRenderer">
            <summary>
            The default renderer for <see cref="T:Stride.UI.Controls.ToggleButton"/>.
            </summary>
        </member>
        <member name="T:Stride.UI.Renderers.ElementRenderer">
            <summary>
            Base class for UI element renderers
            </summary>
        </member>
        <member name="P:Stride.UI.Renderers.ElementRenderer.Content">
            <summary>
            A reference to the game asset manager.
            </summary>
        </member>
        <member name="P:Stride.UI.Renderers.ElementRenderer.GraphicsDevice">
            <summary>
            A reference to the game graphic device.
            </summary>
        </member>
        <member name="P:Stride.UI.Renderers.ElementRenderer.Batch">
            <summary>
            Gets a reference to the UI image drawer.
            </summary>
        </member>
        <member name="P:Stride.UI.Renderers.ElementRenderer.KeepStencilValueState">
            <summary>
            A depth stencil state that keep the stencil value in any cases.
            </summary>
        </member>
        <member name="P:Stride.UI.Renderers.ElementRenderer.IncreaseStencilValueState">
            <summary>
            A depth stencil state that increase the stencil value if the stencil test passes.
            </summary>
        </member>
        <member name="P:Stride.UI.Renderers.ElementRenderer.DecreaseStencilValueState">
            <summary>
            A depth stencil state that decrease the stencil value if the stencil test passes.
            </summary>
        </member>
        <member name="M:Stride.UI.Renderers.ElementRenderer.#ctor(Stride.Core.IServiceRegistry)">
            <summary>
            Create an instance of an UI element renderer.
            </summary>
            <param name="services">The list of registered services</param>
        </member>
        <member name="M:Stride.UI.Renderers.ElementRenderer.RenderColor(Stride.UI.UIElement,Stride.UI.Renderers.UIRenderingContext)">
            <summary>
            Render the provided <see cref="T:Stride.UI.UIElement"/>.
            </summary>
            <param name="element">The element to render.</param>
            <param name="context">The rendering context containing information how to draw the element.</param>
            <remarks>The render target, the depth stencil buffer and the depth stencil state are already correctly set when entering this function. 
            If the user wants to perform some intermediate rendering, it is his responsibility to bind them back correctly before the final rendering.</remarks>
        </member>
        <member name="M:Stride.UI.Renderers.ElementRenderer.RenderClipping(Stride.UI.UIElement,Stride.UI.Renderers.UIRenderingContext)">
            <summary>
            Render the clipping region of the provided <see cref="T:Stride.UI.UIElement"/>.
            </summary>
            <param name="element">The element to render.</param>
            <param name="context">The rendering context containing information how to draw the element.</param>
            <remarks>The render target, the depth stencil buffer and the depth stencil state are already correctly set when entering this function. 
            If the user wants to perform some intermediate rendering, it is his responsibility to bind them back correctly before the final rendering.</remarks>
        </member>
        <member name="T:Stride.UI.Renderers.IElementRendererFactory">
            <summary>
            A factory that can create <see cref="T:Stride.UI.Renderers.ElementRenderer"/>s.
            </summary>
        </member>
        <member name="M:Stride.UI.Renderers.IElementRendererFactory.TryCreateRenderer(Stride.UI.UIElement)">
            <summary>
            Try to create a renderer for the specified element.
            </summary>
            <param name="element">The element to render</param>
            <returns>An instance of renderer that can render it.</returns>
        </member>
        <member name="T:Stride.UI.Renderers.IRendererManager">
            <summary>
            The interface for managing UI element renderers.
            </summary>
        </member>
        <member name="M:Stride.UI.Renderers.IRendererManager.GetRenderer(Stride.UI.UIElement)">
            <summary>
            Get the renderer of the corresponding <see cref="T:Stride.UI.UIElement"/>.
            </summary>
            <param name="element">The element to render.</param>
            <returns>The renderer to render the element.</returns>
        </member>
        <member name="M:Stride.UI.Renderers.IRendererManager.RegisterRendererFactory(System.Type,Stride.UI.Renderers.IElementRendererFactory)">
            <summary>
            Associate a renderer factory to an UI element type.
            </summary>
            <param name="uiElementType">The type of ui elements to which associate the factory.</param>
            <param name="factory">The renderer factory to associate to the UI element type <paramref name="uiElementType"/></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="uiElementType"/> or <paramref name="factory"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="uiElementType"/> is not a descendant of <see cref="T:Stride.UI.UIElement"/>.</exception>
            <remarks>A factory associated to the type "MyType" is also be used to create renderer from descendant of "MyType" excepted if a factory is directly associated to the descendant type.</remarks>
        </member>
        <member name="M:Stride.UI.Renderers.IRendererManager.RegisterRenderer(Stride.UI.UIElement,Stride.UI.Renderers.ElementRenderer)">
            <summary>
            Associate a renderer to an <see cref="T:Stride.UI.UIElement"/>.
            </summary>
            <param name="element">The element to which associate the renderer</param>
            <param name="renderer">The renderer to associate to the UI element.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="element"/> or the <paramref name="renderer"/> is null.</exception>
        </member>
        <member name="T:Stride.UI.Renderers.RendererManager">
            <summary>
            The class in charge to manage the renderer of the different <see cref="T:Stride.UI.UIElement"/>s.
            Once registered into the manager, a renderer is owned by the manager.
            </summary>
        </member>
        <member name="M:Stride.UI.Renderers.RendererManager.#ctor(Stride.UI.Renderers.IElementRendererFactory)">
            <summary>
            Create a new instance of <see cref="T:Stride.UI.Renderers.RendererManager"/> with provided DefaultFactory
            </summary>
            <param name="defaultFactory"></param>
        </member>
        <member name="T:Stride.UI.Renderers.UIRenderingContext">
            <summary>
            The UI drawing context.
            It provides information about how to render <see cref="T:Stride.UI.UIElement"/>s for drawing.
            </summary>
        </member>
        <member name="P:Stride.UI.Renderers.UIRenderingContext.GraphicsContext">
            <summary>
            The active graphics context.
            </summary>
        </member>
        <member name="P:Stride.UI.Renderers.UIRenderingContext.Time">
            <summary>
            The current time.
            </summary>
        </member>
        <member name="P:Stride.UI.Renderers.UIRenderingContext.RenderTarget">
            <summary>
            The final render target to draw to.
            </summary>
        </member>
        <member name="P:Stride.UI.Renderers.UIRenderingContext.DepthStencilBuffer">
            <summary>
            The final depth stencil buffer to draw to.
            </summary>
        </member>
        <member name="P:Stride.UI.Renderers.UIRenderingContext.StencilTestReferenceValue">
            <summary>
            The current reference value for the stencil test.
            </summary>
        </member>
        <member name="P:Stride.UI.Renderers.UIRenderingContext.DepthBias">
            <summary>
            The value of the depth bias to use for draw call.
            </summary>
        </member>
        <member name="P:Stride.UI.Renderers.UIRenderingContext.ShouldSnapText">
            <summary>
            Gets or sets the value indicating if UI text should be snapped.
            </summary>
        </member>
        <member name="F:Stride.UI.Renderers.UIRenderingContext.Resolution">
            <summary>
            Gets the  virtual resolution of the UI.
            </summary>
        </member>
        <member name="F:Stride.UI.Renderers.UIRenderingContext.ViewProjectionMatrix">
            <summary>
            Gets the view projection matrix of the UI.
            </summary>
        </member>
        <member name="T:Stride.UI.ScrollingMode">
            <summary>
            The different ways of scrolling in a <see cref="T:Stride.UI.Controls.ScrollViewer"/>.
            </summary>
        </member>
        <member name="F:Stride.UI.ScrollingMode.None">
            <summary>
            No scrolling is allowed.
            </summary>
            <userdoc>No scrolling is allowed.</userdoc>
        </member>
        <member name="F:Stride.UI.ScrollingMode.Horizontal">
            <summary>
            Only horizontal scrolling is allowed.
            </summary>
            <userdoc>Only horizontal scrolling is allowed.</userdoc>
        </member>
        <member name="F:Stride.UI.ScrollingMode.Vertical">
            <summary>
            Only vertical scrolling is allowed.
            </summary>
            <userdoc>Only vertical scrolling is allowed.</userdoc>
        </member>
        <member name="F:Stride.UI.ScrollingMode.InDepth">
            <summary>
            Only in depth (back/front) scrolling is allowed.
            </summary>
            <userdoc>Only in depth (back/front) scrolling is allowed.</userdoc>
        </member>
        <member name="F:Stride.UI.ScrollingMode.HorizontalVertical">
            <summary>
            Both horizontal and vertical scrolling are allowed.
            </summary>
            <userdoc>Both horizontal and vertical scrolling are allowed.</userdoc>
        </member>
        <member name="F:Stride.UI.ScrollingMode.VerticalInDepth">
            <summary>
            Both vertical and in-depth scrolling are allowed.
            </summary>
            <userdoc>Both vertical and in-depth scrolling are allowed.</userdoc>
        </member>
        <member name="F:Stride.UI.ScrollingMode.InDepthHorizontal">
            <summary>
            Both in-depth and horizontal scrolling are allowed.
            </summary>
            <userdoc>Both in-depth and horizontal scrolling are allowed.</userdoc>
        </member>
        <member name="T:Stride.UI.StretchDirection">
            <summary>
            Describes how scaling applies to content and restricts scaling to named axis types.
            </summary>
        </member>
        <member name="F:Stride.UI.StretchDirection.Both">
            <summary>
            The content stretches to fit the parent according to the Stretch mode.
            </summary>
            <userdoc>The content stretches to fit the parent according to the Stretch mode.</userdoc>
        </member>
        <member name="F:Stride.UI.StretchDirection.DownOnly">
            <summary>
            The content scales downward only when it is larger than the parent. If the content is smaller, no scaling upward is performed.
            </summary>
            <userdoc>The content scales downward only when it is larger than the parent. If the content is smaller, no scaling upward is performed.</userdoc>
        </member>
        <member name="F:Stride.UI.StretchDirection.UpOnly">
            <summary>
            The content scales upward only when it is smaller than the parent. If the content is larger, no scaling downward is performed.
            </summary>
            <userdoc>The content scales upward only when it is smaller than the parent. If the content is larger, no scaling downward is performed.</userdoc>
        </member>
        <member name="T:Stride.UI.StretchType">
            <summary>
            Describes how content is resized to fill its allocated space.
            </summary>
        </member>
        <member name="F:Stride.UI.StretchType.None">
            <summary>
            The content preserves its original size.
            </summary>
            <userdoc>The content preserves its original size.</userdoc>
        </member>
        <member name="F:Stride.UI.StretchType.Uniform">
            <summary>
            The content is resized to fit in the destination dimensions while it preserves its native aspect ratio.
            </summary>
            <userdoc>The content is resized to fit in the destination dimensions while it preserves its native aspect ratio.</userdoc>
        </member>
        <member name="F:Stride.UI.StretchType.UniformToFill">
            <summary>
            The content is resized to fill the destination dimensions while it preserves its native aspect ratio. 
            If the aspect ratio of the destination rectangle differs from the source, the source content is clipped to fit in the destination dimensions.
            </summary>
            <userdoc>The content is resized to fill the destination dimensions while it preserves its native aspect ratio.
            If the aspect ratio of the destination rectangle differs from the source, the source content is clipped to fit in the destination dimensions.</userdoc>
        </member>
        <member name="F:Stride.UI.StretchType.FillOnStretch">
            <summary>
            The content is resized to fill the destination when stretched by its parent. It keeps its ratio otherwise.
            </summary>
            <userdoc>The content is resized to fill the destination when stretched by its parent. It keeps its ratio otherwise.</userdoc>
        </member>
        <member name="F:Stride.UI.StretchType.Fill">
            <summary>
            The content is always resized to fill the destination dimensions. The aspect ratio is not preserved.
            </summary>
            <userdoc>The content is always resized to fill the destination dimensions. The aspect ratio is not preserved.</userdoc>
        </member>
        <member name="T:Stride.UI.StripDefinition">
            <summary>
            Represents the definition of a grid strip.
            </summary>
        </member>
        <member name="P:Stride.UI.StripDefinition.ActualSize">
            <summary>
            The actual size of the strip in virtual pixels.
            </summary>
        </member>
        <member name="M:Stride.UI.StripDefinition.#ctor">
            <summary>
            Creates a 1-Star sized strip definition.
            </summary>
        </member>
        <member name="M:Stride.UI.StripDefinition.#ctor(Stride.UI.StripType,System.Single)">
            <summary>
            Creates a <see cref="T:Stride.UI.StripDefinition"/> with the provided size and type.
            </summary>
            <param name="type">The type of the strip to create</param>
            <param name="sizeValue">The value of the strip to create</param>
        </member>
        <member name="P:Stride.UI.StripDefinition.MaximumSize">
            <summary>
            The maximum size of the strip in virtual pixels.
            </summary>
            <remarks>The value is coerced in the range [<see cref="P:Stride.UI.StripDefinition.MinimumSize"/>, <see cref="F:System.Single.PositiveInfinity"/>].</remarks>
            <userdoc>The maximum size of the strip in virtual pixels.</userdoc>
        </member>
        <member name="P:Stride.UI.StripDefinition.MinimumSize">
            <summary>
            The minimum size of the strip in virtual pixels.
            </summary>
            <remarks>The value is coerced in the range [0, <see cref="F:System.Single.MaxValue"/>].</remarks>
            <userdoc>The minimum size of the strip in virtual pixels.</userdoc>
        </member>
        <member name="P:Stride.UI.StripDefinition.Type">
            <summary>
            Gets or sets the type of the strip.
            </summary>
            <userdoc>The type of the strip.</userdoc>
        </member>
        <member name="P:Stride.UI.StripDefinition.SizeValue">
            <summary>
            Gets or sets the size value of the strip.
            Note that the value is interpreted differently depending on the strip <see cref="P:Stride.UI.StripDefinition.Type"/>.
            </summary>
            <remarks>The value is coerced in the range [0, <see cref="F:System.Single.MaxValue"/>].</remarks>
            <userdoc>The size value of the strip.</userdoc>
        </member>
        <member name="M:Stride.UI.StripDefinition.ClampSizeByMinimumMaximum(System.Single)">
            <summary>
            Clamp the provided size by the definition's minimum and maximum values.
            </summary>
            <param name="desiredSize">The size to clamp</param>
            <returns>The size clamped by the minimum and maximum values of the strip definition</returns>
        </member>
        <member name="T:Stride.UI.StripDefinitionCollection">
            <summary>
            A collection of strip definitions
            </summary>
        </member>
        <member name="T:Stride.UI.StripType">
            <summary>
            The different types of strip possible of a grid.
            </summary>
        </member>
        <member name="F:Stride.UI.StripType.Fixed">
            <summary>
            A strip having fixed size expressed in number of virtual pixels.
            </summary>
            <userdoc>A strip having fixed size expressed in number of virtual pixels.</userdoc>
        </member>
        <member name="F:Stride.UI.StripType.Auto">
            <summary>
            A strip that occupies exactly the size required by its content. 
            </summary>
            <userdoc>A strip that occupies exactly the size required by its content. </userdoc>
        </member>
        <member name="F:Stride.UI.StripType.Star">
            <summary>
            A strip that occupies the maximum available size, dispatched among the other stared-size columns.
            </summary>
            <userdoc>A strip that occupies the maximum available size, dispatched among the other stared-size columns.</userdoc>
        </member>
        <member name="T:Stride.UI.TextEventArgs">
            <summary>
            The arguments associated with a <see cref="T:Stride.Input.TextInputEvent"/>
            </summary>
        </member>
        <member name="P:Stride.UI.TextEventArgs.Text">
            <summary>
            The text that was entered
            </summary>
        </member>
        <member name="P:Stride.UI.TextEventArgs.Type">
            <summary>
            The type of text input event
            </summary>
        </member>
        <member name="P:Stride.UI.TextEventArgs.CompositionStart">
            <summary>
            Start of the current composition being edited
            </summary>
        </member>
        <member name="P:Stride.UI.TextEventArgs.CompositionLength">
            <summary>
            Length of the current part of the composition being edited
            </summary>
        </member>
        <member name="T:Stride.UI.Thickness">
            <summary>
            Describes the thickness of a frame around a cuboid. Six float values describe the Left, Top, Right, Bottom, Front, and Back sides of the cuboid, respectively.
            </summary>
        </member>
        <member name="M:Stride.UI.Thickness.UniformRectangle(System.Single)">
            <summary>
            Initializes a new instance of the Thickness structure that has the specified uniform length on the Left, Right, Top, Bottom side and 0 for the Front and Back side.
            </summary>
            <param name="thickness">The uniform length applied to all four sides of the bounding rectangle.</param>
            <returns>The created thickness class</returns>
        </member>
        <member name="M:Stride.UI.Thickness.UniformCuboid(System.Single)">
            <summary>
            Initializes a new instance of the Thickness structure that has the specified uniform length on the Left, Right, Top, Bottom, Front, and Back side.
            </summary>
            <param name="thickness">The uniform length applied to all six sides of the bounding cuboid.</param>
            <returns>The created thickness class</returns>
        </member>
        <member name="M:Stride.UI.Thickness.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the Thickness structure that has specific lengths applied to each side of the rectangle.
            </summary>
            <param name="bottom">The thickness for the lower side of the rectangle.</param>
            <param name="left">The thickness for the left side of the rectangle.</param>
            <param name="right">The thickness for the right side of the rectangle</param>
            <param name="top">The thickness for the upper side of the rectangle.</param>
        </member>
        <member name="M:Stride.UI.Thickness.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the Thickness structure that has specific lengths applied to each side of the cuboid.
            </summary>
            <param name="bottom">The thickness for the lower side of the cuboid.</param>
            <param name="left">The thickness for the left side of the cuboid.</param>
            <param name="right">The thickness for the right side of the cuboid</param>
            <param name="top">The thickness for the upper side of the cuboid.</param>
            <param name="front">The thickness for the front side of the cuboid.</param>
            <param name="back">The thickness for the Back side of the cuboid.</param>
        </member>
        <member name="F:Stride.UI.Thickness.Back">
            <summary>
            The Back side of the bounding cuboid.
            </summary>
            <userdoc>The Back side of the bounding cuboid.</userdoc>
        </member>
        <member name="F:Stride.UI.Thickness.Bottom">
            <summary>
            The bottom side of the bounding rectangle or cuboid.
            </summary>
            <userdoc>The bottom side of the bounding rectangle or cuboid.</userdoc>
        </member>
        <member name="F:Stride.UI.Thickness.Front">
            <summary>
            The front side of the bounding cuboid.
            </summary>
            <userdoc>The front side of the bounding cuboid.</userdoc>
        </member>
        <member name="F:Stride.UI.Thickness.Left">
            <summary>
            The left side of the bounding rectangle or cuboid.
            </summary>
            <userdoc>The left side of the bounding rectangle or cuboid.</userdoc>
        </member>
        <member name="F:Stride.UI.Thickness.Right">
            <summary>
            The right side of the bounding rectangle or cuboid.
            </summary>
            <userdoc>The right side of the bounding rectangle or cuboid.</userdoc>
        </member>
        <member name="F:Stride.UI.Thickness.Top">
            <summary>
            The upper side of the bounding rectangle or cuboid.
            </summary>
            <userdoc>The upper side of the bounding rectangle or cuboid.</userdoc>
        </member>
        <member name="P:Stride.UI.Thickness.Item(System.Int32)">
            <summary>
            Gets the component at the specified index.
            </summary>
            <param name="index">The index of the component to access. Use 0 for the Left component, 1 for the Top component, 
            2 for the Front component, 3 for the Right component, 4 for the Bottom component, 5 for the Back component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 5].</exception>
        </member>
        <member name="M:Stride.UI.Thickness.op_UnaryNegation(Stride.UI.Thickness)">
            <summary>
            Reverses the direction of a given Thickness.
            </summary>
            <param name="value">The Thickness to negate.</param>
            <returns>A Thickness with the opposite direction.</returns>
        </member>
        <member name="M:Stride.UI.Thickness.op_Subtraction(Stride.UI.Thickness,Stride.UI.Thickness)">
            <summary>
            Substracts one Thickness with another.
            </summary>
            <param name="value1">The thickness to subtract from.</param>
            <param name="value2">The thickness to substract.</param>
            <returns>A Thickness representing the difference between the two Thickness.</returns>
        </member>
        <member name="M:Stride.UI.Thickness.op_Addition(Stride.UI.Thickness,Stride.UI.Thickness)">
            <summary>
            Adds two Thickness together.
            </summary>
            <param name="value1">The first thickness to add.</param>
            <param name="value2">The second thickness to add.</param>
            <returns>A Thickness representing the sum of the two Thickness.</returns>
        </member>
        <member name="M:Stride.UI.Thickness.op_Division(Stride.UI.Thickness,System.Single)">
            <summary>
            Divides a Thickness by a float.
            </summary>
            <param name="value1">The thickness.</param>
            <param name="value2">The float value to divide by.</param>
            <returns>The divided thickness</returns>
        </member>
        <member name="M:Stride.UI.Thickness.op_Multiply(Stride.UI.Thickness,System.Single)">
            <summary>
            Multiplies a Thickness by a float.
            </summary>
            <param name="value1">The thickness.</param>
            <param name="value2">The float value to multiply with.</param>
            <returns>The multiplied thickness</returns>
        </member>
        <member name="T:Stride.UI.ToggleState">
            <summary>
            Describe the different possible states of an <see cref="T:Stride.UI.Controls.ToggleButton"/>.
            </summary>
        </member>
        <member name="F:Stride.UI.ToggleState.Checked">
            <summary>
            The toggle button is checked.
            </summary>
            <userdoc>The toggle button is checked.</userdoc>
        </member>
        <member name="F:Stride.UI.ToggleState.Indeterminate">
            <summary>
            The state of the toggle button is undetermined
            </summary>
            <userdoc>The state of the toggle button is undetermined</userdoc>
        </member>
        <member name="F:Stride.UI.ToggleState.UnChecked">
            <summary>
            The toggle button is unchecked.
            </summary>
            <userdoc>The toggle button is unchecked.</userdoc>
        </member>
        <member name="T:Stride.UI.TouchAction">
            <summary>
            Describes the action of a specific touch point.
            </summary>
        </member>
        <member name="F:Stride.UI.TouchAction.Down">
            <summary>
            The act of putting a finger onto the screen.
            </summary>
            <userdoc>The act of putting a finger onto the screen.</userdoc>
        </member>
        <member name="F:Stride.UI.TouchAction.Move">
            <summary>
            The act of dragging a finger across the screen.
            </summary>
            <userdoc>The act of dragging a finger across the screen.</userdoc>
        </member>
        <member name="F:Stride.UI.TouchAction.Up">
            <summary>
            The act of lifting a finger off of the screen.
            </summary>
            <userdoc>The act of lifting a finger off of the screen.</userdoc>
        </member>
        <member name="T:Stride.UI.TouchEventArgs">
            <summary>
            Provides data for touch input events.
            </summary>
        </member>
        <member name="P:Stride.UI.TouchEventArgs.Timestamp">
            <summary>
            Gets the time when this event occurred.
            </summary>
        </member>
        <member name="P:Stride.UI.TouchEventArgs.Action">
            <summary>
            Gets the action that occurred.
            </summary>
        </member>
        <member name="P:Stride.UI.TouchEventArgs.ScreenPosition">
            <summary>
            Gets the position of the touch on the screen. Position is normalized between [0,1]. (0,0) is the left top corner, (1,1) is the right bottom corner.
            </summary>
        </member>
        <member name="P:Stride.UI.TouchEventArgs.ScreenTranslation">
            <summary>
            Gets the translation of the touch on the screen since last triggered event (in normalized units). (1,1) represent a translation of the top left corner to the bottom right corner.
            </summary>
        </member>
        <member name="P:Stride.UI.TouchEventArgs.WorldPosition">
            <summary>
            Gets the position of the touch in the UI virtual world space.
            </summary>
        </member>
        <member name="P:Stride.UI.TouchEventArgs.WorldTranslation">
            <summary>
            Gets the translation of the touch in the UI virtual world space.
            </summary>
        </member>
        <member name="T:Stride.UI.UIElement">
            <summary>
            Provides a base class for all the User Interface elements in Stride applications.
            </summary>
        </member>
        <member name="M:Stride.UI.UIElement.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Stride.UI.UIElement"/>.
            </summary>
        </member>
        <member name="P:Stride.UI.UIElement.FocusedElement">
            <summary>
            The <see cref="T:Stride.UI.UIElement"/> that currently has the focus.
            </summary>
        </member>
        <member name="P:Stride.UI.UIElement.Id">
            <summary>
            A unique ID defining the UI element.
            </summary>
            <userdoc>A unique ID defining the UI element.</userdoc>
        </member>
        <member name="P:Stride.UI.UIElement.DependencyProperties">
            <summary>
            The list of the dependency properties attached to the UI element.
            </summary>
            <userdoc>The list of the dependency properties attached to the UI element.</userdoc>
        </member>
        <member name="P:Stride.UI.UIElement.LocalMatrix">
            <summary>
            Gets or sets the LocalMatrix of this element.
            </summary>
            <remarks>The local transform is not taken is account during the layering. The transformation is purely for rendering effects.</remarks>
            <userdoc>Local matrix of this element.</userdoc>
        </member>
        <member name="P:Stride.UI.UIElement.BackgroundColor">
            <summary>
            The background color of the element.
            </summary>
            <userdoc>Color used for the background surface of this element.</userdoc>
        </member>
        <member name="P:Stride.UI.UIElement.Opacity">
            <summary>
            Gets or sets the opacity factor applied to the entire UIElement when it is rendered in the user interface (UI).
            </summary>
            <remarks>The value is coerced in the range [0, 1].</remarks>
            <userdoc>Opacity factor applied to this element when rendered in the user interface (UI).</userdoc>
        </member>
        <member name="P:Stride.UI.UIElement.Visibility">
            <summary>
            Gets or sets the user interface (UI) visibility of this element.
            </summary>
            <userdoc>Visibility of this element.</userdoc>
        </member>
        <member name="P:Stride.UI.UIElement.ClipToBounds">
            <summary>
            Gets or sets a value indicating whether to clip the content of this element (or content coming from the child elements of this element)
            to fit into the size of the containing element.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The value has to be positive and finite.</exception>
            <userdoc>Indicates whether to clip the content of this element (or content coming from the child elements of this element).</userdoc>
        </member>
        <member name="P:Stride.UI.UIElement.DrawLayerNumber">
            <summary>
            The number of layers used to draw this element.
            This value has to be modified by the user when he redefines the default element renderer,
            so that <see cref="P:Stride.UI.UIElement.DepthBias"/> values of the relatives keeps enough spaces to draw the different layers.
            </summary>
            <userdoc>The number of layers used to draw this element.</userdoc>
        </member>
        <member name="P:Stride.UI.UIElement.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this element is enabled in the user interface (UI).
            </summary>
            <userdoc>True if this element is enabled, False otherwise.</userdoc>
        </member>
        <member name="P:Stride.UI.UIElement.CanBeHitByUser">
            <summary>
            Indicate if the UIElement can be hit by the user.
            If this property is true, the UI system performs hit test on the UIElement.
            </summary>
            <userdoc>True if the UI system should perform hit test on this element, False otherwise.</userdoc>
        </member>
        <member name="P:Stride.UI.UIElement.Width">
            <summary>
            Gets or sets the user suggested width of this element.
            </summary>
            <remarks>The value is coerced in the range [0, <see cref="F:System.Single.MaxValue"/>].</remarks>
            <userdoc>Width of this element. If NaN, the default width will be used instead.</userdoc>
        </member>
        <member name="P:Stride.UI.UIElement.Height">
            <summary>
            Gets or sets the user suggested height of this element.
            </summary>
            <remarks>The value is coerced in the range [0, <see cref="F:System.Single.MaxValue"/>].</remarks>
            <userdoc>Height of this element. If NaN, the default height will be used instead.</userdoc>
        </member>
        <member name="P:Stride.UI.UIElement.Depth">
            <summary>
            Gets or sets the user suggested depth of this element.
            </summary>
            <remarks>The value is coerced in the range [0, <see cref="F:System.Single.MaxValue"/>].</remarks>
            <userdoc>Depth of this element. If NaN, the default depth will be used instead.</userdoc>
        </member>
        <member name="P:Stride.UI.UIElement.Size">
            <summary>
            Gets or sets the size of the element. Same as setting separately <see cref="P:Stride.UI.UIElement.Width"/>, <see cref="P:Stride.UI.UIElement.Height"/>, and <see cref="P:Stride.UI.UIElement.Depth"/>
            </summary>
        </member>
        <member name="P:Stride.UI.UIElement.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of this element.
            </summary>
            <userdoc>Horizontal alignment of this element.</userdoc>
        </member>
        <member name="P:Stride.UI.UIElement.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of this element.
            </summary>
            <userdoc>Vertical alignment of this element.</userdoc>
        </member>
        <member name="P:Stride.UI.UIElement.DepthAlignment">
            <summary>
            Gets or sets the depth alignment of this element.
            </summary>
            <userdoc>Depth alignment of this element.</userdoc>
        </member>
        <member name="P:Stride.UI.UIElement.Margin">
            <summary>
            Gets or sets the margins of this element.
            </summary>
            <userdoc>Layout margin of this element.</userdoc>
        </member>
        <member name="P:Stride.UI.UIElement.MinimumWidth">
            <summary>
            Gets or sets the minimum width of this element.
            </summary>
            <remarks>The value is coerced in the range [0, <see cref="F:System.Single.MaxValue"/>].</remarks>
            <userdoc>Minimum width of this element.</userdoc>
        </member>
        <member name="P:Stride.UI.UIElement.MinimumHeight">
            <summary>
            Gets or sets the minimum height of this element.
            </summary>
            <remarks>The value is coerced in the range [0, <see cref="F:System.Single.MaxValue"/>].</remarks>
            <userdoc>Minimum height of this element.</userdoc>
        </member>
        <member name="P:Stride.UI.UIElement.MinimumDepth">
            <summary>
            Gets or sets the minimum height of this element.
            </summary>
            <remarks>The value is coerced in the range [0, <see cref="F:System.Single.MaxValue"/>].</remarks>
            <userdoc>Minimum depth of this element.</userdoc>
        </member>
        <member name="P:Stride.UI.UIElement.MaximumWidth">
            <summary>
            Gets or sets the maximum width of this element.
            </summary>
            <remarks>The value is coerced in the range [0, <see cref="F:System.Single.PositiveInfinity"/>].</remarks>
            <userdoc>Maximum width of this element.</userdoc>
        </member>
        <member name="P:Stride.UI.UIElement.MaximumHeight">
            <summary>
            Gets or sets the maximum height of this element.
            </summary>
            <remarks>The value is coerced in the range [0, <see cref="F:System.Single.PositiveInfinity"/>].</remarks>
            <userdoc>Maximum height of this element.</userdoc>
        </member>
        <member name="P:Stride.UI.UIElement.MaximumDepth">
            <summary>
            Gets or sets the maximum height of this element.
            </summary>
            <remarks>The value is coerced in the range [0, <see cref="F:System.Single.PositiveInfinity"/>].</remarks>
            <userdoc>Maximum depth of this element.</userdoc>
        </member>
        <member name="P:Stride.UI.UIElement.DefaultWidth">
            <summary>
            Gets or sets the default width of this element.
            </summary>
            <remarks>The value is coerced in the range [0, <see cref="F:System.Single.MaxValue"/>].</remarks>
            <userdoc>Default width of this element.</userdoc>
        </member>
        <member name="P:Stride.UI.UIElement.DefaultHeight">
            <summary>
            Gets or sets the default height of this element.
            </summary>
            <remarks>The value is coerced in the range [0, <see cref="F:System.Single.MaxValue"/>].</remarks>
            <userdoc>Default height of this element.</userdoc>
        </member>
        <member name="P:Stride.UI.UIElement.DefaultDepth">
            <summary>
            Gets or sets the default width of this element.
            </summary>
            <remarks>The value is coerced in the range [0, <see cref="F:System.Single.MaxValue"/>].</remarks>
            <userdoc>Default depth of this element.</userdoc>
        </member>
        <member name="P:Stride.UI.UIElement.Name">
            <summary>
            Gets or sets the name of this element.
            </summary>
            <userdoc>Name of this element.</userdoc>
        </member>
        <member name="P:Stride.UI.UIElement.DesiredSize">
            <summary>
            Gets the size that this element computed during the measure pass of the layout process.
            </summary>
            <remarks>This value does not contain possible <see cref="P:Stride.UI.UIElement.Margin"/></remarks>
        </member>
        <member name="P:Stride.UI.UIElement.DesiredSizeWithMargins">
            <summary>
            Gets the size that this element computed during the measure pass of the layout process.
            </summary>
            <remarks>This value contains possible <see cref="P:Stride.UI.UIElement.Margin"/></remarks>
        </member>
        <member name="P:Stride.UI.UIElement.IsArrangeValid">
            <summary>
            Gets a value indicating whether the computed size and position of child elements in this element's layout are valid.
            </summary>
        </member>
        <member name="P:Stride.UI.UIElement.IsMeasureValid">
            <summary>
            Gets a value indicating whether the current size returned by layout measure is valid.
            </summary>
        </member>
        <member name="P:Stride.UI.UIElement.WorldMatrix">
            <summary>
            The world matrix of the UIElement.
            The origin of the element is the center of the object's bounding box defined by <see cref="P:Stride.UI.UIElement.RenderSize"/>.
            </summary>
        </member>
        <member name="P:Stride.UI.UIElement.DepthBias">
            <summary>
            The final depth bias value of the element resulting from the parent/children z order update.
            </summary>
        </member>
        <member name="P:Stride.UI.UIElement.MaxChildrenDepthBias">
            <summary>
            The maximum depth bias value among the children of the element resulting from the parent/children z order update.
            </summary>
        </member>
        <member name="P:Stride.UI.UIElement.LayoutingContext">
            <summary>
            The ratio between the element real size on the screen and the element virtual size.
            </summary>
        </member>
        <member name="P:Stride.UI.UIElement.VisualChildrenCollection">
            <summary>
            The visual children of this element.
            </summary>
            <remarks>If the class is inherited it is the responsibility of the descendant class to correctly update this collection</remarks>
        </member>
        <member name="M:Stride.UI.UIElement.InvalidateArrange">
            <summary>
            Invalidates the arrange state (layout) for the element.
            </summary>
        </member>
        <member name="M:Stride.UI.UIElement.InvalidateMeasure">
            <summary>
            Invalidates the measurement state (layout) for the element.
            </summary>
        </member>
        <member name="M:Stride.UI.UIElement.OnNameChanged">
            <summary>
            This method is call when the name of the UIElement changes.
            This method can be overridden in inherited classes to perform class specific actions on <see cref="P:Stride.UI.UIElement.Name"/> changes.
            </summary>
        </member>
        <member name="P:Stride.UI.UIElement.IsHierarchyEnabled">
            <summary>
            Gets the value indicating whether this element and all its upper hierarchy are enabled or not.
            </summary>
        </member>
        <member name="P:Stride.UI.UIElement.IsVisible">
            <summary>
            Gets a value indicating whether this element is visible in the user interface (UI).
            </summary>
        </member>
        <member name="P:Stride.UI.UIElement.IsCollapsed">
            <summary>
            Gets a value indicating whether this element takes some place in the user interface.
            </summary>
        </member>
        <member name="M:Stride.UI.UIElement.SetSize(System.Int32,System.Single)">
            <summary>
            Set one component of the size of the element.
            </summary>
            <param name="dimensionIndex">Index indicating which component to set</param>
            <param name="value">The value to give to the size</param>
        </member>
        <member name="P:Stride.UI.UIElement.Parent">
            <summary>
            Gets the logical parent of this element.
            </summary>
        </member>
        <member name="P:Stride.UI.UIElement.VisualParent">
            <summary>
            Gets the visual parent of this element.
            </summary>
        </member>
        <member name="P:Stride.UI.UIElement.VisualChildren">
            <summary>
            Get a enumerable to the visual children of the <see cref="T:Stride.UI.UIElement"/>.
            </summary>
            <remarks>Inherited classes are in charge of overriding this method to return their children.</remarks>
        </member>
        <member name="P:Stride.UI.UIElement.HitableChildren">
            <summary>
            The list of the children of the element that can be hit by the user.
            </summary>
        </member>
        <member name="P:Stride.UI.UIElement.RenderOpacity">
            <summary>
            The opacity used to render element.
            </summary>
        </member>
        <member name="P:Stride.UI.UIElement.RenderSize">
            <summary>
            Gets (or sets, but see Remarks) the final render size of this element.
            </summary>
        </member>
        <member name="P:Stride.UI.UIElement.RenderOffsets">
            <summary>
            The rendering offsets caused by the UIElement margins and alignments.
            </summary>
        </member>
        <member name="P:Stride.UI.UIElement.ActualWidth">
            <summary>
            Gets the rendered width of this element.
            </summary>
        </member>
        <member name="P:Stride.UI.UIElement.ActualHeight">
            <summary>
            Gets the rendered height of this element.
            </summary>
        </member>
        <member name="P:Stride.UI.UIElement.ActualDepth">
            <summary>
            Gets the rendered depth of this element.
            </summary>
        </member>
        <member name="P:Stride.UI.UIElement.Stride#UI#IUIElementChildren#Children">
            <inheritdoc/>
        </member>
        <member name="M:Stride.UI.UIElement.EnumerateChildren">
            <summary>
            Enumerates the children of this element.
            </summary>
            <returns>A sequence containing all the children of this element.</returns>
            <remarks>This method is used by the implementation of the <see cref="T:Stride.UI.IUIElementChildren"/> interface.</remarks>
        </member>
        <member name="M:Stride.UI.UIElement.Measure(Stride.Core.Mathematics.Vector3)">
            <summary>
            Updates the <see cref="P:Stride.UI.UIElement.DesiredSize"/> of a <see cref="T:Stride.UI.UIElement"/>.
            Parent elements call this method from their own implementations to form a recursive layout update.
            Calling this method constitutes the first pass (the "Measure" pass) of a layout update.
            </summary>
            <param name="availableSizeWithMargins">The available space that a parent element can allocate a child element with its margins.
            A child element can request a larger space than what is available;  the provided size might be accommodated if scrolling is possible in the content model for the current element.</param>
        </member>
        <member name="M:Stride.UI.UIElement.MeasureOverride(Stride.Core.Mathematics.Vector3)">
            <summary>
            When overridden in a derived class, measures the size in layout required for possible child elements and determines a size for the <see cref="T:Stride.UI.UIElement"/>-derived class.
            </summary>
            <param name="availableSizeWithoutMargins">The available size that this element can give to child elements.
            Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>The size desired by the children</returns>
        </member>
        <member name="M:Stride.UI.UIElement.Arrange(Stride.Core.Mathematics.Vector3,System.Boolean)">
            <summary>
            Positions child elements and determines the size of the UIElement.
            This method constitutes the second pass of a layout update.
            </summary>
            <param name="finalSizeWithMargins">The final size that the parent computes for the child element with the margins.</param>
            <param name="isParentCollapsed">Boolean indicating if one of the parents of the element is currently collapsed.</param>
        </member>
        <member name="M:Stride.UI.UIElement.ArrangeOverride(Stride.Core.Mathematics.Vector3)">
            <summary>
            When overridden in a derived class, positions possible child elements and determines a size for a <see cref="T:Stride.UI.UIElement"/> derived class.
            </summary>
            <param name="finalSizeWithoutMargins">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Stride.UI.UIElement.CollapseOverride">
            <summary>
            When overridden in a derived class, collapse possible child elements and derived class.
            </summary>
        </member>
        <member name="M:Stride.UI.UIElement.PropagateCollapseToChild(Stride.UI.UIElement)">
            <summary>
            Propagate the collapsing to a child element <paramref name="element"/>.
            </summary>
            <param name="element">A child element to which propagate the collapse.</param>
            <exception cref="T:System.InvalidOperationException"><paramref name="element"/> is not a child of this element.</exception>
        </member>
        <member name="M:Stride.UI.UIElement.FindName(System.String)">
            <summary>
            Finds an element that has the provided identifier name in the element children.
            </summary>
            <param name="name">The name of the requested element.</param>
            <returns>The requested element. This can be null if no matching element was found.</returns>
            <remarks>If several elements with the same name exist return the first found</remarks>
        </member>
        <member name="M:Stride.UI.UIElement.SetParent(Stride.UI.UIElement,Stride.UI.UIElement)">
            <summary>
            Set the parent to a child.
            </summary>
            <param name="child">The child to which set the parent.</param>
            <param name="parent">The parent of the child.</param>
        </member>
        <member name="M:Stride.UI.UIElement.SetVisualParent(Stride.UI.UIElement,Stride.UI.UIElement)">
            <summary>
            Set the visual parent to a child.
            </summary>
            <param name="child">The child to which set the visual parent.</param>
            <param name="parent">The parent of the child.</param>
        </member>
        <member name="M:Stride.UI.UIElement.Intersects(Stride.Core.Mathematics.Ray@,Stride.Core.Mathematics.Vector3@)">
            <summary>
            Calculate the intersection of the UI element and the ray.
            </summary>
            <param name="ray">The ray in world space coordinate</param>
            <param name="intersectionPoint">The intersection point in world space coordinate</param>
            <returns><value>true</value> if the two elements intersects, <value>false</value> otherwise</returns>
        </member>
        <member name="M:Stride.UI.UIElement.Update(Stride.Games.GameTime)">
            <summary>
            Method called by <see cref="M:Stride.UI.IUIElementUpdate.Update(Stride.Games.GameTime)"/>.
            This method can be overridden by inherited classes to perform time-based actions.
            This method is not in charge to recursively call the update on child elements, this is automatically done.
            </summary>
            <param name="time">The current time of the game</param>
        </member>
        <member name="M:Stride.UI.UIElement.UpdateWorldMatrix(Stride.Core.Mathematics.Matrix@,System.Boolean)">
            <summary>
            Method called by <see cref="M:Stride.UI.IUIElementUpdate.UpdateWorldMatrix(Stride.Core.Mathematics.Matrix@,System.Boolean)"/>.
            Parents are in charge of recursively calling this function on their children.
            </summary>
            <param name="parentWorldMatrix">The world matrix of the parent.</param>
            <param name="parentWorldChanged">Boolean indicating if the world matrix provided by the parent changed</param>
        </member>
        <member name="M:Stride.UI.UIElement.CalculateSizeWithThickness(Stride.Core.Mathematics.Vector3@,Stride.UI.Thickness@)">
            <summary>
            Add the thickness values into the size calculation of a UI element.
            </summary>
            <param name="sizeWithoutMargins">The size without the thickness included</param>
            <param name="thickness">The thickness to add to the space</param>
            <returns>The size with the margins included</returns>
        </member>
        <member name="M:Stride.UI.UIElement.CalculateSizeWithoutThickness(Stride.Core.Mathematics.Vector3@,Stride.UI.Thickness@)">
            <summary>
            Remove the thickness values into the size calculation of a UI element.
            </summary>
            <param name="sizeWithMargins">The size with the thickness included</param>
            <param name="thickness">The thickness to remove in the space</param>
            <returns>The size with the margins not included</returns>
        </member>
        <member name="M:Stride.UI.UIElement.CalculateAdjustmentOffsets(Stride.UI.Thickness@,Stride.Core.Mathematics.Vector3@,Stride.Core.Mathematics.Vector3@)">
            <summary>
            Computes the (X,Y,Z) offsets to position correctly the UI element given the total provided space to it.
            </summary>
            <param name="thickness">The thickness around the element to position.</param>
            <param name="providedSpace">The total space given to the child element by the parent</param>
            <param name="usedSpaceWithoutThickness">The space used by the child element without the thickness included in it.</param>
            <returns>The offsets</returns>
        </member>
        <member name="P:Stride.UI.UIElement.IsTouched">
            <summary>
            Gets a value indicating whether the <see cref="T:Stride.UI.UIElement"/> is currently touched by the user.
            </summary>
        </member>
        <member name="P:Stride.UI.UIElement.MouseOverState">
            <summary>
            Gets the current state of the mouse over the UI element.
            </summary>
            <remarks>Only elements that can be clicked by user can have the <cref>MouseOverState.MouseOverElement</cref> value. 
            That is element that have <see cref="P:Stride.UI.UIElement.CanBeHitByUser"/> set to <value>true</value></remarks>
        </member>
        <member name="P:Stride.UI.UIElement.RequiresMouseOverUpdate">
            <summary>
            Gets or sets whether this element requires a mouse over check.
            </summary>
            <remarks>
            By default, the engine does not check whether <see cref="P:Stride.UI.UIElement.MouseOverState"/>
            of the element is changed while the cursor is still. This behavior is 
            overriden when this parameter is set to true, which forces the engine to
            check for changes of <see cref="P:Stride.UI.UIElement.MouseOverState"/>.
            The engine sets this to true when the layout of the element changes.
            </remarks>
        </member>
        <member name="M:Stride.UI.UIElement.RaiseEvent(Stride.UI.Events.RoutedEventArgs)">
            <summary>
            Raises a specific routed event. The <see cref="T:Stride.UI.Events.RoutedEvent"/> to be raised is identified within the <see cref="T:Stride.UI.Events.RoutedEventArgs"/> instance 
            that is provided (as the <see cref="T:Stride.UI.Events.RoutedEvent"/> property of that event data).
            </summary>
            <param name="e">A <see cref="T:Stride.UI.Events.RoutedEventArgs"/> that contains the event data and also identifies the event to raise.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The type of the routed event argument <paramref name="e"/> does not match the event handler second argument type.</exception>
        </member>
        <member name="M:Stride.UI.UIElement.AddHandler``1(Stride.UI.Events.RoutedEvent{``0},System.EventHandler{``0},System.Boolean)">
            <summary>
            Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. 
            Specify handledEventsToo as true to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.
            </summary>
            <param name="routedEvent">An identifier for the routed event to be handled.</param>
            <param name="handler">A reference to the handler implementation.</param>
            <param name="handledEventsToo">true to register the handler such that it is invoked even when the routed event is marked handled in its event data; 
            false to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.</param>
            <exception cref="T:System.ArgumentNullException">Provided handler or routed event is null.</exception>
        </member>
        <member name="M:Stride.UI.UIElement.RemoveHandler``1(Stride.UI.Events.RoutedEvent{``0},System.EventHandler{``0})">
            <summary>
            Removes the specified routed event handler from this element.
            </summary>
            <param name="routedEvent">The identifier of the routed event for which the handler is attached.</param>
            <param name="handler">The specific handler implementation to remove from the event handler collection on this element.</param>
            <exception cref="T:System.ArgumentNullException">Provided handler or routed event is null.</exception>
        </member>
        <member name="E:Stride.UI.UIElement.MouseOverStateChanged">
            <summary>
            Occurs when the value of the <see cref="P:Stride.UI.UIElement.MouseOverState"/> property changed.
            </summary>
            <remarks>This event is not a routed event</remarks>
        </member>
        <member name="E:Stride.UI.UIElement.PreviewTouchDown">
            <summary>
            Occurs when the user starts touching the <see cref="T:Stride.UI.UIElement"/>. That is when he moves its finger down from the element.
            </summary>
            <remarks>A click event is tunneling</remarks>
        </member>
        <member name="E:Stride.UI.UIElement.PreviewTouchMove">
            <summary>
            Occurs when the user moves its finger on the <see cref="T:Stride.UI.UIElement"/>. 
            That is when his finger was already on the element and moved from its previous position.
            </summary>
            <remarks>A click event is tunneling</remarks>
        </member>
        <member name="E:Stride.UI.UIElement.PreviewTouchUp">
            <summary>
            Occurs when the user stops touching the <see cref="T:Stride.UI.UIElement"/>. That is when he moves its finger up from the element.
            </summary>
            <remarks>A click event is tunneling</remarks>
        </member>
        <member name="E:Stride.UI.UIElement.TouchDown">
            <summary>
            Occurs when the user starts touching the <see cref="T:Stride.UI.UIElement"/>. That is when he moves its finger down from the element.
            </summary>
            <remarks>A click event is bubbling</remarks>
        </member>
        <member name="E:Stride.UI.UIElement.TouchEnter">
            <summary>
            Occurs when the user enters its finger into <see cref="T:Stride.UI.UIElement"/>. 
            That is when his finger was on the screen outside of the element and moved inside the element.
            </summary>
            <remarks>A click event is bubbling</remarks>
        </member>
        <member name="E:Stride.UI.UIElement.TouchLeave">
            <summary>
            Occurs when the user leaves its finger from the <see cref="T:Stride.UI.UIElement"/>. 
            That is when his finger was inside of the element and moved on the screen outside of the element.
            </summary>
            <remarks>A click event is bubbling</remarks>
        </member>
        <member name="E:Stride.UI.UIElement.TouchMove">
            <summary>
            Occurs when the user move its finger inside the <see cref="T:Stride.UI.UIElement"/>.
            That is when his finger was already on the element and moved from its previous position.
            </summary>
            <remarks>A click event is bubbling</remarks>
        </member>
        <member name="E:Stride.UI.UIElement.TouchUp">
            <summary>
            Occurs when the user stops touching the <see cref="T:Stride.UI.UIElement"/>. That is when he moves its finger up from the element.
            </summary>
            <remarks>A click event is bubbling</remarks>
        </member>
        <member name="E:Stride.UI.UIElement.KeyPressed">
            <summary>
            Occurs when the element has the focus and the user press a key on the keyboard.
            </summary>
            <remarks>A key pressed event is bubbling</remarks>
        </member>
        <member name="E:Stride.UI.UIElement.KeyDown">
            <summary>
            Occurs when the element has the focus and the user maintains a key pressed on the keyboard.
            </summary>
            <remarks>A key down event is bubbling</remarks>
        </member>
        <member name="E:Stride.UI.UIElement.KeyReleased">
            <summary>
            Occurs when the element has the focus and the user release a key on the keyboard.
            </summary>
            <remarks>A key released event is bubbling</remarks>
        </member>
        <member name="E:Stride.UI.UIElement.Input">
            <summary>
            Occurs when the element has the focus and the user inputs text on a text input device (keyboard)
            </summary>
        </member>
        <member name="M:Stride.UI.UIElement.OnPreviewTouchDown(Stride.UI.TouchEventArgs)">
            <summary>
            The class handler of the event <see cref="E:Stride.UI.UIElement.PreviewTouchDown"/>.
            This method can be overridden in inherited classes to perform actions common to all instances of a class.
            </summary>
            <param name="args">The arguments of the event</param>
        </member>
        <member name="M:Stride.UI.UIElement.OnPreviewTouchMove(Stride.UI.TouchEventArgs)">
            <summary>
            The class handler of the event <see cref="E:Stride.UI.UIElement.PreviewTouchMove"/>.
            This method can be overridden in inherited classes to perform actions common to all instances of a class.
            </summary>
            <param name="args">The arguments of the event</param>
        </member>
        <member name="M:Stride.UI.UIElement.OnPreviewTouchUp(Stride.UI.TouchEventArgs)">
            <summary>
            The class handler of the event <see cref="E:Stride.UI.UIElement.PreviewTouchUp"/>.
            This method can be overridden in inherited classes to perform actions common to all instances of a class.
            </summary>
            <param name="args">The arguments of the event</param>
        </member>
        <member name="M:Stride.UI.UIElement.OnTouchDown(Stride.UI.TouchEventArgs)">
            <summary>
            The class handler of the event <see cref="E:Stride.UI.UIElement.TouchDown"/>.
            This method can be overridden in inherited classes to perform actions common to all instances of a class.
            </summary>
            <param name="args">The arguments of the event</param>
        </member>
        <member name="M:Stride.UI.UIElement.OnTouchEnter(Stride.UI.TouchEventArgs)">
            <summary>
            The class handler of the event <see cref="E:Stride.UI.UIElement.TouchEnter"/>.
            This method can be overridden in inherited classes to perform actions common to all instances of a class.
            </summary>
            <param name="args">The arguments of the event</param>
        </member>
        <member name="M:Stride.UI.UIElement.OnTouchLeave(Stride.UI.TouchEventArgs)">
            <summary>
            The class handler of the event <see cref="E:Stride.UI.UIElement.TouchLeave"/>.
            This method can be overridden in inherited classes to perform actions common to all instances of a class.
            </summary>
            <param name="args">The arguments of the event</param>
        </member>
        <member name="M:Stride.UI.UIElement.OnTouchMove(Stride.UI.TouchEventArgs)">
            <summary>
            The class handler of the event <see cref="E:Stride.UI.UIElement.TouchMove"/>.
            This method can be overridden in inherited classes to perform actions common to all instances of a class.
            </summary>
            <param name="args">The arguments of the event</param>
        </member>
        <member name="M:Stride.UI.UIElement.OnTouchUp(Stride.UI.TouchEventArgs)">
            <summary>
            The class handler of the event <see cref="E:Stride.UI.UIElement.TouchUp"/>.
            This method can be overridden in inherited classes to perform actions common to all instances of a class.
            </summary>
            <param name="args">The arguments of the event</param>
        </member>
        <member name="M:Stride.UI.UIElement.OnKeyPressed(Stride.UI.KeyEventArgs)">
            <summary>
            The class handler of the event <see cref="E:Stride.UI.UIElement.KeyPressed"/>.
            This method can be overridden in inherited classes to perform actions common to all instances of a class.
            </summary>
            <param name="args">The arguments of the event</param>
        </member>
        <member name="M:Stride.UI.UIElement.OnTextInput(Stride.UI.TextEventArgs)">
            <summary>
            The class handler of the event <see cref="E:Stride.UI.UIElement.Input"/>.
            This method can be overridden in inherited classes to perform actions common to all instances of a class.
            </summary>
            <param name="args">The arguments of the event</param>
        </member>
        <member name="M:Stride.UI.UIElement.OnKeyDown(Stride.UI.KeyEventArgs)">
            <summary>
            The class handler of the event <see cref="E:Stride.UI.UIElement.KeyDown"/>.
            This method can be overridden in inherited classes to perform actions common to all instances of a class.
            </summary>
            <param name="args">The arguments of the event</param>
        </member>
        <member name="M:Stride.UI.UIElement.OnKeyReleased(Stride.UI.KeyEventArgs)">
            <summary>
            The class handler of the event <see cref="E:Stride.UI.UIElement.KeyReleased"/>.
            This method can be overridden in inherited classes to perform actions common to all instances of a class.
            </summary>
            <param name="args">The arguments of the event</param>
        </member>
        <member name="T:Stride.UI.UIElementCollection">
            <summary>
            A collection of UIElements.
            </summary>
        </member>
        <member name="T:Stride.UI.UIElementExtensions">
            <summary>
            Extensions methods for <see cref="T:Stride.UI.UIElement"/>
            </summary>
        </member>
        <member name="M:Stride.UI.UIElementExtensions.SetPanelZIndex(Stride.UI.UIElement,System.Int32)">
            <summary>
            Sets the Panel Z-index value for this element. 
            The Panel Z-index value is used to determine which child of a same panel should be drawn on top. 
            </summary>
            <remarks>Equivalent to set the <see cref="F:Stride.UI.Panels.Panel.ZIndexPropertyKey"/> of the element</remarks>
            <param name="element">The element</param>
            <param name="index">The Panel Z-index value</param>
        </member>
        <member name="M:Stride.UI.UIElementExtensions.GetPanelZIndex(Stride.UI.UIElement)">
            <summary>
            Sets the Panel Z-index value for this element. 
            The Panel Z-index value is used to determine which child of a same panel should be drawn on top. 
            </summary>
            <remarks>Equivalent to get the <see cref="F:Stride.UI.Panels.Panel.ZIndexPropertyKey"/> of the element</remarks>
            <param name="element">The element</param>
            <returns>The Panel Z-index value of the element</returns>
        </member>
        <member name="M:Stride.UI.UIElementExtensions.SetCanvasRelativeSize(Stride.UI.UIElement,Stride.Core.Mathematics.Vector3)">
            <summary>
            Sets the relative position of the element with respect to its parent canvas.
            Set the value of any component to <value>float.NaN</value> to let the element measure itself in this axis.
            </summary>
            <remarks>Equivalent to set the <see cref="F:Stride.UI.Panels.Canvas.RelativeSizePropertyKey"/> of the element</remarks>
            <param name="element">The element</param>
            <param name="size">The relative position of the element</param>
        </member>
        <member name="M:Stride.UI.UIElementExtensions.GetCanvasRelativeSize(Stride.UI.UIElement)">
            <summary>
            Gets the relative position of the element with respect to its parent canvas. <value>float.NaN</value> when not specified.
            </summary>
            <remarks>Equivalent to get the <see cref="F:Stride.UI.Panels.Canvas.RelativeSizePropertyKey"/> of the element</remarks>
            <param name="element">The element</param>
            <returns>The relative position of the element to its parent canvas</returns>
        </member>
        <member name="M:Stride.UI.UIElementExtensions.SetCanvasRelativePosition(Stride.UI.UIElement,Stride.Core.Mathematics.Vector3)">
            <summary>
            Sets the relative position of the element into its parent canvas.
            </summary>
            <remarks>Equivalent to set the <see cref="F:Stride.UI.Panels.Canvas.RelativePositionPropertyKey"/> of the element</remarks>
            <param name="element">The element</param>
            <param name="position">The relative position normalized between [0,1]</param>
        </member>
        <member name="M:Stride.UI.UIElementExtensions.GetCanvasRelativePosition(Stride.UI.UIElement)">
            <summary>
            Gets the relative position of the element into its parent canvas. Position is normalized between [0,1].
            </summary>
            <remarks>Equivalent to get the <see cref="F:Stride.UI.Panels.Canvas.RelativePositionPropertyKey"/> of the element</remarks>
            <param name="element">The element</param>
            <returns>The relative position of the element into its parent canvas</returns>
        </member>
        <member name="M:Stride.UI.UIElementExtensions.SetCanvasAbsolutePosition(Stride.UI.UIElement,Stride.Core.Mathematics.Vector3)">
            <summary>
            Sets the absolute position of the element into its parent canvas.
            </summary>
            <remarks>Equivalent to set the <see cref="F:Stride.UI.Panels.Canvas.AbsolutePositionPropertyKey"/> of the element</remarks>
            <param name="element">The element</param>
            <param name="position">The absolute position in virtual pixels</param>
        </member>
        <member name="M:Stride.UI.UIElementExtensions.GetCanvasAbsolutePosition(Stride.UI.UIElement)">
            <summary>
            Gets the absolute position of the element into its parent canvas. The position is in virtual pixels.
            </summary>
            <remarks>Equivalent to get the <see cref="F:Stride.UI.Panels.Canvas.AbsolutePositionPropertyKey"/> of the element</remarks>
            <param name="element">The element</param>
            <returns>The absolute position of the element into its parent canvas</returns>
        </member>
        <member name="M:Stride.UI.UIElementExtensions.SetCanvasPinOrigin(Stride.UI.UIElement,Stride.Core.Mathematics.Vector3)">
            <summary>
            Sets the origin of the element used when pinning it into its parent canvas.
            This value is normalized between [0,1]. (0,0,0) represents the left/top/back corner, (1,1,1) represents the right/bottom/front corner, etc...
            </summary>
            <remarks>Equivalent to set the <see cref="F:Stride.UI.Panels.Canvas.PinOriginPropertyKey"/> of the element</remarks>
            <param name="element">The element</param>
            <param name="origin">The pin origin value</param>
        </member>
        <member name="M:Stride.UI.UIElementExtensions.GetCanvasPinOrigin(Stride.UI.UIElement)">
            <summary>
            Gets the origin of the element used when pinning it into its parent canvas.
            This value is normalized between [0,1]. (0,0,0) represents the left/top/back corner, (1,1,1) represents the right/bottom/front corner, etc...
            </summary>
            <remarks>Equivalent to get the <see cref="F:Stride.UI.Panels.Canvas.PinOriginPropertyKey"/> of the element</remarks>
            <param name="element">The element</param>
            <returns>The pin origin of the element</returns>
        </member>
        <member name="M:Stride.UI.UIElementExtensions.SetGridColumn(Stride.UI.UIElement,System.Int32)">
            <summary>
            Sets the column index of the grid in which resides the element.
            </summary>
            <remarks>Equivalent to set the <see cref="F:Stride.UI.Panels.GridBase.ColumnPropertyKey"/> of the element</remarks>
            <param name="element">The element</param>
            <param name="index">The 0-based column index</param>
        </member>
        <member name="M:Stride.UI.UIElementExtensions.GetGridColumn(Stride.UI.UIElement)">
            <summary>
            Gets the column index of the grid in which resides the element.
            </summary>
            <remarks>Equivalent to get the <see cref="F:Stride.UI.Panels.GridBase.ColumnPropertyKey"/> of the element</remarks>
            <param name="element">The element</param>
            <returns>The 0-based column index of the element</returns>
        </member>
        <member name="M:Stride.UI.UIElementExtensions.SetGridRow(Stride.UI.UIElement,System.Int32)">
            <summary>
            Sets the row index of the grid in which resides the element.
            </summary>
            <remarks>Equivalent to set the <see cref="F:Stride.UI.Panels.GridBase.RowPropertyKey"/> of the element</remarks>
            <param name="element">The element</param>
            <param name="index">The 0-based row index</param>
        </member>
        <member name="M:Stride.UI.UIElementExtensions.GetGridRow(Stride.UI.UIElement)">
            <summary>
            Gets the row index of the grid in which resides the element.
            </summary>
            <remarks>Equivalent to get the <see cref="F:Stride.UI.Panels.GridBase.RowPropertyKey"/> of the element</remarks>
            <param name="element">The element</param>
            <returns>The 0-based row index of the element</returns>
        </member>
        <member name="M:Stride.UI.UIElementExtensions.SetGridLayer(Stride.UI.UIElement,System.Int32)">
            <summary>
            Sets the layer index of the grid in which resides the element.
            </summary>
            <remarks>Equivalent to set the <see cref="F:Stride.UI.Panels.GridBase.LayerPropertyKey"/> of the element</remarks>
            <param name="element">The element</param>
            <param name="index">The 0-based layer index</param>
        </member>
        <member name="M:Stride.UI.UIElementExtensions.GetGridLayer(Stride.UI.UIElement)">
            <summary>
            Gets the layer index of the grid in which resides the element.
            </summary>
            <remarks>Equivalent to get the <see cref="F:Stride.UI.Panels.GridBase.LayerPropertyKey"/> of the element</remarks>
            <param name="element">The element</param>
            <returns>The 0-based layer index of the element</returns>
        </member>
        <member name="M:Stride.UI.UIElementExtensions.SetGridColumnSpan(Stride.UI.UIElement,System.Int32)">
            <summary>
            Sets the number of column spans that the element occupies in the grid.
            </summary>
            <remarks>Equivalent to set the <see cref="F:Stride.UI.Panels.GridBase.ColumnSpanPropertyKey"/> of the element</remarks>
            <param name="element">The element</param>
            <param name="index">The number of column spans occupied</param>
        </member>
        <member name="M:Stride.UI.UIElementExtensions.GetGridColumnSpan(Stride.UI.UIElement)">
            <summary>
            Gets the number of column spans that the element occupies in the grid.
            </summary>
            <remarks>Equivalent to get the <see cref="F:Stride.UI.Panels.GridBase.ColumnSpanPropertyKey"/> of the element</remarks>
            <param name="element">The element</param>
            <returns>The number column of spans occupied by the element</returns>
        </member>
        <member name="M:Stride.UI.UIElementExtensions.SetGridRowSpan(Stride.UI.UIElement,System.Int32)">
            <summary>
            Sets the number of row spans that the element occupies in the grid.
            </summary>
            <remarks>Equivalent to set the <see cref="F:Stride.UI.Panels.GridBase.RowSpanPropertyKey"/> of the element</remarks>
            <param name="element">The element</param>
            <param name="index">The number of row spans occupied</param>
        </member>
        <member name="M:Stride.UI.UIElementExtensions.GetGridRowSpan(Stride.UI.UIElement)">
            <summary>
            Gets the number of row spans that the element occupies in the grid.
            </summary>
            <remarks>Equivalent to get the <see cref="F:Stride.UI.Panels.GridBase.RowSpanPropertyKey"/> of the element</remarks>
            <param name="element">The element</param>
            <returns>The number of row spans occupied by the element</returns>
        </member>
        <member name="M:Stride.UI.UIElementExtensions.SetGridLayerSpan(Stride.UI.UIElement,System.Int32)">
            <summary>
            Sets the number of layer spans that the element occupies in the grid.
            </summary>
            <remarks>Equivalent to set the <see cref="F:Stride.UI.Panels.GridBase.LayerSpanPropertyKey"/> of the element</remarks>
            <param name="element">The element</param>
            <param name="index">The number of layer spans occupied</param>
        </member>
        <member name="M:Stride.UI.UIElementExtensions.GetGridLayerSpan(Stride.UI.UIElement)">
            <summary>
            Gets the number of layer spans that the element occupies in the grid.
            </summary>
            <remarks>Equivalent to get the <see cref="F:Stride.UI.Panels.GridBase.LayerSpanPropertyKey"/> of the element</remarks>
            <param name="element">The element</param>
            <returns>The number of layer spans occupied by the element</returns>
        </member>
        <member name="T:Stride.UI.UIElementServices">
            <summary>
            Provides a services class for all the User Interface elements in Stride applications.
            </summary>
        </member>
        <member name="T:Stride.UI.UIInternalException">
            <summary>
            The exception that is thrown when an internal error happened in the UI System. That is an error that is not due to the user behavior.
            </summary>
        </member>
        <member name="T:Stride.UI.UIProfilerKeys">
            <summary>
            Various <see cref="T:Stride.Core.Diagnostics.ProfilingKey"/> used to measure performance across some part of the UI system.
            </summary>
        </member>
        <member name="T:Stride.UI.UISystem">
            <summary>
            Interface of the UI system.
            </summary>
        </member>
        <member name="M:Stride.UI.UISystem.OnApplicationPaused(System.Object,System.EventArgs)">
            <summary>
            The method to call when the application is put on background.
            </summary>
        </member>
        <member name="M:Stride.UI.UISystem.OnApplicationResumed(System.Object,System.EventArgs)">
            <summary>
            The method to call when the application is put on foreground.
            </summary>
        </member>
        <member name="T:Stride.UI.VerticalAlignment">
            <summary>
            Describes how a child element is vertically positioned or stretched within a parent's layout slot.
            </summary>
        </member>
        <member name="F:Stride.UI.VerticalAlignment.Bottom">
            <summary>
            The child element is aligned to the bottom of the parent's layout slot.
            </summary>
            <userdoc>The child element is aligned to the bottom of the parent's layout slot.</userdoc>
        </member>
        <member name="F:Stride.UI.VerticalAlignment.Center">
            <summary>
            The child element is aligned to the center of the parent's layout slot.
            </summary>
            <userdoc>The child element is aligned to the center of the parent's layout slot.</userdoc>
        </member>
        <member name="F:Stride.UI.VerticalAlignment.Top">
            <summary>
            The child element is aligned to the top of the parent's layout slot.
            </summary>
            <userdoc>The child element is aligned to the top of the parent's layout slot.</userdoc>
        </member>
        <member name="F:Stride.UI.VerticalAlignment.Stretch">
            <summary>
            The child element stretches to fill the parent's layout slot.
            </summary>
            <userdoc>The child element stretches to fill the parent's layout slot.</userdoc>
        </member>
        <member name="T:Stride.UI.Visibility">
            <summary>
            Specifies the display state of an element.
            </summary>
        </member>
        <member name="F:Stride.UI.Visibility.Visible">
            <summary>
            Display the element.
            </summary>
            <userdoc>Display the element.</userdoc>
        </member>
        <member name="F:Stride.UI.Visibility.Hidden">
            <summary>
            Do not display the element, but reserve space for the element in layout.
            </summary>
            <userdoc>Do not display the element, but reserve space for the element in layout.</userdoc>
        </member>
        <member name="F:Stride.UI.Visibility.Collapsed">
            <summary>
            Do not display the element, and do not reserve space for it in layout.
            </summary>
            <userdoc>Do not display the element, and do not reserve space for it in layout.</userdoc>
        </member>
        <member name="M:Stride.UI.VisualTreeHelper.FindVisualChildOfType``1(Stride.UI.UIElement,System.String)">
            <summary>
            Find the first child that match the given type, along the visual tree.
            </summary>
            <typeparam name="T">Type of child to find.</typeparam>
            <param name="source">Base node from where to start looking for child.</param>
            <param name="name">(Optional) name of the element</param>
            <returns>Returns the retrieved child, or null otherwise.</returns>
        </member>
        <member name="M:Stride.UI.VisualTreeHelper.FindVisualChildrenOfType``1(Stride.UI.UIElement)">
            <summary>
            Find all the children that match the given type, along the visual tree.
            </summary>
            <typeparam name="T">Type of child to find.</typeparam>
            <param name="source">Base node from where to start looking for children.</param>
            <returns>Returns the retrieved children, or empty otherwise.</returns>
        </member>
        <member name="M:Stride.UI.VisualTreeHelper.FindVisualParentOfType``1(Stride.UI.UIElement)">
            <summary>
            Find the first parent that match the given type, along the visual tree.
            </summary>
            <typeparam name="T">Type of parent to find.</typeparam>
            <param name="source">Base node from where to start looking for parent.</param>
            <returns>Returns the retrieved parent, or null otherwise.</returns>
        </member>
        <member name="M:Stride.UI.VisualTreeHelper.FindVisualRoot(Stride.UI.UIElement)">
            <summary>
            Find the root parent, along the visual tree.
            </summary>
            <param name="source">Base node from where to start looking for root.</param>
            <returns>Returns the retrieved root, or null otherwise.</returns>
        </member>
        <member name="M:Stride.UI.VisualTreeHelper.FindParentOfType``1(Stride.UI.UIElement,System.Func{Stride.UI.UIElement,Stride.UI.UIElement})">
            <summary>
            Find the first parent that match the given type.
            </summary>
            <typeparam name="T">Type of parent to find.</typeparam>
            <param name="source">Base node from where to start looking for parent.</param>
            <param name="getParentFunc">Function that provide the parent element.</param>
            <returns>Returns the retrieved parent, or null otherwise.</returns>
        </member>
        <member name="M:Stride.UI.VisualTreeHelper.FindChildrenOfType``1(Stride.UI.UIElement,System.Func{Stride.UI.UIElement,System.Int32},System.Func{Stride.UI.UIElement,System.Int32,Stride.UI.UIElement})">
            <summary>
            Find all the children that match the given type.
            </summary>
            <typeparam name="T">Type of child to find.</typeparam>
            <param name="source">Base node from where to start looking for children.</param>
            <param name="getChildrenCountFunc">Function that provide the number of children in the current element.</param>
            <param name="getChildFunc">Function that provide a given child element by its index.</param>
            <returns>Returns the retrieved children, empty otherwise.</returns>
        </member>
        <member name="T:Stride.Engine.UIComponent">
            <summary>
            Add an <see cref="T:Stride.Engine.UIPage"/> to an <see cref="T:Stride.Engine.Entity"/>.
            </summary>
        </member>
        <member name="P:Stride.Engine.UIComponent.Page">
            <summary>
            Gets or sets the UI page.
            </summary>
            <userdoc>The UI page.</userdoc>
        </member>
        <member name="P:Stride.Engine.UIComponent.IsFullScreen">
            <summary>
            Gets or sets the value indicating whether the UI should be full screen.
            </summary>
            <userdoc>Check this checkbox to display UI of this component on full screen. Uncheck it to display UI using standard camera.</userdoc>
        </member>
        <member name="P:Stride.Engine.UIComponent.Resolution">
            <summary>
            Gets or sets the virtual resolution of the UI in virtual pixels.
            </summary>
            <userdoc>The value in pixels of the resolution of the UI</userdoc>
        </member>
        <member name="P:Stride.Engine.UIComponent.Size">
            <summary>
            Gets or sets the actual size of the UI component in world units. This value is ignored in fullscreen mode.
            </summary>
            <userdoc>The actual size of the UI component in world units. This value is ignored in fullscreen mode.</userdoc>
        </member>
        <member name="P:Stride.Engine.UIComponent.ResolutionStretch">
            <summary>
            Gets or sets the camera.
            </summary>
            <value>The camera.</value>
            <userdoc>Indicate how the virtual resolution value should be interpreted</userdoc>
        </member>
        <member name="P:Stride.Engine.UIComponent.IsBillboard">
            <summary>
            Gets or sets the value indicating whether the UI should be displayed as billboard.
            </summary>
            <userdoc>If checked, the UI is displayed as a billboard. That is, it is automatically rotated parallel to the screen.</userdoc>
        </member>
        <member name="P:Stride.Engine.UIComponent.SnapText">
            <summary>
            Gets or sets the value indicating of the UI texts should be snapped to closest pixel.
            </summary>
            <userdoc>If checked, all the text of the UI is snapped to the closest pixel (pixel perfect). This is only effective if IsFullScreen or IsFixedSize is set, as well as IsBillboard.</userdoc>
        </member>
        <member name="P:Stride.Engine.UIComponent.IsFixedSize">
            <summary>
            Gets or sets the value indicating whether the UI should be always a fixed size on the screen.
            </summary>
            <userdoc>
            Gets or sets the value indicating whether the UI should be always a fixed size on the screen.
            A fixed size component with a height of 1 unit will be 0.1 of the screen size.
            </userdoc>
        </member>
        <member name="P:Stride.Engine.UIComponent.RenderGroup">
            <summary>
            The render group for this component.
            </summary>
        </member>
        <member name="F:Stride.Engine.UIComponent.FixedSizeVerticalUnit">
            <summary>
            A fixed size UI component with height of 1 will be this much of the vertical resolution on screen
            </summary>
        </member>
        <member name="P:Stride.Engine.UIElementLinkComponent.Target">
            <summary>
            Gets or sets the ui component which contains the hierarchy to use.
            </summary>
            <value>
            The ui component which contains the hierarchy to use.
            </value>
            <userdoc>The reference to the target entity to which to attach the current entity. If null, parent will be used.</userdoc>
        </member>
        <member name="P:Stride.Engine.UIElementLinkComponent.Camera">
            <summary>
            Gets or sets the camera component which is required if the UI component is a billboard.
            </summary>
            <value>
            The camera component which is required if the UI component is a billboard.
            </value>
            <userdoc>The reference to the target camera used to render the component. It is only required in case the parent UI component is a billboard.</userdoc>
        </member>
        <member name="P:Stride.Engine.UIElementLinkComponent.NodeName">
            <summary>
            Gets or sets the name of the element.
            </summary>
            <value>
            The name of the element.
            </value>
            <userdoc>The name of node of the model of the target entity to which attach the current entity.</userdoc>
        </member>
        <member name="M:Stride.Engine.UIElementTransformLink.ComputeMatrix(System.Boolean,Stride.Core.Mathematics.Matrix@)">
            <inheritdoc/>
        </member>
        <member name="P:Stride.Engine.UILibrary.UIElements">
            <summary>
            Gets the UI elements.
            </summary>
        </member>
        <member name="M:Stride.Engine.UILibraryExtensions.InstantiateElement``1(Stride.Engine.UILibrary,System.String)">
            <summary>
            Instantiates a copy of the element of the library identified by <paramref name="name"/>.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="library">The library.</param>
            <param name="name">The name of the element in the library.</param>
            <returns></returns>
        </member>
        <member name="T:Stride.Engine.UIPage">
            <summary>
            A page containing a UI hierarchy.
            </summary>
        </member>
        <member name="P:Stride.Engine.UIPage.RootElement">
            <summary>
            Gets or sets the root element of the page.
            </summary>
            <userdoc>The root element of the page.</userdoc>
        </member>
        <member name="F:Stride.Rendering.UI.RenderUIElement.LastMousePosition">
            <summary>
            Last registered position of teh mouse
            </summary>
        </member>
        <member name="F:Stride.Rendering.UI.RenderUIElement.LastMouseOverElement">
            <summary>
            Last element over which the mouse cursor was registered
            </summary>
        </member>
        <member name="F:Stride.Rendering.UI.RenderUIElement.LastTouchedElement">
            <summary>
            Last element which received a touch/click event
            </summary>
        </member>
        <member name="P:Stride.Rendering.UI.UIRenderFeature.UIElementUnderMouseCursor">
            <summary>
            Represents the UI-element thats currently under the mouse cursor.
            Only elements with CanBeHitByUser == true are taken into account.
            Last processed element_state / ?UIComponent? with a valid element will be used.
            </summary>
        </member>
        <member name="M:Stride.Rendering.UI.UIRenderFeature.GetWorldRay(Stride.Graphics.Viewport@,Stride.Core.Mathematics.Vector2,Stride.Core.Mathematics.Matrix@)">
            <summary>
            Creates a ray in object space based on a screen position and a previously rendered object's WorldViewProjection matrix
            </summary>
            <param name="viewport">The viewport in which the object was rendered</param>
            <param name="screenPos">The click position on screen in normalized (0..1, 0..1) range</param>
            <param name="worldViewProj">The WorldViewProjection matrix with which the object was last rendered in the view</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Rendering.UI.UIRenderFeature.GetTouchPosition(Stride.Core.Mathematics.Vector3,Stride.Graphics.Viewport@,Stride.Core.Mathematics.Matrix@,Stride.Core.Mathematics.Vector2,Stride.Core.Mathematics.Ray@)">
            <summary>
            Returns if a screen position is within the borders of a tested ui component
            </summary>
            <param name="uiComponent">The <see cref="T:Stride.Engine.UIComponent"/> to be tested</param>
            <param name="viewport">The <see cref="T:Stride.Graphics.Viewport"/> in which the component is being rendered</param>
            <param name="worldViewProj"></param>
            <param name="screenPosition">The position of the lick on the screen in normalized (0..1, 0..1) range</param>
            <param name="uiRay"><see cref="T:Stride.Core.Mathematics.Ray"/> from the click in object space of the ui component in (-Resolution.X/2 .. Resolution.X/2, -Resolution.Y/2 .. Resolution.Y/2) range</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Rendering.UI.UIRenderFeature.GetElementAtScreenPosition(Stride.UI.UIElement,Stride.Core.Mathematics.Ray@,Stride.Core.Mathematics.Matrix@,Stride.Core.Mathematics.Vector3@)">
            <summary>
            Gets the element with which the clickRay intersects, or null if none is found
            </summary>
            <param name="rootElement">The root <see cref="T:Stride.UI.UIElement"/> from which it should test</param>
            <param name="clickRay"><see cref="T:Stride.Core.Mathematics.Ray"/> from the click in object space of the ui component in (-Resolution.X/2 .. Resolution.X/2, -Resolution.Y/2 .. Resolution.Y/2) range</param>
            <param name="worldViewProj"></param>
            <param name="intersectionPoint">Intersection point between the ray and the element</param>
            <returns>The <see cref="T:Stride.UI.UIElement"/> with which the ray intersects</returns>
        </member>
        <member name="M:Stride.Rendering.UI.UIRenderFeature.GetElementsAtPosition(Stride.UI.UIElement,Stride.Core.Mathematics.Ray@,Stride.Core.Mathematics.Matrix@)">
            <summary>
            Gets all elements that the given <paramref name="ray"/> intersects.
            </summary>
            <param name="rootElement">The root <see cref="T:Stride.UI.UIElement"/> from which it should test</param>
            <param name="ray"><see cref="T:Stride.Core.Mathematics.Ray"/> from the click in object space of the ui component in (-Resolution.X/2 .. Resolution.X/2, -Resolution.Y/2 .. Resolution.Y/2) range</param>
            <param name="worldViewProj"></param>
            <returns>A collection of all elements hit by this ray, or an empty collection if no hit.</returns>
        </member>
        <member name="T:Stride.Rendering.UI.UIRenderFeature.HitTestResult">
            <summary>
            Represents the result of a hit test on the UI.
            </summary>
        </member>
        <member name="P:Stride.Rendering.UI.UIRenderFeature.HitTestResult.Element">
            <summary>
            Element that was hit.
            </summary>
        </member>
        <member name="P:Stride.Rendering.UI.UIRenderFeature.HitTestResult.IntersectionPoint">
            <summary>
            Point of intersection between the ray and the hit element.
            </summary>
        </member>
        <member name="T:Stride.Rendering.UI.UIRenderProcessor">
            <summary>
            The processor in charge of updating and drawing the entities having UI components.
            </summary>
        </member>
        <member name="M:Stride.Rendering.UI.UIRenderProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Rendering.UI.UIRenderProcessor"/> class.
            </summary>
        </member>
        <member name="T:Stride.StrideVersion">
            <summary>
            Internal version used to identify Stride version.
            </summary>
            <remarks>
            During package build, PackageUpdateVersionTask is updating that file and expect some specific text regex so be careful if you change any of this.
            </remarks>
        </member>
        <member name="F:Stride.StrideVersion.PublicVersion">
            <summary>
            The version used by editor for display purpose. 4th digit needs to be at least 1 if used (due to NuGet special cases).
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.AssemblyVersion">
            <summary>
            The current assembly version as text, currently same as <see cref="F:Stride.StrideVersion.PublicVersion"/>.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersionSimple">
            <summary>
            The NuGet package version without special tags.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersion">
            <summary>
            The NuGet package version.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersionSuffix">
            <summary>
            The NuGet package suffix (i.e. -beta01). Automatically set by Stride.GitVersioning.GenerateVersionFile.
            Three possible values:
            - Empty: official release
            - -betaXX: development version (XX should corespond to development asset versioning)
            - -betaXX-YYYY: beta release (YYYY is the git height since current version has been bumped)
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.BuildMetadata">
            <summary>
            The build metadata, usually +g[git_hash] during package. Automatically set by Stride.GitVersioning.GenerateVersionFile.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.AssemblyInformationalVersion">
            <summary>
            The informational assembly version, containing -beta01 or +g[git_hash] during package.
            </summary>
        </member>
        <member name="T:Stride.PublicKeys">
            <summary>
            Assembly signing information.
            </summary>
        </member>
        <member name="F:Stride.PublicKeys.Default">
            <summary>
            Assembly name suffix that contains signing information.
            </summary>
        </member>
    </members>
</doc>
