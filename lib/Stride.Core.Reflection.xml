<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stride.Core.Reflection</name>
    </assembly>
    <members>
        <member name="T:Stride.Core.Reflection.AttributeRegistry">
            <summary>
            A default implementation for <see cref="T:Stride.Core.Reflection.IAttributeRegistry"/>. 
            This implementation allows to retrieve default attributes for a member or 
            to attach an attribute to a specific type/member.
            </summary>
        </member>
        <member name="M:Stride.Core.Reflection.AttributeRegistry.GetAttributes(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the attributes associated with the specified member.
            </summary>
            <param name="memberInfo">The reflection member.</param>
            <param name="inherit">if set to <c>true</c> includes inherited attributes.</param>
            <returns>An enumeration of <see cref="T:System.Attribute"/>.</returns>
        </member>
        <member name="M:Stride.Core.Reflection.AttributeRegistry.Register(System.Reflection.MemberInfo,System.Attribute)">
            <summary>
            Registers an attribute for the specified member. Restriction: Attributes registered this way cannot be listed in inherited attributes.
            </summary>
            <param name="memberInfo">The member information.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="T:Stride.Core.Reflection.IAttributeRegistry">
            <summary>
            A registry for all attributes.
            </summary>
        </member>
        <member name="M:Stride.Core.Reflection.IAttributeRegistry.GetAttributes(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the attributes associated with the specified member.
            </summary>
            <param name="memberInfo">The reflection member.</param>
            <param name="inherit">if set to <c>true</c> includes inherited attributes.</param>
            <returns>An enumeration of <see cref="T:System.Attribute"/>.</returns>
        </member>
        <member name="M:Stride.Core.Reflection.IAttributeRegistry.Register(System.Reflection.MemberInfo,System.Attribute)">
            <summary>
            Registers an attribute for the specified member. Restriction: Attributes registered this way cannot be listed in inherited attributes.
            </summary>
            <param name="memberInfo">The member information.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="T:Stride.Core.Reflection.AttributeRegistryExtensions">
            <summary>
            Extension methods for attribute registry.
            </summary>
        </member>
        <member name="M:Stride.Core.Reflection.AttributeRegistryExtensions.GetAttributes``1(Stride.Core.Reflection.IAttributeRegistry,System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the attributes associated with the specified member.
            </summary>
            <typeparam name="T">Type of the attribute</typeparam>
            <param name="attributeRegistry">The attribute registry.</param>
            <param name="memberInfo">The member information.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns>An enumeration of <see cref="T:System.Attribute" />.</returns>
        </member>
        <member name="M:Stride.Core.Reflection.AttributeRegistryExtensions.GetAttribute``1(Stride.Core.Reflection.IAttributeRegistry,System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets an attribute associated with the specified member.
            </summary>
            <typeparam name="T">Type of the attribute</typeparam>
            <param name="attributeRegistry">The attribute registry.</param>
            <param name="memberInfo">The member information.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns>An attribute of type {T} if it was found; otherwise <c>null</c></returns>
        </member>
        <member name="T:Stride.Core.Reflection.ITypeDescriptorFactory">
            <summary>
            A factory to create an instance of a <see cref="T:Stride.Core.Reflection.ITypeDescriptor"/>
            </summary>
        </member>
        <member name="P:Stride.Core.Reflection.ITypeDescriptorFactory.AttributeRegistry">
            <summary>
            Gets the attribute registry used by this factory.
            </summary>
            <value>The attribute registry.</value>
        </member>
        <member name="M:Stride.Core.Reflection.ITypeDescriptorFactory.Find(System.Type)">
            <summary>
            Tries to create an instance of a <see cref="T:Stride.Core.Reflection.ITypeDescriptor"/> from the type. Return null if this factory is not handling this type.
            </summary>
            <param name="type">The type.</param>
            <returns>ITypeDescriptor.</returns>
        </member>
        <member name="T:Stride.Core.Reflection.FieldDescriptor">
            <summary>
            A <see cref="T:Stride.Core.Reflection.IMemberDescriptor"/> for a <see cref="P:Stride.Core.Reflection.FieldDescriptor.FieldInfo"/>
            </summary>
        </member>
        <member name="P:Stride.Core.Reflection.FieldDescriptor.FieldInfo">
            <summary>
            Gets the property information attached to this instance.
            </summary>
            <value>The property information.</value>
        </member>
        <member name="M:Stride.Core.Reflection.FieldDescriptor.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Stride.Core.Reflection.IMemberDescriptor">
            <summary>
            Describe a member of an object.
            </summary>
        </member>
        <member name="P:Stride.Core.Reflection.IMemberDescriptor.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Stride.Core.Reflection.IMemberDescriptor.OriginalName">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Stride.Core.Reflection.IMemberDescriptor.DefaultNameComparer">
            <summary>
            Gets the default name comparer.
            </summary>
            <value>The default name comparer.</value>
        </member>
        <member name="P:Stride.Core.Reflection.IMemberDescriptor.Type">
            <summary>
            Gets the type of the member.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Stride.Core.Reflection.IMemberDescriptor.DeclaringType">
            <summary>
            Gets the type that is declaring this member.
            </summary>
            <value>The type that is declaring this member.</value>
        </member>
        <member name="P:Stride.Core.Reflection.IMemberDescriptor.TypeDescriptor">
            <summary>
            Gets the type descriptor of the member.
            </summary>
        </member>
        <member name="P:Stride.Core.Reflection.IMemberDescriptor.Order">
            <summary>
            Gets the order of this member.
            Default is -1, meaning that it is using the alphabetical order
            based on the name of this property.
            </summary>
            <value>The order.</value>
        </member>
        <member name="P:Stride.Core.Reflection.IMemberDescriptor.Mode">
            <summary>
            Gets the mode of serialization for this member.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="P:Stride.Core.Reflection.IMemberDescriptor.IsPublic">
            <summary>
            Gets a value indicating whether this member is public.
            </summary>
        </member>
        <member name="P:Stride.Core.Reflection.IMemberDescriptor.HasSet">
            <summary>
            Gets a value indicating whether this instance has set method.
            </summary>
        </member>
        <member name="P:Stride.Core.Reflection.IMemberDescriptor.ShouldSerialize">
            <summary>
            Gets a value indicating whether this member should be serialized.
            </summary>
        </member>
        <member name="P:Stride.Core.Reflection.IMemberDescriptor.AlternativeNames">
            <summary>
            Gets the alternative names that will map back to this member (may be null).
            </summary>
        </member>
        <member name="P:Stride.Core.Reflection.IMemberDescriptor.Tag">
            <summary>
            Gets or sets a custom tag to associate with this object.
            </summary>
        </member>
        <member name="P:Stride.Core.Reflection.IMemberDescriptor.Mask">
            <summary>
            Gets the serialization mask, that will be checked against the context to know if this field needs to be serialized.
            </summary>
        </member>
        <member name="P:Stride.Core.Reflection.IMemberDescriptor.Style">
            <summary>
            Gets the default style attached to this member.
            </summary>
        </member>
        <member name="P:Stride.Core.Reflection.IMemberDescriptor.ScalarStyle">
            <summary>
            Gets the default scalar style attached to this member.
            </summary>
        </member>
        <member name="P:Stride.Core.Reflection.IMemberDescriptor.MemberInfo">
            <summary>
            Gets the member information.
            </summary>
            <value>The member information.</value>
        </member>
        <member name="M:Stride.Core.Reflection.IMemberDescriptor.Get(System.Object)">
            <summary>
            Gets the value of this member for the specified instance.
            </summary>
            <param name="thisObject">The this object to get the value from.</param>
            <returns>Value of the member.</returns>
        </member>
        <member name="M:Stride.Core.Reflection.IMemberDescriptor.Set(System.Object,System.Object)">
            <summary>
            Sets a value of this member for the specified instance.
            </summary>
            <param name="thisObject">The this object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Stride.Core.Reflection.MemberDescriptorBase">
            <summary>
            Base class for <see cref="T:Stride.Core.Reflection.IMemberDescriptor"/> for a <see cref="P:Stride.Core.Reflection.MemberDescriptorBase.MemberInfo"/>
            </summary>
        </member>
        <member name="P:Stride.Core.Reflection.MemberDescriptorBase.DeclaringType">
            <summary>
            Gets the type of the declaring this member.
            </summary>
            <value>The type of the declaring.</value>
        </member>
        <member name="P:Stride.Core.Reflection.MemberDescriptorBase.IsPublic">
            <summary>
            Gets whether this member has a public getter.
            </summary>
        </member>
        <member name="P:Stride.Core.Reflection.MemberDescriptorBase.Mask">
            <summary>
            Gets the serialization mask, that will be checked against the context to know if this field needs to be serialized.
            </summary>
        </member>
        <member name="P:Stride.Core.Reflection.MemberDescriptorBase.Style">
            <summary>
            Gets the default style attached to this member.
            </summary>
        </member>
        <member name="P:Stride.Core.Reflection.MemberDescriptorBase.ScalarStyle">
            <summary>
            Gets the default style attached to this member.
            </summary>
        </member>
        <member name="P:Stride.Core.Reflection.MemberDescriptorBase.MemberInfo">
            <summary>
            Gets the member information.
            </summary>
            <value>The member information.</value>
        </member>
        <member name="T:Stride.Core.Reflection.MemberDescriptorExtensions">
            <summary>
            Extension methods for <see cref="T:Stride.Core.Reflection.IMemberDescriptor"/>
            </summary>
        </member>
        <member name="T:Stride.Core.Reflection.PropertyDescriptor">
            <summary>
            A <see cref="T:Stride.Core.Reflection.IMemberDescriptor"/> for a <see cref="P:Stride.Core.Reflection.PropertyDescriptor.PropertyInfo"/>
            </summary>
        </member>
        <member name="P:Stride.Core.Reflection.PropertyDescriptor.PropertyInfo">
            <summary>
            Gets the property information attached to this instance.
            </summary>
            <value>The property information.</value>
        </member>
        <member name="M:Stride.Core.Reflection.PropertyDescriptor.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Stride.Core.Reflection.MemberPath">
            <summary>
            Allows to get/set a property/field value on a deeply nested object instance (supporting 
            members, list access and dictionary access)
            </summary>
        </member>
        <member name="F:Stride.Core.Reflection.MemberPath.stackTLS">
            <summary>
            We use a thread local static to avoid allocating a list of reference objects every time we access a property
            </summary>
        </member>
        <member name="M:Stride.Core.Reflection.MemberPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Reflection.MemberPath"/> class.
            </summary>
        </member>
        <member name="M:Stride.Core.Reflection.MemberPath.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Reflection.MemberPath"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Stride.Core.Reflection.MemberPath.#ctor(System.Collections.Generic.List{Stride.Core.Reflection.MemberPath.MemberPathItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Reflection.MemberPath"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Stride.Core.Reflection.MemberPath.Match(Stride.Core.Reflection.MemberPath)">
            <summary>
            Checks whether the given <see cref="T:Stride.Core.Reflection.MemberPath"/> matches with this instance.
            </summary>
            <param name="other"></param>
            <returns><c>true</c> if the given <see cref="T:Stride.Core.Reflection.MemberPath"/> matches with this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.Reflection.MemberPath.EnsureCapacity(System.Int32)">
            <summary>
            Ensures the capacity of the paths definition when using <see cref="M:Stride.Core.Reflection.MemberPath.Push(Stride.Core.Reflection.IMemberDescriptor)"/> methods.
            </summary>
            <param name="pathCount">The path count.</param>
        </member>
        <member name="M:Stride.Core.Reflection.MemberPath.Clear">
            <summary>
            Clears the current path.
            </summary>
        </member>
        <member name="M:Stride.Core.Reflection.MemberPath.GetCustomAttribute``1">
            <summary>
            Gets the custom attribute of the last property/field from this member path.
            </summary>
            <typeparam name="T">Type of the attribute</typeparam>
            <returns>A custom attribute or null if not found</returns>
        </member>
        <member name="M:Stride.Core.Reflection.MemberPath.Append(Stride.Core.Reflection.MemberPath)">
            <summary>
            Appends the given <paramref name="path"/> to this instance.
            </summary>
            <param name="path"></param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Stride.Core.Reflection.MemberPath.Push(Stride.Core.Reflection.IMemberDescriptor)">
            <summary>
            Pushes a member access on the path.
            </summary>
            <param name="descriptor">The descriptor of the member.</param>
            <exception cref="T:System.ArgumentNullException">descriptor</exception>
        </member>
        <member name="M:Stride.Core.Reflection.MemberPath.Push(Stride.Core.Reflection.ArrayDescriptor,System.Int32)">
            <summary>
            Pushes an array access on the path.
            </summary>
            <param name="descriptor">The descriptor of the array.</param>
            <param name="index">The index in the array.</param>
            <exception cref="T:System.ArgumentNullException">descriptor</exception>
        </member>
        <member name="M:Stride.Core.Reflection.MemberPath.Push(Stride.Core.Reflection.CollectionDescriptor,System.Int32)">
            <summary>
            Pushes an collection access on the path.
            </summary>
            <param name="descriptor">The descriptor of the collection.</param>
            <param name="index">The index in the collection.</param>
            <exception cref="T:System.ArgumentNullException">descriptor</exception>
        </member>
        <member name="M:Stride.Core.Reflection.MemberPath.Push(Stride.Core.Reflection.DictionaryDescriptor,System.Object)">
            <summary>
            Pushes an dictionary access on the path.
            </summary>
            <param name="descriptor">The descriptor of the dictionary.</param>
            <param name="key">The key.</param>
            <exception cref="T:System.ArgumentNullException">descriptor</exception>
        </member>
        <member name="M:Stride.Core.Reflection.MemberPath.Pop">
            <summary>
            Pops the last item from the current path.
            </summary>
        </member>
        <member name="M:Stride.Core.Reflection.MemberPath.GetTypeDescriptor">
            <summary>
            Gets the type descriptor of the member or collection represented by this path, or <c>null</c> is this instance is an empty path.
            </summary>
            <returns>The type descriptor of the member or collection represented by this path, or <c>null</c> is this instance is an empty path.</returns>
        </member>
        <member name="M:Stride.Core.Reflection.MemberPath.TryGetValue(System.Object,System.Object@)">
            <summary>
            Gets the value from the specified root object following this instance path.
            </summary>
            <param name="rootObject">The root object.</param>
            <param name="value">The returned value.</param>
            <returns><c>true</c> if evaluation of the path succeeded and the value is valid, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">rootObject</exception>
        </member>
        <member name="M:Stride.Core.Reflection.MemberPath.Clone">
            <summary>
            Clones this instance, cloning the current path.
            </summary>
            <returns>A clone of this instance.</returns>
        </member>
        <member name="M:Stride.Core.Reflection.MemberPath.CloneNestedPath(System.Int32)">
             <summary>
             Clones the inner part of the current path, skipping the given amount of nodes.
             </summary>
            <param name="containerNodeCount">The number of nodes to skip.</param>
             <returns>A clone of this instance.</returns>
        </member>
        <member name="M:Stride.Core.Reflection.MemberPath.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Stride.Core.Reflection.MemberPathAction">
            <summary>
            A type of action used by <see cref="M:Stride.Core.Reflection.MemberPath.Apply(System.Object,Stride.Core.Reflection.MemberPathAction,System.Object)"/>
            </summary>
        </member>
        <member name="F:Stride.Core.Reflection.MemberPathAction.ValueSet">
            <summary>
            The value is set on the <see cref="T:Stride.Core.Reflection.MemberPath"/> (field/property setter, or new key for dictionary or index
            for collection/array)
            </summary>
        </member>
        <member name="F:Stride.Core.Reflection.MemberPathAction.DictionaryRemove">
            <summary>
            Removes a key from the dictionary
            </summary>
        </member>
        <member name="F:Stride.Core.Reflection.MemberPathAction.CollectionAdd">
            <summary>
            Adds a value to the collection.
            </summary>
        </member>
        <member name="F:Stride.Core.Reflection.MemberPathAction.CollectionRemove">
            <summary>
            Removes a value from the collection
            </summary>
        </member>
        <member name="F:Stride.Core.Reflection.MemberPathAction.ValueClear">
            <summary>
            Clears the value.
            </summary>
        </member>
        <member name="T:Stride.Core.Reflection.TypeDescriptorFactory">
            <summary>
            A default implementation for the <see cref="T:Stride.Core.Reflection.ITypeDescriptorFactory"/>.
            </summary>
        </member>
        <member name="F:Stride.Core.Reflection.TypeDescriptorFactory.Default">
            <summary>
            The default type descriptor factory.
            </summary>
        </member>
        <member name="M:Stride.Core.Reflection.TypeDescriptorFactory.Create(System.Type)">
            <summary>
            Creates a type descriptor for the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>An instance of type descriptor.</returns>
        </member>
        <member name="T:Stride.Core.Reflection.ArrayDescriptor">
            <summary>
            A descriptor for an array.
            </summary>
        </member>
        <member name="P:Stride.Core.Reflection.ArrayDescriptor.ElementType">
            <summary>
            Gets the type of the array element.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="M:Stride.Core.Reflection.ArrayDescriptor.CreateArray(System.Int32)">
            <summary>
            Creates the equivalent of list type for this array.
            </summary>
            <returns>A list type with same element type than this array.</returns>
        </member>
        <member name="M:Stride.Core.Reflection.ArrayDescriptor.GetValue(System.Object,System.Int32)">
            <summary>
            Retrieves the item corresponding to the given index in the array.
            </summary>
            <param name="array">The array in which to read the item.</param>
            <param name="index">The index of the item to read.</param>
            <returns>The item corresponding to the given index in the array.</returns>
        </member>
        <member name="T:Stride.Core.Reflection.CollectionDescriptor">
            <summary>
            Provides a descriptor for a <see cref="T:System.Collections.ICollection"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Reflection.CollectionDescriptor.#ctor(Stride.Core.Reflection.ITypeDescriptorFactory,System.Type,System.Boolean,Stride.Core.Yaml.Serialization.IMemberNamingConvention)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Reflection.CollectionDescriptor" /> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="type">The type.</param>
            <exception cref="T:System.ArgumentException">Expecting a type inheriting from System.Collections.ICollection;type</exception>
        </member>
        <member name="P:Stride.Core.Reflection.CollectionDescriptor.ElementType">
            <summary>
            Gets or sets the type of the element.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="P:Stride.Core.Reflection.CollectionDescriptor.IsPureCollection">
            <summary>
            Gets a value indicating whether this instance is a pure collection (no public property/field)
            </summary>
            <value><c>true</c> if this instance is pure collection; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.Reflection.CollectionDescriptor.HasAdd">
            <summary>
            Gets a value indicating whether this collection type has add method.
            </summary>
            <value><c>true</c> if this instance has add; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.Reflection.CollectionDescriptor.HasInsert">
            <summary>
            Gets a value indicating whether this collection type has insert method.
            </summary>
            <value><c>true</c> if this instance has insert; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.Reflection.CollectionDescriptor.HasRemoveAt">
            <summary>
            Gets a value indicating whether this collection type has RemoveAt method.
            </summary>
            <value><c>true</c> if this instance has RemoveAt; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.Reflection.CollectionDescriptor.HasRemove">
            <summary>
            Gets a value indicating whether this collection type has Remove method.
            </summary>
            <value><c>true</c> if this instance has Remove; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.Reflection.CollectionDescriptor.HasIndexerAccessors">
            <summary>
            Gets a value indicating whether this collection type has valid indexer accessors.
            If so, <see cref="M:Stride.Core.Reflection.CollectionDescriptor.SetValue(System.Object,System.Object,System.Object)"/> and <see cref="M:Stride.Core.Reflection.CollectionDescriptor.GetValue(System.Object,System.Object)"/> can be invoked.
            </summary>
            <value><c>true</c> if this instance has a valid indexer setter; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.Reflection.CollectionDescriptor.IsList">
            <summary>
            Gets a value indicating whether this collection implements <see cref="T:System.Collections.IList"/> or <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Reflection.CollectionDescriptor.GetValue(System.Object,System.Object)">
            <summary>
            Returns the value matching the given index in the collection.
            </summary>
            <param name="list">The list.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Stride.Core.Reflection.CollectionDescriptor.GetValue(System.Object,System.Int32)">
            <summary>
            Returns the value matching the given index in the collection.
            </summary>
            <param name="list">The list.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Stride.Core.Reflection.CollectionDescriptor.Clear(System.Object)">
            <summary>
            Clears the specified collection.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Stride.Core.Reflection.CollectionDescriptor.Add(System.Object,System.Object)">
            <summary>
            Add to the collections of the same type than this descriptor.
            </summary>
            <param name="collection">The collection.</param>
            <param name="value">The value to add to this collection.</param>
        </member>
        <member name="M:Stride.Core.Reflection.CollectionDescriptor.Insert(System.Object,System.Int32,System.Object)">
            <summary>
            Insert to the collections of the same type than this descriptor.
            </summary>
            <param name="collection">The collection.</param>
            <param name="index">The index of the insertion.</param>
            <param name="value">The value to insert to this collection.</param>
        </member>
        <member name="M:Stride.Core.Reflection.CollectionDescriptor.RemoveAt(System.Object,System.Int32)">
            <summary>
            Remove item at the given index from the collections of the same type.
            </summary>
            <param name="collection">The collection.</param>
            <param name="index">The index of the item to remove from this collection.</param>
        </member>
        <member name="M:Stride.Core.Reflection.CollectionDescriptor.Remove(System.Object,System.Object)">
            <summary>
            Removes the item from the collections of the same type.
            </summary>
            <param name="collection">The collection.</param>
            <param name="item"></param>
        </member>
        <member name="M:Stride.Core.Reflection.CollectionDescriptor.IsReadOnly(System.Object)">
            <summary>
            Determines whether the specified collection is read only.
            </summary>
            <param name="collection">The collection.</param>
            <returns><c>true</c> if the specified collection is read only; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.Reflection.CollectionDescriptor.GetCollectionCount(System.Object)">
            <summary>
            Determines the number of elements of a collection, -1 if it cannot determine the number of elements.
            </summary>
            <param name="collection">The collection.</param>
            <returns>The number of elements of a collection, -1 if it cannot determine the number of elements.</returns>
        </member>
        <member name="M:Stride.Core.Reflection.CollectionDescriptor.IsCollection(System.Type)">
            <summary>
            Determines whether the specified type is collection.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is collection; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Stride.Core.Reflection.DescriptorCategory">
            <summary>
            A category used by <see cref="!:ITypeDescriptorBase"/>.
            </summary>
        </member>
        <member name="F:Stride.Core.Reflection.DescriptorCategory.Primitive">
            <summary>
            A primitive.
            </summary>
        </member>
        <member name="F:Stride.Core.Reflection.DescriptorCategory.Collection">
            <summary>
            A collection.
            </summary>
        </member>
        <member name="F:Stride.Core.Reflection.DescriptorCategory.Array">
            <summary>
            An array
            </summary>
        </member>
        <member name="F:Stride.Core.Reflection.DescriptorCategory.Dictionary">
            <summary>
            A dictionary
            </summary>
        </member>
        <member name="F:Stride.Core.Reflection.DescriptorCategory.Object">
            <summary>
            An object
            </summary>
        </member>
        <member name="F:Stride.Core.Reflection.DescriptorCategory.NotSupportedObject">
            <summary>
            An unsupported object. This will be treated the same as Object.
            </summary>
        </member>
        <member name="F:Stride.Core.Reflection.DescriptorCategory.Nullable">
            <summary>
            A nullable value
            </summary>
        </member>
        <member name="F:Stride.Core.Reflection.DescriptorCategory.Custom">
            <summary>
            A custom descriptor.
            </summary>
        </member>
        <member name="T:Stride.Core.Reflection.DictionaryDescriptor">
            <summary>
            Provides a descriptor for a <see cref="T:System.Collections.IDictionary"/>.
            </summary>
        </member>
        <member name="P:Stride.Core.Reflection.DictionaryDescriptor.IsGenericDictionary">
            <summary>
            Gets a value indicating whether this instance is generic dictionary.
            </summary>
            <value><c>true</c> if this instance is generic dictionary; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.Reflection.DictionaryDescriptor.KeyType">
            <summary>
            Gets the type of the key.
            </summary>
            <value>The type of the key.</value>
        </member>
        <member name="P:Stride.Core.Reflection.DictionaryDescriptor.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
            <value>The type of the value.</value>
        </member>
        <member name="P:Stride.Core.Reflection.DictionaryDescriptor.IsPureDictionary">
            <summary>
            Gets or sets a value indicating whether this instance is pure dictionary.
            </summary>
            <value><c>true</c> if this instance is pure dictionary; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Stride.Core.Reflection.DictionaryDescriptor.IsReadOnly(System.Object)">
            <summary>
            Determines whether the value passed is readonly.
            </summary>
            <param name="thisObject">The this object.</param>
            <returns><c>true</c> if [is read only] [the specified this object]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.Reflection.DictionaryDescriptor.GetEnumerator(System.Object)">
            <summary>
            Gets a generic enumerator for a dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <returns>A generic enumerator.</returns>
            <exception cref="T:System.ArgumentNullException">dictionary</exception>
        </member>
        <member name="M:Stride.Core.Reflection.DictionaryDescriptor.SetValue(System.Object,System.Object,System.Object)">
            <summary>
            Adds a a key-value to a dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.InvalidOperationException">No Add() method found on dictionary [{0}].ToFormat(Type)</exception>
        </member>
        <member name="M:Stride.Core.Reflection.DictionaryDescriptor.AddToDictionary(System.Object,System.Object,System.Object)">
            <summary>
            Adds a a key-value to a dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.InvalidOperationException">No Add() method found on dictionary [{0}].DoFormat(Type)</exception>
        </member>
        <member name="M:Stride.Core.Reflection.DictionaryDescriptor.Remove(System.Object,System.Object)">
            <summary>
            Remove a key-value from a dictionary
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Stride.Core.Reflection.DictionaryDescriptor.ContainsKey(System.Object,System.Object)">
            <summary>
            Indicate whether the dictionary contains the given key
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Stride.Core.Reflection.DictionaryDescriptor.GetKeys(System.Object)">
            <summary>
            Returns an enumerable of the keys in the dictionary
            </summary>
            <param name="dictionary">The dictionary</param>
        </member>
        <member name="M:Stride.Core.Reflection.DictionaryDescriptor.GetValues(System.Object)">
            <summary>
            Returns an enumerable of the values in the dictionary
            </summary>
            <param name="dictionary">The dictionary</param>
        </member>
        <member name="M:Stride.Core.Reflection.DictionaryDescriptor.GetValue(System.Object,System.Object)">
            <summary>
            Returns the value matching the given key in the dictionary, or null if the key is not found
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Stride.Core.Reflection.DictionaryDescriptor.IsDictionary(System.Type)">
            <summary>
            Determines whether the specified type is a .NET dictionary.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is dictionary; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Stride.Core.Reflection.ITypeDescriptor">
            <summary>
            Provides access members of a type.
            </summary>
        </member>
        <member name="P:Stride.Core.Reflection.ITypeDescriptor.Type">
            <summary>
            Gets the type described by this instance.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Stride.Core.Reflection.ITypeDescriptor.Attributes">
            <summary>
            Gets the list of attributes attached to this type.
            </summary>
            <value>The list of attributes.</value>
        </member>
        <member name="P:Stride.Core.Reflection.ITypeDescriptor.Members">
            <summary>
            Gets the members of this type.
            </summary>
            <value>The members.</value>
        </member>
        <member name="P:Stride.Core.Reflection.ITypeDescriptor.Count">
            <summary>
            Gets the member count.
            </summary>
            <value>The member count.</value>
        </member>
        <member name="P:Stride.Core.Reflection.ITypeDescriptor.Category">
            <summary>
            Gets the category of this descriptor.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:Stride.Core.Reflection.ITypeDescriptor.HasMembers">
            <summary>
            Gets a value indicating whether this instance has members.
            </summary>
            <value><c>true</c> if this instance has members; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Core.Reflection.ITypeDescriptor.Item(System.String)">
            <summary>
            Gets the <see cref="T:Stride.Core.Reflection.IMemberDescriptor"/> with the specified name.
            </summary>
            <param name="name">The name of the member.</param>
            <returns>The member.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when a member </exception>
        </member>
        <member name="M:Stride.Core.Reflection.ITypeDescriptor.TryGetMember(System.String)">
            <summary>
            Tries to get a member with the specified name. If nothing could be found, returns null.
            </summary>
            <param name="name">The name of the member.</param>
            <returns>The member if found, otherwise [null].</returns>
        </member>
        <member name="P:Stride.Core.Reflection.ITypeDescriptor.IsCompilerGenerated">
            <summary>
            Gets a value indicating whether this instance is a compiler generated type.
            </summary>
            <value><c>true</c> if this instance is a compiler generated type; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Stride.Core.Reflection.ITypeDescriptor.IsMemberRemapped(System.String)">
            <summary>
            Determines whether the named member is remmaped.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if the named member is remmaped; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Stride.Core.Reflection.ITypeDescriptor.Style">
            <summary>
            Gets the style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="M:Stride.Core.Reflection.ITypeDescriptor.Initialize(System.Collections.Generic.IComparer{System.Object})">
            <summary>
            Initializes the type descriptor.
            </summary>
            <param name="keyComparer"></param>
        </member>
        <member name="M:Stride.Core.Reflection.ITypeDescriptor.Contains(System.String)">
            <summary>
            Determines whether this instance contains a member with the specified member name.
            </summary>
            <param name="memberName">Name of the member.</param>
            <returns><c>true</c> if this instance contains a member with the specified member name; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Stride.Core.Reflection.NotSupportedObjectDescriptor">
            <summary>
            Describes a descriptor for an unsupported object type.
            This will be treated as an <see cref="T:Stride.Core.Reflection.ObjectDescriptor"/>
            </summary>
        </member>
        <member name="M:Stride.Core.Reflection.NotSupportedObjectDescriptor.#ctor(Stride.Core.Reflection.ITypeDescriptorFactory,System.Type,System.Boolean,Stride.Core.Yaml.Serialization.IMemberNamingConvention)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Reflection.NotSupportedObjectDescriptor" /> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="type">The type.</param>
            <exception cref="T:System.ArgumentException">Type [{0}] is not a primitive</exception>
        </member>
        <member name="T:Stride.Core.Reflection.NullableDescriptor">
            <summary>
            Describes a descriptor for a nullable type <see cref="T:System.Nullable`1"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Reflection.NullableDescriptor.#ctor(Stride.Core.Reflection.ITypeDescriptorFactory,System.Type,System.Boolean,Stride.Core.Yaml.Serialization.IMemberNamingConvention)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Reflection.ObjectDescriptor" /> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="type">The type.</param>
            <exception cref="T:System.ArgumentException">Type [{0}] is not a primitive</exception>
        </member>
        <member name="P:Stride.Core.Reflection.NullableDescriptor.UnderlyingType">
            <summary>
            Gets the type underlying type T of the nullable <see cref="T:System.Nullable`1"/>
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="M:Stride.Core.Reflection.NullableDescriptor.IsNullable(System.Type)">
            <summary>
            Determines whether the specified type is nullable.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is nullable; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Stride.Core.Reflection.ObjectDescriptor">
            <summary>
            Default implementation of a <see cref="T:Stride.Core.Reflection.ITypeDescriptor"/>.
            </summary>
        </member>
        <member name="M:Stride.Core.Reflection.ObjectDescriptor.#ctor(Stride.Core.Reflection.ITypeDescriptorFactory,System.Type,System.Boolean,Stride.Core.Yaml.Serialization.IMemberNamingConvention)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Core.Reflection.ObjectDescriptor" /> class.
            </summary>
        </member>
        <member name="P:Stride.Core.Reflection.ObjectDescriptor.NamingConvention">
            <summary>
            Gets the naming convention.
            </summary>
            <value>The naming convention.</value>
        </member>
        <member name="P:Stride.Core.Reflection.ObjectDescriptor.Attributes">
            <summary>
            Gets attributes attached to this type.
            </summary>
        </member>
        <member name="T:Stride.Core.Reflection.PrimitiveDescriptor">
            <summary>
            Describes a descriptor for a primitive (bool, char, sbyte, byte, int, uint, long, ulong, float, double, decimal, string, DateTime).
            </summary>
        </member>
        <member name="M:Stride.Core.Reflection.PrimitiveDescriptor.ParseEnum(System.String,System.Boolean@)">
            <summary>
            Parses the enum and trying to use remap if any declared.
            </summary>
            <param name="enumAsText">The enum as text.</param>
            <param name="remapped">if set to <c>true</c> the enum was remapped.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Stride.Core.Reflection.PrimitiveDescriptor.IsPrimitive(System.Type)">
            <summary>
            Determines whether the specified type is a primitive.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is primitive; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.Reflection.TypeExtensions.Default(System.Type)">
            <summary>
            Gets the default value of this type.
            </summary>
            <param name="type">The type for which to get the default value.</param>
            <returns>The default value of this type.</returns>
        </member>
        <member name="M:Stride.Core.Reflection.TypeExtensions.IsAnonymous(System.Type)">
            <summary>
            Determines whether the specified type is an anonymous type.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is anonymous; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.Reflection.TypeExtensions.IsNumeric(System.Type)">
            <summary>
            Indicates if a type is a integral or decimal numeric type. 
            </summary>
            <param name="type">The type to evaluate.</param>
            <returns>True if the type is a numeric type, false otherwise.</returns>
            <seealso cref="M:Stride.Core.Reflection.TypeExtensions.IsIntegral(System.Type)"/>
        </member>
        <member name="M:Stride.Core.Reflection.TypeExtensions.IsIntegral(System.Type)">
            <summary>
            Indicates if a type is a integral numeric type. 
            </summary>
            <param name="type">The type to evaluate.</param>
            <returns>True if the type is a numeric type, false otherwise.</returns>
            <seealso cref="M:Stride.Core.Reflection.TypeExtensions.IsNumeric(System.Type)"/>
        </member>
        <member name="M:Stride.Core.Reflection.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Determines whether the specified type is a <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is nullable; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Core.Reflection.TypeExtensions.IsStruct(System.Type)">
            <summary>
            Indicates whether the specified <paramref name="type"/> is a non-primitive struct type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to be analyzed.</param>
            <returns><c>True</c> if the specified <paramref name="type"/> is a non-primitive struct type; otehrwise <c>False</c>.</returns>
        </member>
        <member name="M:Stride.Core.Reflection.TypeExtensions.IsPureValueType(System.Type)">
            <summary>
            Check if the type is a ValueType and does not contain any non ValueType members.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Stride.Core.Yaml.Serialization.DefaultNamingConvention">
            <summary>
            A naming convention where all members are outputed as-is.
            </summary>
        </member>
        <member name="T:Stride.Core.Yaml.Serialization.IMemberNamingConvention">
            <summary>
            Base interface for renaming members.
            </summary>
        </member>
        <member name="P:Stride.Core.Yaml.Serialization.IMemberNamingConvention.Comparer">
            <summary>
            Gets the comparer used for this member name.
            </summary>
            <value>The comparer.</value>
        </member>
        <member name="M:Stride.Core.Yaml.Serialization.IMemberNamingConvention.Convert(System.String)">
            <summary>
            Converts the specified member name.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Stride.StrideVersion">
            <summary>
            Internal version used to identify Stride version.
            </summary>
            <remarks>
            During package build, PackageUpdateVersionTask is updating that file and expect some specific text regex so be careful if you change any of this.
            </remarks>
        </member>
        <member name="F:Stride.StrideVersion.PublicVersion">
            <summary>
            The version used by editor for display purpose. 4th digit needs to be at least 1 if used (due to NuGet special cases).
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.AssemblyVersion">
            <summary>
            The current assembly version as text, currently same as <see cref="F:Stride.StrideVersion.PublicVersion"/>.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersionSimple">
            <summary>
            The NuGet package version without special tags.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersion">
            <summary>
            The NuGet package version.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersionSuffix">
            <summary>
            The NuGet package suffix (i.e. -beta01). Automatically set by Stride.GitVersioning.GenerateVersionFile.
            Three possible values:
            - Empty: official release
            - -betaXX: development version (XX should corespond to development asset versioning)
            - -betaXX-YYYY: beta release (YYYY is the git height since current version has been bumped)
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.BuildMetadata">
            <summary>
            The build metadata, usually +g[git_hash] during package. Automatically set by Stride.GitVersioning.GenerateVersionFile.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.AssemblyInformationalVersion">
            <summary>
            The informational assembly version, containing -beta01 or +g[git_hash] during package.
            </summary>
        </member>
        <member name="T:Stride.PublicKeys">
            <summary>
            Assembly signing information.
            </summary>
        </member>
        <member name="F:Stride.PublicKeys.Default">
            <summary>
            Assembly name suffix that contains signing information.
            </summary>
        </member>
    </members>
</doc>
