<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stride.Input</name>
    </assembly>
    <members>
        <member name="M:Stride.Input.AccelerometerSensor.#ctor(Stride.Input.IInputSource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Input.AccelerometerSensor"/> class.
            </summary>
        </member>
        <member name="T:Stride.Input.AxisEvent">
            <summary>
            Event for an axis changing state on a device
            </summary>
        </member>
        <member name="F:Stride.Input.AxisEvent.Value">
            <summary>
            The new value of the axis
            </summary>
        </member>
        <member name="T:Stride.Input.ButtonEvent">
            <summary>
            Event for a button changing state on a device
            </summary>
        </member>
        <member name="F:Stride.Input.ButtonEvent.IsDown">
            <summary>
            The new state of the button
            </summary>
        </member>
        <member name="M:Stride.Input.CompassSensor.#ctor(Stride.Input.IInputSource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Input.CompassSensor"/> class.
            </summary>
        </member>
        <member name="T:Stride.Input.DeviceChangedEventArgs">
            <summary>
            An event used when a device was changed
            </summary>
        </member>
        <member name="F:Stride.Input.DeviceChangedEventArgs.Source">
            <summary>
            The input source this device belongs to
            </summary>
        </member>
        <member name="F:Stride.Input.DeviceChangedEventArgs.Device">
            <summary>
            The device that changed
            </summary>
        </member>
        <member name="F:Stride.Input.DeviceChangedEventArgs.Type">
            <summary>
            The type of change that happened
            </summary>
        </member>
        <member name="F:Stride.Input.DeviceChangedEventType.Removed">
            <summary>
            A device was removed
            </summary>
        </member>
        <member name="F:Stride.Input.DeviceChangedEventType.Added">
            <summary>
            A device was added
            </summary>
        </member>
        <member name="T:Stride.Input.Direction">
            <summary>
            Represents a direction or neutral position
            </summary>
        </member>
        <member name="M:Stride.Input.Direction.#ctor(Stride.Core.Mathematics.Vector2)">
            <summary>
            Creates a new direction from the given vector
            </summary>
            <param name="direction">A normalized 2d direction or <see cref="F:Stride.Core.Mathematics.Vector2.Zero"/> for a neutral position</param>
        </member>
        <member name="P:Stride.Input.Direction.IsNeutral">
            <summary>
            <c>true</c> if the direction is in a neutral position. Same as checking against Direction.None
            </summary>
        </member>
        <member name="M:Stride.Input.Direction.FromTicks(System.Int32,System.Int32)">
            <summary>
            Creates a new direction from a ratio. 
            with 0/1 corresponding to the direction (0,1), 1/4 corresponding to (1,0), etc.
            </summary>
            <param name="value">The amount of ticks clockwise from the Up direction (numerator)</param>
            <param name="maxValue">The number of ticks representing a full rotation (denominator)</param>
            <returns>A direction with ratio <paramref name="value"/> over <paramref name="maxValue"/></returns>
        </member>
        <member name="M:Stride.Input.Direction.GetTicks(System.Int32)">
            <summary>
            Retrieves the amount of ticks clockwise from the Up direction
            </summary>
            <param name="maxValue">The number of ticks representing a full rotation</param>
            <returns></returns>
        </member>
        <member name="T:Stride.Input.GameControllerAxisEvent">
            <summary>
            An event to describe a change in a game controller axis state
            </summary>
        </member>
        <member name="F:Stride.Input.GameControllerAxisEvent.Index">
            <summary>
            Index of the axis
            </summary>
        </member>
        <member name="P:Stride.Input.GameControllerAxisEvent.GameController">
            <summary>
            The game controller that sent this event
            </summary>
        </member>
        <member name="T:Stride.Input.GameControllerAxisInfo">
            <summary>
            Provides information about a gamepad axis
            </summary>
        </member>
        <member name="T:Stride.Input.GameControllerButtonEvent">
            <summary>
            An event to describe a change in game controller button state
            </summary>
        </member>
        <member name="F:Stride.Input.GameControllerButtonEvent.Index">
            <summary>
            The index of the button
            </summary>
        </member>
        <member name="P:Stride.Input.GameControllerButtonEvent.GameController">
            <summary>
            The game controller that sent this event
            </summary>
        </member>
        <member name="T:Stride.Input.GameControllerButtonInfo">
            <summary>
            Provides information about a gamepad button
            </summary>
        </member>
        <member name="F:Stride.Input.GameControllerButtonInfo.Type">
            <summary>
            The type of button
            </summary>
        </member>
        <member name="T:Stride.Input.GameControllerButtonType">
            <summary>
            The types of gamepad buttons
            </summary>
        </member>
        <member name="F:Stride.Input.GameControllerButtonType.PushButton">
            <summary>
            A regular button
            </summary>
        </member>
        <member name="F:Stride.Input.GameControllerButtonType.ToggleButton">
            <summary>
            A button that is physically toggled when pressed
            </summary>
        </member>
        <member name="T:Stride.Input.GameControllerDeviceBase">
            <summary>
            Base class for gamepads, contains common functionality for gamepad devices
            </summary>
        </member>
        <member name="M:Stride.Input.GameControllerDeviceBase.InitializeButtonStates">
            <summary>
            Creates the correct amount of states based on the amount of object infos that are set
            </summary>
        </member>
        <member name="M:Stride.Input.GameControllerDeviceBase.Update(System.Collections.Generic.List{Stride.Input.InputEvent})">
            <summary>
            Raise gamepad events collected by Handle... functions
            </summary>
        </member>
        <member name="T:Stride.Input.GameControllerDirectionEvent">
            <summary>
            An event to describe a change in game controller direction state
            </summary>
        </member>
        <member name="F:Stride.Input.GameControllerDirectionEvent.Index">
            <summary>
            The index of the direction controller
            </summary>
        </member>
        <member name="F:Stride.Input.GameControllerDirectionEvent.Direction">
            <summary>
            The new direction
            </summary>
        </member>
        <member name="P:Stride.Input.GameControllerDirectionEvent.GameController">
            <summary>
            The gamepad that sent this event
            </summary>
        </member>
        <member name="T:Stride.Input.GameControllerDirectionInfo">
            <summary>
            Provides information about a gamepad direction input
            </summary>
        </member>
        <member name="M:Stride.Input.GameControllerExtensions.GetButtonCount(Stride.Input.IGameControllerDevice)">
            <summary>
            Gets the number of buttons on this gamepad
            </summary>
            <param name="device">The gamepad</param>
            <returns>The number of buttons</returns>
        </member>
        <member name="M:Stride.Input.GameControllerExtensions.GetAxisCount(Stride.Input.IGameControllerDevice)">
            <summary>
            Gets the number of axes on this gamepad
            </summary>
            <param name="device">The gamepad</param>
            <returns>The number of axes</returns>
        </member>
        <member name="M:Stride.Input.GameControllerExtensions.GetDirectionCount(Stride.Input.IGameControllerDevice)">
            <summary>
            Gets the number of direction inputs on this gamepad
            </summary>
            <param name="device">The gamepad</param>
            <returns>The number of direction controllers</returns>
        </member>
        <member name="M:Stride.Input.GameControllerExtensions.GetDPad(Stride.Input.IGameControllerDevice,System.Int32)">
            <summary>
            Returns the value of a direction controller converted to a <see cref="T:Stride.Input.GamePadButton"/> which has the matching Pad flags set
            </summary>
            <param name="device">The gamepad</param>
            <param name="index">The index of the direction controller</param>
            <returns></returns>
        </member>
        <member name="T:Stride.Input.GameControllerObjectInfo">
            <summary>
            Provides information about an object exposed by a gamepad
            </summary>
        </member>
        <member name="F:Stride.Input.GameControllerObjectInfo.Name">
            <summary>
            The name of the object, reported by the device
            </summary>
        </member>
        <member name="T:Stride.Input.GameControllerUtils">
            <summary>
            Provides some useful functions relating to game controllers
            </summary>
        </member>
        <member name="M:Stride.Input.GameControllerUtils.DirectionToButtons(Stride.Input.Direction)">
            <summary>
            Converts a <see cref="T:Stride.Input.Direction"/> to a combination of <see cref="T:Stride.Input.GamePadButton"/>'s
            </summary>
        </member>
        <member name="M:Stride.Input.GameControllerUtils.ButtonsToDirection(Stride.Input.GamePadButton)">
            <summary>
            Converts the pad buttons of a <see cref="T:Stride.Input.GamePadButton"/> to a <see cref="T:Stride.Input.Direction"/>
            </summary>
        </member>
        <member name="T:Stride.Input.GamePadAxis">
            <summary>
            Axis for gamepad returned by <see cref="T:Stride.Input.GamePadState"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadAxis.LeftThumbX">
            <summary>
            The X-Axis of the left thumb stick
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadAxis.LeftThumbY">
            <summary>
            The Y-Axis of the left thumb stick
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadAxis.RightThumbX">
            <summary>
            The X-Axis of the right thumb stick
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadAxis.RightThumbY">
            <summary>
            The Y-Axis of the right thumb stick
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadAxis.LeftTrigger">
            <summary>
            The left trigger
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadAxis.RightTrigger">
            <summary>
            The right trigger
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadAxis.None">
            <summary>
            No Axis
            </summary>
        </member>
        <member name="T:Stride.Input.GamePadAxisEvent">
            <summary>
            An event to describe a change in a gamepad axis
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadAxisEvent.Axis">
            <summary>
            The gamepad axis identifier
            </summary>
        </member>
        <member name="P:Stride.Input.GamePadAxisEvent.GamePad">
            <summary>
            The gamepad that sent this event
            </summary>
        </member>
        <member name="T:Stride.Input.GamePadButton">
            <summary>
            Buttons for gamepad returned by <see cref="T:Stride.Input.GamePadState"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadButton.PadUp">
            <summary>
            PadUp button. (DPad / Directional Pad)
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadButton.PadDown">
            <summary>
            PadDown button. (DPad / Directional Pad)
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadButton.PadLeft">
            <summary>
            PadLeft button. (DPad / Directional Pad)
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadButton.PadRight">
            <summary>
            PadRight button. (DPad / Directional Pad)
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadButton.Pad">
            <summary>
            Any pad button (DPad / Directional Pad)
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadButton.Start">
            <summary>
            Start button.
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadButton.Back">
            <summary>
            Back button.
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadButton.LeftThumb">
            <summary>
            Left thumb button.
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadButton.RightThumb">
            <summary>
            Right thumb button.
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadButton.LeftShoulder">
            <summary>
            Left shoulder button.
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadButton.RightShoulder">
            <summary>
            Right shoulder button.
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadButton.A">
            <summary>
            A button.
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadButton.B">
            <summary>
            B button.
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadButton.X">
            <summary>
            X button.
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadButton.Y">
            <summary>
            Y button.
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadButton.None">
            <summary>
            No buttons.
            </summary>
        </member>
        <member name="T:Stride.Input.GamePadButtonEvent">
            <summary>
            An event to describe a change in gamepad button state
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadButtonEvent.Button">
            <summary>
            The gamepad button identifier
            </summary>
        </member>
        <member name="P:Stride.Input.GamePadButtonEvent.GamePad">
            <summary>
            The gamepad that sent this event
            </summary>
        </member>
        <member name="M:Stride.Input.GamePadDeviceBase.ClearButtonStates">
            <summary>
            Clears previous Pressed/Released states
            </summary>
        </member>
        <member name="M:Stride.Input.GamePadDeviceBase.UpdateButtonState(Stride.Input.GamePadButtonEvent)">
            <summary>
            Updates Pressed/Released/Down collections
            </summary>
        </member>
        <member name="T:Stride.Input.GamePadDeviceExtensions">
            <summary>
            Provides easier ways to set vibration levels on a controller, rather than setting 4 motors
            </summary>
        </member>
        <member name="M:Stride.Input.GamePadDeviceExtensions.SetVibration(Stride.Input.IGamePadDevice,System.Single)">
            <summary>
            Sets all the gamepad vibration motors to the same amount
            </summary>
            <param name="gamepad">The gamepad</param>
            <param name="amount">The amount of vibration</param>
        </member>
        <member name="M:Stride.Input.GamePadDeviceExtensions.SetVibration(Stride.Input.IGamePadDevice,System.Single,System.Single)">
            <summary>
            Sets the gamepad's large and small motors to the given amounts
            </summary>
            <param name="gamepad">The gamepad</param>
            <param name="largeMotors">The amount of vibration for the large motors</param>
            <param name="smallMotors">The amount of vibration for the small motors</param>
        </member>
        <member name="M:Stride.Input.GamePadDeviceExtensions.IsButtonPressed(Stride.Input.IGamePadDevice,Stride.Input.GamePadButton)">
            <summary>
            Determines whether the specified button is pressed since the previous update.
            </summary>
            <param name="gamepad">The gamepad</param>
            <param name="button">The button</param>
            <returns><c>true</c> if the specified button is pressed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Input.GamePadDeviceExtensions.IsButtonReleased(Stride.Input.IGamePadDevice,Stride.Input.GamePadButton)">
            <summary>
            Determines whether the specified button is released since the previous update.
            </summary>
            /// <param name="gamepad">The gamepad</param>
            <param name="button">The button</param>
            <returns><c>true</c> if the specified button is released; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Input.GamePadDeviceExtensions.IsButtonDown(Stride.Input.IGamePadDevice,Stride.Input.GamePadButton)">
            <summary>
            Determines whether the specified button is being pressed down
            </summary>
            /// <param name="gamepad">The gamepad</param>
            <param name="button">The button</param>
            <returns><c>true</c> if the specified button is being pressed down; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Stride.Input.GameControllerDeviceExtensions">
            <summary>
            Provides easier ways to set vibration levels on a controller, rather than setting 4 motors
            </summary>
        </member>
        <member name="M:Stride.Input.GameControllerDeviceExtensions.IsButtonPressed(Stride.Input.IGameControllerDevice,System.Int32)">
            <summary>
            Determines whether the specified button is pressed since the previous update.
            </summary>
            <param name="controller">The controller</param>
            <param name="button">The button</param>
            <returns><c>true</c> if the specified button is pressed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Input.GameControllerDeviceExtensions.IsButtonReleased(Stride.Input.IGameControllerDevice,System.Int32)">
            <summary>
            Determines whether the specified button is released since the previous update.
            </summary>
            /// <param name="controller">The controller</param>
            <param name="button">The button</param>
            <returns><c>true</c> if the specified button is released; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Input.GameControllerDeviceExtensions.IsButtonDown(Stride.Input.IGameControllerDevice,System.Int32)">
            <summary>
            Determines whether the specified button is being pressed down
            </summary>
            /// <param name="controller">The controller</param>
            <param name="button">The button</param>
            <returns><c>true</c> if the specified button is being pressed down; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Stride.Input.GamePadFromLayout">
            <summary>
            A <see cref="T:Stride.Input.IGamePadDevice"/> from a <see cref="T:Stride.Input.IGameControllerDevice"/> using a <see cref="T:Stride.Input.GamePadLayout"/> to create a mapping between the two
            </summary>
        </member>
        <member name="M:Stride.Input.GamePadFromLayout.#ctor(Stride.Input.InputManager,Stride.Input.IGameControllerDevice,Stride.Input.GamePadLayout)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Input.GamePadFromLayout"/> class.
            </summary>
        </member>
        <member name="T:Stride.Input.GamePadIndexChangedEventArgs">
            <summary>
            Event for when a <see cref="T:Stride.Input.IGamePadDevice"/>'s index changed
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadIndexChangedEventArgs.Index">
            <summary>
            New device index
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadIndexChangedEventArgs.IsDeviceSideChange">
            <summary>
            if <c>true</c>, this change was initiate by the device
            </summary>
        </member>
        <member name="T:Stride.Input.GamePadLayout">
            <summary>
            Provides a <see cref="T:Stride.Input.IGameControllerDevice"/> to <see cref="T:Stride.Input.IGamePadDevice"/> mapping
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadLayout.mapFirstPovToPad">
            <summary>
            Should direction controller 0 be mapped to the directional pad?
            </summary>
        </member>
        <member name="M:Stride.Input.GamePadLayout.CompareProductId(System.Guid,System.Guid,System.Int32,System.Int32)">
            <summary>
            Compares a product id
            </summary>
            <param name="a">id a</param>
            <param name="b">id b</param>
            <param name="numBytes">number of bytes to compare, starting from <paramref name="byteOffset"/></param>
            <param name="byteOffset">starting byte index from where to compare</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Input.GamePadLayout.MatchDevice(Stride.Input.IInputSource,Stride.Input.IGameControllerDevice)">
            <summary>
            Checks if a device matches this gamepad layout, and thus should use this when mapping it to a <see cref="T:Stride.Input.GamePadState"/>
            </summary>
            <param name="source">Source that this device comes from</param>
            <param name="device">The device to match</param>
        </member>
        <member name="M:Stride.Input.GamePadLayout.InitializeDevice(Stride.Input.IGamePadDevice,Stride.Input.IGameControllerDevice)">
            <summary>
            Allows the user to perform some additional setup operations when using this layout on a device
            </summary>
            <param name="targetDevice">The gamepad that events are mapped to</param>
            <param name="sourceDevice">The game controller that is mapped to a gamepad</param>
        </member>
        <member name="M:Stride.Input.GamePadLayout.MapInputEvent(Stride.Input.IGamePadDevice,Stride.Input.IGameControllerDevice,Stride.Input.InputEvent,System.Collections.Generic.List{Stride.Input.InputEvent})">
            <summary>
            Maps game controller events to gamepad events
            </summary>
            <returns>The equivalent gamepad event</returns>
            <param name="targetDevice">The gamepad that events are mapped to</param>
            <param name="sourceDevice">The game controller that is mapped to a gamepad</param>
            <param name="controllerEvent">The controller input event as a source</param>
            <param name="target">Target list</param>
        </member>
        <member name="M:Stride.Input.GamePadLayout.AddButtonToButton(System.Int32,Stride.Input.GamePadButton)">
            <summary>
            Adds a mapping from a button index to <see cref="T:Stride.Input.GamePadButton"/>
            </summary>
            <param name="index">The button index of the button on this device</param>
            <param name="button">The button(s) to map to</param>
        </member>
        <member name="M:Stride.Input.GamePadLayout.AddAxisToButton(System.Int32,Stride.Input.GamePadButton)">
            <summary>
            Adds a mapping from an axis index to <see cref="T:Stride.Input.GamePadButton"/>
            </summary>
            <param name="index">The axis index of the axis on this device</param>
            <param name="button">The button(s) to map to</param>
        </member>
        <member name="M:Stride.Input.GamePadLayout.AddButtonToAxis(System.Int32,Stride.Input.GamePadAxis,System.Boolean)">
            <summary>
            Adds a mapping from a button index to <see cref="T:Stride.Input.GamePadAxis"/>
            </summary>
            <param name="index">The button index of the button on this device</param>
            <param name="axis">The axi to map to</param>
            <param name="invert">Should axis be inverted, output -1 instead of 1 on press</param>
        </member>
        <member name="M:Stride.Input.GamePadLayout.AddAxisToAxis(System.Int32,Stride.Input.GamePadAxis,System.Boolean,System.Boolean)">
            <summary>
            Adds a mapping from an axis index to <see cref="T:Stride.Input.GamePadAxis"/>
            </summary>
            <param name="index">The axis index of the axis on this device</param>
            <param name="axis">The axis to map to</param>
            <param name="invert">Should axis be inverted</param>
            <param name="remap">Remap this axis from (-1,1) to (0,1)</param>
        </member>
        <member name="T:Stride.Input.GamePadLayoutDS4">
            <summary>
            A gamepad layout for a DualShock4 controller
            </summary>
        </member>
        <member name="T:Stride.Input.GamePadLayouts">
            <summary>
            Keeps track of <see cref="T:Stride.Input.GamePadLayout"/>
            </summary>
        </member>
        <member name="M:Stride.Input.GamePadLayouts.AddLayout(Stride.Input.GamePadLayout)">
            <summary>
            Adds a new layout that cane be used for mapping gamepads to <see cref="T:Stride.Input.GamePadState"/>
            </summary>
            <param name="layout">The layout to add</param>
        </member>
        <member name="M:Stride.Input.GamePadLayouts.FindLayout(Stride.Input.IInputSource,Stride.Input.IGameControllerDevice)">
            <summary>
            Finds a layout matching the given gamepad
            </summary>
            <param name="source">The source that the <paramref name="device"/> came from</param>
            <param name="device">The device to find a layout for</param>
            <returns>The gamepad layout that was found, or null if none was found</returns>
        </member>
        <member name="T:Stride.Input.GamePadLayoutXInput">
            <summary>
            Layout for XInput devices so that they can be used by SDL or other systems that do not have the XInput API but do support joysticks in some other way
            </summary>
        </member>
        <member name="T:Stride.Input.GamePadState">
            <summary>
            Describes the state of a typical gamepad.
            </summary>
            <seealso cref="P:Stride.Input.IGamePadDevice.State"/>
        </member>
        <member name="F:Stride.Input.GamePadState.Buttons">
            <summary>
            Bitmask of the gamepad buttons.
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadState.LeftThumb">
            <summary>
            Left thumbstick x-axis/y-axis value. The value is in the range [-1.0f, 1.0f] for both axis.
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadState.RightThumb">
            <summary>
            Right thumbstick x-axis/y-axis value. The value is in the range [-1.0f, 1.0f] for both axis.
            </summary>
        </member>
        <member name="F:Stride.Input.GamePadState.LeftTrigger">
            <summary>
            The left trigger analog control in the range [0, 1.0f]. See remarks.
            </summary>
            <remarks>
            Some controllers are not supporting the range of value and may act as a simple button returning only 0 or 1.
            </remarks>
        </member>
        <member name="F:Stride.Input.GamePadState.RightTrigger">
            <summary>
            The right trigger analog control in the range [0, 1.0f]. See remarks.
            </summary>
            <remarks>
            Some controllers are not supporting the range of value and may act as a simple button returning only 0 or 1.
            </remarks>
        </member>
        <member name="M:Stride.Input.GamePadState.Equals(Stride.Input.GamePadState)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Stride.Input.GamePadState.op_Equality(Stride.Input.GamePadState,Stride.Input.GamePadState)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="left">The left gamepad value.</param>
            <param name="right">The right gamepad value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Stride.Input.GamePadState.op_Inequality(Stride.Input.GamePadState,Stride.Input.GamePadState)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="left">The left gamepad value.</param>
            <param name="right">The right gamepad value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Stride.Input.GamePadState.Update(Stride.Input.InputEvent)">
            <summary>
            Updates the state from any gamepad events received that have mapped buttons
            </summary>
            <param name="evt">The gamepad event to process</param>
            <returns><c>true</c> if the event made any changes</returns>
        </member>
        <member name="M:Stride.Input.GamePadState.Update(Stride.Input.GamePadButtonEvent)">
            <summary>
            Updates the state from any gamepad events received that have mapped buttons
            </summary>
            <param name="buttonEvent">The gamepad event to process</param>
            <returns><c>true</c> if the event made any changes</returns>
        </member>
        <member name="M:Stride.Input.GamePadState.Update(Stride.Input.GamePadAxisEvent)">
            <summary>
            Updates the state from any gamepad events received that have mapped buttons
            </summary>
            <param name="axisEvent">The gamepad event to process</param>
            <returns><c>true</c> if the event made any changes</returns>
        </member>
        <member name="T:Stride.Input.GestureConfig">
            <summary>
            This represents the base class for all gesture configuration.
            </summary>
            <remarks>
            <para>Gesture configurations cannot be modified after being added to the input system for gesture recognition. Doing so will throw an <see cref="T:System.InvalidOperationException"/>.</para>
            <para>Gesture Recognizers work with normalized coordinates belonging to [0,1]x[0,1/screenRatio] 
            so distances, speeds and margin errors need to be expressed relatively to this coordinates system.</para>
            </remarks>
        </member>
        <member name="P:Stride.Input.GestureConfig.AssociatedGestureType">
            <summary>
            Specify the <see cref="T:Stride.Input.GestureType"/> corresponding to this configuration.
            </summary>
        </member>
        <member name="P:Stride.Input.GestureConfig.RequiredNumberOfFingers">
            <summary>
            This value represents the required number of simultaneous finger to tap to trigger the gesture. For example: 1 for single finger, and so on...
            </summary>
            <remarks>This value is strictly positive.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The given value is not in the allowed range.</exception>
            <exception cref="T:System.InvalidOperationException">Tried to modify the configuration after it has been frozen by the system.</exception>
        </member>
        <member name="F:Stride.Input.GestureConfig.frozen">
            <summary>
            Indicate that the configuration is frozen and cannot be modified anymore by the user.
            </summary>
        </member>
        <member name="M:Stride.Input.GestureConfig.Freeze">
            <summary>
            Freeze the configuration so that the user cannot modify it anymore.
            </summary>
        </member>
        <member name="M:Stride.Input.GestureConfig.CreateRecognizer(System.Single)">
            <summary>
            Create a recognizer for the current configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Stride.Input.GestureConfigComposite">
            <summary>
            Configuration class for the Composite gesture.
            </summary>
            <remarks>
            <para>A composite gesture is a transformation which is a composition of a translation, a rotation and a scale.
            It is performed by using two fingers and performing translation, scale and rotation motions.</para>
            <para>A composite gesture can only be composed of 2 fingers. 
            Trying to modify the <see cref="P:Stride.Input.GestureConfig.RequiredNumberOfFingers"/> field will throw an exception.</para></remarks>
        </member>
        <member name="P:Stride.Input.GestureConfigComposite.MinimumScaleValue">
            <summary>
            The scale value above which the gesture is started.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The value has to be greater or equal to 1.</exception>
            <exception cref="T:System.InvalidOperationException">Tried to modify the configuration after it has been frozen by the system.</exception>
            <remarks>The user can increase this value if he has small or no interest in the scale component of the transformation. 
            By doing so, he avoids triggering the Composite Gesture when only small scale changes happen. 
            On the contrary, the user can decrease this value if he wants to be immediately warned about the smallest change in scale.</remarks>
        </member>
        <member name="P:Stride.Input.GestureConfigComposite.MinimumTranslationDistance">
            <summary>
            The translation distance above which the gesture is started.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The value has to be positive.</exception>
            <exception cref="T:System.InvalidOperationException">Tried to modify the configuration after it has been frozen by the system.</exception>
            <remarks>The user can increase this value if he has small or no interest in the translation component of the transformation. 
            By doing so, he avoids triggering the Composite Gesture when only small translation changes happen. 
            On the contrary, the user can decrease this value if he wants to be immediately warned about the smallest change in translation.</remarks>
        </member>
        <member name="P:Stride.Input.GestureConfigComposite.MinimumRotationAngle">
            <summary>
            The rotation angle (in radian) above which the gesture is started.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The angle has to be strictly positive.</exception>
            <exception cref="T:System.InvalidOperationException">Tried to modify the configuration after it has been frozen by the system.</exception>
            <remarks>The user can increase this value if he has small or no interest in the rotation component of the transformation. 
            By doing so, he avoids triggering the Composite Gesture when only small rotation changes happen. 
            On the contrary, the user can decrease this value if he wants to be immediately warned about the smallest change in rotation.</remarks>
        </member>
        <member name="M:Stride.Input.GestureConfigComposite.#ctor">
            <summary>
            Create a default Rotation gesture configuration.
            </summary>
        </member>
        <member name="T:Stride.Input.GestureConfigDrag">
            <summary>
            Configuration class for the Drag gesture.
            </summary>
            <remarks>A drag gesture can be composed of 1 or more fingers.</remarks>
        </member>
        <member name="P:Stride.Input.GestureConfigDrag.MinimumDragDistance">
            <summary>
            Specify the minimum translation distance required  before that the gesture can be recognized as a Drag.
            </summary>
            <exception cref="T:System.InvalidOperationException">Tried to modify the configuration after it has been frozen by the system.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The provided value was negative.</exception>
            <remarks>The user can reduce this value if he needs the drag gesture to be triggered even for very small drags.
            On the contrary, he can increase this value if he wants to avoid to deals with too small drags.</remarks>
        </member>
        <member name="P:Stride.Input.GestureConfigDrag.AllowedErrorMargins">
            <summary>
            The (x,y) error margins allowed during directional dragging.
            </summary>
            <exception cref="T:System.InvalidOperationException">Tried to modify the configuration after it has been frozen by the system.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The provided x or y value was not positive.</exception>
            <remarks>Those values are used only for directional (vertical or horizontal) dragging. 
            Decrease those values to trigger the gesture only when the dragging is perfectly in the desired direction.
            Increase those values to allow directional gestures to be more approximative.</remarks>
        </member>
        <member name="P:Stride.Input.GestureConfigDrag.DragShape">
            <summary>
            The shape (direction) of the drag gesture.
            </summary>
            <exception cref="T:System.InvalidOperationException">Tried to modify the configuration after it has been frozen by the system.</exception>
        </member>
        <member name="M:Stride.Input.GestureConfigDrag.#ctor">
            <summary>
            Create a default drag gesture configuration for one finger free dragging.
            </summary>
        </member>
        <member name="M:Stride.Input.GestureConfigDrag.#ctor(Stride.Input.GestureShape)">
            <summary> 
            Create a default drag gesture configuration for one finger dragging.
            </summary>
            <param name="dragShape">The dragging shape</param>
        </member>
        <member name="T:Stride.Input.GestureConfigFlick">
            <summary> 
            Configuration class for the Flick gesture.
            </summary>
            <remarks>A Flick gesture can be composed of 1 or more fingers.</remarks>
        </member>
        <member name="P:Stride.Input.GestureConfigFlick.AllowedErrorMargins">
            <summary>
            The (x,y) error margins allowed during directional dragging.
            </summary>
            <exception cref="T:System.InvalidOperationException">Tried to modify the configuration after it has been frozen by the system.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The provided x or y value was not positive.</exception>
        </member>
        <member name="P:Stride.Input.GestureConfigFlick.FlickShape">
            <summary>
            The shape of the flick gesture.
            </summary>        
            <exception cref="T:System.InvalidOperationException">Tried to modify the configuration after it has been frozen by the system.</exception>
        </member>
        <member name="P:Stride.Input.GestureConfigFlick.MinimumAverageSpeed">
            <summary>
            The minimum average speed of the gesture to be detected as a flick.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The value must be positive</exception>
            <exception cref="T:System.InvalidOperationException">Tried to modify the configuration after it has been frozen by the system.</exception>
        </member>
        <member name="P:Stride.Input.GestureConfigFlick.MinimumFlickLength">
            <summary>
            The minimum distance that the flick gesture has to cross from its origin to be detected has Flick.
            </summary>
            <exception cref="T:System.InvalidOperationException">Tried to modify the configuration after it has been frozen by the system.</exception>
        </member>
        <member name="M:Stride.Input.GestureConfigFlick.#ctor">
            <summary>
            Create a default Flick gesture configuration for one finger free flicking.
            </summary>
        </member>
        <member name="M:Stride.Input.GestureConfigFlick.#ctor(Stride.Input.GestureShape)">
            <summary>
            Create a default gesture configuration for one finger flicking.
            </summary>
            <param name="flickShape">The shape of the flicking.</param>
        </member>
        <member name="T:Stride.Input.GestureConfigLongPress">
            <summary>
            Configuration class the Long Press gestures.
            </summary>
            <remarks>A longPress gesture can be composed of 1 or more fingers.</remarks>
        </member>
        <member name="P:Stride.Input.GestureConfigLongPress.MaximumTranslationDistance">
            <summary>
            The value represents the maximum distance a finger can translate during the longPress action.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The value has to be positive.</exception>
            <exception cref="T:System.InvalidOperationException">Tried to modify the configuration after it has been frozen by the system.</exception>
            <remarks>
            By increasing this value, the user allows small movements of the fingers during the long press.
            By decreasing this value, the user forbids any movements during the long press.</remarks>
        </member>
        <member name="P:Stride.Input.GestureConfigLongPress.RequiredPressTime">
            <summary>
            The time the user has to hold his finger on the screen to trigger the gesture.
            </summary>
            <exception cref="T:System.InvalidOperationException">Tried to modify the configuration after it has been frozen by the system.</exception>
        </member>
        <member name="M:Stride.Input.GestureConfigLongPress.#ctor">
            <summary>
            Create a default LongPress gesture configuration. 
            </summary>
            <remarks>Single finger and 1 second long press.</remarks>
        </member>
        <member name="T:Stride.Input.GestureConfigTap">
            <summary>
            Configuration class for the Tap gesture.
            </summary>
            <remarks>A tap gesture can be composed of 1 or more fingers.</remarks>
        </member>
        <member name="P:Stride.Input.GestureConfigTap.RequiredNumberOfTaps">
            <summary>
            This value represents the required number of successive user touches to trigger the gesture. For example: 1 for single touch, 2 for double touch, and so on...
            </summary>
            <remarks>This value is strictly positive.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The given value is not greater or equal to 1.</exception>
            <exception cref="T:System.InvalidOperationException">Tried to modify the configuration after it has been frozen by the system.</exception>
        </member>
        <member name="P:Stride.Input.GestureConfigTap.MaximumTimeBetweenTaps">
            <summary>
            This value represents the maximum interval of time that can separate two touches of a same gesture. 
            By reducing this value, the system will tend to detect multi-touch gesture has several single touch gesture.
            By increasing this value, the system will tend to regroup distant (in time) single touch gestures into a multi-touch gesture.
            </summary>
        </member>
        <member name="P:Stride.Input.GestureConfigTap.MaximumPressTime">
            <summary>
            This value represents the maximum amount of time that the user can stay touching the screen before taking off its finger. 
            </summary>
        </member>
        <member name="P:Stride.Input.GestureConfigTap.MaximumDistanceTaps">
            <summary>
            The value represents the maximum distance that can separate two touches of the same finger during the gesture.
            By reducing this value, the system will tend to detect multi-touch gesture has several single touch gesture.
            By increasing this value, the system will tend to regroup distant single touch gestures into a multi-touch gesture.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The value has to be positive.</exception>
            <exception cref="T:System.InvalidOperationException">Tried to modify the configuration after it has been frozen by the system.</exception>
        </member>
        <member name="M:Stride.Input.GestureConfigTap.#ctor">
            <summary>
            Create a default Tap gesture configuration for single touch and single finger detection.
            </summary>
        </member>
        <member name="M:Stride.Input.GestureConfigTap.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a default Tap gesture configuration for the given numbers of touches and fingers.
            </summary>
            <param name="numberOfTap">The number of taps required</param>
            <param name="numberOfFingers">The number of fingers required</param>
        </member>
        <member name="T:Stride.Input.GestureEvent">
            <summary>
            Base class for the gesture events.
            </summary>
        </member>
        <member name="P:Stride.Input.GestureEvent.State">
            <summary>
            The state of the gesture.
            </summary>
        </member>
        <member name="P:Stride.Input.GestureEvent.Type">
            <summary>
            The type of the gesture.
            </summary>
        </member>
        <member name="P:Stride.Input.GestureEvent.NumberOfFinger">
            <summary>
            The number of fingers involved in the gesture.
            </summary>
        </member>
        <member name="P:Stride.Input.GestureEvent.DeltaTime">
            <summary>
            The time elapsed between the two last events of the gesture.
            </summary>
            <remarks>This value is equal to <see cref="P:Stride.Input.GestureEvent.TotalTime"/> for discrete gestures.</remarks>
        </member>
        <member name="P:Stride.Input.GestureEvent.TotalTime">
            <summary>
            The time elapsed since the beginning of the gesture.
            </summary>
        </member>
        <member name="T:Stride.Input.GestureEventComposite">
            <summary>
            Event class for the Composite gesture.
            </summary>
        </member>
        <member name="P:Stride.Input.GestureEventComposite.CenterBeginningPosition">
            <summary>
            The position of the center of the composite transformation at the beginning of the gesture (in normalized coordinates [0,1]).
            </summary>
            <remarks>The center of the transformation corresponds to the middle of the 2 fingers.</remarks>
        </member>
        <member name="P:Stride.Input.GestureEventComposite.CenterCurrentPosition">
            <summary>
            The current position of the center of the composite transformation (in normalized coordinates [0,1]).
            </summary>
            <remarks>The center of the transformation corresponds to the middle of the 2 fingers.</remarks>
        </member>
        <member name="P:Stride.Input.GestureEventComposite.DeltaRotation">
            <summary>
            The rotation angle (in radian) since the last event of the gesture.
            </summary>
        </member>
        <member name="P:Stride.Input.GestureEventComposite.TotalRotation">
            <summary>
            The rotation angle (in radian) since the beginning of the gesture.
            </summary>
        </member>
        <member name="P:Stride.Input.GestureEventComposite.DeltaScale">
            <summary>
            The difference of scale since the last event of the gesture. 
            </summary>
        </member>
        <member name="P:Stride.Input.GestureEventComposite.TotalScale">
            <summary>
            The difference of scale since the beginning of the gesture.
            </summary>
        </member>
        <member name="P:Stride.Input.GestureEventComposite.DeltaTranslation">
            <summary>
            The translation performed since the last event of the gesture.
            </summary>
        </member>
        <member name="P:Stride.Input.GestureEventComposite.TotalTranslation">
            <summary>
            The translation performed since the beginning of the gesture.
            </summary>
        </member>
        <member name="T:Stride.Input.GestureEventDrag">
            <summary>
            Event class for the Drag gesture.
            </summary>
        </member>
        <member name="T:Stride.Input.GestureEventFlick">
            <summary>
            Event class for the Flick gesture.
            </summary>
        </member>
        <member name="T:Stride.Input.GestureEventLongPress">
            <summary>
            Event class for the LongPress gesture.
            </summary>
        </member>
        <member name="P:Stride.Input.GestureEventLongPress.Position">
            <summary>
            The position where the LongPress gesture happened.
            </summary>
        </member>
        <member name="T:Stride.Input.GestureEventTap">
            <summary>
            Event class for the Tap gesture.
            </summary>
        </member>
        <member name="P:Stride.Input.GestureEventTap.NumberOfTaps">
            <summary>
            The number of time the use successively touched the screen.
            </summary>
        </member>
        <member name="P:Stride.Input.GestureEventTap.TapPosition">
            <summary>
            The position of the tap.
            </summary>
        </member>
        <member name="T:Stride.Input.GestureEventTranslation">
            <summary>
            Event class for the Drag gesture.
            </summary>
        </member>
        <member name="P:Stride.Input.GestureEventTranslation.Shape">
            <summary>
            The Shape of the drag.
            </summary>
        </member>
        <member name="P:Stride.Input.GestureEventTranslation.StartPosition">
            <summary>
            The position where the drag event started.
            </summary>
        </member>
        <member name="P:Stride.Input.GestureEventTranslation.CurrentPosition">
            <summary>
            The current position of the drag event.
            </summary>
        </member>
        <member name="P:Stride.Input.GestureEventTranslation.DeltaTranslation">
            <summary>
            The translation performed since the last event of the gesture.
            </summary>
        </member>
        <member name="P:Stride.Input.GestureEventTranslation.TotalTranslation">
            <summary>
            The translation performed since the beginning of the gesture.
            </summary>
        </member>
        <member name="P:Stride.Input.GestureEventTranslation.AverageSpeed">
            <summary>
            The average translation speed (in pixels per seconds) of the drag event.
            </summary>
        </member>
        <member name="T:Stride.Input.GestureRecognizerContMotion">
            <summary>
            A gesture recognizer for continuous motions.
            </summary>
        </member>
        <member name="T:Stride.Input.GestureShape">
            <summary>
            Gesture possible shapes.
            </summary>
        </member>
        <member name="F:Stride.Input.GestureShape.Horizontal">
            <summary>
            Represent a gesture that has its shape along the horizontal axis.
            </summary>
        </member>
        <member name="F:Stride.Input.GestureShape.Vertical">
            <summary>
            Represent a gesture that has its shape along the vertical axis.
            </summary>
        </member>
        <member name="F:Stride.Input.GestureShape.Free">
            <summary>
            Represent a gesture that has a random shape.
            </summary>
        </member>
        <member name="T:Stride.Input.GestureState">
            <summary>
            The different possible states of a gestures.
            </summary>
        </member>
        <member name="F:Stride.Input.GestureState.Occurred">
            <summary>
            A discrete gesture has occurred.
            </summary>
        </member>
        <member name="F:Stride.Input.GestureState.Began">
            <summary>
            A continuous gesture has started.
            </summary>
        </member>
        <member name="F:Stride.Input.GestureState.Changed">
            <summary>
            A continuous gesture parameters changed.
            </summary>
        </member>
        <member name="F:Stride.Input.GestureState.Ended">
            <summary>
            A continuous gesture has stopped.
            </summary>
        </member>
        <member name="T:Stride.Input.GestureType">
            <summary>
            List all the available type of Gestures.
            </summary>
        </member>
        <member name="F:Stride.Input.GestureType.Drag">
            <summary>
            The user touched the screen and then performed a free translation.
            </summary>
            <remarks>Drag is a continuous gesture.</remarks>
        </member>
        <member name="F:Stride.Input.GestureType.Flick">
            <summary>
            The user touched the screen and then performed a quick swipe.
            </summary>
            <remarks>Flick is a discrete gesture.</remarks>
        </member>
        <member name="F:Stride.Input.GestureType.LongPress">
            <summary>
            The user touched and maintained a point on the screen.
            </summary>
            <remarks>LongPress is a discrete gesture.</remarks>
        </member>
        <member name="F:Stride.Input.GestureType.Composite">
            <summary>
            The user touched two points of the screen and performed a composite transformation (translation, rotation, scale).
            </summary>
            <remarks>Rotation is a continuous gesture.</remarks>
        </member>
        <member name="F:Stride.Input.GestureType.Tap">
            <summary>
            The user touched the screen.
            </summary>
            <remarks>Tap is a discrete gesture.</remarks>
        </member>
        <member name="M:Stride.Input.GravitySensor.#ctor(Stride.Input.IInputSource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Input.GravitySensor"/> class.
            </summary>
        </member>
        <member name="M:Stride.Input.GyroscopeSensor.#ctor(Stride.Input.IInputSource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Input.GyroscopeSensor"/> class.
            </summary>
        </member>
        <member name="T:Stride.Input.IAccelerometerSensor">
            <summary>
            This class represents a sensor of type Accelerometer. It measures the acceleration forces (including gravity) applying on the device.
            </summary>
        </member>
        <member name="P:Stride.Input.IAccelerometerSensor.Acceleration">
            <summary>
            Gets the current acceleration applied on the device (in meters/seconds^2).
            </summary>
        </member>
        <member name="T:Stride.Input.ICompassSensor">
            <summary>
            This class represents a sensor of type compass. It measures the angle between the device and the north.
            </summary>
        </member>
        <member name="P:Stride.Input.ICompassSensor.Heading">
            <summary>
            Gets the value of north heading, that is the angle (in radian) between the top of the device and north.
            </summary>
        </member>
        <member name="T:Stride.Input.IGameControllerDevice">
            <summary>
            This interface is used for interacting with game controller devices.
            </summary>
        </member>
        <member name="P:Stride.Input.IGameControllerDevice.ProductId">
            <summary>
            Product Id of the device
            </summary>
        </member>
        <member name="P:Stride.Input.IGameControllerDevice.ButtonInfos">
            <summary>
            Information about the buttons on this game controller
            </summary>
        </member>
        <member name="P:Stride.Input.IGameControllerDevice.AxisInfos">
            <summary>
            Information about the axes on this game controller
            </summary>
        </member>
        <member name="P:Stride.Input.IGameControllerDevice.DirectionInfos">
            <summary>
            Information about the direction controllers on this game controller 
            </summary>
        </member>
        <member name="P:Stride.Input.IGameControllerDevice.PressedButtons">
            <summary>
            The buttons that have been pressed since the last frame
            </summary>
        </member>
        <member name="P:Stride.Input.IGameControllerDevice.ReleasedButtons">
            <summary>
            The buttons that have been released since the last frame
            </summary>
        </member>
        <member name="P:Stride.Input.IGameControllerDevice.DownButtons">
            <summary>
            The buttons that are down
            </summary>
        </member>
        <member name="M:Stride.Input.IGameControllerDevice.GetAxis(System.Int32)">
            <summary>
            Retrieves the state of a single axis
            </summary>
            <param name="index">The axis' index, as exposed in <see cref="P:Stride.Input.IGameControllerDevice.AxisInfos"/></param>
            <returns>The value read directly from the axis</returns>
        </member>
        <member name="M:Stride.Input.IGameControllerDevice.GetDirection(System.Int32)">
            <summary>
            Retrieves the state of a single point of direction controller
            </summary>
            <param name="index">The direction controller's index, as exposed in <see cref="P:Stride.Input.IGameControllerDevice.DirectionInfos"/></param>
            <returns>The current state of the direction controller</returns>
        </member>
        <member name="T:Stride.Input.IGamePadDevice">
            <summary>
            A gamepad is a game controller that has a fixed button mapping, stored in <see cref="P:Stride.Input.IGamePadDevice.State"/>
            </summary>
        </member>
        <member name="P:Stride.Input.IGamePadDevice.ProductId">
            <summary>
            Product Id of the device
            </summary>
        </member>
        <member name="P:Stride.Input.IGamePadDevice.State">
            <summary>
            The state of the gamepad
            </summary>
        </member>
        <member name="P:Stride.Input.IGamePadDevice.Index">
            <summary>
            The index of the gamepad assigned by the input manager
            </summary>
            <remarks>
            If <see cref="P:Stride.Input.IGamePadDevice.CanChangeIndex"/> is false, this value can not be changed
            </remarks>
        </member>
        <member name="P:Stride.Input.IGamePadDevice.CanChangeIndex">
            <summary>
            <c>true</c> if the index of this gamepad can be changed
            </summary>
        </member>
        <member name="P:Stride.Input.IGamePadDevice.PressedButtons">
            <summary>
            The gamepad buttons that have been pressed since the last frame
            </summary>
        </member>
        <member name="P:Stride.Input.IGamePadDevice.ReleasedButtons">
            <summary>
            The gamepad buttons that have been released since the last frame
            </summary>
        </member>
        <member name="P:Stride.Input.IGamePadDevice.DownButtons">
            <summary>
            The gamepad buttons that are down
            </summary>
        </member>
        <member name="E:Stride.Input.IGamePadDevice.IndexChanged">
            <summary>
            Raised if the index assigned to this gamepad changed
            </summary>
        </member>
        <member name="M:Stride.Input.IGamePadDevice.SetVibration(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets 4 vibration motors one the device or approximates the effect if less are supported
            </summary>
            <param name="smallLeft">The small left side motor</param>
            <param name="smallRight">The small right side motor</param>
            <param name="largeLeft">The large left side motor</param>
            <param name="largeRight">The large right side motor</param>
            <remarks>Values range from 0 to 1, where 0 is off and 1 is maximum vibration</remarks>
            <remarks>Currently vibration is only supported on windows for XInput devices and UWP supported gamepads</remarks>
        </member>
        <member name="T:Stride.Input.IGravitySensor">
            <summary>
            This class represents a sensor of type Gravity. It measures the gravity force applying on the device.
            </summary>
        </member>
        <member name="P:Stride.Input.IGravitySensor.Vector">
            <summary>
            Gets the current gravity applied on the device (in meters/seconds^2).
            </summary>
        </member>
        <member name="T:Stride.Input.IGyroscopeSensor">
            <summary>
            This class represents a sensor of type Gyroscope. It measures the rotation speed of device along the x/y/z axis.
            </summary>
        </member>
        <member name="P:Stride.Input.IGyroscopeSensor.RotationRate">
            <summary>
            Gets the current rotation speed of the device along x/y/z axis.
            </summary>
        </member>
        <member name="P:Stride.Input.IInputDevice.Name">
            <summary>
            The name of the device
            </summary>
        </member>
        <member name="P:Stride.Input.IInputDevice.Id">
            <summary>
            The unique identifier of this device
            </summary>
        </member>
        <member name="P:Stride.Input.IInputDevice.Priority">
            <summary>
            The device priority. Larger means higher priority when selecting the first device of some type
            </summary>
        </member>
        <member name="P:Stride.Input.IInputDevice.Source">
            <summary>
            The input source the device belongs to.
            </summary>
        </member>
        <member name="M:Stride.Input.IInputDevice.Update(System.Collections.Generic.List{Stride.Input.InputEvent})">
            <summary>
            Updates the input device, filling the list <see cref="!:inputEvents"/> with input events that were generated by this device this frame
            </summary>
            <remarks>Input devices are always updated after their respective input source</remarks>
            <param name="inputEvents">A list that gets filled with input events that were generated since the last frame</param>
        </member>
        <member name="P:Stride.Input.IInputEventArgs.Device">
            <summary>
            The device that sent this event
            </summary>
        </member>
        <member name="T:Stride.Input.IInputEventListener">
            <summary>
            Does not listen to any event but is used to pass around a type that might potentially listen for input events
            </summary>
        </member>
        <member name="T:Stride.Input.IInputEventListener`1">
            <summary>
            Interface for classes that want to listen to input event of a certain type
            </summary>
            <typeparam name="TEventType">The type of <see cref="T:Stride.Input.InputEvent"/> that will be sent to this event listener</typeparam>
        </member>
        <member name="M:Stride.Input.IInputEventListener`1.ProcessEvent(`0)">
            <summary>
            Processes a new input event
            </summary>
            <param name="inputEvent">the input event</param>
        </member>
        <member name="T:Stride.Input.IInputSource">
            <summary>
            An abstraction for a platform specific mechanism that provides input in the form of one of multiple <see cref="T:Stride.Input.IInputDevice"/>(s). 
            An input source is responsible for cleaning up it's own devices at cleanup
            </summary>
        </member>
        <member name="P:Stride.Input.IInputSource.Devices">
            <summary>
            All the input devices currently proviced by this source
            </summary>
        </member>
        <member name="M:Stride.Input.IInputSource.Initialize(Stride.Input.InputManager)">
            <summary>
            Initializes the input source
            </summary>
            <param name="inputManager">The <see cref="T:Stride.Input.InputManager"/> initializing this source</param>
        </member>
        <member name="M:Stride.Input.IInputSource.Scan">
            <summary>
            Allows the source to take it's time to search for new devices
            </summary>
        </member>
        <member name="M:Stride.Input.IInputSource.Update">
            <summary>
            Update the input source and possibly add/remove input devices
            </summary>
        </member>
        <member name="M:Stride.Input.IInputSource.Pause">
            <summary>
            Called when input should be paused, for example when the application leaves the foreground
            </summary>
        </member>
        <member name="M:Stride.Input.IInputSource.Resume">
            <summary>
            Called when input should be resumed, when an application enters the forground
            </summary>
        </member>
        <member name="T:Stride.Input.IKeyboardDevice">
            <summary>
            A keyboard device
            </summary>
        </member>
        <member name="P:Stride.Input.IKeyboardDevice.PressedKeys">
            <summary>
            The keys that have been pressed since the last frame
            </summary>
        </member>
        <member name="P:Stride.Input.IKeyboardDevice.ReleasedKeys">
            <summary>
            The keys that have been released since the last frame
            </summary>
        </member>
        <member name="P:Stride.Input.IKeyboardDevice.DownKeys">
            <summary>
            List of keys that are currently down on this keyboard
            </summary>
        </member>
        <member name="T:Stride.Input.IMouseDevice">
            <summary>
            Represents functionality specific to mouse input such as buttons, wheels, mouse locking and setting cursor position
            </summary>
        </member>
        <member name="P:Stride.Input.IMouseDevice.Position">
            <summary>
            Normalized position of the mouse inside the window
            </summary>
        </member>
        <member name="P:Stride.Input.IMouseDevice.Delta">
            <summary>
            Mouse delta
            </summary>
        </member>
        <member name="P:Stride.Input.IMouseDevice.PressedButtons">
            <summary>
            The mouse buttons that have been pressed since the last frame
            </summary>
        </member>
        <member name="P:Stride.Input.IMouseDevice.ReleasedButtons">
            <summary>
            The mouse buttons that have been released since the last frame
            </summary>
        </member>
        <member name="P:Stride.Input.IMouseDevice.DownButtons">
            <summary>
            The mouse buttons that are down
            </summary>
        </member>
        <member name="P:Stride.Input.IMouseDevice.IsPositionLocked">
            <summary>
            Gets or sets if the mouse is locked to the screen
            </summary>
        </member>
        <member name="M:Stride.Input.IMouseDevice.LockPosition(System.Boolean)">
            <summary>
            Locks the mouse position to the screen
            </summary>
            <param name="forceCenter">Force the mouse position to the center of the screen</param>
        </member>
        <member name="M:Stride.Input.IMouseDevice.UnlockPosition">
            <summary>
            Unlocks the mouse position if it was locked
            </summary>
        </member>
        <member name="M:Stride.Input.IMouseDevice.SetPosition(Stride.Core.Mathematics.Vector2)">
            <summary>
            Attempts to set the pointer position, this only makes sense for mouse pointers
            </summary>
            <param name="normalizedPosition"></param>
        </member>
        <member name="T:Stride.Input.InputDeviceUtils">
            <summary>
            Utilities for input devices
            </summary>
        </member>
        <member name="M:Stride.Input.InputDeviceUtils.DeviceNameToGuid(System.String)">
            <summary>
            Generates a Guid unique to this name
            </summary>
            <param name="name">the name to turn into a Guid</param>
            <returns>A unique Guid for the given name</returns>
        </member>
        <member name="T:Stride.Input.InputEvent">
            <summary>
            An event that was generated from an <see cref="T:Stride.Input.IInputDevice"/>
            </summary>
        </member>
        <member name="P:Stride.Input.InputEvent.Device">
            <inheritdoc/>
        </member>
        <member name="T:Stride.Input.InputEventPool`1">
            <summary>
            Pools input events of a given type
            </summary>
            <typeparam name="TEventType">The type of event to pool</typeparam>
        </member>
        <member name="P:Stride.Input.InputEventPool`1.ActiveObjects">
            <summary>
            The number of events in circulation, if this number keeps increasing, Enqueue is possible not called somewhere
            </summary>
        </member>
        <member name="M:Stride.Input.InputEventPool`1.GetOrCreate(Stride.Input.IInputDevice)">
            <summary>
            Retrieves a new event that can be used, either from the pool or a new instance
            </summary>
            <param name="device">The device that generates this event</param>
            <returns>An event</returns>
        </member>
        <member name="M:Stride.Input.InputEventPool`1.Enqueue(`0)">
            <summary>
            Puts a used event back into the pool to be recycled
            </summary>
            <param name="item">The event to reuse</param>
        </member>
        <member name="T:Stride.Input.InputEventPool`1.Pool">
            <summary>
            Pool class, since <see cref="T:Stride.Core.Collections.PoolListStruct`1"/> can not be placed inside <see cref="T:System.Threading.ThreadLocal`1"/>
            </summary>
        </member>
        <member name="T:Stride.Input.InputManager">
            <summary>
            Manages collecting input from connected input device in the form of <see cref="T:Stride.Input.IInputDevice"/> objects. Also provides some convenience functions for most commonly used devices
            </summary>
            <summary>
            Class that keeps track of the the global input state of all devices
            </summary>
        </member>
        <member name="F:Stride.Input.InputManager.GameControllerAxisDeadZone">
            <summary>
            The deadzone amount applied to all game controller axes
            </summary>
        </member>
        <member name="M:Stride.Input.InputManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Input.InputManager"/> class.
            </summary>
            <param name="gameContext">The game context.</param>
        </member>
        <member name="P:Stride.Input.InputManager.VirtualButtonConfigSet">
            <summary>
            Gets or sets the configuration for virtual buttons.
            </summary>
            <value>The current binding.</value>
        </member>
        <member name="P:Stride.Input.InputManager.Gestures">
            <summary>
            List of the gestures to recognize.
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.Sources">
            <summary>
            Input sources
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.Accelerometer">
            <summary>
            Gets the reference to the accelerometer sensor. The accelerometer measures all the acceleration forces applied on the device.
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.Compass">
            <summary>
            Gets the reference to the compass sensor. The compass measures the angle between the device top and the north.
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.Gyroscope">
            <summary>
            Gets the reference to the gyroscope sensor. The gyroscope measures the rotation speed of the device.
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.UserAcceleration">
            <summary>
            Gets the reference to the user acceleration sensor. The user acceleration sensor measures the acceleration produce by the user on the device (no gravity).
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.Gravity">
            <summary>
            Gets the reference to the gravity sensor. The gravity sensor measures the gravity vector applied to the device.
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.Orientation">
            <summary>
            Gets the reference to the orientation sensor. The orientation sensor measures orientation of device in the world.
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.IsMousePositionLocked">
            <summary>
            Gets the value indicating if the mouse position is currently locked or not.
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.Events">
            <summary>
            All input events that happened since the last frame
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.GestureEvents">
            <summary>
            Gets the collection of gesture events since the previous updates.
            </summary>
            <value>The gesture events.</value>
        </member>
        <member name="P:Stride.Input.InputManager.HasPointer">
            <summary>
            Gets a value indicating whether pointer device is available.
            </summary>
            <value><c>true</c> if pointer devices are available; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Input.InputManager.HasMouse">
            <summary>
            Gets a value indicating whether the mouse is available.
            </summary>
            <value><c>true</c> if the mouse is available; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Input.InputManager.HasKeyboard">
            <summary>
            Gets a value indicating whether the keyboard is available.
            </summary>
            <value><c>true</c> if the keyboard is available; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Input.InputManager.HasGameController">
            <summary>
            Gets a value indicating whether game controllers are available.
            </summary>
            <value><c>true</c> if game controllers are available; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Input.InputManager.HasGamePad">
            <summary>
            Gets a value indicating whether gamepads are available.
            </summary>
            <value><c>true</c> if gamepads are available; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Stride.Input.InputManager.GameControllerCount">
            <summary>
            Gets the number of game controllers connected.
            </summary>
            <value>The number of game controllers connected.</value>
        </member>
        <member name="P:Stride.Input.InputManager.GamePadCount">
            <summary>
            Gets the number of gamepads connected.
            </summary>
            <value>The number of gamepads connected.</value>
        </member>
        <member name="P:Stride.Input.InputManager.Pointer">
            <summary>
            Gets the first pointer device, or null if there is none
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.Mouse">
            <summary>
            Gets the first mouse pointer device, or null if there is none
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.Keyboard">
            <summary>
            Gets the first keyboard device, or null if there is none
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.TextInput">
            <summary>
            First device that supports text input, or null if there is none
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.DefaultGamePad">
            <summary>
            Gets the first gamepad that was added to the device
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.GameControllers">
            <summary>
            Gets the collection of connected game controllers
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.GamePads">
            <summary>
            Gets the collection of connected gamepads
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.Pointers">
            <summary>
            Gets the collection of connected pointing devices (mouses, touchpads, etc)
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.Keyboards">
            <summary>
            Gets the collection of connected keyboard inputs
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.Sensors">
            <summary>
            Gets the collection of connected sensor devices
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.UseRawInput">
            <summary>
            Should raw input be used on windows
            </summary>
        </member>
        <member name="E:Stride.Input.InputManager.PreUpdateInput">
            <summary>
            Raised before new input is sent to their respective event listeners
            </summary>
        </member>
        <member name="E:Stride.Input.InputManager.DeviceRemoved">
            <summary>
            Raised when a device was removed from the system
            </summary>
        </member>
        <member name="E:Stride.Input.InputManager.DeviceAdded">
            <summary>
            Raised when a device was added to the system
            </summary>
        </member>
        <member name="M:Stride.Input.InputManager.TransformPosition(Stride.Core.Mathematics.Size2F,Stride.Core.Mathematics.RectangleF,Stride.Core.Mathematics.Vector2)">
            <summary>
            Helper method to transform mouse and pointer event positions to sub rectangles
            </summary>
            <param name="fromSize">the size of the source rectangle</param>
            <param name="destinationRectangle">The destination viewport rectangle</param>
            <param name="screenCoordinates">The normalized screen coordinates</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Input.InputManager.LockMousePosition(System.Boolean)">
            <summary>
            Lock the mouse's position and hides it until the next call to <see cref="M:Stride.Input.InputManager.UnlockMousePosition"/>.
            </summary>
            <param name="forceCenter">If true will make sure that the mouse cursor position moves to the center of the client window</param>
            <remarks>This function has no effects on devices that does not have mouse</remarks>
        </member>
        <member name="M:Stride.Input.InputManager.UnlockMousePosition">
            <summary>
            Unlock the mouse's position previously locked by calling <see cref="M:Stride.Input.InputManager.LockMousePosition(System.Boolean)"/> and restore the mouse visibility.
            </summary>
            <remarks>This function has no effects on devices that does not have mouse</remarks>
        </member>
        <member name="M:Stride.Input.InputManager.GetGamePadByIndex(System.Int32)">
            <summary>
            Gets the first gamepad with a specific index
            </summary>
            <param name="gamePadIndex">The index of the gamepad</param>
            <returns>The gamepad, or null if no gamepad has this index</returns>
            <exception cref="T:System.IndexOutOfRangeException">When <paramref name="gamePadIndex"/> is less than 0</exception>
        </member>
        <member name="M:Stride.Input.InputManager.GetGamePadsByIndex(System.Int32)">
            <summary>
            Gets all the gamepads with a specific index
            </summary>
            <param name="gamePadIndex">The index of the gamepad</param>
            <returns>The gamepads, or null if no gamepad has this index</returns>
            <exception cref="T:System.IndexOutOfRangeException">When <paramref name="gamePadIndex"/> is less than 0</exception>
        </member>
        <member name="M:Stride.Input.InputManager.Scan">
            <summary>
            Rescans all input devices in order to query new device connected. See remarks.
            </summary>
            <remarks>
            This method could take several milliseconds and should be used at specific time in a game where performance is not crucial (pause, configuration screen...etc.)
            </remarks>
        </member>
        <member name="M:Stride.Input.InputManager.AddListener(Stride.Input.IInputEventListener)">
            <summary>
            Registers an object that listens for certain types of events using the specialized versions of <see cref="!:IInputEventListener&lt;"/>
            </summary>
            <param name="listener">The listener to register</param>
        </member>
        <member name="M:Stride.Input.InputManager.RemoveListener(Stride.Input.IInputEventListener)">
            <summary>
            Removes a previously registered event listener
            </summary>
            <param name="listener">The listener to remove</param>
        </member>
        <member name="M:Stride.Input.InputManager.GetVirtualButton(System.Int32,System.Object)">
            <summary>
            Gets a binding value for the specified name and the specified config extract from the current <see cref="P:Stride.Input.InputManager.VirtualButtonConfigSet"/>.
            </summary>
            <param name="configIndex">An index to a <see cref="T:Stride.Input.VirtualButtonConfig"/> stored in the <see cref="P:Stride.Input.InputManager.VirtualButtonConfigSet"/></param>
            <param name="bindingName">Name of the binding.</param>
            <returns>The value of the binding.</returns>
        </member>
        <member name="M:Stride.Input.InputManager.Pause">
            <summary>
            Pause all input sources.
            </summary>
        </member>
        <member name="M:Stride.Input.InputManager.Resume">
            <summary>
            Resume all input sources.
            </summary>
        </member>
        <member name="M:Stride.Input.InputManager.RegisterEventType``1">
            <summary>
            Registers an input event type to process
            </summary>
            <typeparam name="TEventType">The event type to process</typeparam>
        </member>
        <member name="M:Stride.Input.InputManager.PoolInputEvent(Stride.Input.InputEvent)">
            <summary>
            Inserts any registered event back into it's <see cref="!:InputEventPool&lt;"/>.
            </summary>
            <param name="inputEvent">The event to insert into it's event pool</param>
        </member>
        <member name="M:Stride.Input.InputManager.ResetSources">
            <summary>
            Resets the <see cref="P:Stride.Input.InputManager.Sources"/> collection back to it's default values
            </summary>
        </member>
        <member name="M:Stride.Input.InputManager.GetFreeGamePadIndex(Stride.Input.IGamePadDevice)">
            <summary>
            Suggests an index that is unused for a given <see cref="T:Stride.Input.IGamePadDevice"/>
            </summary>
            <param name="gamePad">The gamepad to find an index for</param>
            <returns>The unused gamepad index</returns>
        </member>
        <member name="M:Stride.Input.InputManager.UpdateGamePadRequestedIndices">
            <summary>
            Updates the <see cref="F:Stride.Input.InputManager.gamePadRequestedIndex"/> collection to contains every gamepad with a given index
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.MousePosition">
            <summary>
            The mouse position in normalized coordinates.
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.AbsoluteMousePosition">
            <summary>
            Mouse coordinates in device coordinates
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.MouseDelta">
            <summary>
            Mouse delta in normalized coordinate space
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.AbsoluteMouseDelta">
            <summary>
            Mouse movement in device coordinates
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.MouseWheelDelta">
            <summary>
            The delta value of the mouse wheel button since last frame.
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.LastPointerDevice">
            <summary>
            Device that is responsible for setting the current <see cref="P:Stride.Input.InputManager.MouseDelta"/> and <see cref="P:Stride.Input.InputManager.MousePosition"/>
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.HasPressedKeys">
            <summary>
            Determines whether one or more keys are pressed
            </summary>
            <returns><c>true</c> if one or more keys are pressed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Stride.Input.InputManager.HasReleasedKeys">
            <summary>
            Determines whether one or more keys are released
            </summary>
            <returns><c>true</c> if one or more keys are released; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Stride.Input.InputManager.HasDownKeys">
            <summary>
            Determines whether one or more keys are down
            </summary>
            <returns><c>true</c> if one or more keys are down; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Stride.Input.InputManager.PressedKeys">
            <summary>
            The keys that have been pressed since the last frame
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.ReleasedKeys">
            <summary>
            The keys that have been released since the last frame
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.DownKeys">
            <summary>
            The keys that are down
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.PressedButtons">
            <summary>
            The mouse buttons that have been pressed since the last frame
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.ReleasedButtons">
            <summary>
            The mouse buttons that have been released since the last frame
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.DownButtons">
            <summary>
            The mouse buttons that are down
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.HasPressedMouseButtons">
            <summary>
            Determines whether one or more of the mouse buttons are pressed
            </summary>
            <returns><c>true</c> if one or more of the mouse buttons are pressed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Stride.Input.InputManager.HasReleasedMouseButtons">
            <summary>
            Determines whether one or more of the mouse buttons are released
            </summary>
            <returns><c>true</c> if one or more of the mouse buttons are released; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Stride.Input.InputManager.HasDownMouseButtons">
            <summary>
            Determines whether one or more of the mouse buttons are down
            </summary>
            <returns><c>true</c> if one or more of the mouse buttons are down; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Stride.Input.InputManager.PointerEvents">
            <summary>
            Pointer events that happened since the last frame
            </summary>
        </member>
        <member name="P:Stride.Input.InputManager.KeyEvents">
            <summary>
            Key events that happened since the last frame
            </summary>
        </member>
        <member name="M:Stride.Input.InputManager.IsKeyPressed(Stride.Input.Keys)">
            <summary>
            Determines whether the specified key is pressed since the previous update.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if the specified key is pressed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Input.InputManager.IsKeyReleased(Stride.Input.Keys)">
            <summary>
            Determines whether the specified key is released since the previous update.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if the specified key is released; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Input.InputManager.IsKeyDown(Stride.Input.Keys)">
            <summary>
            Determines whether the specified key is being pressed down.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if the specified key is being pressed down; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Input.InputManager.IsMouseButtonPressed(Stride.Input.MouseButton)">
            <summary>
            Determines whether the specified mouse button is pressed since the previous update.
            </summary>
            <param name="mouseButton">The mouse button.</param>
            <returns><c>true</c> if the specified mouse button is pressed since the previous update; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Input.InputManager.IsMouseButtonReleased(Stride.Input.MouseButton)">
            <summary>
            Determines whether the specified mouse button is released.
            </summary>
            <param name="mouseButton">The mouse button.</param>
            <returns><c>true</c> if the specified mouse button is released; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Input.InputManager.IsMouseButtonDown(Stride.Input.MouseButton)">
            <summary>
            Determines whether the specified mouse button is being pressed down.
            </summary>
            <param name="mouseButton">The mouse button.</param>
            <returns><c>true</c> if the specified mouse button is being pressed down; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Input.InputManager.ResetGlobalInputState">
            <summary>
            Resets the state before updating
            </summary>
        </member>
        <member name="T:Stride.Input.InputPreUpdateEventArgs">
            <summary>
            Arguments for input pre update event
            </summary>
        </member>
        <member name="F:Stride.Input.InputPreUpdateEventArgs.GameTime">
            <summary>
            The game time passed to <see cref="M:Stride.Input.InputManager.Update(Stride.Games.GameTime)"/>
            </summary>
        </member>
        <member name="T:Stride.Input.InputSourceBase">
            <summary>
            Base class for input sources, implements common parts of the <see cref="T:Stride.Input.IInputSource"/> interface and keeps track of registered devices through <see cref="M:Stride.Input.InputSourceBase.RegisterDevice(Stride.Input.IInputDevice)"/> and <see cref="M:Stride.Input.InputSourceBase.UnregisterDevice(Stride.Input.IInputDevice)"/>
            </summary>
        </member>
        <member name="M:Stride.Input.InputSourceBase.Dispose">
            <summary>
            Unregisters all devices registered with <see cref="M:Stride.Input.InputSourceBase.RegisterDevice(Stride.Input.IInputDevice)"/> which have not been unregistered yet
            </summary>
        </member>
        <member name="M:Stride.Input.InputSourceBase.RegisterDevice(Stride.Input.IInputDevice)">
            <summary>
            Adds the device to the list <see cref="P:Stride.Input.InputSourceBase.Devices"/>
            </summary>
            <param name="device">The device</param>
        </member>
        <member name="M:Stride.Input.InputSourceBase.UnregisterDevice(Stride.Input.IInputDevice)">
            <summary>
            CRemoves the device from the list <see cref="P:Stride.Input.InputSourceBase.Devices"/>
            </summary>
            <param name="device">The device</param>
        </member>
        <member name="T:Stride.Input.InputSourceFactory">
            <summary>
            Given a <see cref="T:Stride.Games.GameContext"/> creates the corresponding <see cref="T:Stride.Input.IInputSource"/> for the platform specific window.
            </summary>
        </member>
        <member name="M:Stride.Input.InputSourceFactory.NewWindowInputSource(Stride.Games.GameContext)">
            <summary>
            Creates a new input source for the window provided by the <paramref name="context"/>.
            </summary>
            <param name="context">The context containing the platform specific window.</param>
            <returns>An input source for the window.</returns>
        </member>
        <member name="T:Stride.Input.IOrientationSensor">
            <summary>
            This class represents a sensor of type Orientation. It measures the orientation of device in the real world.
            </summary>
        </member>
        <member name="P:Stride.Input.IOrientationSensor.Yaw">
            <summary>
            Gets the value of the yaw (in radian). The yaw is the rotation around the vertical axis of the device, that is the Oz axis.
            </summary>
        </member>
        <member name="P:Stride.Input.IOrientationSensor.Pitch">
            <summary>
            Gets the value of the pitch (in radian). The pitch is the rotation around the lateral axis of the device, that is the Ox axis.
            </summary>
        </member>
        <member name="P:Stride.Input.IOrientationSensor.Roll">
            <summary>
            Gets the value of the roll (in radian). The roll is the rotation around the longitudinal axis of the device, that is the Oy axis.
            </summary>
        </member>
        <member name="P:Stride.Input.IOrientationSensor.Quaternion">
            <summary>
            Gets the quaternion specifying the current rotation of the device.
            </summary>
        </member>
        <member name="P:Stride.Input.IOrientationSensor.RotationMatrix">
            <summary>
            Gets the rotation matrix specifying the current rotation of the device.
            </summary>
        </member>
        <member name="T:Stride.Input.IPointerDevice">
            <summary>
            Provides an interface for interacting with pointer devices, this can be a mouse, pen, touch screen, etc.
            </summary>
        </member>
        <member name="P:Stride.Input.IPointerDevice.SurfaceSize">
            <summary>
            The size of the surface used by the pointer, for a mouse this is the size of the window, for a touch device, the size of the touch area, etc.
            </summary>
        </member>
        <member name="P:Stride.Input.IPointerDevice.SurfaceAspectRatio">
            <summary>
            The aspect ratio of the touch surface area
            </summary>
        </member>
        <member name="P:Stride.Input.IPointerDevice.PressedPointers">
            <summary>
            The index of the pointers that have been pressed since the last frame
            </summary>
        </member>
        <member name="P:Stride.Input.IPointerDevice.ReleasedPointers">
            <summary>
            The index of the pointers that have been released since the last frame
            </summary>
        </member>
        <member name="P:Stride.Input.IPointerDevice.DownPointers">
            <summary>
            The index of the pointers that are down
            </summary>
        </member>
        <member name="E:Stride.Input.IPointerDevice.SurfaceSizeChanged">
            <summary>
            Raised when the surface size of this pointer changed
            </summary>
        </member>
        <member name="T:Stride.Input.ISensorDevice">
            <summary>
            Interface for a sensor device, use more specific interfaces to retrieve sensor data
            </summary>
        </member>
        <member name="P:Stride.Input.ISensorDevice.IsEnabled">
            <summary>
            Gets or sets if this sensor is enabled
            </summary>
            <remarks>Sensors are disabled by default</remarks>
            <remarks>Disabling unused sensors will save battery power on mobile devices</remarks>
        </member>
        <member name="T:Stride.Input.ITextInputDevice">
            <summary>
            A device such as a keyboard that supports text input. This can be a windows keyboard with IME support or a touch keyboard on a smartphone device
            </summary>
        </member>
        <member name="M:Stride.Input.ITextInputDevice.EnabledTextInput">
            <summary>
            Allows input to be entered, the input device will then send text events through the input manager
            </summary>
        </member>
        <member name="M:Stride.Input.ITextInputDevice.DisableTextInput">
            <summary>
            Disallows text input to be entered, will close any IME active and stop sending text events
            </summary>
        </member>
        <member name="T:Stride.Input.IUserAccelerationSensor">
            <summary>
            This class represents a sensor of type user acceleration. It measures the acceleration applied by the user (no gravity) onto the device.
            </summary>
        </member>
        <member name="P:Stride.Input.IUserAccelerationSensor.Acceleration">
            <summary>
            Gets the current acceleration applied by the user (in meters/seconds^2).
            </summary>
        </member>
        <member name="T:Stride.Input.KeyboardDeviceBase">
            <summary>
            Base class for keyboard devices
            </summary>
        </member>
        <member name="M:Stride.Input.KeyboardDeviceExtensions.IsKeyPressed(Stride.Input.IKeyboardDevice,Stride.Input.Keys)">
            <summary>
            Determines whether the specified key is pressed since the previous update.
            </summary>
            <param name="keyboardDevice">The keyboard</param>
            <param name="key">The key</param>
            <returns><c>true</c> if the specified key is pressed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Input.KeyboardDeviceExtensions.IsKeyReleased(Stride.Input.IKeyboardDevice,Stride.Input.Keys)">
            <summary>
            Determines whether the specified key is released since the previous update.
            </summary>
            <param name="keyboardDevice">The keyboard</param>
            <param name="key">The key</param>
            <returns><c>true</c> if the specified key is released; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Input.KeyboardDeviceExtensions.IsKeyDown(Stride.Input.IKeyboardDevice,Stride.Input.Keys)">
            <summary>
            Determines whether the specified key is being pressed down
            </summary>
            <param name="keyboardDevice">The keyboard</param>
            <param name="key">The key</param>
            <returns><c>true</c> if the specified key is being pressed down; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Stride.Input.KeyEvent">
            <summary>
            Event for a keyboard button changing state
            </summary>
        </member>
        <member name="F:Stride.Input.KeyEvent.Key">
            <summary>
            The key that is being pressed or released.
            </summary>
        </member>
        <member name="F:Stride.Input.KeyEvent.RepeatCount">
            <summary>
            The repeat count for this key. If it is 0 this is the initial press of the key
            </summary>
        </member>
        <member name="P:Stride.Input.KeyEvent.Keyboard">
            <summary>
            The keyboard that sent this event
            </summary>
        </member>
        <member name="T:Stride.Input.Keys">
            <summary>
            Enumeration for keys.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.None">
            <summary>
            The 'none' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Cancel">
            <summary>
            The 'cancel' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Back">
            <summary>
            The 'back' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Tab">
            <summary>
            The 'tab' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.LineFeed">
            <summary>
            The 'linefeed' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Clear">
            <summary>
            The 'clear' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Enter">
            <summary>
            The 'enter' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Return">
            <summary>
            The 'return' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Pause">
            <summary>
            The 'pause' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Capital">
            <summary>
            The 'capital' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.CapsLock">
            <summary>
            The 'capslock' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.HangulMode">
            <summary>
            The 'hangulmode' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.KanaMode">
            <summary>
            The 'kanamode' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.JunjaMode">
            <summary>
            The 'junjamode' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.FinalMode">
            <summary>
            The 'finalmode' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.HanjaMode">
            <summary>
            The 'hanjamode' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.KanjiMode">
            <summary>
            The 'kanjimode' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Escape">
            <summary>
            The 'escape' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.ImeConvert">
            <summary>
            The 'imeconvert' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.ImeNonConvert">
            <summary>
            The 'imenonconvert' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.ImeAccept">
            <summary>
            The 'imeaccept' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.ImeModeChange">
            <summary>
            The 'imemodechange' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Space">
            <summary>
            The 'space' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.PageUp">
            <summary>
            The 'pageup' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Prior">
            <summary>
            The 'prior' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Next">
            <summary>
            The 'next' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.PageDown">
            <summary>
            The 'pagedown' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.End">
            <summary>
            The 'end' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Home">
            <summary>
            The 'home' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Left">
            <summary>
            The 'left' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Up">
            <summary>
            The 'up' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Right">
            <summary>
            The 'right' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Down">
            <summary>
            The 'down' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Select">
            <summary>
            The 'select' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Print">
            <summary>
            The 'print' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Execute">
            <summary>
            The 'execute' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.PrintScreen">
            <summary>
            The 'printscreen' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Snapshot">
            <summary>
            The 'snapshot' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Insert">
            <summary>
            The 'insert' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Delete">
            <summary>
            The 'delete' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Help">
            <summary>
            The 'help' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.D0">
            <summary>
            The 'd0' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.D1">
            <summary>
            The 'd1' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.D2">
            <summary>
            The 'd2' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.D3">
            <summary>
            The 'd3' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.D4">
            <summary>
            The 'd4' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.D5">
            <summary>
            The 'd5' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.D6">
            <summary>
            The 'd6' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.D7">
            <summary>
            The 'd7' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.D8">
            <summary>
            The 'd8' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.D9">
            <summary>
            The 'd9' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.A">
            <summary>
            The 'a' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.B">
            <summary>
            The 'b' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.C">
            <summary>
            The 'c' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.D">
            <summary>
            The 'd' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.E">
            <summary>
            The 'e' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.F">
            <summary>
            The 'f' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.G">
            <summary>
            The 'g' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.H">
            <summary>
            The 'h' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.I">
            <summary>
            The 'i' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.J">
            <summary>
            The 'j' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.K">
            <summary>
            The 'k' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.L">
            <summary>
            The 'l' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.M">
            <summary>
            The 'm' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.N">
            <summary>
            The 'n' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.O">
            <summary>
            The 'o' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.P">
            <summary>
            The 'p' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Q">
            <summary>
            The 'q' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.R">
            <summary>
            The 'r' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.S">
            <summary>
            The 's' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.T">
            <summary>
            The 't' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.U">
            <summary>
            The 'u' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.V">
            <summary>
            The 'v' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.W">
            <summary>
            The 'w' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.X">
            <summary>
            The 'x' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Y">
            <summary>
            The 'y' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Z">
            <summary>
            The 'z' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.LeftWin">
            <summary>
            The 'leftwin' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.RightWin">
            <summary>
            The 'rightwin' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Apps">
            <summary>
            The 'apps' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Sleep">
            <summary>
            The 'sleep' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.NumPad0">
            <summary>
            The 'numpad0' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.NumPad1">
            <summary>
            The 'numpad1' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.NumPad2">
            <summary>
            The 'numpad2' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.NumPad3">
            <summary>
            The 'numpad3' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.NumPad4">
            <summary>
            The 'numpad4' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.NumPad5">
            <summary>
            The 'numpad5' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.NumPad6">
            <summary>
            The 'numpad6' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.NumPad7">
            <summary>
            The 'numpad7' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.NumPad8">
            <summary>
            The 'numpad8' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.NumPad9">
            <summary>
            The 'numpad9' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Multiply">
            <summary>
            The 'multiply' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Add">
            <summary>
            The 'add' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Separator">
            <summary>
            The 'separator' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Subtract">
            <summary>
            The 'subtract' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Decimal">
            <summary>
            The 'decimal' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Divide">
            <summary>
            The 'divide' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.F1">
            <summary>
            The 'f1' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.F2">
            <summary>
            The 'f2' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.F3">
            <summary>
            The 'f3' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.F4">
            <summary>
            The 'f4' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.F5">
            <summary>
            The 'f5' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.F6">
            <summary>
            The 'f6' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.F7">
            <summary>
            The 'f7' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.F8">
            <summary>
            The 'f8' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.F9">
            <summary>
            The 'f9' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.F10">
            <summary>
            The 'f10' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.F11">
            <summary>
            The 'f11' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.F12">
            <summary>
            The 'f12' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.F13">
            <summary>
            The 'f13' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.F14">
            <summary>
            The 'f14' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.F15">
            <summary>
            The 'f15' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.F16">
            <summary>
            The 'f16' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.F17">
            <summary>
            The 'f17' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.F18">
            <summary>
            The 'f18' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.F19">
            <summary>
            The 'f19' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.F20">
            <summary>
            The 'f20' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.F21">
            <summary>
            The 'f21' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.F22">
            <summary>
            The 'f22' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.F23">
            <summary>
            The 'f23' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.F24">
            <summary>
            The 'f24' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.NumLock">
            <summary>
            The 'numlock' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Scroll">
            <summary>
            The 'scroll' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.LeftShift">
            <summary>
            The 'leftshift' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.RightShift">
            <summary>
            The 'rightshift' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.LeftCtrl">
            <summary>
            The 'leftctrl' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.RightCtrl">
            <summary>
            The 'rightctrl' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.LeftAlt">
            <summary>
            The 'leftalt' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.RightAlt">
            <summary>
            The 'rightalt' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.BrowserBack">
            <summary>
            The 'browserback' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.BrowserForward">
            <summary>
            The 'browserforward' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.BrowserRefresh">
            <summary>
            The 'browserrefresh' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.BrowserStop">
            <summary>
            The 'browserstop' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.BrowserSearch">
            <summary>
            The 'browsersearch' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.BrowserFavorites">
            <summary>
            The 'browserfavorites' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.BrowserHome">
            <summary>
            The 'browserhome' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.VolumeMute">
            <summary>
            The 'volumemute' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.VolumeDown">
            <summary>
            The 'volumedown' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.VolumeUp">
            <summary>
            The 'volumeup' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.MediaNextTrack">
            <summary>
            The 'medianexttrack' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.MediaPreviousTrack">
            <summary>
            The 'mediaprevioustrack' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.MediaStop">
            <summary>
            The 'mediastop' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.MediaPlayPause">
            <summary>
            The 'mediaplaypause' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.LaunchMail">
            <summary>
            The 'launchmail' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.SelectMedia">
            <summary>
            The 'selectmedia' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.LaunchApplication1">
            <summary>
            The 'launchapplication1' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.LaunchApplication2">
            <summary>
            The 'launchapplication2' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Oem1">
            <summary>
            The 'oem1' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.OemSemicolon">
            <summary>
            The 'oemsemicolon' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.OemPlus">
            <summary>
            The 'oemplus' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.OemComma">
            <summary>
            The 'oemcomma' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.OemMinus">
            <summary>
            The 'oemminus' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.OemPeriod">
            <summary>
            The 'oemperiod' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Oem2">
            <summary>
            The 'oem2' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.OemQuestion">
            <summary>
            The 'oemquestion' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Oem3">
            <summary>
            The 'oem3' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.OemTilde">
            <summary>
            The 'oemtilde' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Oem4">
            <summary>
            The 'oem4' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.OemOpenBrackets">
            <summary>
            The 'oemopenbrackets' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Oem5">
            <summary>
            The 'oem5' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.OemPipe">
            <summary>
            The 'oempipe' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Oem6">
            <summary>
            The 'oem6' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.OemCloseBrackets">
            <summary>
            The 'oemclosebrackets' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Oem7">
            <summary>
            The 'oem7' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.OemQuotes">
            <summary>
            The 'oemquotes' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Oem8">
            <summary>
            The 'oem8' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Oem102">
            <summary>
            The 'oem102' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.OemBackslash">
            <summary>
            The 'oembackslash' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Attn">
            <summary>
            The 'attn' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.CrSel">
            <summary>
            The 'crsel' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.ExSel">
            <summary>
            The 'exsel' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.EraseEof">
            <summary>
            The 'eraseeof' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Play">
            <summary>
            The 'play' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Zoom">
            <summary>
            The 'zoom' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.NoName">
            <summary>
            The 'noname' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.Pa1">
            <summary>
            The 'pa1' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.OemClear">
            <summary>
            The 'oemclear' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.NumPadEnter">
            <summary>
            The 'numpad enter' key.
            </summary>
        </member>
        <member name="F:Stride.Input.Keys.NumPadDecimal">
            <summary>
            The 'numpad decimal' key.
            </summary>
        </member>
        <member name="T:Stride.Input.MouseAxis">
            <summary>
            Mouse axes
            </summary>
        </member>
        <member name="F:Stride.Input.MouseAxis.X">
            <summary>
            The horizontal mouse movement
            </summary>
        </member>
        <member name="F:Stride.Input.MouseAxis.Y">
            <summary>
            The vertical mouse movement
            </summary>
        </member>
        <member name="F:Stride.Input.MouseAxis.Wheel">
            <summary>
            The scroll wheel
            </summary>
        </member>
        <member name="T:Stride.Input.MouseButton">
            <summary>
            Mouse buttons.
            </summary>
        </member>
        <member name="F:Stride.Input.MouseButton.Left">
            <summary>
            Left button.
            </summary>
        </member>
        <member name="F:Stride.Input.MouseButton.Middle">
            <summary>
            Middle button.
            </summary>
        </member>
        <member name="F:Stride.Input.MouseButton.Right">
            <summary>
            Right button.
            </summary>
        </member>
        <member name="F:Stride.Input.MouseButton.Extended1">
            <summary>
            Extended button 1.
            </summary>
        </member>
        <member name="F:Stride.Input.MouseButton.Extended2">
            <summary>
            Extended button 2.
            </summary>
        </member>
        <member name="T:Stride.Input.MouseButtonEvent">
            <summary>
            Describes a button on a mouse changing state
            </summary>
        </member>
        <member name="F:Stride.Input.MouseButtonEvent.Button">
            <summary>
            The button that changed state
            </summary>
        </member>
        <member name="P:Stride.Input.MouseButtonEvent.Mouse">
            <summary>
            The mouse that sent this event
            </summary>
        </member>
        <member name="T:Stride.Input.MouseDeviceBase">
            <summary>
            Base class for mouse devices, implements some common functionality of <see cref="T:Stride.Input.IMouseDevice"/>, inherits from <see cref="T:Stride.Input.PointerDeviceBase"/>
            </summary>
        </member>
        <member name="M:Stride.Input.MouseDeviceExtensions.IsButtonPressed(Stride.Input.IMouseDevice,Stride.Input.MouseButton)">
            <summary>
            Determines whether the specified mouse button is pressed since the previous update.
            </summary>
            <param name="mouseDevice">The mnouse</param>
            <param name="mouseButton">The mouse button</param>
            <returns><c>true</c> if the specified mouse button is pressed since the previous update; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Input.MouseDeviceExtensions.IsButtonReleased(Stride.Input.IMouseDevice,Stride.Input.MouseButton)">
            <summary>
            Determines whether the specified mouse button is released.
            </summary>
            <param name="mouseDevice">The mnouse</param>
            <param name="mouseButton">The mouse button</param>
            <returns><c>true</c> if the specified mouse button is released; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Stride.Input.MouseDeviceExtensions.IsButtonDown(Stride.Input.IMouseDevice,Stride.Input.MouseButton)">
            <summary>
            Determines whether the specified button is being pressed down
            </summary>
            <param name="mouseDevice">The mnouse</param>
            <param name="mouseButton">The mouse button</param>
            <returns><c>true</c> if the specified button is being pressed down; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Stride.Input.MouseDeviceState">
            <summary>
            An extension to <see cref="T:Stride.Input.PointerDeviceState"/> that handle mouse input and translates it to pointer input
            </summary>
        </member>
        <member name="M:Stride.Input.MouseDeviceState.Update(System.Collections.Generic.List{Stride.Input.InputEvent})">
            <summary>
            Generate input events
            </summary>
        </member>
        <member name="M:Stride.Input.MouseDeviceState.HandleMouseDelta(Stride.Core.Mathematics.Vector2)">
            <summary>
            Special move that generates pointer events with just delta
            </summary>
            <param name="delta">The movement delta</param>
        </member>
        <member name="M:Stride.Input.MouseDeviceState.HandlePointerDown">
            <summary>
            Handles a single pointer down
            </summary>
        </member>
        <member name="M:Stride.Input.MouseDeviceState.HandlePointerUp">
            <summary>
            Handles a single pointer up
            </summary>
        </member>
        <member name="M:Stride.Input.MouseDeviceState.HandleMove(Stride.Core.Mathematics.Vector2)">
            <summary>
            Handles a single pointer move
            </summary>
            <param name="newPosition">New position of the pointer</param>
        </member>
        <member name="T:Stride.Input.MouseWheelEvent">
            <summary>
            Event for a mouse wheel being used
            </summary>
        </member>
        <member name="F:Stride.Input.MouseWheelEvent.WheelDelta">
            <summary>
            The amount the mouse wheel scrolled
            </summary>
        </member>
        <member name="P:Stride.Input.MouseWheelEvent.Mouse">
            <summary>
            The mouse that sent this event
            </summary>
        </member>
        <member name="T:Stride.Input.NamespaceDoc">
            <summary>
            The <see cref="N:Stride.Input"/> namespace contains types to manage the input.
            </summary>
        </member>
        <member name="M:Stride.Input.OrientationSensor.#ctor(Stride.Input.IInputSource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Input.OrientationSensor"/> class.
            </summary>
        </member>
        <member name="T:Stride.Input.PointerDeviceBase">
            <summary>
            Base class for pointer devices
            </summary>
        </member>
        <member name="M:Stride.Input.PointerDeviceBase.SetSurfaceSize(Stride.Core.Mathematics.Vector2)">
            <summary>
            Calls <see cref="M:Stride.Input.PointerDeviceState.SetSurfaceSize(Stride.Core.Mathematics.Vector2)"/> and invokes the <see cref="E:Stride.Input.PointerDeviceBase.SurfaceSizeChanged"/> event
            </summary>
            <param name="newSize">New size of the surface</param>
        </member>
        <member name="T:Stride.Input.PointerDeviceState">
            <summary>
            Contains logic to generate pointer events and store the resulting state
            </summary>
        </member>
        <member name="M:Stride.Input.PointerDeviceState.Update(System.Collections.Generic.List{Stride.Input.InputEvent})">
            <summary>
            Generate input events
            </summary>
        </member>
        <member name="M:Stride.Input.PointerDeviceState.SetSurfaceSize(Stride.Core.Mathematics.Vector2)">
            <summary>
            Updates the surface size of the pointing device, updates <see cref="P:Stride.Input.PointerDeviceState.SurfaceSize"/>, <see cref="P:Stride.Input.PointerDeviceState.SurfaceAspectRatio"/>, <see cref="F:Stride.Input.PointerDeviceState.invSurfaceSize"/> and calls <see cref="!:SurfaceSizeChanged"/>
            </summary>
            <param name="newSize">New size of the surface</param>
        </member>
        <member name="M:Stride.Input.PointerDeviceState.ProcessPointerEvent(Stride.Input.PointerDeviceState.InputEvent)">
            <summary>
            Processes a <see cref="T:Stride.Input.PointerDeviceState.InputEvent"/>, converting it to a <see cref="T:Stride.Input.PointerEvent"/>. Also calls <see cref="!:OnPointer"/> and updates <see cref="!:CurrentPointerEvents"/>
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Stride.Input.PointerDeviceState.UpdatePointerState(Stride.Input.PointerEvent,System.Boolean)">
            <summary>
            Updates a pointer event with position / type / id set and updates the storted pointer data
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Stride.Input.PointerDeviceState.GetPointerData(System.Int32)">
            <summary>
            Retrueves a pointer data structure unqiue to the given pointer ID
            </summary>
            <param name="pointerId"></param>
            <returns></returns>
        </member>
        <member name="M:Stride.Input.PointerDeviceState.Reset">
            <summary>
            Resets the state before processing input
            </summary>
        </member>
        <member name="T:Stride.Input.PointerDeviceState.PointerData">
            <summary>
            Some additional data kept on top of <see cref="T:Stride.Input.PointerPoint"/> for the purpose of generating <see cref="T:Stride.Input.PointerEvent"/>
            </summary>
        </member>
        <member name="T:Stride.Input.PointerDeviceState.InputEvent">
            <summary>
            Simplified event data used to generate the full events when <see cref="M:Stride.Input.PointerDeviceState.Update(System.Collections.Generic.List{Stride.Input.InputEvent})"/> gets called
            </summary>
        </member>
        <member name="T:Stride.Input.PointerEvent">
            <summary>
            A pointer event.
            </summary>
        </member>
        <member name="P:Stride.Input.PointerEvent.PointerId">
            <summary>
            Gets a unique identifier of the pointer. See remarks.
            </summary>
            <value>The pointer id.</value>
            <remarks>The default mouse pointer will always be affected to the PointerId 0. On a tablet, a pen or each fingers will get a unique identifier.</remarks>
        </member>
        <member name="P:Stride.Input.PointerEvent.AbsolutePosition">
            <summary>
            Gets the absolute screen position of the pointer.
            </summary>
            <value>The absolute delta position.</value>
        </member>
        <member name="P:Stride.Input.PointerEvent.Position">
            <summary>
            Gets the normalized screen position of the pointer.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:Stride.Input.PointerEvent.AbsoluteDeltaPosition">
            <summary>
            Gets the absolute delta position of the pointer since the previous frame.
            </summary>
            <value>The absolute delta position.</value>
        </member>
        <member name="P:Stride.Input.PointerEvent.DeltaPosition">
            <summary>
            Gets the delta position of the pointer since the previous frame.
            </summary>
            <value>The delta position.</value>
        </member>
        <member name="P:Stride.Input.PointerEvent.DeltaTime">
            <summary>
            Gets the amount of time since the previous state.
            </summary>
            <value>The delta time.</value>
        </member>
        <member name="P:Stride.Input.PointerEvent.EventType">
            <summary>
            Gets the type of pointer event (pressed,released,etc.)
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:Stride.Input.PointerEvent.IsDown">
            <summary>
            Gets if the pointer is down, useful for filtering out move events that are not placed between drags
            </summary>
        </member>
        <member name="P:Stride.Input.PointerEvent.Pointer">
            <summary>
            The pointer that sent this event
            </summary>
        </member>
        <member name="M:Stride.Input.PointerEvent.Clone">
            <summary>
            Clones the pointer event, this is useful if you intend to use it after this frame, since otherwise it would be recycled by the input manager the next frame
            </summary>
            <returns>The cloned event</returns>
        </member>
        <member name="T:Stride.Input.PointerEventType">
            <summary>
            State of a pointer event.
            </summary>
        </member>
        <member name="F:Stride.Input.PointerEventType.Pressed">
            <summary>
            The pointer just started to hit the digitizer.
            </summary>
        </member>
        <member name="F:Stride.Input.PointerEventType.Moved">
            <summary>
            The pointer is moving on the digitizer.
            </summary>
        </member>
        <member name="F:Stride.Input.PointerEventType.Released">
            <summary>
            The pointer just released pressure to the digitizer.
            </summary>
        </member>
        <member name="F:Stride.Input.PointerEventType.Canceled">
            <summary>
            The pointer has been canceled.
            </summary>
        </member>
        <member name="T:Stride.Input.PointerPoint">
            <summary>
            Represents a unique pointer that is or was on the screen and information about it
            </summary>
        </member>
        <member name="F:Stride.Input.PointerPoint.Position">
            <summary>
            Last position of the pointer
            </summary>
        </member>
        <member name="F:Stride.Input.PointerPoint.Delta">
            <summary>
            Pointer delta
            </summary>
        </member>
        <member name="F:Stride.Input.PointerPoint.IsDown">
            <summary>
            Is the pointer currently down
            </summary>
        </member>
        <member name="F:Stride.Input.PointerPoint.Id">
            <summary>
            The pointer ID, from the device
            </summary>
        </member>
        <member name="F:Stride.Input.PointerPoint.Pointer">
            <summary>
            The device to which this pointer belongs
            </summary>
        </member>
        <member name="T:Stride.Input.GamePadSDL">
            <summary>
            A known gamepad that uses SDL as a driver
            </summary>
        </member>
        <member name="T:Stride.Input.InputSourceSDL">
            <summary>
            Provides support for mouse/touch/keyboard/gamepads using SDL
            </summary>
        </member>
        <member name="T:Stride.Input.KeyboardSDL.SDLKeys">
            <summary>
            Mapping between <see cref="T:SDL2.SDL.SDL_Keycode"/> and <see cref="T:Stride.Input.Keys"/> needed for
            translating SDL key events into Stride ones.
            </summary>
        </member>
        <member name="F:Stride.Input.KeyboardSDL.SDLKeys.MapKeys">
            <summary>
            Map between SDL keys and Stride keys.
            </summary>
        </member>
        <member name="M:Stride.Input.KeyboardSDL.SDLKeys.NewMapKeys">
            <summary>
            Create a mapping between <see cref="T:SDL2.SDL.SDL_Keycode"/> and <see cref="T:Stride.Input.Keys"/>
            </summary>
            <remarks>Not all <see cref="T:Stride.Input.Keys"/> have a corresponding SDL entries. For the moment they are commented out in the code below.</remarks>
            <returns>A new map.</returns>
        </member>
        <member name="T:Stride.Input.PointerSDL">
            <summary>
            Class handling finger touch inputs using the SDL backend
            </summary>
        </member>
        <member name="T:Stride.Input.Sensor">
            <summary>
            Describes a sensor that implements Enabled/Disable and provides a name/guid set from constructor
            </summary>
        </member>
        <member name="M:Stride.Input.Sensor.#ctor(Stride.Input.IInputSource,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Input.Sensor"/> class.
            </summary>
        </member>
        <member name="T:Stride.Input.InputSourceSimulated">
            <summary>
            Provides a virtual mouse and keyboard that generate input events like a normal mouse/keyboard when any of the functions (Simulate...) are called
            </summary>
        </member>
        <member name="T:Stride.Input.PointerSimulated">
            <summary>
            Simulation of PointerEvents
            </summary>
        </member>
        <member name="T:Stride.Input.SurfaceSizeChangedEventArgs">
            <summary>
            An event for when the size of a pointer surface changed
            </summary>
        </member>
        <member name="F:Stride.Input.SurfaceSizeChangedEventArgs.NewSurfaceSize">
            <summary>
            The new size of the surface
            </summary>
        </member>
        <member name="T:Stride.Input.TextInputEvent">
            <summary>
            Input event used for text input and IME related events
            </summary>
        </member>
        <member name="F:Stride.Input.TextInputEvent.Text">
            <summary>
            The text that was entered
            </summary>
        </member>
        <member name="F:Stride.Input.TextInputEvent.Type">
            <summary>
            The type of text input event
            </summary>
        </member>
        <member name="F:Stride.Input.TextInputEvent.CompositionStart">
            <summary>
            Start of the current composition being edited
            </summary>
        </member>
        <member name="F:Stride.Input.TextInputEvent.CompositionLength">
            <summary>
            Length of the current part of the composition being edited
            </summary>
        </member>
        <member name="F:Stride.Input.TextInputEventType.Input">
            <summary>
            When new text is entered
            </summary>
        </member>
        <member name="F:Stride.Input.TextInputEventType.Composition">
            <summary>
            This the current text that has not yet been entered but is still being edited
            </summary>
        </member>
        <member name="M:Stride.Input.UserAccelerationSensor.#ctor(Stride.Input.IInputSource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Input.UserAccelerationSensor"/> class.
            </summary>
        </member>
        <member name="T:Stride.Input.IVirtualButton">
            <summary>
            Interface IVirtualButton
            </summary>
        </member>
        <member name="M:Stride.Input.IVirtualButton.GetValue(Stride.Input.InputManager)">
            <summary>
            Gets the value associated with this virtual button from an input manager.
            </summary>
            <param name="manager">The manager.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:Stride.Input.IVirtualButton.IsDown(Stride.Input.InputManager)">
            <summary>
            Indicate if the button is currently down
            </summary>
            <param name="manager">The input manager</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Input.IVirtualButton.IsPressed(Stride.Input.InputManager)">
            <summary>
            Indicate if the button has been pressed since the last frame
            </summary>
            <param name="manager">The input manager</param>
            <returns></returns>
        </member>
        <member name="M:Stride.Input.IVirtualButton.IsReleased(Stride.Input.InputManager)">
            <summary>
            Indicate if the button has been released since the last frame
            </summary>
            <param name="manager">The input manager</param>
            <returns></returns>
        </member>
        <member name="T:Stride.Input.VirtualButton">
            <summary>
            Describes a virtual button (a key from a keyboard, a mouse button, an axis of a joystick...etc.).
            </summary>
            <summary>
            Describes a virtual button (a key from a keyboard, a mouse button, an axis of a joystick...etc.).
            </summary>
            <summary>
            Describes a virtual button (a key from a keyboard, a mouse button, an axis of a joystick...etc.).
            </summary>
            <summary>
            Describes a virtual button (a key from a keyboard, a mouse button, an axis of a joystick...etc.).
            </summary>
            <summary>
            Describes a virtual button (a key from a keyboard, a mouse button, an axis of a joystick...etc.).
            </summary>
        </member>
        <member name="M:Stride.Input.VirtualButton.#ctor(System.String,Stride.Input.VirtualButtonType,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Input.VirtualButton" /> class.
            </summary>
            <param name="shortName">The name.</param>
            <param name="type">The type.</param>
            <param name="id">The id.</param>
            <param name="isPositiveAndNegative">if set to <c>true</c> [is positive and negative].</param>
        </member>
        <member name="F:Stride.Input.VirtualButton.Id">
            <summary>
            Unique Id for a particular button <see cref="F:Stride.Input.VirtualButton.Type"/>.
            </summary>
        </member>
        <member name="P:Stride.Input.VirtualButton.Name">
            <summary>
            The full name of this button.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.ShortName">
            <summary>
            The short name of this button.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Type">
            <summary>
            Type of this button.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.IsPositiveAndNegative">
            <summary>
            A boolean indicating whether this button supports positive and negative value.
            </summary>
        </member>
        <member name="M:Stride.Input.VirtualButton.op_Addition(Stride.Input.IVirtualButton,Stride.Input.VirtualButton)">
            <summary>
            Implements the + operator to combine to <see cref="T:Stride.Input.VirtualButton"/>.
            </summary>
            <param name="left">The left virtual button.</param>
            <param name="right">The right virtual button.</param>
            <returns>A set containting the two virtual buttons.</returns>
        </member>
        <member name="P:Stride.Input.VirtualButton.Registered">
            <summary>
            Gets all registered <see cref="T:Stride.Input.VirtualButton"/>.
            </summary>
            <value>The registered virtual buttons.</value>
        </member>
        <member name="M:Stride.Input.VirtualButton.Find(System.String)">
            <summary>
            Finds a virtual button by the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of VirtualButton or null if no match.</returns>
        </member>
        <member name="M:Stride.Input.VirtualButton.Find(System.Int32)">
            <summary>
            Finds a virtual button by the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns>An instance of VirtualButton or null if no match.</returns>
        </member>
        <member name="T:Stride.Input.VirtualButton.GamePad">
            <summary>
            GamePad virtual button.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.GamePad.PadIndex">
            <summary>
            The pad index.
            </summary>
        </member>
        <member name="M:Stride.Input.VirtualButton.GamePad.OfGamePad(System.Int32)">
            <summary>
            Return an instance of a particular GamePad.
            </summary>
            <param name="index">The gamepad index.</param>
            <returns>A new GamePad button linked to the gamepad index.</returns>
        </member>
        <member name="F:Stride.Input.VirtualButton.GamePad.PadUp">
            <summary>
            Equivalent to <see cref="F:Stride.Input.GamePadButton.PadUp"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.GamePad.PadDown">
            <summary>
            Equivalent to <see cref="F:Stride.Input.GamePadButton.PadDown"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.GamePad.PadLeft">
            <summary>
            Equivalent to <see cref="F:Stride.Input.GamePadButton.PadLeft"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.GamePad.PadRight">
            <summary>
            Equivalent to <see cref="F:Stride.Input.GamePadButton.PadRight"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.GamePad.Start">
            <summary>
            Equivalent to <see cref="F:Stride.Input.GamePadButton.Start"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.GamePad.Back">
            <summary>
            Equivalent to <see cref="F:Stride.Input.GamePadButton.Back"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.GamePad.LeftThumb">
            <summary>
            Equivalent to <see cref="F:Stride.Input.GamePadButton.LeftThumb"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.GamePad.RightThumb">
            <summary>
            Equivalent to <see cref="F:Stride.Input.GamePadButton.RightThumb"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.GamePad.LeftShoulder">
            <summary>
            Equivalent to <see cref="F:Stride.Input.GamePadButton.LeftShoulder"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.GamePad.RightShoulder">
            <summary>
            Equivalent to <see cref="F:Stride.Input.GamePadButton.RightShoulder"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.GamePad.A">
            <summary>
            Equivalent to <see cref="F:Stride.Input.GamePadButton.A"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.GamePad.B">
            <summary>
            Equivalent to <see cref="F:Stride.Input.GamePadButton.B"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.GamePad.X">
            <summary>
            Equivalent to <see cref="F:Stride.Input.GamePadButton.X"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.GamePad.Y">
            <summary>
            Equivalent to <see cref="F:Stride.Input.GamePadButton.Y"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.GamePad.LeftThumbAxisX">
            <summary>
            Equivalent to the X Axis of <see cref="F:Stride.Input.GamePadState.LeftThumb"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.GamePad.LeftThumbAxisY">
            <summary>
            Equivalent to the Y Axis of <see cref="F:Stride.Input.GamePadState.LeftThumb"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.GamePad.RightThumbAxisX">
            <summary>
            Equivalent to the X Axis of <see cref="F:Stride.Input.GamePadState.RightThumb"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.GamePad.RightThumbAxisY">
            <summary>
            Equivalent to the Y Axis of <see cref="F:Stride.Input.GamePadState.RightThumb"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.GamePad.LeftTrigger">
            <summary>
            Equivalent to <see cref="F:Stride.Input.GamePadState.LeftTrigger"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.GamePad.RightTrigger">
            <summary>
            Equivalent to <see cref="F:Stride.Input.GamePadState.RightTrigger"/>.
            </summary>
        </member>
        <member name="T:Stride.Input.VirtualButton.Keyboard">
            <summary>
            Keyboard virtual button.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.None">
            <summary>
            The 'none' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Cancel">
            <summary>
            The 'cancel' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Back">
            <summary>
            The 'back' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Tab">
            <summary>
            The 'tab' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.LineFeed">
            <summary>
            The 'linefeed' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Clear">
            <summary>
            The 'clear' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Enter">
            <summary>
            The 'enter' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Return">
            <summary>
            The 'return' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Pause">
            <summary>
            The 'pause' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Capital">
            <summary>
            The 'capital' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.CapsLock">
            <summary>
            The 'capslock' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.HangulMode">
            <summary>
            The 'hangulmode' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.KanaMode">
            <summary>
            The 'kanamode' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.JunjaMode">
            <summary>
            The 'junjamode' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.FinalMode">
            <summary>
            The 'finalmode' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.HanjaMode">
            <summary>
            The 'hanjamode' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.KanjiMode">
            <summary>
            The 'kanjimode' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Escape">
            <summary>
            The 'escape' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.ImeConvert">
            <summary>
            The 'imeconvert' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.ImeNonConvert">
            <summary>
            The 'imenonconvert' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.ImeAccept">
            <summary>
            The 'imeaccept' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.ImeModeChange">
            <summary>
            The 'imemodechange' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Space">
            <summary>
            The 'space' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.PageUp">
            <summary>
            The 'pageup' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Prior">
            <summary>
            The 'prior' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Next">
            <summary>
            The 'next' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.PageDown">
            <summary>
            The 'pagedown' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.End">
            <summary>
            The 'end' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Home">
            <summary>
            The 'home' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Left">
            <summary>
            The 'left' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Up">
            <summary>
            The 'up' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Right">
            <summary>
            The 'right' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Down">
            <summary>
            The 'down' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Select">
            <summary>
            The 'select' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Print">
            <summary>
            The 'print' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Execute">
            <summary>
            The 'execute' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.PrintScreen">
            <summary>
            The 'printscreen' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Snapshot">
            <summary>
            The 'snapshot' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Insert">
            <summary>
            The 'insert' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Delete">
            <summary>
            The 'delete' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Help">
            <summary>
            The 'help' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.D0">
            <summary>
            The 'd0' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.D1">
            <summary>
            The 'd1' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.D2">
            <summary>
            The 'd2' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.D3">
            <summary>
            The 'd3' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.D4">
            <summary>
            The 'd4' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.D5">
            <summary>
            The 'd5' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.D6">
            <summary>
            The 'd6' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.D7">
            <summary>
            The 'd7' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.D8">
            <summary>
            The 'd8' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.D9">
            <summary>
            The 'd9' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.A">
            <summary>
            The 'a' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.B">
            <summary>
            The 'b' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.C">
            <summary>
            The 'c' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.D">
            <summary>
            The 'd' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.E">
            <summary>
            The 'e' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.F">
            <summary>
            The 'f' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.G">
            <summary>
            The 'g' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.H">
            <summary>
            The 'h' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.I">
            <summary>
            The 'i' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.J">
            <summary>
            The 'j' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.K">
            <summary>
            The 'k' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.L">
            <summary>
            The 'l' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.M">
            <summary>
            The 'm' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.N">
            <summary>
            The 'n' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.O">
            <summary>
            The 'o' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.P">
            <summary>
            The 'p' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Q">
            <summary>
            The 'q' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.R">
            <summary>
            The 'r' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.S">
            <summary>
            The 's' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.T">
            <summary>
            The 't' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.U">
            <summary>
            The 'u' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.V">
            <summary>
            The 'v' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.W">
            <summary>
            The 'w' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.X">
            <summary>
            The 'x' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Y">
            <summary>
            The 'y' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Z">
            <summary>
            The 'z' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.LeftWin">
            <summary>
            The 'leftwin' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.RightWin">
            <summary>
            The 'rightwin' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Apps">
            <summary>
            The 'apps' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Sleep">
            <summary>
            The 'sleep' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.NumPad0">
            <summary>
            The 'numpad0' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.NumPad1">
            <summary>
            The 'numpad1' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.NumPad2">
            <summary>
            The 'numpad2' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.NumPad3">
            <summary>
            The 'numpad3' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.NumPad4">
            <summary>
            The 'numpad4' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.NumPad5">
            <summary>
            The 'numpad5' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.NumPad6">
            <summary>
            The 'numpad6' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.NumPad7">
            <summary>
            The 'numpad7' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.NumPad8">
            <summary>
            The 'numpad8' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.NumPad9">
            <summary>
            The 'numpad9' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Multiply">
            <summary>
            The 'multiply' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Add">
            <summary>
            The 'add' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Separator">
            <summary>
            The 'separator' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Subtract">
            <summary>
            The 'subtract' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Decimal">
            <summary>
            The 'decimal' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Divide">
            <summary>
            The 'divide' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.F1">
            <summary>
            The 'f1' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.F2">
            <summary>
            The 'f2' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.F3">
            <summary>
            The 'f3' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.F4">
            <summary>
            The 'f4' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.F5">
            <summary>
            The 'f5' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.F6">
            <summary>
            The 'f6' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.F7">
            <summary>
            The 'f7' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.F8">
            <summary>
            The 'f8' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.F9">
            <summary>
            The 'f9' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.F10">
            <summary>
            The 'f10' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.F11">
            <summary>
            The 'f11' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.F12">
            <summary>
            The 'f12' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.F13">
            <summary>
            The 'f13' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.F14">
            <summary>
            The 'f14' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.F15">
            <summary>
            The 'f15' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.F16">
            <summary>
            The 'f16' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.F17">
            <summary>
            The 'f17' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.F18">
            <summary>
            The 'f18' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.F19">
            <summary>
            The 'f19' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.F20">
            <summary>
            The 'f20' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.F21">
            <summary>
            The 'f21' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.F22">
            <summary>
            The 'f22' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.F23">
            <summary>
            The 'f23' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.F24">
            <summary>
            The 'f24' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.NumLock">
            <summary>
            The 'numlock' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Scroll">
            <summary>
            The 'scroll' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.LeftShift">
            <summary>
            The 'leftshift' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.RightShift">
            <summary>
            The 'rightshift' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.LeftCtrl">
            <summary>
            The 'leftctrl' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.RightCtrl">
            <summary>
            The 'rightctrl' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.LeftAlt">
            <summary>
            The 'leftalt' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.RightAlt">
            <summary>
            The 'rightalt' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.BrowserBack">
            <summary>
            The 'browserback' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.BrowserForward">
            <summary>
            The 'browserforward' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.BrowserRefresh">
            <summary>
            The 'browserrefresh' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.BrowserStop">
            <summary>
            The 'browserstop' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.BrowserSearch">
            <summary>
            The 'browsersearch' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.BrowserFavorites">
            <summary>
            The 'browserfavorites' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.BrowserHome">
            <summary>
            The 'browserhome' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.VolumeMute">
            <summary>
            The 'volumemute' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.VolumeDown">
            <summary>
            The 'volumedown' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.VolumeUp">
            <summary>
            The 'volumeup' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.MediaNextTrack">
            <summary>
            The 'medianexttrack' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.MediaPreviousTrack">
            <summary>
            The 'mediaprevioustrack' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.MediaStop">
            <summary>
            The 'mediastop' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.MediaPlayPause">
            <summary>
            The 'mediaplaypause' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.LaunchMail">
            <summary>
            The 'launchmail' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.SelectMedia">
            <summary>
            The 'selectmedia' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.LaunchApplication1">
            <summary>
            The 'launchapplication1' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.LaunchApplication2">
            <summary>
            The 'launchapplication2' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Oem1">
            <summary>
            The 'oem1' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.OemSemicolon">
            <summary>
            The 'oemsemicolon' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.OemPlus">
            <summary>
            The 'oemplus' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.OemComma">
            <summary>
            The 'oemcomma' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.OemMinus">
            <summary>
            The 'oemminus' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.OemPeriod">
            <summary>
            The 'oemperiod' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Oem2">
            <summary>
            The 'oem2' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.OemQuestion">
            <summary>
            The 'oemquestion' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Oem3">
            <summary>
            The 'oem3' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.OemTilde">
            <summary>
            The 'oemtilde' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Oem4">
            <summary>
            The 'oem4' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.OemOpenBrackets">
            <summary>
            The 'oemopenbrackets' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Oem5">
            <summary>
            The 'oem5' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.OemPipe">
            <summary>
            The 'oempipe' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Oem6">
            <summary>
            The 'oem6' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.OemCloseBrackets">
            <summary>
            The 'oemclosebrackets' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Oem7">
            <summary>
            The 'oem7' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.OemQuotes">
            <summary>
            The 'oemquotes' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Oem8">
            <summary>
            The 'oem8' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Oem102">
            <summary>
            The 'oem102' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.OemBackslash">
            <summary>
            The 'oembackslash' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Attn">
            <summary>
            The 'attn' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.CrSel">
            <summary>
            The 'crsel' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.ExSel">
            <summary>
            The 'exsel' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.EraseEof">
            <summary>
            The 'eraseeof' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Play">
            <summary>
            The 'play' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Zoom">
            <summary>
            The 'zoom' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.NoName">
            <summary>
            The 'noname' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.Pa1">
            <summary>
            The 'pa1' key.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Keyboard.OemClear">
            <summary>
            The 'oemclear' key.
            </summary>
        </member>
        <member name="T:Stride.Input.VirtualButton.Mouse">
            <summary>
            Mouse virtual button.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Mouse.Left">
            <summary>
            Equivalent to <see cref="F:Stride.Input.MouseButton.Left"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Mouse.Middle">
            <summary>
            Equivalent to <see cref="F:Stride.Input.MouseButton.Middle"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Mouse.Right">
            <summary>
            Equivalent to <see cref="F:Stride.Input.MouseButton.Right"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Mouse.Extended1">
            <summary>
            Equivalent to <see cref="F:Stride.Input.MouseButton.Extended1"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Mouse.Extended2">
            <summary>
            Equivalent to <see cref="F:Stride.Input.MouseButton.Extended2"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Mouse.PositionX">
            <summary>
            Equivalent to X Axis of <see cref="P:Stride.Input.InputManager.MousePosition"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Mouse.PositionY">
            <summary>
            Equivalent to Y Axis of <see cref="P:Stride.Input.InputManager.MousePosition"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Mouse.DeltaX">
            <summary>
            Equivalent to X Axis delta of <see cref="P:Stride.Input.InputManager.MousePosition"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Mouse.DeltaY">
            <summary>
            Equivalent to Y Axis delta of <see cref="P:Stride.Input.InputManager.MousePosition"/>.
            </summary>
        </member>
        <member name="T:Stride.Input.VirtualButton.Pointer">
            <summary>
            Mouse virtual button.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Pointer.PointerId">
            <summary>
            The pad index.
            </summary>
        </member>
        <member name="M:Stride.Input.VirtualButton.Pointer.WithId(System.Int32)">
            <summary>
            Return a pointer button for the given point Id.
            </summary>
            <param name="pointerId">the Id of the pointer</param>
            <returns>An pointer button for the given pointer Id.</returns>
        </member>
        <member name="F:Stride.Input.VirtualButton.Pointer.State">
            <summary>
            The current state of pointers.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Pointer.PositionX">
            <summary>
            The X component of the Pointer <see cref="F:Stride.Input.PointerPoint.Position"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Pointer.PositionY">
            <summary>
            The Y component of the Pointer <see cref="F:Stride.Input.PointerPoint.Position"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Pointer.DeltaX">
            <summary>
            The X component of the Pointer <see cref="F:Stride.Input.PointerPoint.Delta"/>.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButton.Pointer.DeltaY">
            <summary>
            The Y component of the Pointer <see cref="F:Stride.Input.PointerPoint.Delta"/>.
            </summary>
        </member>
        <member name="T:Stride.Input.VirtualButtonBinding">
            <summary>
            Describes a binding between a name and a <see cref="T:Stride.Input.IVirtualButton"/>.
            </summary>
        </member>
        <member name="M:Stride.Input.VirtualButtonBinding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Input.VirtualButtonBinding" /> class.
            </summary>
        </member>
        <member name="M:Stride.Input.VirtualButtonBinding.#ctor(System.Object,Stride.Input.IVirtualButton)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Input.VirtualButtonBinding" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="button">The button.</param>
        </member>
        <member name="P:Stride.Input.VirtualButtonBinding.Name">
            <summary>
            Gets or sets the name of this virtual button.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Stride.Input.VirtualButtonBinding.Button">
            <summary>
            Gets or sets the virtual button.
            </summary>
            <value>The virtual button.</value>
        </member>
        <member name="M:Stride.Input.VirtualButtonBinding.GetValue(Stride.Input.InputManager)">
            <summary>
            Gets the value for a particular binding.
            </summary>
            <returns>Value of the binding</returns>
        </member>
        <member name="T:Stride.Input.VirtualButtonConfig">
            <summary>
            Describes the configuration composed by a collection of <see cref="T:Stride.Input.VirtualButtonBinding"/>.
            </summary>
        </member>
        <member name="M:Stride.Input.VirtualButtonConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Input.VirtualButtonConfig" /> class.
            </summary>
        </member>
        <member name="P:Stride.Input.VirtualButtonConfig.BindingNames">
            <summary>
            Gets the binding names.
            </summary>
            <value>The binding names.</value>
        </member>
        <member name="T:Stride.Input.VirtualButtonConfigSet">
            <summary>
            A collection of <see cref="T:Stride.Input.VirtualButtonConfig"/>.
            </summary>
            <remarks>
            Several virtual button configurations can be stored in this instance. 
            For example, User0 config could be stored on index 0, User1 on index 1...etc.
            </remarks>
        </member>
        <member name="M:Stride.Input.VirtualButtonConfigSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Input.VirtualButtonConfigSet" /> class.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Stride.Input.VirtualButtonGroup" -->
        <!-- Badly formed XML comment ignored for member "P:Stride.Input.VirtualButtonGroup.IsDisjunction" -->
        <member name="M:Stride.Input.VirtualButtonGroup.op_Addition(Stride.Input.VirtualButtonGroup,Stride.Input.IVirtualButton)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="combination">The combination.</param>
            <param name="virtualButton">The virtual button.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:Stride.Input.VirtualButtonTwoWay">
            <summary>
            Describes a <see cref="T:Stride.Input.IVirtualButton"/> using the sum of a negative and positive button.
            </summary>
            <remarks>
            This virtual button is for example useful to bind a key to a negative value (key 'left') 
            and another key to a positive value (key 'right') thus simulating an axis button.
            The result of this virtual 
            <code>Result = PositiveButton.GetValue - NegativeButton.GetValue;</code>
            </remarks>
        </member>
        <member name="M:Stride.Input.VirtualButtonTwoWay.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Input.VirtualButtonTwoWay" /> class.
            </summary>
        </member>
        <member name="M:Stride.Input.VirtualButtonTwoWay.#ctor(Stride.Input.IVirtualButton,Stride.Input.IVirtualButton)">
            <summary>
            Initializes a new instance of the <see cref="T:Stride.Input.VirtualButtonTwoWay" /> class.
            </summary>
            <param name="negativeButton">The negative button.</param>
            <param name="positiveButton">The positive button.</param>
        </member>
        <member name="P:Stride.Input.VirtualButtonTwoWay.NegativeButton">
            <summary>
            Gets or sets the negative button that will generate a 'negative' value if it is pressed.
            </summary>
            <value>The negative button.</value>
        </member>
        <member name="P:Stride.Input.VirtualButtonTwoWay.PositiveButton">
            <summary>
            Gets or sets the positive button that will generate a 'positive' value if it is pressed.
            </summary>
            <value>The positive button.</value>
        </member>
        <member name="T:Stride.Input.VirtualButtonType">
            <summary>
            Type of a <see cref="T:Stride.Input.VirtualButton" />.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButtonType.Keyboard">
            <summary>
            A keyboard virtual button.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButtonType.Mouse">
            <summary>
            A mouse virtual button.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButtonType.Pointer">
            <summary>
            A pointer virtual button.
            </summary>
        </member>
        <member name="F:Stride.Input.VirtualButtonType.GamePad">
            <summary>
            A gamepad virtual button.
            </summary>
        </member>
        <member name="T:Stride.Input.DeviceObjectIdExtensions">
            <summary>
            Provides easy operations on <see cref="T:SharpDX.DirectInput.DeviceObjectTypeFlags"/>
            </summary>
        </member>
        <member name="M:Stride.Input.GameControllerDirectInput.ClampDeadZone(System.Single,System.Single)">
            <summary>
            Applies a deadzone to an axis input value
            </summary>
            <param name="value">The axis input value</param>
            <param name="deadZone">The deadzone treshold</param>
            <returns>The axis value with the applied deadzone</returns>
        </member>
        <member name="T:Stride.Input.GamePadDirectInput">
            <summary>
            A known gamepad that uses DirectInput as a driver
            </summary>
        </member>
        <member name="T:Stride.Input.InputSourceWindowsDirectInput">
            <summary>
            Provides support for various game controllers on windows
            </summary>
        </member>
        <member name="M:Stride.Input.InputSourceWindowsDirectInput.Scan">
            <summary>
            Scans for new devices
            </summary>
        </member>
        <member name="M:Stride.Input.InputSourceWindowsDirectInput.OpenDevice(SharpDX.DirectInput.DeviceInstance)">
            <summary>
            Opens a new game controller or gamepad
            </summary>
            <param name="deviceInstance">The device instance</param>
        </member>
        <member name="T:Stride.Input.InputSourceWindowsRawInput">
            <summary>
            Provides support for raw keyboard input on windows
            </summary>
        </member>
        <member name="T:Stride.Input.InputSourceWindowsXInput">
            <summary>
            Provides support for XInput gamepads
            </summary>
        </member>
        <member name="M:Stride.Input.InputSourceWindowsXInput.Scan">
            <summary>
            Scans for new devices
            </summary>
        </member>
        <member name="M:Stride.Input.InputSourceWindowsXInput.OpenDevice(System.Int32)">
            <summary>
            Opens a new gamepad
            </summary>
            <param name="instance">The gamepad</param>
        </member>
        <member name="T:Stride.Input.InputSourceWinforms">
            <summary>
            Provides support for mouse and keyboard input on windows forms
            </summary>
        </member>
        <member name="P:Stride.Input.InputSourceWinforms.IsMousePositionLocked">
            <summary>
            Gets the value indicating if the mouse position is currently locked or not.
            </summary>
        </member>
        <member name="M:Stride.Input.InputSourceWinforms.MissingInputHack">
            <summary>
            This function houses a hack to fix the window missing some input events,
            see Stride pull #181 for more information (https://github.com/stride3d/stride/pull/181).
            TODO: Find a proper solution to replace this workaround.
            </summary>
        </member>
        <member name="M:Stride.Input.InputSourceWinforms.MessageIsDownAutoRepeat(System.Int64)">
            <summary>
            Windows keeps sending KEYDOWN messages while the user holds down the key.
            <br/>This function is used to find out if the received message is a repeated KEYDOWN.
            </summary>
            <param name="lParam">lParam of the KEYDOWN message</param>
            <returns><c>True</c> if this message is a repeated KeyDown, <c>false</c> if it's an actual keydown</returns>
        </member>
        <member name="T:Stride.Input.WinKeys">
            <summary>
            Mapping between <see cref="T:System.Windows.Forms.Keys"/> and <see cref="T:Stride.Input.Keys"/> needed for
            translating Winform key events into Stride ones.
            </summary>
        </member>
        <member name="F:Stride.Input.WinKeys.MapKeys">
            <summary>
            Map between Winform keys and Stride keys.
            </summary>
        </member>
        <member name="M:Stride.Input.WinKeys.NewMapKeys">
            <summary>
            Create a mapping between <see cref="T:System.Windows.Forms.Keys"/> and <see cref="T:Stride.Input.Keys"/>
            </summary>
            <returns>A new map.</returns>
        </member>
        <member name="T:Stride.StrideVersion">
            <summary>
            Internal version used to identify Stride version.
            </summary>
            <remarks>
            During package build, PackageUpdateVersionTask is updating that file and expect some specific text regex so be careful if you change any of this.
            </remarks>
        </member>
        <member name="F:Stride.StrideVersion.PublicVersion">
            <summary>
            The version used by editor for display purpose. 4th digit needs to be at least 1 if used (due to NuGet special cases).
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.AssemblyVersion">
            <summary>
            The current assembly version as text, currently same as <see cref="F:Stride.StrideVersion.PublicVersion"/>.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersionSimple">
            <summary>
            The NuGet package version without special tags.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersion">
            <summary>
            The NuGet package version.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.NuGetVersionSuffix">
            <summary>
            The NuGet package suffix (i.e. -beta01). Automatically set by Stride.GitVersioning.GenerateVersionFile.
            Three possible values:
            - Empty: official release
            - -betaXX: development version (XX should corespond to development asset versioning)
            - -betaXX-YYYY: beta release (YYYY is the git height since current version has been bumped)
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.BuildMetadata">
            <summary>
            The build metadata, usually +g[git_hash] during package. Automatically set by Stride.GitVersioning.GenerateVersionFile.
            </summary>
        </member>
        <member name="F:Stride.StrideVersion.AssemblyInformationalVersion">
            <summary>
            The informational assembly version, containing -beta01 or +g[git_hash] during package.
            </summary>
        </member>
        <member name="T:Stride.PublicKeys">
            <summary>
            Assembly signing information.
            </summary>
        </member>
        <member name="F:Stride.PublicKeys.Default">
            <summary>
            Assembly name suffix that contains signing information.
            </summary>
        </member>
    </members>
</doc>
