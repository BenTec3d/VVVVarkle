/**************************
***** Compiler Parameters *****
***************************
@P EffectName: Posterize_HSV_TextureFX
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerDraw [Size: 64]
@C    MatrixTransform_id73 => SpriteBase.MatrixTransform
cbuffer Globals [Size: 160]
@C    Texture0TexelSize_id15 => Texturing.Texture0TexelSize
@C    Texture1TexelSize_id17 => Texturing.Texture1TexelSize
@C    Texture2TexelSize_id19 => Texturing.Texture2TexelSize
@C    Texture3TexelSize_id21 => Texturing.Texture3TexelSize
@C    Texture4TexelSize_id23 => Texturing.Texture4TexelSize
@C    Texture5TexelSize_id25 => Texturing.Texture5TexelSize
@C    Texture6TexelSize_id27 => Texturing.Texture6TexelSize
@C    Texture7TexelSize_id29 => Texturing.Texture7TexelSize
@C    Texture8TexelSize_id31 => Texturing.Texture8TexelSize
@C    Texture9TexelSize_id33 => Texturing.Texture9TexelSize
@C    Levels_id76 => Posterize_RGB_TextureFX.Levels
@C    Alpha_id77 => Posterize_RGB_TextureFX.Alpha
@C    Dithering_id78 => Posterize_RGB_TextureFX.Dithering
@C    Smooth_id79 => Posterize_RGB_TextureFX.Smooth
@C    Phase_id80 => Posterize_RGB_TextureFX.Phase
***************************
******  Resources    ******
***************************
@R    PerDraw => PerDraw [Stage: Vertex, Slot: (0-0)]
@R    LinearSampler_id44 => Texturing.LinearSampler [Stage: Pixel, Slot: (0-0)]
@R    Texture0_id14 => Texturing.Texture0 [Stage: Pixel, Slot: (0-0)]
@R    Globals => Globals [Stage: Pixel, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    Posterize_HSV_TextureFX => 6b6ff30d8d9a18dddcf37de8db3240b4
@S    Posterize_RGB_TextureFX => f6828c1fc574c49740739935a67c93a3
@S    TextureFX => 733e12e1d7dcba0a71c11dec4224f6a1
@S    ImageEffectShader => 9b7cefba2dd674808bc791525995b495
@S    SpriteBase => 67b12f03dd9d34e76b6fcfb517afba8c
@S    ShaderBase => 01e372056ff6c06edab8e988414a8f75
@S    ShaderBaseStream => 91c0ea8aae0a45ca00578a4084fa3607
@S    Texturing => 6605f68230266eff2bc8b4e8102ede6b
@S    ShaderUtils => 322a94f64a804439ad8484ffa917bb03
***************************
*****     Stages      *****
***************************
@G    Vertex => 79eb7ff071584feaa45b858a38e87b6a
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerDraw
// {
//
//   float4x4 MatrixTransform_id73;     // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PerDraw                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
//
// Initial variable locations:
//   v0.x <- __input__.Position_id72.x; v0.y <- __input__.Position_id72.y; v0.z <- __input__.Position_id72.z; v0.w <- __input__.Position_id72.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o1.x <- <VSMain return value>.TexCoord_id62.x; o1.y <- <VSMain return value>.TexCoord_id62.y; 
//   o0.x <- <VSMain return value>.ShadingPosition_id0.x; o0.y <- <VSMain return value>.ShadingPosition_id0.y; o0.z <- <VSMain return value>.ShadingPosition_id0.z; o0.w <- <VSMain return value>.ShadingPosition_id0.w
//
#line 205 "C:\Users\benox\Documents\vvvv\gamma\Exports\VVVVarkle\lib\log\shader_Posterize_HSV_TextureFX_27fa0c3e782abc50a2e2aa53deb6fb0a.hlsl"
dp4 o0.x, v0.xyzw, cb0[0].xyzw
dp4 o0.y, v0.xyzw, cb0[1].xyzw
dp4 o0.z, v0.xyzw, cb0[2].xyzw
dp4 o0.w, v0.xyzw, cb0[3].xyzw

#line 209
mov o1.xy, v1.xyxx
ret 
// Approximately 6 instruction slots used
@G    Pixel => 969d115f1a54b381aa5506129cc3a865
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Globals
// {
//
//   float2 Texture0TexelSize_id15;     // Offset:    0 Size:     8 [unused]
//   float2 Texture1TexelSize_id17;     // Offset:    8 Size:     8 [unused]
//   float2 Texture2TexelSize_id19;     // Offset:   16 Size:     8 [unused]
//   float2 Texture3TexelSize_id21;     // Offset:   24 Size:     8 [unused]
//   float2 Texture4TexelSize_id23;     // Offset:   32 Size:     8 [unused]
//   float2 Texture5TexelSize_id25;     // Offset:   40 Size:     8 [unused]
//   float2 Texture6TexelSize_id27;     // Offset:   48 Size:     8 [unused]
//   float2 Texture7TexelSize_id29;     // Offset:   56 Size:     8 [unused]
//   float2 Texture8TexelSize_id31;     // Offset:   64 Size:     8 [unused]
//   float2 Texture9TexelSize_id33;     // Offset:   72 Size:     8 [unused]
//   float4 Levels_id76;                // Offset:   80 Size:    16
//      = 0x40800000 0x40800000 0x40800000 0x40800000 
//   bool Alpha_id77;                   // Offset:   96 Size:     4
//      = 0x00000000 
//   float4 Dithering_id78;             // Offset:  112 Size:    16
//      = 0x00000000 0x00000000 0x00000000 0x00000000 
//   float Smooth_id79;                 // Offset:  128 Size:     4
//      = 0x3dcccccd 
//   float4 Phase_id80;                 // Offset:  144 Size:    16
//      = 0x00000000 0x00000000 0x00000000 0x00000000 
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// LinearSampler_id44                sampler      NA          NA             s0      1 
// Texture0_id14                     texture  float4          2d             t0      1 
// Globals                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[10], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 6
//
// Initial variable locations:
//   v0.x <- __input__.ShadingPosition_id0.x; v0.y <- __input__.ShadingPosition_id0.y; v0.z <- __input__.ShadingPosition_id0.z; v0.w <- __input__.ShadingPosition_id0.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o0.x <- <PSMain return value>.ColorTarget_id2.x; o0.y <- <PSMain return value>.ColorTarget_id2.y; o0.z <- <PSMain return value>.ColorTarget_id2.z; o0.w <- <PSMain return value>.ColorTarget_id2.w
//
#line 147 "C:\Users\benox\Documents\vvvv\gamma\Exports\VVVVarkle\lib\log\shader_Posterize_HSV_TextureFX_27fa0c3e782abc50a2e2aa53deb6fb0a.hlsl"
add r0.xyzw, v1.xyxy, v1.xyxy
ge r0.xyzw, r0.xyzw, -r0.zwzw
movc r0.xyzw, r0.xyzw, l(2.000000,2.000000,0.500000,0.500000), l(-2.000000,-2.000000,-0.500000,-0.500000)
mul r0.zw, r0.zzzw, v1.xxxy
frc r0.zw, r0.zzzw
mul r0.xy, r0.zwzz, r0.xyxx
dp2 r0.x, r0.xyxx, l(0.750000, 0.250000, 0.000000, 0.000000)
add r0.y, -cb0[8].x, l(1.000000)
mul r1.xyzw, r0.yyyy, cb0[7].xyzw
mul r0.xyzw, r0.xxxx, r1.xyzw

#line 179
sample_l_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t0.xyzw, s0, l(0.000000)  // r1.x <- <InTex_id17 return value>.x; r1.y <- <InTex_id17 return value>.y; r1.z <- <InTex_id17 return value>.z; r1.w <- <InTex_id17 return value>.w

#line 155
min r2.x, r1.z, r1.y
min r2.x, r1.x, r2.x  // r2.x <- M

#line 154
max r2.y, r1.z, r1.y
max r3.z, r1.x, r2.y  // r3.z <- HSV.z

#line 156
add r2.x, -r2.x, r3.z  // r2.x <- C

#line 160
mov r4.w, l(0)
mov r4.xyz, r1.xyzx
add r5.xyzw, r3.zzzz, -r4.xyzw
div r5.xyzw, r5.xyzw, r2.xxxx  // r5.x <- Delta.x; r5.y <- Delta.y; r5.z <- Delta.z; r5.w <- Delta.w

#line 157
ne r1.x, r2.x, l(0.000000)

#line 161
add r2.xyz, -r5.yzxy, r5.zxyz  // r2.x <- Delta.z; r2.y <- Delta.x; r2.z <- Delta.y

#line 166
div r5.y, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w  // r5.y <- HSV.y

#line 162
add r2.xyz, r2.xyzx, l(6.000000, 2.000000, 4.000000, 0.000000)

#line 163
ge r4.xyz, r4.xyzx, r3.zzzz
and r4.xyz, r4.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
mul r2.xyz, r2.xyzx, r4.xyzx

#line 164
max r1.y, r2.x, r2.z
max r1.y, r1.y, r2.y  // r1.y <- HSV.x

#line 165
mul r1.y, r1.y, l(0.166667)
frc r5.x, r1.y  // r5.x <- HSV.x

#line 167
and r3.xy, r1.xxxx, r5.xyxx  // r3.x <- HSV.x; r3.y <- HSV.y

#line 147
max r2.xyzw, cb0[5].xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
mov r3.w, r1.w
mul r1.xyzw, r2.xyzw, r3.xyzw

#line 149
add r2.xyzw, r2.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)

#line 147
frc r4.xyzw, r1.xyzw
mad r0.xyzw, r0.xyzw, r4.xyzw, r1.xyzw  // r0.x <- c.x; r0.y <- c.y; r0.z <- c.z; r0.w <- c.w

#line 148
add r0.xyzw, r0.xyzw, cb0[9].xyzw

#line 149
frc r1.xyzw, r0.xyzw
round_ni r0.xyzw, r0.xyzw
add r0.xyzw, r0.xyzw, -cb0[9].xyzw
add r1.xyzw, r1.xyzw, l(-0.500000, -0.500000, -0.500000, -0.500000)
add r3.x, cb0[8].x, l(0.000010)
div r1.xyzw, r1.xyzw, r3.xxxx
add_sat r1.xyzw, r1.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
add r0.xyzw, r0.xyzw, r1.xyzw
div r0.xyzw, r0.xyzw, r2.xyzw  // r0.x <- <Posterizer_id20 return value>.x; r0.y <- <Posterizer_id20 return value>.y; r0.z <- <Posterizer_id20 return value>.z; r0.w <- <Posterizer_id20 return value>.w

#line 133
frc r0.x, r0.x  // r0.x <- H

#line 136
mad r1.xyz, r0.xxxx, l(6.000000, 6.000000, 6.000000, 0.000000), l(-3.000000, -2.000000, -4.000000, 0.000000)

#line 137
mad_sat r1.xyz, |r1.xyzx|, l(1.000000, -1.000000, -1.000000, 0.000000), l(-1.000000, 2.000000, 2.000000, 0.000000)  // r1.x <- <HUEtoRGB_id8 return value>.x; r1.y <- <HUEtoRGB_id8 return value>.y; r1.z <- <HUEtoRGB_id8 return value>.z

#line 142
add r1.xyz, r1.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r1.xyz, r1.xyzx, r0.yyyy, l(1.000000, 1.000000, 1.000000, 0.000000)
mul o0.xyz, r0.zzzz, r1.xyzx

#line 188
movc o0.w, cb0[6].x, r0.w, r3.w

#line 198
ret 
// Approximately 56 instruction slots used
***************************
*************************/
struct PS_STREAMS 
{
    float2 TexCoord_id62;
    float4 ColorTarget_id2;
};
struct PS_OUTPUT 
{
    float4 ColorTarget_id2 : SV_Target0;
};
struct PS_INPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_STREAMS 
{
    float4 Position_id72;
    float2 TexCoord_id62;
    float4 ShadingPosition_id0;
};
struct VS_OUTPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_INPUT 
{
    float4 Position_id72 : POSITION;
    float2 TexCoord_id62 : TEXCOORD0;
};
cbuffer PerDraw 
{
    float4x4 MatrixTransform_id73;
};
cbuffer Globals 
{
    float2 Texture0TexelSize_id15;
    float2 Texture1TexelSize_id17;
    float2 Texture2TexelSize_id19;
    float2 Texture3TexelSize_id21;
    float2 Texture4TexelSize_id23;
    float2 Texture5TexelSize_id25;
    float2 Texture6TexelSize_id27;
    float2 Texture7TexelSize_id29;
    float2 Texture8TexelSize_id31;
    float2 Texture9TexelSize_id33;
    float4 Levels_id76 = float4(4, 4, 4, 4);
    bool Alpha_id77 = false;
    float4 Dithering_id78 = float4(0, 0, 0, 0);
    float Smooth_id79 = 0.1f;
    float4 Phase_id80 = float4(0, 0, 0, 0);
};
Texture2D Texture0_id14;
Texture2D Texture1_id16;
Texture2D Texture2_id18;
Texture2D Texture3_id20;
Texture2D Texture4_id22;
Texture2D Texture5_id24;
Texture2D Texture6_id26;
Texture2D Texture7_id28;
Texture2D Texture8_id30;
Texture2D Texture9_id32;
TextureCube TextureCube0_id34;
TextureCube TextureCube1_id35;
TextureCube TextureCube2_id36;
TextureCube TextureCube3_id37;
Texture3D Texture3D0_id38;
Texture3D Texture3D1_id39;
Texture3D Texture3D2_id40;
Texture3D Texture3D3_id41;
SamplerState Sampler_id42;
SamplerState PointSampler_id43 
{
    Filter = MIN_MAG_MIP_POINT;
};
SamplerState LinearSampler_id44 
{
    Filter = MIN_MAG_MIP_LINEAR;
};
SamplerState LinearBorderSampler_id45 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Border;
    AddressV = Border;
};
SamplerComparisonState LinearClampCompareLessEqualSampler_id46 
{
    Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
    ComparisonFunc = LessEqual;
};
SamplerState AnisotropicSampler_id47 
{
    Filter = ANISOTROPIC;
};
SamplerState AnisotropicRepeatSampler_id48 
{
    Filter = ANISOTROPIC;
    AddressU = Wrap;
    AddressV = Wrap;
    MaxAnisotropy = 16;
};
SamplerState PointRepeatSampler_id49 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState LinearRepeatSampler_id50 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState RepeatSampler_id51 
{
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState Sampler0_id52;
SamplerState Sampler1_id53;
SamplerState Sampler2_id54;
SamplerState Sampler3_id55;
SamplerState Sampler4_id56;
SamplerState Sampler5_id57;
SamplerState Sampler6_id58;
SamplerState Sampler7_id59;
SamplerState Sampler8_id60;
SamplerState Sampler9_id61;
float3 HUEtoRGB_id8(in float H)
{
    H = frac(H);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    return saturate(float3(R, G, B));
}
float3 HSVtoRGB_id9(in float3 HSV)
{
    float3 RGB = HUEtoRGB_id8(HSV.x);
    return ((RGB - 1) * HSV.y + 1) * HSV.z;
}
float4 Posterizer_id20(float4 c, float2 vp)
{
    float4 ph = (Phase_id80);
    c = c * max(Levels_id76, 0) + Dithering_id78 * (1 - Smooth_id79) * dot(vp % 2, float2(.75, .25)) * frac(c * max(Levels_id76, 0));
    c += ph;
    return (floor(c) - ph + saturate((frac(c) - .5) / (.00001 + Smooth_id79) + .5)) / (max(Levels_id76, 0) + .000000001);
}
float3 RGBtoHSV_id11(in float3 RGB)
{
    float3 HSV = 0;
    HSV.z = max(RGB.r, max(RGB.g, RGB.b));
    float M = min(RGB.r, min(RGB.g, RGB.b));
    float C = HSV.z - M;
    if (C != 0)
    {
        float4 RGB0 = float4(RGB, 0);
        float4 Delta = (HSV.z - RGB0) / C;
        Delta.rgb -= Delta.brg;
        Delta.rgb += float3(2, 4, 6);
        Delta.brg = step(HSV.z, RGB) * Delta.brg;
        HSV.x = max(Delta.r, max(Delta.g, Delta.b));
        HSV.x = frac(HSV.x / 6);
        HSV.y = 1 / Delta.w;
    }
    return HSV;
}
float4 Posterizer_id22(float4 c, float2 vp)
{
    c.rgb = RGBtoHSV_id11(c.rgb);
    c = Posterizer_id20(c, vp);
    c.rgb = HSVtoRGB_id9(c.rgb);
    return c;
}
float4 InTex_id17(inout PS_STREAMS streams)
{
    return Texture0_id14.SampleLevel(LinearSampler_id44, streams.TexCoord_id62, 0);
}
float4 Shading_id21(inout PS_STREAMS streams)
{
    float4 c = InTex_id17(streams);
    float2 vp = streams.TexCoord_id62;
    float pa = c.a;
    c = Posterizer_id22(c, vp);
    if (!Alpha_id77)
        c.a = pa;
    return c;
}
PS_OUTPUT PSMain(PS_INPUT __input__)
{
    PS_STREAMS streams = (PS_STREAMS)0;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ColorTarget_id2 = Shading_id21(streams);
    PS_OUTPUT __output__ = (PS_OUTPUT)0;
    __output__.ColorTarget_id2 = streams.ColorTarget_id2;
    return __output__;
}
VS_OUTPUT VSMain(VS_INPUT __input__)
{
    VS_STREAMS streams = (VS_STREAMS)0;
    streams.Position_id72 = __input__.Position_id72;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ShadingPosition_id0 = mul(streams.Position_id72, MatrixTransform_id73);
    VS_OUTPUT __output__ = (VS_OUTPUT)0;
    __output__.ShadingPosition_id0 = streams.ShadingPosition_id0;
    __output__.TexCoord_id62 = streams.TexCoord_id62;
    return __output__;
}
